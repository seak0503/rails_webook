<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>Javascript - Rails Webook</title>
    <link>http://ruby-rails.hatenadiary.com/category/Javascript</link>
    <description>自社のECを開発している会社で働いています。Rails情報やサービスを成長させる方法を書いていきます</description>
    <lastBuildDate>Fri, 18 Dec 2015 02:44:31 +0900</lastBuildDate>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <generator>Hatena::Blog</generator>
    
      
      
        <item>
          <title>RailsでReact.jsをサーバーレンダリングする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20151124/1448300267</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122001321.png&quot; alt=&quot;f:id:nipe880324:20151122001321p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122001321p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-rails&quot;&gt;react-rails&lt;/a&gt;というReact.jsを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;に簡単に統合できるgemを使い、React.jsをサーバー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;する方法を説明します。&lt;br /&gt;
サーバー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;することで、初期値をHTMLの初期レンダー時に渡せるようになるので、ロード中による画面のばたつきや、ロード中といった表示をなくせます。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151122/1448118932&quot;&gt;Rails&amp;#x3067;React&amp;#x3092;&amp;#x4F7F;&amp;#x3063;&amp;#x3066;&amp;#x30E1;&amp;#x30C3;&amp;#x30BB;&amp;#x30FC;&amp;#x30B8;&amp;#x30DC;&amp;#x30C3;&amp;#x30AF;&amp;#x30B9;&amp;#x30A2;&amp;#x30D7;&amp;#x30EA;&amp;#x3092;&amp;#x4F5C;&amp;#x6210; - Rails Webook&lt;/a&gt;をベースに説明しています。&lt;/p&gt;&lt;p&gt;また、この記事の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;は&lt;br /&gt;
&lt;a href=&quot;https://github.com/nipe0324/rails_samples/tree/master/react_server_rendering_test&quot;&gt;https://github.com/nipe0324/rails_samples/tree/master/react_server_rendering_test&lt;/a&gt;&lt;br /&gt;
です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#react-server-rendering-react_component&quot;&gt;RailsでReactコンポーネントをレンダーする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-server-rendering-prerender&quot;&gt;Reactコンポーネントをサーバーレンダリングする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-server-rendering-controller-render&quot;&gt;コントローラーでReactコンポーネントをレンダーする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt; 2.2.0&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;react-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 1.4.2&lt;/li&gt;
&lt;li&gt;react 0.14.2&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;react-server-rendering-react_component&quot;&gt;1. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をレンダーする&lt;/h3&gt;&lt;code&gt;react-rails&lt;/code&gt;は、&lt;code&gt;react_component&lt;/code&gt;というビューヘルパーを用意しており、ビュー上でこの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使うことで、React&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;のレンダーを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0&quot;&gt;バインディング&lt;/a&gt;なしでできるようになります。&lt;/p&gt;&lt;p&gt;main.js.jsxでのReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;のレンダーしている&lt;code&gt;ReactDOM.render&lt;/code&gt;を削除します。&lt;code&gt;react_component&lt;/code&gt;ビューヘルパーのおかげでこれが必要なくなります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/main.js.jsx&lt;/span&gt;
- $(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
-   ReactDOM.render(
-     &amp;lt;MessageBox url=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/messages&amp;quot;&lt;/span&gt;/&amp;gt;,
-     &lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;synConstant&quot;&gt;&#39;content&#39;&lt;/span&gt;)
-   );
- &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;react_component&lt;/code&gt;を使うように修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Message Box&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

- &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; react_component(&#39;MessageBox&#39;,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;/messages&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;最後に、&lt;code&gt;application.js&lt;/code&gt;に&lt;code&gt;react_ujs&lt;/code&gt;があることを確認します。&lt;br /&gt;
&lt;code&gt;react_ujs&lt;/code&gt;がページをスキャンをし、&lt;code&gt;react_component&lt;/code&gt;の箇所に指定したReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をマウントしています。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/application.js&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;//= require jquery&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require jquery_ujs&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require react&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require react_ujs&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require_tree .&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
画面を確認するとちゃんとメッセージ一覧が表示されます。&lt;br /&gt;
[&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000620.png&quot; alt=&quot;f:id:nipe880324:20151122000620p:plain&quot; title=&quot;f:id:nipe880324:20151122000620p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;:420]&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;HTMLは次のようになっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-react-&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;MessageBox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-react-props=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/messages&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Turbolinksと一緒に使う場合や、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;名が階層構造になっているなどの場合などは公式ドキュメントを参照ください。&lt;br /&gt;
&lt;a href=&quot;https://github.com/reactjs/react-rails#rendering--mounting&quot;&gt;reactjs/react-rails &amp;middot; GitHub&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;react-server-rendering-prerender&quot;&gt;2. React&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をサーバー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;する&lt;/h3&gt;今度は、サーバーサイドでReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をレンダーするようにします。&lt;br /&gt;
&lt;code&gt;react_component&lt;/code&gt;ビューヘルパーに、&lt;code&gt;prerender: true&lt;/code&gt;を渡します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Message Box&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

* &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; react_component(&#39;MessageBox&#39;,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; { &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;/messages&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; }, { prerender: true }) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、規約により&lt;code&gt;components.js&lt;/code&gt;が必要です。その中で、「React&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;」や必要であればUnderscore.jsなどの「依存ライブラリ」を読み込むようにします。&lt;br /&gt;
今回は、React&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を配置している&lt;code&gt;components&lt;/code&gt;ディレクトリを読み込むようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/components.js&lt;/span&gt;

+ &lt;span class=&quot;synComment&quot;&gt;//= require_tree ./components&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;application.js&lt;/code&gt;でこの&lt;code&gt;components.js&lt;/code&gt;を読み込むように修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/application.js&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;//= require jquery&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;//= require jquery_ujs&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;//= require react&lt;/span&gt;
+ &lt;span class=&quot;synComment&quot;&gt;//= require components&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;//= require react_ujs&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;//= require_tree .&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
公式ドキュメントに&lt;a href=&quot;https://facebook.github.io/react/docs/component-specs.html#lifecycle-methods&quot;&gt;Component Specs and Lifecycle | React&lt;/a&gt;に書かれていますが、&lt;code&gt;componentDidMount&lt;/code&gt;はサーバーサイドで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;した時には呼ばれないので、&lt;code&gt;props&lt;/code&gt;でReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;に渡すようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Message Box&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

* &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; react_component(&#39;MessageBox&#39;,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; { &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;/messages&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, messages: @messages }, { prerender: true }) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;コントローラーで&lt;code&gt;@messages&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&quot;&gt;インスタンス&lt;/a&gt;変数に値を設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/top_controller.rb&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TopController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
+     &lt;span class=&quot;synIdentifier&quot;&gt;@messages&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Message&lt;/span&gt;.all
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;componentDidMount&lt;/code&gt;でメッセージをサーバーから取得してましたが、上記の通り、サーバーサイドでprops経由でMessageBoxに渡すようにしたので、初期値をpropsから取得するように修正します。&lt;br /&gt;
また、&lt;code&gt;componentDidMount&lt;/code&gt;も呼ばれないので削除します。&lt;br /&gt;
さらに、メッセージのロード中と言う状態がなくなるので合わせて削除します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/components/message_box.js.jsx&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
*   getInitialState: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(props) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
*     &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;　messages: &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.messages &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

-   componentDidMount: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
-     $.ajax(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
-       url:      &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url,
-       dataType: &lt;span class=&quot;synConstant&quot;&gt;&#39;json&#39;&lt;/span&gt;,
-       cache:    &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
-       success: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(messages) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
-         &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.setState(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; messages: messages, isLoading: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
-       &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;),
-       eror: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(_xhr, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
-         console.error(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err.toString());
-       &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;)
-     &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
-   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

    handleMessageSubmit: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      $.ajax(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        url:      &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url,
        dataType: &lt;span class=&quot;synConstant&quot;&gt;&#39;json&#39;&lt;/span&gt;,
        type:     &lt;span class=&quot;synConstant&quot;&gt;&#39;POST&#39;&lt;/span&gt;,
        data:     message,
        success: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; newMessages = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.concat(message);
          &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.setState(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; messages: newMessages &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
        &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;),
        error: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(_xhr, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
          console.error(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err.toString());
        &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;)
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

    render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; messageItems = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.map(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
          &amp;lt;MessageItem key=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message.id&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; message=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
        );
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

-     &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.isLoading) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
-       &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
-         &amp;lt;div&amp;gt;ロード中&amp;lt;/div&amp;gt;
-       );
-     &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
        &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;messageItems&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
          &amp;lt;MessageForm onMessageSubmit=&lt;span class=&quot;synIdentifier&quot;&gt;{this&lt;/span&gt;.handleMessageSubmit&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
        &amp;lt;/div&amp;gt;
      );
-     &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;画面を確認するとメッセージ一覧が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000620.png&quot; alt=&quot;f:id:nipe880324:20151122000620p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000620p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;注意点として、&lt;code&gt;react_component&lt;/code&gt;でレンダーするReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;群の&lt;code&gt;render&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で&lt;code&gt;document&lt;/code&gt;を参照できません。そのため、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/jQuery&quot;&gt;jQuery&lt;/a&gt;やライブラリなどいくつか動かない場合があります。サブミット時に$.&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ajax&quot;&gt;ajax&lt;/a&gt;などはつかえます。どこらへんまで使用可能かはよくわかってないですが、うまくいかないときはこれを疑ってください。&lt;/p&gt;&lt;p&gt;また、&lt;code&gt;therubyracer&lt;/code&gt;を使ったほうがパフォーマンスがいいなど、サーバー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;の設定は&lt;a href=&quot;https://github.com/reactjs/react-rails#server-rendering&quot;&gt;reactjs/react-rails &amp;middot; GitHub&lt;/a&gt;を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;react-server-rendering-controller-render&quot;&gt;3. コントローラーでReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をレンダーする&lt;/h3&gt;おまけで、使う頻度は少ないと思いますが、コントローラーから直接React&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をレンダーできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;//&lt;/span&gt; app/controllers/top_controller.rb
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TopController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@messages&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Message&lt;/span&gt;.all
    render &lt;span class=&quot;synConstant&quot;&gt;component&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MessageBox&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;props&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/messages&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;messages&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@messages&lt;/span&gt; }
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3&gt;まとめ&lt;/h3&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をレンダーする&lt;/h4&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;react_component&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;でReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をレンダーする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react_ujs&lt;/code&gt;が必要（react_ujsがマウントしてくれる）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;h4&gt;サーバーサイド&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;を行う&lt;/h4&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;react_component&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に&lt;code&gt;prerender: true&lt;/code&gt;をつける&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react_ujs&lt;/code&gt;が必要（react_ujsがマウントしてくれる）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;components.js&lt;/code&gt;が必要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document&lt;/code&gt;が使えない&lt;/li&gt;
&lt;li&gt;サーバーサイド&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;では幾つかライフサイクルの呼ばれない&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;がある。詳細:&lt;a href=&quot;https://facebook.github.io/react/docs/component-specs.html#lifecycle-methods&quot;&gt;Component Specs and Lifecycle | React&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/reactjs/react-rails#server-rendering&quot;&gt;reactjs/react-rails &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 24 Nov 2015 02:37:47 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653586347146273156</guid>
          
            <category>Javascript</category>
          
            <category>React.js</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでReactを使ってメッセージボックスアプリを作成</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20151122/1448118932</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122001321.png&quot; alt=&quot;f:id:nipe880324:20151122001321p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122001321p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-rails&quot;&gt;react-rails&lt;/a&gt;というReact.jsを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;に簡単に統合できるgemを使い、React.jsについて説明します。&lt;/p&gt;&lt;p&gt;次のような画面をReact.jsで実装し、Reactとサーバ(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;)間でメッセージ一覧の取得や作成をできるようにします。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;はこちらです。 &lt;a href=&quot;https://github.com/nipe0324/rails_samples/tree/master/react_test&quot;&gt;https://github.com/nipe0324/rails_samples/tree/master/react_test&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000620.png&quot; alt=&quot;f:id:nipe880324:20151122000620p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000620p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#react-install-gem&quot;&gt;react-railsのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-render&quot;&gt;Reactのコンポーネントの表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-design&quot;&gt;メッセージボックスの概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-message-item&quot;&gt;メッセージボックスのリストを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-message-form&quot;&gt;メッセージフォームを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-integration-with-rails&quot;&gt;サーバーサイド(Rails)との連携&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt; 2.2.0&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;react-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 1.4.2&lt;/li&gt;
&lt;li&gt;react 0.14.2&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3&gt;0. React.jsとは&lt;/h3&gt;React.jsは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MVC&quot;&gt;MVC&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;でいう、ビューのみを扱っています。&lt;/p&gt;&lt;p&gt;Backbone.jsやAngularJS、React.jsなど触ってきた私の個人的な感想として、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React.jsは、状態をルートの一箇所(※1)で管理し、その状態を更新すれば、自動的に全ての&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をレンダーしてくれます。&lt;/li&gt;
&lt;li&gt;状態を一箇所で管理できるので、レンダーの細かな制御が必要なくなるので可読性や保守性は高いと思います。また、React.jsが差分だけレンダーするのでパフォーマンスも悪くはなりにくいです。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;※1: 基本的には状態をルートの１箇所で管理するとよいと思いますが、ルートの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;がFatになってしまうので大規模化するとつらくなりそうです。Fluxで解決できるかもですが、Flux実装が乱立しているのでどうしようか迷っています。Flux実装で最近よく聞くReduxを軽く触ってみようかと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backbone.jsの場合、モデルやコレクションの更新やクリックイベントなどをトリガーとして、細かく分けたビューを更新します。ビューが大きくなり大規模化していくと、異なるビュー同士でイベントが絡み合うので、状態が増えて、つらくなってくる気がします。&lt;/li&gt;
&lt;li&gt;AngularJSの場合、個人的に嫌いじゃないですが、&lt;code&gt;ng-xxx&lt;/code&gt;というディレクティブがたくさん必要になり覚えることがたくさんあるのでつらいかなと思います。また、Angularに処理がラッピングされているので、バグを踏んだ時に対応するのがなかなか難しい気がします。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;react-install-gem&quot;&gt;1. react-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt;のインストール&lt;/h3&gt;&lt;code&gt;react-rails&lt;/code&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でReact.jsとJSXを簡易に使えるようにするgemです。&lt;/p&gt;&lt;p&gt;プロジェクトを作成します&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new react_test
cd ./react_test&lt;/pre&gt;&lt;p&gt;&lt;code&gt;react-rails&lt;/code&gt;をGemfileに追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
+ gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;react-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;~&amp;gt; 1.4.0&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;&lt;code&gt;applicaiton.js&lt;/code&gt;に&lt;code&gt;react&lt;/code&gt;を追加し、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;がReact.jsを読み込むようにします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;// app/assets/javascripts/application.js

 //= require jquery_ujs
-  //= require turbolinks
+  //= require react
+  //= require react_ujs
 //= require_tree .&lt;/pre&gt;&lt;p&gt;React.jsの環境値を設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/environments/development.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
...
+ &lt;span class=&quot;synComment&quot;&gt;# Reactの環境値を development にする&lt;/span&gt;
+ config.react.variant = &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# config/environments/production.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
...
+ &lt;span class=&quot;synComment&quot;&gt;# Reactの環境値を production にする&lt;/span&gt;
+ config.react.variant = &lt;span class=&quot;synConstant&quot;&gt;:production&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;補足&lt;br /&gt;
今回は入れないですが、ReactにはAddonと言うものが付いていて、Addonも使いたい場合は、下記の設定をします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/environments/(development|test|production).rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
...
  &lt;span class=&quot;synComment&quot;&gt;# React.jsのAddonを有効にする(デフォルトはfalse)&lt;/span&gt;
  config.react.addons = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;TopController#indxを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g controller top index&lt;/pre&gt;&lt;p&gt;ルートのパス(/)にtop#indexを設定しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
+ root &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;top#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt;にアクセスし、トップ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Javascript&quot;&gt;Javascript&lt;/a&gt;コンソールにエラーがでないことを確認します。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;react-render&quot;&gt;2. Reactの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の表示&lt;/h3&gt;まずはReactで&lt;code&gt;Hello react with rails&lt;/code&gt;を表示しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/main.js.jsx&lt;/span&gt;

+ $(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+    ReactDOM.render(
+      &amp;lt;h1&amp;gt;Hello react &lt;span class=&quot;synStatement&quot;&gt;with&lt;/span&gt; rails&amp;lt;/h1&amp;gt;,
+      &lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;synConstant&quot;&gt;&#39;content&#39;&lt;/span&gt;)
+    );
+ &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;ReactDOM.render(&lt;Reactコンポーネント&gt;, &lt;element&gt;)でReactの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;群をレンダー開始します。&lt;br /&gt;
※少し前まではReact.renderでした。&lt;br /&gt;
&lt;code&gt;&lt;h1&gt;Hello react with rails&lt;/h1&gt;&lt;/code&gt;がReactの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;として認識されて表示されます。&lt;br /&gt;
他にも、divやspanなど基本的なHTML要素は利用できます。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Message Box&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
+ 
+ &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
画面を再表示すると次のように「Hello react with &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt;」とReactにより表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151121/20151121235843.png&quot; alt=&quot;f:id:nipe880324:20151121235843p:plain:w420&quot; title=&quot;f:id:nipe880324:20151121235843p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;react-design&quot;&gt;3. メッセージボックスの概要&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;ReactはVirtual DOMツリーを使って差分のみのHTMLを更新します。&lt;br /&gt;
ルートノードがstate(変更可能)を持っていて、必要な子ノードにstate(変更不可)を渡します。&lt;br /&gt;
子は親から渡された値をprops(変更不可)として受け取り、それを使ってHTMLをレンダーします。&lt;br /&gt;
各子ノードはイベントが発生したら親までイベントを伝え、親のstate(変更可能)をsetState&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で更新します。&lt;br /&gt;
すると、親ノードから全てのノードが再度更新されます。この時、Virtual DOMツリーがあるためHTMLを差分だけ更新します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;次のようなツリー構造を作っていきます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;MessageBox
L MessageList
|  L MessageItem
L MessageForm&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;react-message-item&quot;&gt;4. メッセージボックスのリストを作成&lt;/h3&gt;では、ここからメッセージボックスを作成していきます。&lt;br /&gt;
まずは、Reactの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を配置するディレクトリを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;mkdir app/assets/javascripts/components&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;MessageBox&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の作成&lt;/h4&gt;MessageBox&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/components/message_box.js.jsx&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
+       &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
+         This is message box.
+       &amp;lt;/div&amp;gt;
+     );
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;React.createClass()&lt;/code&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を作成します。&lt;br /&gt;
また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;が表示するHTMLを&lt;code&gt;render&lt;/code&gt;の関数で返します。&lt;br /&gt;
classが予約されているので、HTMLのclass属性の指定は&lt;code&gt;className&lt;/code&gt;を使います。&lt;/p&gt;&lt;p&gt;main.js.jsxからMessageBox&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を呼び出すように修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/main.js.jsx&lt;/span&gt;
 $(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
   ReactDOM.render(
*    &amp;lt;MessageBox /&amp;gt;,
     &lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;synConstant&quot;&gt;&#39;content&#39;&lt;/span&gt;)
   );
 &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;画面を確認すると次のようになります&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000052.png&quot; alt=&quot;f:id:nipe880324:20151122000052p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000052p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;code&gt;ReactDOM.render&lt;/code&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;しているHTMLは次のようになっています。&lt;br /&gt;
MessageBox&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の&lt;code&gt;render&lt;/code&gt;のHTMLが表示されていることがわかると思います。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    This is message box.
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;※&lt;code&gt;data-reactid&lt;/code&gt;は、Reactが各DOMを管理するために自動的に付与しているデータです。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;Reactの&lt;code&gt;render&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の実装時にはまりやすいポイント&lt;/h4&gt;&lt;code&gt;render&lt;/code&gt;で返すトップのHTML要素は１つでないといけません。&lt;br /&gt;
次のように、div要素を2つ返そうとするとエラーになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// 2つのdiv要素を返しているのでエラーになる&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
      &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
        This is message box.
      &amp;lt;/div&amp;gt;
      &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
        This is message box.
      &amp;lt;/div&amp;gt;
    );
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、inputやimageなどの要素でも&lt;b&gt;必ず閉じタグが必要&lt;/b&gt;です。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
      &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
        &amp;lt;image src=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/path/to/file&amp;quot;/&amp;gt; {/* 正しい */&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
        &amp;lt;image src=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/path/to/file&amp;quot;&lt;/span&gt;&amp;gt;  &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;/* エラー */&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
      &amp;lt;/div&amp;gt;
    );
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;MessageItem&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の作成&lt;/h4&gt;各メッセージを表示するMessageItem&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を作成します。&lt;br /&gt;
MessageBox&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/components/message_item.js.jsx&lt;/span&gt;
+&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageItem = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+  render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
+      &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&amp;gt;
+        &amp;lt;h2 className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageUser&amp;quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;synIdentifier&quot;&gt;{this&lt;/span&gt;.props.message.user&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;&amp;lt;/h2&amp;gt;
+        &amp;lt;span&amp;gt;&lt;span class=&quot;synIdentifier&quot;&gt;{this&lt;/span&gt;.props.message.text&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;&amp;lt;/span&amp;gt;
+      &amp;lt;/div&amp;gt;
+    );
+  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;this.props&lt;/code&gt;には、親&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;から渡された値が入ります。&lt;br /&gt;
また、&lt;code&gt;{変数名}&lt;/code&gt;で変数の値を表示することができます。&lt;/p&gt;&lt;p&gt;ここでは、親から&lt;code&gt;message = { user: &#39;username&#39;, text: &#39;text&#39; }&lt;/code&gt;といったような値が渡されて、&lt;code&gt;{}&lt;/code&gt;を使ってそれぞれユーザ名とメッセージのテキストを表示しています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;message_box.js.jsxでMessageItem&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を作成し、returnで返すようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// message_box.js.jsx&lt;/span&gt;
 &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
   render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; messageItems = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.map(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
+        &amp;lt;MessageItem key=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message.id&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; message=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
+      );
+    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

     &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
       &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
+        &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;messageItems&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
       &amp;lt;/div&amp;gt;
     );
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;this.state&lt;/code&gt;は変更可能な値で名前からわかる通りアプリの状態を保持します。&lt;br /&gt;
基本的にはルートのノード(MessageBox)だけで&lt;code&gt;state&lt;/code&gt;を管理すると、いろいろな&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;に状態が散らばらないので分かり易い、保守し易いJSコードになります。&lt;br /&gt;
そして、&lt;code&gt;this.setState&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を通して&lt;code&gt;state&lt;/code&gt;を更新することでルート以下の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の&lt;code&gt;render&lt;/code&gt;が呼ばれ、&lt;code&gt;state&lt;/code&gt;の状態を表せます。この時、Reactが差分だけ更新するのでパフォーマンスをあまり気にしなくてもrenderが行えるようになっています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;最終的にはサーバーからデータを取得しますがまずは仮で、初期データを用意します。&lt;br /&gt;
&lt;code&gt;getInitialState&lt;/code&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;が作成された時に１度だけ呼ばれ、&lt;code&gt;state&lt;/code&gt;の初期値を返すように実装します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// message_box.js.jsx&lt;/span&gt;
 &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+  getInitialState: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+      messages: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
+        &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; id: 1, user: &lt;span class=&quot;synConstant&quot;&gt;&#39;Tom&#39;&lt;/span&gt;,   text: &lt;span class=&quot;synConstant&quot;&gt;&#39;Good morning&#39;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
+        &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; id: 2, user: &lt;span class=&quot;synConstant&quot;&gt;&#39;John&#39;&lt;/span&gt;,  text: &lt;span class=&quot;synConstant&quot;&gt;&#39;Good afternoon&#39;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
+        &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; id: 3, user: &lt;span class=&quot;synConstant&quot;&gt;&#39;Emily&#39;&lt;/span&gt;, text: &lt;span class=&quot;synConstant&quot;&gt;&#39;Good evening&#39;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+      &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
+    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;
+  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

   render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
     ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面をリロードします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000154.png&quot; alt=&quot;f:id:nipe880324:20151122000154p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000154p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;ちなみにHTMLは次のようになっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageUser&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Tom&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$1.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Good morning&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$2&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageUser&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$2.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;John&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$2.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Good afternoon&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageUser&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$3.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Emily&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$3.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Good evening&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;react-message-form&quot;&gt;5. メッセージフォームを作成&lt;/h3&gt;メッセージを入力するフォームのMessageForm&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を作成し、メッセージを投稿できるようにします。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;MessageForm&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の作成&lt;/h4&gt;まずはイベントなどないシンプルなMessageForm&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/components/message_form.js.jsx&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageForm = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
+       &amp;lt;form className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;commentForm&amp;quot;&lt;/span&gt;&amp;gt;
+         &amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; placeholder=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Yousr name&amp;quot;&lt;/span&gt; /&amp;gt;
+         &amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; placeholder=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Message&amp;quot;&lt;/span&gt; /&amp;gt;
+         &amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Post&amp;quot;&lt;/span&gt; /&amp;gt;
+       &amp;lt;/form&amp;gt;
+     );
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;MessageBoxからMessageFormをレンダーするように修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// message_box.js.jsx&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  getInitialState: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

  render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; messageItems = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.map(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
        &amp;lt;MessageItem key=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message.id&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; message=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
      );
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
      &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;messageItems&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+       &amp;lt;MessageForm /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;画面を確認するとFormが表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000252.png&quot; alt=&quot;f:id:nipe880324:20151122000252p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000252p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;Submitイベントのハンドリング&lt;/h4&gt;Postボタンを押した時に、動的にMessageItemを追加するように修正します。&lt;/p&gt;&lt;p&gt;まずは、MessageFormにイベントのハンドリングを行う&lt;code&gt;handleSubmit&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageForm = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   handleSubmit: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.preventDefault();
+     &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; user = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.refs.user.value.trim();
+     &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; text = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.refs.text.value.trim();
+     &lt;span class=&quot;synComment&quot;&gt;// どちらか入力されてなければ何もしない&lt;/span&gt;
+     &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!user || !text) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+       &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt;;
+     &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+     &lt;span class=&quot;synComment&quot;&gt;// 親コンポーネントのMessageBoxのイベントを呼ぶ&lt;/span&gt;
+     &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.onMessageSubmit(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; user: user, text: text &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
+     &lt;span class=&quot;synComment&quot;&gt;// フォームの内容を削除&lt;/span&gt;
+     &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.refs.user.value = &lt;span class=&quot;synConstant&quot;&gt;&#39;&#39;&lt;/span&gt;;
+     &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.refs.text.value = &lt;span class=&quot;synConstant&quot;&gt;&#39;&#39;&lt;/span&gt;;
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

    render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
*       &amp;lt;form className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;commentForm&amp;quot;&lt;/span&gt; onSubmit=&lt;span class=&quot;synIdentifier&quot;&gt;{this&lt;/span&gt;.handleSubmit&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;&amp;gt;
*         &amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; placeholder=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Yousr name&amp;quot;&lt;/span&gt; ref=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt; /&amp;gt;
*         &amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; placeholder=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Message&amp;quot;&lt;/span&gt; ref=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;/&amp;gt;
          &amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Post&amp;quot;&lt;/span&gt; /&amp;gt;
        &amp;lt;/form&amp;gt;
      );
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;まず&lt;code&gt;onSubmit={this.handleSubmit}&lt;/code&gt;でSubmitイベントが発生したら、handleSubmitが呼ばれるように定義しています。&lt;/p&gt;&lt;p&gt;Postボタンを押すとリストに入力内容が追加されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000403.png&quot; alt=&quot;f:id:nipe880324:20151122000403p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000403p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;keyについて&lt;/h4&gt;Postボタンでもう一つメッセージを追加すると&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Javascript&quot;&gt;Javascript&lt;/a&gt;コンソールに次のようなメッセージが表示されます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;react.self-bf407d87....js?body=1:2166
Warning: Each child in an array or iterator should have a unique &amp;#34;key&amp;#34; prop. Check the render method of `MessageBox`. See https://fb.me/react-warning-keys for more information.&lt;/pre&gt;&lt;p&gt;和訳すると、&lt;br /&gt;
&gt; 配列や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%C6%A5%EC%A1%BC%A5%BF&quot;&gt;イテレータ&lt;/a&gt;のそれぞれの子要素はユニークな&quot;key&quot;属性をつけてください。&lt;br /&gt;
&gt; &quot;MessageBox&quot;のrender&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;のところが怪しいです。&lt;br /&gt;
&gt; より詳細を知りたい場合は、&lt;a href=&quot;https://fb.me/react-warning-keys&quot;&gt;https://fb.me/react-warning-keys&lt;/a&gt; を読んでください。&lt;br /&gt;
です。&lt;/p&gt;&lt;p&gt;なぜ、Reactで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;の同じ子要素(liやReactの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;など)を表示するときにkey属性を指定しないといけないかは、&lt;br /&gt;
Reactのstateが変わったときにどの要素を更新すればいいか識別するために使われています。key属性がなくてもうまく更新ができますが、Reactがいい感じにしないといけず計算量が多くなってしまいパフォーマンスが悪くなってしまう基本的にはkey属性をつけます。&lt;/p&gt;&lt;p&gt;今回は、MessageItemがリスト要素になっているので、key属性に値を設定します。&lt;br /&gt;
すでに設定していますが、新たにフォームから追加したメッセージはidがないので、&lt;code&gt;handleMessageSubmit&lt;/code&gt;ないでユニークなidを生成するようにします。&lt;br /&gt;
※後ほどサーバーから取得したメッセージを取得するようにしますが、今はidを生成する仕組みがないので暫定で日付を設定するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// message_box.js.jsx&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    getInitialState: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      ...
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

    handleMessageSubmit: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     message.id = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Date&lt;/span&gt;();
      &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; newMessages = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.concat(message);
      &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.setState(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; messages: newMessages &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

    render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; messageItems = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.map(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
          &amp;lt;MessageItem key=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message.id&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; message=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
        );
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
        &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;messageItems&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
          &amp;lt;MessageForm onMessageSubmit=&lt;span class=&quot;synIdentifier&quot;&gt;{this&lt;/span&gt;.handleMessageSubmit&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
        &amp;lt;/div&amp;gt;
      );
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;これでワーニングが出なくなりました。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;react-integration-with-rails&quot;&gt;6. サーバーサイド(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;)との連携&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を作成&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のエンドポイントとして下記2つを用意します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;GET  /messages.json - メッセージの一覧を取得する
POST /messages.json - メッセージを作成する&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
まず、コントローラ、モデルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g resource Message user:string text:string&lt;/pre&gt;&lt;p&gt;※&lt;code&gt;railg g resource&lt;/code&gt;は、モデル、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイル、コントローラ、アセット、ヘルパーを作成（ビューを作成しない）&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;ルートをエンドポイントの2つだけにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;

  &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.routes.draw &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
*   resources &lt;span class=&quot;synConstant&quot;&gt;:messages&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;only&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;], &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
    root &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;top#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
MessageControllerで&lt;code&gt;index&lt;/code&gt;と&lt;code&gt;create&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を実装します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;# app/controllers/messages_controller.rb&lt;/span&gt;
+ &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;MessagesController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
+   &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
+     messages = &lt;span class=&quot;synType&quot;&gt;Message&lt;/span&gt;.all
+     render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: messages
+   &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
+
+   &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
+     message = &lt;span class=&quot;synType&quot;&gt;Message&lt;/span&gt;.new(create_params)
+     &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; message.save
+       render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: message, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:created&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 201&lt;/span&gt;
+     &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
+       render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: message, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:unprocessable_entity&lt;/span&gt;
+     &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
+   &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
+
+   &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
+
+     &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create_params&lt;/span&gt;
+       params.permit(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:text&lt;/span&gt;)
+     &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
+ &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
初期データを作成し、投入しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/seeds.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Message&lt;/span&gt;.delete_all
&lt;span class=&quot;synType&quot;&gt;Message&lt;/span&gt;.create!([
  { &lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Tom&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Good morning&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; },
  { &lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;John&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,  &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Good afternoon&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; },
  { &lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Emily&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Good evening&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
])


&lt;span class=&quot;synComment&quot;&gt;# terminal&lt;/span&gt;
bundle exec rake db&lt;span class=&quot;synConstant&quot;&gt;:migrate&lt;/span&gt; db&lt;span class=&quot;synConstant&quot;&gt;:seed&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
サーバー再起動して、&lt;a href=&quot;http://localhost:3000/messages.json&quot;&gt;http://localhost:3000/messages.json&lt;/a&gt;にアクセスすると次のように値が返ってくると思います。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:1,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Good morning&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2015-11-19T04:02:27.956Z&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2015-11-19T04:02:27.956Z&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:2,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;John&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Good afternoon&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2015-11-19T04:02:27.958Z&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2015-11-19T04:02:27.958Z&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:3,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Emily&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Good evening&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2015-11-19T04:02:27.962Z&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2015-11-19T04:02:27.962Z&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Reactでサーバからメッセージ一覧を取得&lt;/h4&gt;メッセージの一覧を取得するエンドポイントは、&lt;code&gt;GET /messages.json&lt;/code&gt;なので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ajax&quot;&gt;Ajax&lt;/a&gt;でサーバからメッセージを取得して、それをReactで表示するようにしてみます。&lt;/p&gt;&lt;p&gt;まずは、MessageBoxに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;へのエンドポイントとなるurl属性を渡します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/main.js.jsx&lt;/span&gt;
  $(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    ReactDOM.render(
*     &amp;lt;MessageBox url=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/messages&amp;quot;&lt;/span&gt;/&amp;gt;,
      &lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;synConstant&quot;&gt;&#39;content&#39;&lt;/span&gt;)
    );
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;次に&lt;code&gt;getInitialState&lt;/code&gt;の仮で用意していた初期値を空の配列にします。&lt;br /&gt;
また、&lt;code&gt;componentDidMount&lt;/code&gt;を定義し、その中でサーバーからメッセージ一覧を取得し、&lt;code&gt;setState({ messages: messages })&lt;/code&gt;でstateにメッセージを設定します。&lt;/p&gt;&lt;p&gt;&lt;code&gt;componentDidMount&lt;/code&gt;は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;が表示された時にReactによって自動的に呼ばれる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;です。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/components/message_box.js.jsx&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    getInitialState: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
*     &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; messages: &lt;span class=&quot;synIdentifier&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

+   componentDidMount: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     $.ajax(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+       url:      &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url,
+       dataType: &lt;span class=&quot;synConstant&quot;&gt;&#39;json&#39;&lt;/span&gt;,
+       cache:    &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
+       success: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(messages) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+         &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.setState(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; messages: messages &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
+       &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;),
+       eror: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(_xhr, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+         console.error(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err.toString());
+       &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;)
+     &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;画面を確認するとメッセージ一覧が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000516.png&quot; alt=&quot;f:id:nipe880324:20151122000516p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000516p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;この時若干画面がバタつくのは、次のようになっているからです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;getInitialState&lt;/code&gt;でmessagesに空の配列がセットされる。&lt;/li&gt;
&lt;li&gt;Reactが&lt;code&gt;MessageBox&lt;/code&gt;を表示する。この時、メッセージがないので一覧は表示されない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MessageBox&lt;/code&gt;が表示されたので、&lt;code&gt;componentDidMount&lt;/code&gt;が呼ばれ、サーバからメッセージを取得し、messagesにメッセージをセットする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setState&lt;/code&gt;でmessagesが更新されたので、Reactは差分をレンダーする。この時、メッセージがあるので一覧は表示される。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;このように、一度なにも表示しないで、その後、サーバーからメッセージを取得して、一覧を表示するので若干バタつくようになっています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;ロード中と表示&lt;/h4&gt;ロード中に「ロード中」と表示するようにします。うまくスタイリングすれば、「getInitialState〜サーバーからのデータ取得」をまでの間のバタつくような表示を解消できます。&lt;br /&gt;
具体的には、次のようにロード中と一瞬だけ出てから一覧が表示されるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000634.png&quot; alt=&quot;f:id:nipe880324:20151122000634p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000634p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;MessageBoxを修正し、&lt;code&gt;isLoading&lt;/code&gt;というステータスをもたせて、ロードが完了した時点でロードが完了したと設定しています。&lt;br /&gt;
また、その&lt;code&gt;isLoading&lt;/code&gt;の値を見て、レンダーする表示を変えています。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/components/message_box.js.jsx&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  getInitialState: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// isLoading = true : ロード中を表示&lt;/span&gt;
*   &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;　messages:  &lt;span class=&quot;synIdentifier&quot;&gt;[]&lt;/span&gt;,　isLoading: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;　&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

  componentDidMount: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    $.ajax(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      url:      &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url,
      dataType: &lt;span class=&quot;synConstant&quot;&gt;&#39;json&#39;&lt;/span&gt;,
      cache:    &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
      success: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(messages) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;synComment&quot;&gt;// isLoading = false : ロード中を表示しない&lt;/span&gt;
*        &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.setState(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; messages: messages, isLoading: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;),
      eror: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(_xhr, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        console.error(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err.toString());
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;)
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

  handleMessageSubmit: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

  render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; messageItems = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.map(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
        &amp;lt;MessageItem key=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message.id&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; message=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
      );
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

    &lt;span class=&quot;synComment&quot;&gt;// isLoadingの値により表示するRenderする内容を変えている&lt;/span&gt;
+   &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.isLoading) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
+       &amp;lt;div&amp;gt;ロード中&amp;lt;/div&amp;gt;
+     );
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
*     &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
*       &amp;lt;div&amp;gt;
*         &amp;lt;h1&amp;gt;Message Box&amp;lt;/h1&amp;gt;
*         &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
*           &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;messageItems&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
*           &amp;lt;MessageForm onMessageSubmit=&lt;span class=&quot;synIdentifier&quot;&gt;{this&lt;/span&gt;.handleMessageSubmit&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
*         &amp;lt;/div&amp;gt;
*       &amp;lt;/div&amp;gt;
*     );
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;このローディング中という表示が嫌な場合は、、サーバー側で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;するデータも含めて返すようにする「サーバー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;」という方法があります。そちらについては、次の記事で書きます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;ReactでサーバへメッセージをPOSTする&lt;/h4&gt;メッセージを作成するエンドポイントは、&lt;code&gt;POST /messages.json&lt;/code&gt;なので、フォームのPostボタンが押された時に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ajax&quot;&gt;Ajax&lt;/a&gt;でサーバーにメッセージ情報をPOSTするようにします。&lt;/p&gt;&lt;p&gt;MessageBoxの&lt;code&gt;handleSubmit&lt;/code&gt;でサーバー側にフォームに入力されたメッセージ情報をPOSTするようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/components/message_box.js.jsx&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    ...

+   handleMessageSubmit: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     $.ajax(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+       url:      &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url,
+       dataType: &lt;span class=&quot;synConstant&quot;&gt;&#39;json&#39;&lt;/span&gt;,
+       type:     &lt;span class=&quot;synConstant&quot;&gt;&#39;POST&#39;&lt;/span&gt;,
+       data:     message,
+       success: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
*         &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; newMessages = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.concat(message);
          &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.setState(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; messages: newMessages &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
+       &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;),
+       error: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(_xhr, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+         console.error(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err.toString());
+       &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;)
+     &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;確認&lt;/h4&gt;投稿できるようになります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000620.png&quot; alt=&quot;f:id:nipe880324:20151122000620p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000620p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;&lt;p&gt;サーバーサイドでReact.jsを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;する「サーバー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;」について記載しましたので、ロード中による画面のばたつきや、ロード中といった表示をなくしたい場合は参考にしてください。&lt;br /&gt;
&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151124/1448300267&quot;&gt;Rails&amp;#x3067;React.js&amp;#x3092;&amp;#x30B5;&amp;#x30FC;&amp;#x30D0;&amp;#x30FC;&amp;#x30EC;&amp;#x30F3;&amp;#x30C0;&amp;#x30EA;&amp;#x30F3;&amp;#x30B0;&amp;#x3059;&amp;#x308B; - Rails Webook&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/tutorial.html&quot;&gt;Tutorial | React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sun, 22 Nov 2015 00:15:32 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653586347146034337</guid>
          
            <category>Javascript</category>
          
            <category>React.js</category>
          
        </item>
      
    
      
      
        <item>
          <title>フォーム画面でページから離れるときにJavascript(JS)の警告を出す</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150607/1433652441</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150607/20150607133236.jpg&quot; alt=&quot;f:id:nipe880324:20150607133236j:plain&quot; title=&quot;f:id:nipe880324:20150607133236j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;上記のように、フォーム画面でページから離れるときにJavascript(JS)の警告を出す方法を説明します。&lt;/p&gt;&lt;p&gt;実際の動作は次のリンクから確認できます。&lt;br /&gt;
&lt;a href=&quot;https://jsfiddle.net/nipe0324/h0gutn6k/11/embedded/result/&quot; target=&quot;_blank&quot;&gt;ページを離れる時に警告を出す - jsfiddle&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;jQuery 2.1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;JSの内容&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;beforeunload&lt;/code&gt;イベントを使うことでこの動作を再現します。&lt;br /&gt;
&lt;code&gt;beforeunload&lt;/code&gt;は、ウインドウ(window)、ドキュメント(document)がアンロードされる前に発火するイベントです。&lt;br /&gt;
（あまりテストを行っていないのでバグがあるかもしれません。）&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&amp;lt;script type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&amp;gt;


$(&lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;).ready(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;synComment&quot;&gt;// 値が変更されたとき(input要素、select要素が変更された場合)に&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// ブラウザの戻るや更新ボタン、タブを閉じるときに&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 警告をだすようにする&lt;/span&gt;
  $(&lt;span class=&quot;synConstant&quot;&gt;&#39;input, textarea, select&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;keyup change&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    $(&lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;beforeunload&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;このページを離れると、入力したデータが削除されます。本当に移動しますか。&amp;quot;&lt;/span&gt;;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

  &lt;span class=&quot;synComment&quot;&gt;// 戻るリンクや送信ボタンなどの通常の方法で画面遷移した場合は、&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 通常通りアラートは表示されずに遷移する&lt;/span&gt;
  $(&lt;span class=&quot;synConstant&quot;&gt;&#39;a, input[type=submit]&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(e) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    $(&lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;).off(&lt;span class=&quot;synConstant&quot;&gt;&#39;beforeunload&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;HTML&lt;/h3&gt;
    &lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;フォーム画面&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;入力値が変更された時にブラウザの戻るや更新ボタン、タブを閉じるなどしたときにJavascriptのアラートを出す。&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;送信ボタンや戻るボタンの遷移時にはアラートを出さない。&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;値を変更して、リロード(F5)、ブラウザの戻るボタンなどを押してみてください&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt;|html|
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Value1&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Value2&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Value3&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; チェックボックス
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;commit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;送信&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synUnderlined&quot;&gt;戻る&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.koikikukan.com/archives/2013/03/11-005555.php&quot;&gt;&amp;#x30DA;&amp;#x30FC;&amp;#x30B8;&amp;#x3092;&amp;#x79FB;&amp;#x52D5;&amp;#xFF08;&amp;#x96E2;&amp;#x8131;&amp;#xFF09;&amp;#x3059;&amp;#x308B;&amp;#x3068;&amp;#x304D;&amp;#x306B;jQuery&amp;#x3067;&amp;#x8B66;&amp;#x544A;&amp;#x3092;&amp;#x51FA;&amp;#x3059;&amp;#x65B9;&amp;#x6CD5;: &amp;#x5C0F;&amp;#x7C8B;&amp;#x7A7A;&amp;#x9593;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload&quot;&gt;beforeunload - Event reference | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sun, 07 Jun 2015 13:47:21 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450096771313</guid>
          
            <category>Javascript</category>
          
            <category>Rails初級</category>
          
        </item>
      
    
      
      
        <item>
          <title>jQueryによるDOM操作をまとめてみた</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150331/1427809820</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150311/20150311124141.jpg&quot; alt=&quot;f:id:nipe880324:20150311124141j:plain&quot; title=&quot;f:id:nipe880324:20150311124141j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/alcaide/&quot;&gt;Flickr: J. A. Alcaide&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;jQueryを使うことでブラウザ間の違いを吸収しながらも、簡易にDOM操作のJavaScriptコードを記載することができます。&lt;br /&gt;
よく使われるjQueryのDOM操作のメソッドをまとめました。&lt;/p&gt;&lt;p&gt;また、jQuery1.x系とjQuery 2.x系の選択基準として、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.x系は IE8 以前をサポートするレガシーブラウザ向けのバージョン&lt;/li&gt;
&lt;li&gt;2.x系は IE8 以前のサポートは捨てて、高速に安定して動作させることを目指したバージョン&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;ですので、適切なjQueryのバージョンを選んでください。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-ready&quot;&gt;jQueryの初期化処理の記述場所&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-append&quot;&gt;子要素の追加(append, appendTo, prepend, prependTo)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-after&quot;&gt;要素の挿入(after, insertAfter, before, insertBefore)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-replace&quot;&gt;要素の置換(replaceWith, replaceAll)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-remove&quot;&gt;要素の削除(remove, empty)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-attr&quot;&gt;属性の追加/設定/削除(attr, removeAttr)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-text-html&quot;&gt;要素のコンテンツの取得/設定(text, html)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-css&quot;&gt;CSSスタイルの操作(css, addClass, removeClass, toggleClass)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-hide-show&quot;&gt;表示/非表示(hide, show, toggle)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-form&quot;&gt;フォームの入力項目の値の取得/設定(val)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;jquery-dom-ready&quot;&gt;1. jQueryの初期化処理の記述場所&lt;/h3&gt;HTMLのロードが完了してからイベントハンドラの登録などの処理を行うようにしたいので、&lt;br /&gt;
jQueryの&lt;code&gt;ready&lt;/code&gt;メソッド内で処理を記述します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$(&lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;).ready(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// イベントハンドラの登録などのコード&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-append&quot;&gt;2. 子要素の追加(append, appendTo, prepend, prependTo)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$li = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;li&amp;gt;&#39;&lt;/span&gt;).text(&lt;span class=&quot;synConstant&quot;&gt;&#39;これは子要素のli要素&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// ulの子要素の末尾にliを追加&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;ul&#39;&lt;/span&gt;).append($li);
$li.appendTo($(&lt;span class=&quot;synConstant&quot;&gt;&#39;ul&#39;&lt;/span&gt;));

&lt;span class=&quot;synComment&quot;&gt;// ulの子要素の先頭にliを追加&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;ul&#39;&lt;/span&gt;).prepend($li);
$li.prependTo($(&lt;span class=&quot;synConstant&quot;&gt;&#39;ul&#39;&lt;/span&gt;));
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-after&quot;&gt;3. 要素の挿入(after, insertAfter, before, insertBefore)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$newLi = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;li&amp;gt;&#39;&lt;/span&gt;).text(&lt;span class=&quot;synConstant&quot;&gt;&#39;これは挿入するli要素&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// li要素の直後に新たなli要素を挿入&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;li&#39;&lt;/span&gt;).after($newLi);
$newLi.insertAfter($(&lt;span class=&quot;synConstant&quot;&gt;&#39;li&#39;&lt;/span&gt;));

&lt;span class=&quot;synComment&quot;&gt;// li要素の直前に新たなli要素を挿入&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;li&#39;&lt;/span&gt;).before($newLi);
$newLi.insertBefore($(&lt;span class=&quot;synConstant&quot;&gt;&#39;li&#39;&lt;/span&gt;));
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-replace&quot;&gt;4. 要素の置換(replaceWith, replaceAll)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// div要素を置換&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;).replaceWith($(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;).text(&lt;span class=&quot;synConstant&quot;&gt;&#39;要素を置換&#39;&lt;/span&gt;));

&lt;span class=&quot;synComment&quot;&gt;// 上記のコードと同じ&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;div要素を置換&amp;gt;&amp;lt;/div&amp;gt;&#39;&lt;/span&gt;).replaceAll($(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;));
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-remove&quot;&gt;5. 要素の削除(remove, empty)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// すべてのdiv要素を削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;).remove();

&lt;span class=&quot;synComment&quot;&gt;// すべてのli要素のうちclass属性がoddのものを削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;).remove(&lt;span class=&quot;synConstant&quot;&gt;&#39;.odd&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// div要素の子要素をすべて削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;).empty();
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-attr&quot;&gt;6. 属性の追加/設定/削除(attr, removeAttr)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// a要素のhref属性を取得&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; url = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;a&#39;&lt;/span&gt;).attr(&lt;span class=&quot;synConstant&quot;&gt;&#39;href&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// a要素のhref属性を設定&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;a&#39;&lt;/span&gt;).attr(&lt;span class=&quot;synConstant&quot;&gt;&#39;href&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;http://www.new.co.jp&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// 複数の属性をまとめて設定&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;a&#39;&lt;/span&gt;).attr(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  title: &lt;span class=&quot;synConstant&quot;&gt;&#39;Google&#39;&lt;/span&gt;,
  href: &lt;span class=&quot;synConstant&quot;&gt;&#39;http://www.new.co.jp&#39;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// a要素のhref属性を削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;a&#39;&lt;/span&gt;).removeAttr(&lt;span class=&quot;synConstant&quot;&gt;&#39;href&#39;&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-text-html&quot;&gt;7. 要素のコンテンツの取得/設定(text, html)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// h1要素内のテキストの設定と取得&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).text(&lt;span class=&quot;synConstant&quot;&gt;&#39;Hello, world&#39;&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; text = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).text(); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;Hello, world&#39;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;// h1要素内のHTMLの設定と取得&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).html(&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;a href=&amp;quot;http://sample.co.jp&amp;quot;&amp;gt;Hello, world&amp;lt;/a&amp;gt;&#39;&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; html = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).html(); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &amp;lt;a href=&amp;quot;http://sample.co.jp&amp;quot;&amp;gt;Hello, world&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-css&quot;&gt;8. CSSスタイルの操作(css, addClass, removeClass, toggleClass)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// スタイルの設定と取得&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// JSとCSSが密結合してしまうので、下記のaddClass/removeClassを使う方がよい&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).css(&lt;span class=&quot;synConstant&quot;&gt;&#39;color&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;red&#39;&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; color = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).css(&lt;span class=&quot;synConstant&quot;&gt;&#39;color&#39;&lt;/span&gt;); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; rgb(255, 0, 0)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// class属性にtitleクラスを追加&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).addClass(&lt;span class=&quot;synConstant&quot;&gt;&#39;title&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// class属性にtitleクラスを削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).removeClass(&lt;span class=&quot;synConstant&quot;&gt;&#39;title&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// class属性にtitleクラスの追加/削除を切り替える&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).toggleClass(&lt;span class=&quot;synConstant&quot;&gt;&#39;title&#39;&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-hide-show&quot;&gt;9. 表示/非表示(hide, show, toggle)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// id属性がcontentsの要素を非表示にする&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#contents&#39;&lt;/span&gt;).hide();

&lt;span class=&quot;synComment&quot;&gt;// id属性がcontentsの要素を表示にする&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#contents&#39;&lt;/span&gt;).show();

&lt;span class=&quot;synComment&quot;&gt;// id属性がcontentsの要素を表示/非表示を切り替える&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#contents&#39;&lt;/span&gt;).toggle();
&lt;/pre&gt;&lt;p&gt;※あまり大きい範囲にhide()やshow()をやるとパフォーマンスが悪くなる場合があるらしい。エッジケースのためにjQueryが特別な処理をやっていてそれがネックになるらしい&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-form&quot;&gt;10. フォームの入力項目の値の取得/設定(val)&lt;/h3&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;テキストフィールドの値の取得と設定&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#email&#39;&lt;/span&gt;).val(&lt;span class=&quot;synConstant&quot;&gt;&#39;satoshi@email.com&#39;&lt;/span&gt;); &lt;span class=&quot;synComment&quot;&gt;// 値の設定&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; email = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;#email&#39;&lt;/span&gt;).val();        &lt;span class=&quot;synComment&quot;&gt;// 値の取得(&#39;satoshi@email.com&#39;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;チェックされているラジオボタンの取得&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;man&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;man&amp;quot;&lt;/span&gt;&amp;gt;男性&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;woman&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;woman&amp;quot;&lt;/span&gt;&amp;gt;女性&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;other&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;other&amp;quot;&lt;/span&gt;&amp;gt;その他&amp;lt;/label&amp;gt;


&lt;span class=&quot;synComment&quot;&gt;// チェックされていないラジオボタンの取得&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; checkedValue = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;input[name=gender]:checked&#39;&lt;/span&gt;).val();
&lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; undefine (チェックされていない場合)&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &amp;quot;1&amp;quot;      (男性がチェックされている場合)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;チェックされているチェックボックスの取得&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hobby&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sport&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sport&amp;quot;&lt;/span&gt;&amp;gt;スポーツ&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hobby&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;travel&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;travel&amp;quot;&lt;/span&gt;&amp;gt;旅行&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hobby&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;reading&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;reading&amp;quot;&lt;/span&gt;&amp;gt;読書&amp;lt;/label&amp;gt;


&lt;span class=&quot;synComment&quot;&gt;// チェックされているチェックボックスの取得&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; checkedValues = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;input[name=hobby]:checked&#39;&lt;/span&gt;).map(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(_, element) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; element.value; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; []         (チェックされていない場合)&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;] (スポーツと旅行が選択されている場合)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;独習JavaScript 第2版&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 31 Mar 2015 22:50:20 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450087766426</guid>
          
            <category>Javascript</category>
          
            <category>jQuery</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>jQueryの疎結合なイベント処理</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150326/1427379215</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150311/20150311131822.jpg&quot; alt=&quot;f:id:nipe880324:20150311131822j:plain&quot; title=&quot;f:id:nipe880324:20150311131822j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/mandj98/&quot;&gt;Flickr: James Marvin Phelps&amp;#39; Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;jQueryを使ってイベント処理の登録と削除方法、登録できるイベントの一覧を説明します。&lt;br /&gt;
また、JavaScriptはイベントを通してHTMLと結びついているので、イベントハンドラのコーディングと修正に多くの時間を使います。&lt;br /&gt;
そのため、イベントハンドラとアプリケーションロジックを分離することで、疎結合にする考え方も説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-event-on&quot;&gt;イベントハンドラの登録(on)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-event-off&quot;&gt;イベントハンドラの削除(off)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-event-list&quot;&gt;イベント一覧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-event-good-design&quot;&gt;イベントハンドラとアプリケーションロジックを分離する&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;jquery-event-on&quot;&gt;1. イベントハンドラの登録(on)&lt;/h3&gt;&lt;code&gt;on&lt;/code&gt;メソッドを使うことでイベントハンドラを登録することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// クリックのイベントハンドラを登録&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#confirm&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;confirm&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&#39;送信しますか？&#39;&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// 第二引数にセレクタを指定することで、現在の要素だけでなく、今後動的に追加された要素にもイベントハンドラを登録する&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#confirm&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;input[type=submit]&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;jquery-event-off&quot;&gt;2. イベントハンドラの削除(off)&lt;/h3&gt;逆に&lt;code&gt;off&lt;/code&gt;メソッドを使うことで、登録してあるイベントハンドラを削除できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// すべてのイベントハンドラを削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#confirm&#39;&lt;/span&gt;).off();

&lt;span class=&quot;synComment&quot;&gt;// clickのイベントハンドラを削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#confirm&#39;&lt;/span&gt;).off(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// body要素ないのすべての送信ボタン(input[type=submit])からclickのイベントハンドラを削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;body&#39;&lt;/span&gt;).off(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;input[type=submit]&#39;&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;jquery-event-list&quot;&gt;3. イベント一覧&lt;/h3&gt;利用可能なイベントをまとめました。&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;名前 &lt;/th&gt; &lt;th&gt;発生タイミング&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;blur &lt;/td&gt; &lt;td&gt;要素からフォーカスが外れた&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;change &lt;/td&gt; &lt;td&gt;要素の値が変化した&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;click&lt;/td&gt; &lt;td&gt;要素がクリックされた&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dblclick &lt;/td&gt; &lt;td&gt;要素がダブルクリックされた&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;error&lt;/td&gt; &lt;td&gt;画像の読み込みに失敗した&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;focus&lt;/td&gt; &lt;td&gt;要素にフォーカスが移動した&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;focusin&lt;/td&gt; &lt;td&gt;要素にフォーカスが移動した&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;focusout&lt;/td&gt; &lt;td&gt;要素からフォーカスが外れた&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;keydown&lt;/td&gt; &lt;td&gt;キーが押された&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;keypress &lt;/td&gt; &lt;td&gt;キーが押されている&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;keyup&lt;/td&gt; &lt;td&gt;キーを離した&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;load &lt;/td&gt; &lt;td&gt;ページ（要素）がロードされた&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mousedown&lt;/td&gt; &lt;td&gt;マウスのボタンが押された&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mouseenter &lt;/td&gt; &lt;td&gt;マウス・ポインタが要素に乗った&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mouseleave &lt;/td&gt; &lt;td&gt;マウス・ポインタが要素から離れた&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mousemove&lt;/td&gt; &lt;td&gt;マウス・ポインタが要素の中で移動&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mouseout &lt;/td&gt; &lt;td&gt;マウス・ポインタが要素から離れた&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mouseover&lt;/td&gt; &lt;td&gt;マウス・ポインタが要素に乗った&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mouseup&lt;/td&gt; &lt;td&gt;マウスのボタンを離した&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;resize &lt;/td&gt; &lt;td&gt;ウィンドウをリサイズ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;scroll &lt;/td&gt; &lt;td&gt;スクロールした&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;select &lt;/td&gt; &lt;td&gt;テキストボックス／テキストエリアのテキストを選択した&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;submit &lt;/td&gt; &lt;td&gt;フォームをサブミットした&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;unload &lt;/td&gt; &lt;td&gt;ページをアンロード&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-event-good-design&quot;&gt;4. イベントハンドラとアプリケーションロジックを分離する&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;イベントハンドラとアプリケーションロジックが結合している悪いコードです。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Bad&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; handleClick(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; popup = &lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;synConstant&quot;&gt;&#39;popup&#39;&lt;/span&gt;);
  popup.style.left = &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientX + &lt;span class=&quot;synConstant&quot;&gt;&#39;px&#39;&lt;/span&gt;;
  popup.style.&lt;span class=&quot;synStatement&quot;&gt;top&lt;/span&gt;  = &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientY + &lt;span class=&quot;synConstant&quot;&gt;&#39;px&#39;&lt;/span&gt;;
  popup.className  = &lt;span class=&quot;synConstant&quot;&gt;&#39;reveal&#39;&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#element&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;, handleClick());
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
まずは、「イベントハンドラとアプリケーションロジックを切り分ける」ことを行います。&lt;br /&gt;
&lt;code&gt;showPopup&lt;/code&gt;メソッドを新たに作り、イベントハンドラからアプリケーションロジックを切り分けます。&lt;br /&gt;
こうすることで、アプリケーションロジック(shosPopup)を複数の地点から呼び出すことができるようになる。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MyApp = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;

  handleClick: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// showPopupにアプリケーションロジックを分離する&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.showPopup(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

  &lt;span class=&quot;synComment&quot;&gt;// showPopupにアプリケーションロジックを分離する&lt;/span&gt;
  showPopup: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; popup = &lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;synConstant&quot;&gt;&#39;popup&#39;&lt;/span&gt;);
    popup.style.left = &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientX + &lt;span class=&quot;synConstant&quot;&gt;&#39;px&#39;&lt;/span&gt;;
    popup.style.&lt;span class=&quot;synStatement&quot;&gt;top&lt;/span&gt;  = &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientY + &lt;span class=&quot;synConstant&quot;&gt;&#39;px&#39;&lt;/span&gt;;
    popup.className  = &lt;span class=&quot;synConstant&quot;&gt;&#39;reveal&#39;&lt;/span&gt;;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;

$(&lt;span class=&quot;synConstant&quot;&gt;&#39;element&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  MyApp.handleClick(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、「イベントオブジェクト(event)を引き回さない」ようにします。&lt;br /&gt;
イベントハンドラで引き渡されるイベントオブジェクト(event)は多くの情報を持っています。&lt;br /&gt;
便利なのですが、eventを関数の引数として引き回すと、関数で必要な情報がわかりづらいのでコードの可読性が下がってしまいます。&lt;br /&gt;
そのため、必要な値だけを渡すようにします。&lt;/p&gt;&lt;p&gt;&lt;code&gt;showPopup&lt;/code&gt;メソッドは、eventオブジェクトのX, Y座標のみしか使わないので、&lt;code&gt;handleClick&lt;/code&gt;メソッドからは、その2つのみを引数で渡すようにします。&lt;br /&gt;
こうすることで、&lt;code&gt;showPopup&lt;/code&gt;に必要な値が明確になるので、より他のメソッドから呼びやすくなり、テストもしやすくなります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MyApp = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;

  handleClick: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// X, Y座標のみを渡す&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.showPopup(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientX, &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientY);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

  showPopup: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(x, y) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; popup = &lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;synConstant&quot;&gt;&#39;popup&#39;&lt;/span&gt;);
    popup.style.left = x + &lt;span class=&quot;synConstant&quot;&gt;&#39;px&#39;&lt;/span&gt;;
    popup.style.&lt;span class=&quot;synStatement&quot;&gt;top&lt;/span&gt;  = y + &lt;span class=&quot;synConstant&quot;&gt;&#39;px&#39;&lt;/span&gt;;
    popup.className  = &lt;span class=&quot;synConstant&quot;&gt;&#39;reveal&#39;&lt;/span&gt;;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;

$(&lt;span class=&quot;synConstant&quot;&gt;&#39;element&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  MyApp.handleClick(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
さらに、jQueryのバブリング(伝播)のキャンセル処理を追加する場合は次のようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;handleClick: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// DOM Level 2イベントのサポートが前提&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.preventDefault();  &lt;span class=&quot;synComment&quot;&gt;// その要素のイベントをキャンセル&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.stopPropagation(); &lt;span class=&quot;synComment&quot;&gt;// 親要素への伝播をキャンセル&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;// アプリケーションロジックの実行&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.showPopup(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientX, &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientY);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;バブリングの参考URL: &lt;a href=&quot;http://blog.neo.jp/dnblog/index.php?module=Blog&amp;action=Entry&amp;blog=pg&amp;entry=3107&amp;rand=ef81c&quot;&gt;&amp;#x3075;&amp;#x3058;&amp;#x3053;&amp;#x306E;&amp;#x30D7;&amp;#x30ED;&amp;#x30B0;&amp;#x30E9;&amp;#x30DF;&amp;#x30F3;&amp;#x30B0;&amp;#x596E;&amp;#x95D8;&amp;#x8A18;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;独習JavaScript 第2版&lt;/li&gt;
&lt;li&gt;メンテナブルJavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 26 Mar 2015 23:13:35 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450087768800</guid>
          
            <category>Javascript</category>
          
            <category>jQuery</category>
          
        </item>
      
    
      
      
        <item>
          <title>jQueryによるAjax処理</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150325/1427291741</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150311/20150311133550.jpg&quot; alt=&quot;f:id:nipe880324:20150311133550j:plain&quot; title=&quot;f:id:nipe880324:20150311133550j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/josemanuelerre/&quot;&gt;Flickr: josemanuelerre&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;$.get&lt;/li&gt;
&lt;li&gt;$.post&lt;/li&gt;
&lt;li&gt;$.load&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;1. $.get&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;$.get&lt;/code&gt;メソッドで、Ajaxで&#39;/data.json&#39;にGETリクエストを行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$.get(&lt;span class=&quot;synConstant&quot;&gt;&#39;/data.json&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(data) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 成功時に行われる処理&lt;/span&gt;
  console.log(&lt;span class=&quot;synConstant&quot;&gt;&#39;callback&#39;&lt;/span&gt; + data);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;)
.fail(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(data) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 失敗時に行われる処理&lt;/span&gt;
  console.log(&lt;span class=&quot;synConstant&quot;&gt;&#39;Failed&#39;&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;2. $.post&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;$.post&lt;/code&gt;メソッドで、Ajaxで&#39;/post.php&#39;にPOSTリクエストを行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$.post(&lt;span class=&quot;synConstant&quot;&gt;&#39;/post.php&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 第二引数は、POSTするパラメータ&lt;/span&gt;
  title: &lt;span class=&quot;synConstant&quot;&gt;&#39;Post Title&#39;&lt;/span&gt;,
  body:  &lt;span class=&quot;synConstant&quot;&gt;&#39;Post Content&#39;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(data) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 成功時に行われる処理&lt;/span&gt;
  console.log(&lt;span class=&quot;synConstant&quot;&gt;&#39;callback&#39;&lt;/span&gt; + data);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;)
.fail(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(data) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 失敗時に行われる処理&lt;/span&gt;
  console.log(&lt;span class=&quot;synConstant&quot;&gt;&#39;Failed&#39;&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;3. $.load&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;$.load&lt;/code&gt;はHTMLを読み込み、DOMに挿入します。&lt;br /&gt;
なんど&lt;code&gt;load()&lt;/code&gt;を実行しても&lt;code&gt;append()&lt;/code&gt;のように要素は追加されません。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$(&lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;).ready(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;// イベント処理の登録&lt;/span&gt;
  $(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#todo-list&amp;quot;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    loadTodos( $(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;) );
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

  &lt;span class=&quot;synComment&quot;&gt;// 指定したエレメントにTodoをロードする&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 第一引数 : HTMLを読み込むURL&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 第二引数 : パラメータ。指定するとPOSTメソッドになる。&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 　　　　　GETでパラメータを渡したい場合はURLにクエリストリング(?id=xxx&amp;amp;q=yyy)で指定する(省略化)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 第三引数：通信完了後に実行されるコールバック&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; loadTodos = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; (element) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    element.load(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/todos/index.html&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;// 通信完了時のコールバック関数&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;

&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Ajax時にURLが変わらないので、ブラウザの戻るや進むボタンが使いづらいという問題があります。&lt;br /&gt;
それを解決する方法として、&lt;a href=&quot;http://falsandtru.github.io/jquery-pjax/&quot;&gt;PJAX&lt;/a&gt;という解決策があります。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;独習JavaScript 第2版&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.jquery.com/&quot;&gt;jQuery API Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 25 Mar 2015 22:55:41 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450087769920</guid>
          
            <category>Javascript</category>
          
            <category>jQuery</category>
          
        </item>
      
    
      
      
        <item>
          <title>JavaScriptで設定データをコードと分離する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150317/1426599220</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150312/20150312210900.jpg&quot; alt=&quot;f:id:nipe880324:20150312210900j:plain&quot; title=&quot;f:id:nipe880324:20150312210900j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/7422037@N06/&quot;&gt;Flickr: BlueisCoool&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;良い設計のアプリケーションは、「生きた設定データ」をソースコードのメイン部分と分離し、設定データの変更を容易にし、意図しないバグを含まないようにします。&lt;/p&gt;&lt;p&gt;「URL」、「UIに表示される文字列」、「繰り返される一意の値」、「設定(ページごとの項目など)」、「変更されるかもしれない値」といった&lt;b&gt;値が変わるかもしれない設定データ&lt;/b&gt;をソースコードと分離します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;コード内に設定データが含まれています。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Bad&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; validate(value) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!value) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Invalid value&amp;quot;&lt;/span&gt;);                &lt;span class=&quot;synComment&quot;&gt;// 設定データ(メッセージ)&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;location&lt;/span&gt;.href = &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/errors/invalid.php&amp;quot;&lt;/span&gt;; &lt;span class=&quot;synComment&quot;&gt;// 設定データ(URL)&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; tobbleSelected(element) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (hasClass(element, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;selected&amp;quot;&lt;/span&gt;)) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;// 設定データ(class属性)&lt;/span&gt;
    removeClass(element, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;selected&amp;quot;&lt;/span&gt;);   &lt;span class=&quot;synComment&quot;&gt;// 設定データ(class属性)&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    addClass(element, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;selected&amp;quot;&lt;/span&gt;);      &lt;span class=&quot;synComment&quot;&gt;// 設定データ(class属性)&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;コードから設定データを分離します。&lt;br /&gt;
こうすることで、複数の箇所に同じデータが使われている場合、変更し忘れがなくなります。また、テスト用や開発用など設定データを環境に応じて簡単に変更できるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Good&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  MSG_INVALID_VALUE: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Invalid value&amp;quot;&lt;/span&gt;,
  URL_INVALID:       &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/errors/invalid.php&amp;quot;&lt;/span&gt;,
  CSS_SELECTED:      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;selected&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;

&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; validate(value) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!value) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;alert&lt;/span&gt;(config.MSG_INVALID_VALUE);
    &lt;span class=&quot;synStatement&quot;&gt;location&lt;/span&gt;.href = config.URL_INVALID;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; tobbleSelected(element) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (hasClass(element, config.CSS_SELECTED)) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    removeClass(element, config.CSS_SELECTED);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    addClass(element, config.CSS_SELECTED);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;メンテナブルJavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 17 Mar 2015 22:33:40 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450087906919</guid>
          
            <category>Javascript</category>
          
            <category>設計</category>
          
        </item>
      
    
      
      
        <item>
          <title>Javascriptのthisの参照先をまとめてみた</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150313/1426238835</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150311/20150311110349.jpg&quot; alt=&quot;f:id:nipe880324:20150311110349j:plain&quot; title=&quot;f:id:nipe880324:20150311110349j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/bcnbits/with/5385288212/&quot;&gt;Flickr: MorBCN&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;JavaScriptの&lt;code&gt;this&lt;/code&gt;は属しているオブジェクトによって参照先が変わります。&lt;br /&gt;
コンストラクタ内、オブジェクト内、イベントハンドラ内などの&lt;code&gt;this&lt;/code&gt;の参照先をまとめました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-this-constructor&quot;&gt;コンストラクタ内のthis: 生成するオブジェクトへの参照&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-this-object&quot;&gt;オブジェクトのメソッド: 呼び出しオブジェクトへの参照&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-this-event&quot;&gt;イベントハンドラ内のthis: イベントの呼び出し元の要素への参照&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-this-global&quot;&gt;グローバルなスコープや関数内でのthis: グローバルオブジェクト(windowかglobal)を参照&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;javascript-this-constructor&quot;&gt;1. コンストラクタ内のthis: 生成するオブジェクトへの参照&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// thisは生成するオブジェクト(Personインスタンス)への参照&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;javascript-this-object&quot;&gt;2. オブジェクトのメソッド: 呼び出しオブジェクトへの参照&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  value: &lt;span class=&quot;synConstant&quot;&gt;&#39;objのvalueプロパティ&#39;&lt;/span&gt;,

  getValue: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// thisは、objオブジェクトへの参照&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.value;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;

console.log(obj.getValue()); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;objのvalueプロパティ&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;javascript-this-event&quot;&gt;3. イベントハンドラ内のthis: イベントの呼び出し元の要素への参照&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;my-button&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;クリックするとボタンが無効になります&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.onload = &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; button = &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.getElementById&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&#39;my-button&#39;&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;    button.addEventListener&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;// thisは、input要素への参照&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.value    = &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;クリックされました&#39;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.disabled = &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;javascript-this-global&quot;&gt;4. グローバルなスコープや関数内でのthis: グローバルオブジェクト(windowかglobal)を参照&lt;/h3&gt;ブラウザの場合は&lt;code&gt;window&lt;/code&gt;, Node.jsの場合&lt;code&gt;global&lt;/code&gt;というグローバルオブジェクトを参照します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; val = &lt;span class=&quot;synConstant&quot;&gt;&#39;global&#39;&lt;/span&gt;;

&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; func() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.val;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

console.log( val );        &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;global&#39;&lt;/span&gt;
console.log( &lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;.val ); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;global&#39;&lt;/span&gt;
console.log( &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.val );   &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;global&#39;&lt;/span&gt;
console.log( func() );     &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;global&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;独習JavaScript 第2版&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/vvakame/items/74005adacc0e8e2a3cab&quot;&gt;JavaScript&amp;#x306E;this&amp;#x306E;&amp;#x899A;&amp;#x3048;&amp;#x65B9; - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Fri, 13 Mar 2015 18:27:15 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450087759232</guid>
          
            <category>Javascript</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>HTML/CSS/JavaScriptを疎結合にする方法</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150312/1426141352</link>
          <description>&lt;p&gt;HTML/CSS/JavaScriptは相互に関係しています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150312/20150312021825.jpg&quot; alt=&quot;f:id:nipe880324:20150312021825j:plain:w360&quot; title=&quot;f:id:nipe880324:20150312021825j:plain:w360&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:360px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;しかし、それぞれが関係しているからといって、不必要に複雑にして良いわけではありません。&lt;/p&gt;&lt;p&gt;理想としては、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テキストや構造に関する問題がある場合は「HTML」&lt;/li&gt;
&lt;li&gt;スタイルの問題がある場合は「CSS」&lt;/li&gt;
&lt;li&gt;振る舞いに問題がある場合は「JavaScript」&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;を確認し、修正する&lt;b&gt;だけ&lt;/b&gt;で良いようにしたいです。&lt;/p&gt;&lt;p&gt;こうすることで、デバッグのしやすさ、コードの理解しやすさ、保守性が上がり、幸せになれます！（きっと）&lt;/p&gt;&lt;p&gt;&lt;i&gt;パフォーマンスなどの事情で理想通りにはできないので、あくまで理想として。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;それぞれができるかぎり関係しないようにし、疎結合にする方法を説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-good-design-html-js&quot;&gt;HTMLからJavaScriptを隔離する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-good-design-js-css&quot;&gt;JavaScriptからCSSを隔離する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-good-design-js-html&quot;&gt;JavaScriptからHTMLを隔離する&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-good-design-html-js&quot;&gt;1. HTMLからJavaScriptを隔離する&lt;/h3&gt;イベントの登録には、&lt;code&gt;onclick&lt;/code&gt;などのon属性を使ってイベントを割り当てないようにすることで、HTML内にJavaScriptのメソッドが入ることを避けるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- Bad: HTML内にJavaScriptのコードが入ってしまっている --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;onclick=&amp;quot;doSomething&lt;/span&gt;()&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;action-btn&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
代わりに、ライブラリが提供するメソッドを使って要素へのイベントハンドラを行うようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Good&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;action-btn&amp;quot;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;, doSomething);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、イベントハンドラと同様に、JavaScriptをHTML内にインライン化せず、すべて外部ファイルに格納するようにしましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- Bad: HTML内にJavaScriptコードを記載している --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; doSomething&lt;/span&gt;()&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;// コード&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- Good: 外部ファイルとしてJavaScriptを読み込んでいる --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;js/all.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;外部JavaScriptファイルへのリクエストを抑えパフォーマンスを優先させるなどの場合は、やむを得ない。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-good-design-js-css&quot;&gt;2. JavaScriptからCSSを隔離する&lt;/h3&gt;可能な限り、DOM要素の&lt;code&gt;style&lt;/code&gt;プロパティを使ってJavaScriptからスタイリング情報を設定しないようにしましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Bad: JavaScript内にスタイリング情報が入ってしまっている&lt;/span&gt;
element.style.color = &lt;span class=&quot;synConstant&quot;&gt;&#39;gray&#39;&lt;/span&gt;;
element.style.text-decoration = &lt;span class=&quot;synConstant&quot;&gt;&#39;line-through&#39;&lt;/span&gt;; &lt;span class=&quot;synComment&quot;&gt;// line-through: 取り消し線&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
代わりに、要素の&lt;code&gt;class&lt;/code&gt;属性の追加/削除によってJavaScript内からスタイリング情報を分離するようにする。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Good&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;/* CSS */&lt;/span&gt;
.completed &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  color: gray;
  text-decoration: line-through;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;// JavaScript (jQuery)&lt;/span&gt;
$(element).addClass(&lt;span class=&quot;synConstant&quot;&gt;&#39;completed&#39;&lt;/span&gt;);
$(element).removeClass(&lt;span class=&quot;synConstant&quot;&gt;&#39;completed&#39;&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-good-design-js-html&quot;&gt;3. JavaScriptからHTMLを隔離する&lt;/h3&gt;&lt;code&gt;innerHTML&lt;/code&gt;プロパティを使って、JavaScript内でHTMLを設定しないようにしましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Bad: JavaScriptコード内でHTMLコードが混入してしまっている&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;my-div&#39;&lt;/span&gt;).html(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;lt;h3&amp;gt;Error&amp;lt;/h3&amp;gt;&amp;lt;p&amp;gt;Invalid e-mail address.&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;解決策1: サーバーからHTMLをロードする&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$.get(&lt;span class=&quot;synConstant&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(data) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// サーバーから取得したHTMLを設定する&lt;/span&gt;
    $(&lt;span class=&quot;synConstant&quot;&gt;&#39;my-div&#39;&lt;/span&gt;).html(data.res);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;)
  .fail(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(data) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// エラー処理&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;
&lt;/pre&gt;&lt;p&gt;サーバーから取得したHTML片を設定することで、JavaScriptからHTML片を取り除くことができます。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;解決策2: クライアントサイドのテンプレートを使う&lt;/h4&gt;
    &lt;p&gt;JavaScriptのテンプレートエンジンの&lt;a href=&quot;http://handlebarsjs.com/&quot; target=&quot;_blank&quot;&gt;Handlebars&lt;/a&gt;を使って、テンプレートを使った流れを説明します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;まず、HTMLのテンプレートファイルを用意します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- account-validation-template.hbs --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;{{account.error.title}}&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;{{account.error.message}}&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、JavaScript側でテンプレートファイルを設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; html = Handlebars.templates&lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;account-validation-template.hbs&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
   account : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    error : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      title : &lt;span class=&quot;synConstant&quot;&gt;&#39;Error&#39;&lt;/span&gt;,
      message : &lt;span class=&quot;synConstant&quot;&gt;&#39;Invalid e-mail address.&#39;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;my-div&#39;&lt;/span&gt;).html(html);
&lt;/pre&gt;&lt;p&gt;こうすることで、JavaScriptからHTML片を取り除くことができます。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;メンテナブルJavaScript&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/sassy_watson/items/f9947624876bf75a9eff&quot;&gt;JavaScript&amp;#x306E;&amp;#x30C6;&amp;#x30F3;&amp;#x30D7;&amp;#x30EC;&amp;#x30FC;&amp;#x30C8;&amp;#x30A8;&amp;#x30F3;&amp;#x30B8;&amp;#x30F3;Handlebars&amp;#x5165;&amp;#x9580; - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 12 Mar 2015 15:22:32 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450087840482</guid>
          
            <category>Javascript</category>
          
            <category>HTML</category>
          
            <category>CSS</category>
          
            <category>設計</category>
          
        </item>
      
    
      
      
        <item>
          <title>JavaScriptの少し独特なオブジェクト指向についてまとめてみた</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150311/1426062668</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150311/20150311105033.jpg&quot; alt=&quot;f:id:nipe880324:20150311105033j:plain&quot; title=&quot;f:id:nipe880324:20150311105033j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/slworking/&quot;&gt;Flickr: slworking2&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;既にJavaやPHPなどオブジェクト指向言語を生業としてやっているが、その感覚でJavaScriptを少し扱っているて、いまいちJavaScript分からないという方を対象に、それらのプログラム言語とは違う、「&lt;b&gt;少し独特なJavaScriptのオブジェクト指向&lt;/b&gt;」について説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-create-object&quot;&gt;オブジェクトの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-define-property&quot;&gt;プロパティの定義と代入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-delete-property&quot;&gt;プロパティの削除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-accessor-property&quot;&gt;アクセサプロパティ（getter / setter)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-define-class&quot;&gt;クラス定義&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-constructer-arguments&quot;&gt;コンストラクタ引数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-define-instance-method&quot;&gt;インスタンスメソッドの定義&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-define-class-property&quot;&gt;クラスプロパティとクラスメソッドの定義&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-inheritance-class&quot;&gt;クラスの継承&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-inheritance-property&quot;&gt;クラスプロパティとクラスメソッドの継承&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;javascript-oop-create-object&quot;&gt;1. オブジェクトの作成&lt;/h3&gt;大かっこ(&lt;code&gt;{}&lt;/code&gt;)でObjectクラスを作成することができます。&lt;br /&gt;
また、&lt;code&gt;new&lt;/code&gt;演算子で特定のオブジェクトを作成することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// 作成方法1({}でObjectインスタンスを作成する)&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt;;

&lt;span class=&quot;synComment&quot;&gt;// 作成方法2(new演算子でインスタンスを作成する)&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Objcet();    &lt;span class=&quot;synComment&quot;&gt;// Objcetインスタンス&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; person = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Person(); &lt;span class=&quot;synComment&quot;&gt;// Personインスタンス&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-define-property&quot;&gt;2. プロパティの定義と代入&lt;/h3&gt;オブジェクトにプロパティに値を設定すると、プロパティ定義と値の設定ができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt;;

&lt;span class=&quot;synComment&quot;&gt;// プロパティが定義されていないとundefinedが返される&lt;/span&gt;
console.log(obj.prop); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; undefined&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// プロパティに値を設定することで、プロパティ定義も一緒に行える&lt;/span&gt;
obj.prop = 1;
console.log(obj.prop); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 1&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;オブジェクトの作成時に、プロパティを定義、設定することもできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// プロパティを定義、設定することができる&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; obj2 = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  prop:  1,
  prop2: &lt;span class=&quot;synConstant&quot;&gt;&#39;foo&#39;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;

console.log(obj2.prop);  &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 1&lt;/span&gt;
console.log(obj2.prop2); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;foo&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-delete-property&quot;&gt;3. プロパティの削除&lt;/h3&gt;&lt;code&gt;delete&lt;/code&gt;演算子によって、プロパティを削除することができます。&lt;br /&gt;
削除後にプロパティにアクセスすると、プロパティが定義されていないと同じように&lt;code&gt;undefined&lt;/code&gt;を返します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt;;
obj.prop = 1;

&lt;span class=&quot;synComment&quot;&gt;// プロパティの作成&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;delete&lt;/span&gt; obj.prop;

&lt;span class=&quot;synComment&quot;&gt;// プロパティを参照すると、undefinedを返す&lt;/span&gt;
console.log(obj.prop); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; undefined&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;プロパティにイコールで&lt;code&gt;undefined&lt;/code&gt;を設定することで、プロパティの削除をしないでください。&lt;br /&gt;
その場合、forループを使用してプロパティを一覧すると、&lt;code&gt;undefined&lt;/code&gt;を設定したプロパティも参照されてしまいます。&lt;br /&gt;
そのため、プロパティの削除は、&lt;code&gt;delete&lt;/code&gt;演算子を使ってください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-accessor-property&quot;&gt;4. アクセサプロパティ（getter / setter)&lt;/h3&gt;&lt;code&gt;get&lt;/code&gt;と&lt;code&gt;set&lt;/code&gt;を使うことでアクセサプロパティを定義することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; circle = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  redius : 1,    &lt;span class=&quot;synComment&quot;&gt;// 半径&lt;/span&gt;
  get diameter()      &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.radius * 2; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;synComment&quot;&gt;// 直径は半径から算出&lt;/span&gt;
  set diameter(value) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.radius = value / 2; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// 直径から半径を算出&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;

circle.diameter = 5;          &lt;span class=&quot;synComment&quot;&gt;// set diameter が呼ばれる&lt;/span&gt;
console.log(circle.radius);   &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 2.5&lt;/span&gt;
console.log(circle.diameter); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 5 (get diameterが呼ばれる)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-define-class&quot;&gt;5. クラス定義&lt;/h3&gt;JavaScriptのクラス定義は、コンストラクタ内でプロパティを定義することで行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Personクラス（コンストラクタ）の定義&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// Personインスタンスの作成&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;synConstant&quot;&gt;&#39;サトシ&#39;&lt;/span&gt;, 28);
console.log(satoshi.name); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;サトシ&#39;&lt;/span&gt;
console.log(satoshi.age);  &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 28&lt;/span&gt;
console.log(satoshi &lt;span class=&quot;synStatement&quot;&gt;instanceof&lt;/span&gt; Person) &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; true (satoshiはPersonクラスのインスタンス)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-constructer-arguments&quot;&gt;6. コンストラクタ引数&lt;/h3&gt;JavaScriptでは、関数呼び出し時に引数が省略できます。コンストラクタも関数であるため、コンストラクタ引数も省略できます。&lt;br /&gt;
つまり、引数が省略されてコンストラクタが呼び出されてインスタンスが作成されると、プロパティが未定義(&lt;code&gt;undefined&lt;/code&gt;)のままになってしまい、予期せぬエラーが発生する可能性がでてきてしまいます。&lt;/p&gt;&lt;p&gt;そのため、対処法として、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プロパティを特定の値で初期化する&lt;/li&gt;
&lt;li&gt;エラーを発生させプログラムを中断する&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;という方法が考えられます。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;プロパティを特定の値で初期化する&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 特定の値で初期化する&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name || &lt;span class=&quot;synConstant&quot;&gt;&#39;No name&#39;&lt;/span&gt;;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age  || 20;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// コンストラクタ引数を指定しないと「特定の値」で初期化される&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Person();
console.log(satoshi.name); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;No name&#39;&lt;/span&gt;
console.log(satoshi.age);  &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 20&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// コンストラクタ引数を渡すと「渡した値」で初期化される&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;synConstant&quot;&gt;&#39;サトシ&#39;&lt;/span&gt;, 28);
console.log(satoshi.name); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;サトシ&#39;&lt;/span&gt;
console.log(satoshi.age);  &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 28&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;エラーを発生させプログラムを中断する&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 引数をチェックする&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (name == &lt;span class=&quot;synStatement&quot;&gt;undefined&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Error(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;引数&#39;name&#39;を指定してください。&amp;quot;&lt;/span&gt;); &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (age == &lt;span class=&quot;synStatement&quot;&gt;undefined&lt;/span&gt;)  &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Error(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;引数&#39;age&#39;を指定してください。&amp;quot;&lt;/span&gt;); &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// コンストラクタ引数を指定しないとエラーが発生する&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Person(); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; Error: 引数&#39;name&#39;を指定してください。&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-define-instance-method&quot;&gt;7. インスタンスメソッドの定義&lt;/h3&gt;JavaScriptでオブジェクトにメソッドを定義する方法には次の2つがあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt;をプロパティに代入する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prototype&lt;/code&gt;という特殊なオブジェクトを利用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;code&gt;function&lt;/code&gt;をプロパティに代入する&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age;

  &lt;span class=&quot;synComment&quot;&gt;// functionをプロパティに代入する&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.greet = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    console.log(&lt;span class=&quot;synConstant&quot;&gt;&#39;Hello, &#39;&lt;/span&gt; + &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;synConstant&quot;&gt;&#39;サトシ&#39;&lt;/span&gt;, 20);

&lt;span class=&quot;synComment&quot;&gt;// メソッドとして呼ぶことができる&lt;/span&gt;
satoshi.greet(); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;Hello, サトシ&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;この方法の問題点は、&lt;code&gt;new Person(...)&lt;/code&gt;でインスタンスを作るたびに、&lt;code&gt;greet()&lt;/code&gt;メソッドもその数だけ作成されてしまいます。そのため、インスタンスを作るたびにメモリを無駄に消費してしまいます。&lt;br /&gt;
この解決方として、次の「&lt;code&gt;prototype&lt;/code&gt;という特殊なオブジェクトを利用する」方法があります。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;code&gt;prototype&lt;/code&gt;という特殊なオブジェクトを利用する&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// すべてのクラスが持つ特別なprototypeオブジェクトにメソッドを代入する&lt;/span&gt;
Person.prototype.greet = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  console.log(&lt;span class=&quot;synConstant&quot;&gt;&#39;Hello, &#39;&lt;/span&gt; + &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;synConstant&quot;&gt;&#39;サトシ&#39;&lt;/span&gt;, 20);

&lt;span class=&quot;synComment&quot;&gt;// メソッドとして呼ぶことができる&lt;/span&gt;
satoshi.greet(); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;Hello, サトシ&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
こうすることで、すべてのPersonインスタンスは、&lt;code&gt;Person.prototype.greet()&lt;/code&gt;を参照するので、インスタンスを作成するたびに無駄なメモリ消費をしなくなります。&lt;/p&gt;&lt;p&gt;JavaScriptの処理の内部処理の順序は、&lt;code&gt;greet()&lt;/code&gt;メソッドが呼ばれると、まずPersonインスタンス内に定義されたプロパティを検索し、見つからないので&lt;code&gt;Person.prototype&lt;/code&gt;内を検索し、見つかったのでその&lt;code&gt;greet()&lt;/code&gt;メソッドを実行しています。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-define-class-property&quot;&gt;8. クラスプロパティとクラスメソッドの定義&lt;/h3&gt;JavaScriptのクラスメソッドは、クラスプロパティの定義と同じように定義できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// クラスプロパティ（定数）の定義&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// 何歳以下をyoung(若い)とするかを保持する定数&lt;/span&gt;
Person.YOUNG_LIMIT_AGE = 20;

&lt;span class=&quot;synComment&quot;&gt;// クラスメソッドを定義&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// youngの場合 true, そうでない場合 false を返す&lt;/span&gt;
Person.isYoung = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (age &amp;lt;= Person.YOUNG_LIMIT_AGE) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// クラスプロパティを呼び出す&lt;/span&gt;
console.log(Person.YOUNG_LIMIT_AGE); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 20&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// クラスメソッドを呼び出す&lt;/span&gt;
console.log(Person.isYoung(10)); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; true&lt;/span&gt;
console.log(Person.isYoung(30)); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;定数は慣例で大文字で定義していますが、Rubyのように変更不可能になるという言語仕様はありません。&lt;br /&gt;
あくまで大文字にすることで定数として変更してはいけないという慣例があるだけで、変更は可能です。（変更しないでください！）&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-inheritance-class&quot;&gt;9. クラスの継承&lt;/h3&gt;JavaScriptでは、継承のための構文は用意されていません。次のような方法で継承を行います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プロパティの継承は、&lt;code&gt;apply&lt;/code&gt;メソッドを呼び出す&lt;/li&gt;
&lt;li&gt;メソッドの継承は、&lt;code&gt;prototype&lt;/code&gt;オブジェクトを利用する&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;JavaScriptでのクラス継承はなかなか複雑なので、小規模の場合は、継承を使わないようにし、大規模の場合は、ライブラリなどを使い継承を行う方が良いらしいです。&lt;/p&gt;&lt;p&gt;&lt;i&gt;Webや本では細かな違いがいろいろあり、下記の継承のコードは妥当でない可能性があります。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;プロパティの継承は、&lt;code&gt;apply&lt;/code&gt;メソッドを呼び出す&lt;/h4&gt;
    &lt;p&gt;サブクラスのコンストラクタ内でスーパークラスの&lt;code&gt;apply&lt;/code&gt;メソッドを呼ぶことで、スーパークラスのプロパティをサブクラスに引き継ぎます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Personクラス&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// Personを継承したEmployeeクラス&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Employee = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age, jobTitle) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.jobTitle = jobTitle;

  &lt;span class=&quot;synComment&quot;&gt;// スーパークラス(Person)のコンストラクタを呼び出す&lt;/span&gt;
  Person.apply(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;name, age&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Employee(&lt;span class=&quot;synConstant&quot;&gt;&#39;サトシ&#39;&lt;/span&gt;, 28, &lt;span class=&quot;synConstant&quot;&gt;&#39;QA&#39;&lt;/span&gt;);
console.log(satoshi.name);     &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;サトシ&#39;&lt;/span&gt;
console.log(satoshi.age);      &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 28&lt;/span&gt;
console.log(satoshi.jobTitle); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;QA&#39;&lt;/span&gt;
console.log(satoshi &lt;span class=&quot;synStatement&quot;&gt;instanceof&lt;/span&gt; Employee); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;メソッドの継承は、&lt;code&gt;prototype&lt;/code&gt;オブジェクトを利用する&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;prototype&lt;/code&gt;オブジェクトのプロトタイプチェーンの仕組みを利用して継承を行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Personクラスを定義&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// Person#greet()メソッドを定義&lt;/span&gt;
Person.prototype.greet = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  console.log(&lt;span class=&quot;synConstant&quot;&gt;&#39;Hello, &#39;&lt;/span&gt; + &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// Personを継承したEmployeeクラスを定義&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Employee = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age, jobTitle) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.jobTitle = jobTitle;

  &lt;span class=&quot;synComment&quot;&gt;// Personのプロパティを継承&lt;/span&gt;
  Person.apply(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;name, age&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// プロトタイプチェーンにPersonインスタンスを設定することで、&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// Employeeインスタンスのメソッド呼び出しでは、Person.prototypeのメソッド内にメソッドがあるか検索されます。&lt;/span&gt;
Employee.prototype = &lt;span class=&quot;synType&quot;&gt;Object&lt;/span&gt;.create(Person.prototype);

&lt;span class=&quot;synComment&quot;&gt;// 一行上のコードでconstructorプロパティがPersonになってしまうので、Employeeをセットします。&lt;/span&gt;
Employee.prototype.constructor = Employee;

&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Employee(&lt;span class=&quot;synConstant&quot;&gt;&#39;サトシ&#39;&lt;/span&gt;, 28, &lt;span class=&quot;synConstant&quot;&gt;&#39;QA&#39;&lt;/span&gt;);
satoshi.greet();                  &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;Hello, サトシ&#39;&lt;/span&gt;
console.log(satoshi.constructor); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; Employeeのコンストラクタ( function(name, age, jobTitle) { ... } )&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-inheritance-property&quot;&gt;10. クラスプロパティとクラスメソッドの継承&lt;/h3&gt;JavaScriptではクラスプロパティやクラスメソッドの継承は一般的には行われません。&lt;br /&gt;
これは、JavaScriptではスーパークラスのクラスプロパティやクラスメソッドをサブクラスで利用するためには、それらのプロパティ定義をサブクラスにもコピーしなければならないので、コードが重複してしまうのでよくないためです。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;独習JavaScript&lt;/li&gt;
&lt;li&gt;メンテナブルJavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 11 Mar 2015 17:31:08 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450087758457</guid>
          
            <category>Javascript</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでJasmineを使ってJavascriptの単体テストをする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150105/1420465062</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150105/20150105223634.png&quot; alt=&quot;f:id:nipe880324:20150105223634p:plain&quot; title=&quot;f:id:nipe880324:20150105223634p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Railsで&lt;a href=&quot;http://jasmine.github.io/2.0/introduction.html&quot; target=&quot;_blank&quot;&gt;Jasmine&lt;/a&gt;を使ってJavascriptの単体テストを実行する方法を説明します。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://jasmine.github.io/2.0/introduction.html&quot; target=&quot;_blank&quot;&gt;Jasmine&lt;/a&gt;はJavascriptの単体テストを行うためのテスティングフレームワークです。そして、RailsでJasmineを使うために、&lt;a href=&quot;https://github.com/searls/jasmine-rails&quot; target=&quot;_blank&quot;&gt;jasmine-rails&lt;/a&gt;というgemが提供されています。&lt;/p&gt;&lt;p&gt;Railsでは&lt;code&gt;capybara-webkit&lt;/code&gt;や&lt;code&gt;poltergist&lt;/code&gt;などでエンドツーエンドレベルでのJavascriptのテストができます。しかし、エンドツーエンドなので仮想ブラウザを起動させてテストを行うので時間がかかるというデメリットがあります。そのため、Javascriptの単体テストは&lt;a href=&quot;http://jasmine.github.io/2.0/introduction.html&quot; target=&quot;_blank&quot;&gt;Jasmine&lt;/a&gt;を使ってテストするという住み分けが必要です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.1.1&lt;/li&gt;
&lt;li&gt;Rails 4.1.7&lt;/li&gt;
&lt;li&gt;jasmine-core  2.1.3&lt;/li&gt;
&lt;li&gt;jasmine-rails 0.10.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#jasmine-install&quot;&gt;jasmine-railsのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jasmine-usage&quot;&gt;RailsでのJasmineの初歩的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jasmine-matchers&quot;&gt;Jasmineで使えるMatcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jasmine-jquery-for-dom&quot;&gt;(WIP) DOMを検査する&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jasmine-install&quot;&gt;jasmine-railsのインストール&lt;/h3&gt;まず、Gemfileに&lt;code&gt;jasmine-rails&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;jasmine-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、RailsジェネレーターでJasmineの初期ファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;rails g jasmine_rails:&lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
   identical  spec/javascripts/support/jasmine.yml
       route  mount JasmineRails::Engine &lt;span class=&quot;synStatement&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/specs&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if &lt;/span&gt;defined?&lt;span class=&quot;synStatement&quot;&gt;(&lt;/span&gt;JasmineRails&lt;span class=&quot;synStatement&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Jasmineの設定ファイルは、&lt;code&gt;spec/javascripts/support/jasmine.yml&lt;/code&gt;に作成されます。&lt;br /&gt;
設定ファイル内では、Railsの規約に合わせた、Javascriptのソースファイルパス、Jasmineでのテストファイルパスなどがデフォルトで記載されています。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jasmine-usage&quot;&gt;RailsでのJasmineの初歩的な使い方&lt;/h3&gt;簡単な例を使って、RailsでのJasmineの初歩的な使い方を説明します。&lt;/p&gt;&lt;p&gt;まず、Javascriptのテストファイルを作成します。&lt;br /&gt;
RSpec3と文法はほとんど同じです。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;# spec/javascripts/foo_spec.js.coffee

describe &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Foo&amp;quot;&lt;/span&gt;, -&amp;gt;
  beforeEach -&amp;gt;
    @foo = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Foo(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Taro&amp;quot;&lt;/span&gt;)

  it &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;is first test&amp;quot;&lt;/span&gt;, -&amp;gt;
    expect(@foo.greet()).toBe &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Hello, Taro&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次にソースファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;# app/assets/javascripts/foo.js.coffee
&lt;span class=&quot;synStatement&quot;&gt;class&lt;/span&gt; @Foo
  constructor: (name) -&amp;gt;
    @name = name

  greet: -&amp;gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Hello, #{@name}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、Javascriptのテストを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;RAILS_ENV&lt;/span&gt;=&lt;span class=&quot;synStatement&quot;&gt;test&lt;/span&gt; bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; rake spec:javascript

...

Finished
-----------------
&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; spec, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; failures &lt;span class=&quot;synError&quot;&gt;in&lt;/span&gt; 0.003s.
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jasmine-matchers&quot;&gt;Jasmineで使えるMatcher&lt;/h3&gt;&lt;a href=&quot;http://jasmine.github.io/2.0/introduction.html&quot;&gt;introduction.js&lt;/a&gt;を参照&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jasmine-jquery-for-dom&quot;&gt;(WIP) DOMを検査する&lt;/h3&gt;テキストフィールドに入力し、動的にバリデーションメッセージを出すなどのDOMを操作するJavascriptのテストを実施したい場合は、&lt;code&gt;jasmine-jquery&lt;/code&gt;を使うと楽らしい&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jasmine.github.io/2.0/introduction.html&quot;&gt;introduction.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/searls/jasmine-rails&quot;&gt;searls/jasmine-rails &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/261-testing-javascript-with-jasmine-revised&quot;&gt;#261 Testing JavaScript with Jasmine (revised) - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Mon, 05 Jan 2015 22:37:42 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450077055396</guid>
          
            <category>Rails Test</category>
          
            <category>Javascript</category>
          
            <category>Rails中級</category>
          
        </item>
      
    
  </channel>
</rss>
