<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>リファレンス - Rails Webook</title>
    <link>http://ruby-rails.hatenadiary.com/category/%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9</link>
    <description>自社のECを開発している会社で働いています。Rails情報やサービスを成長させる方法を書いていきます</description>
    <lastBuildDate>Fri, 18 Dec 2015 02:44:31 +0900</lastBuildDate>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <generator>Hatena::Blog</generator>
    
      
      
        <item>
          <title>RailsでAcitiveJobとDelayedJobを使ってバックグランド処理を行う</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150304/1425396671</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150115/20150115212630.jpg&quot; alt=&quot;f:id:nipe880324:20150115212630j:plain:w480&quot; title=&quot;f:id:nipe880324:20150115212630j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/doug88888/&quot;&gt;Flickr: @Doug88888&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;メール送信、大量データのインポート/エクスポートなど&lt;b&gt;長い時間がかかる処理&lt;/b&gt;はバックグラウンドで処理するのが一般的です。&lt;br /&gt;
Railsでバックグラウンド処理を実現するためには、&lt;a href=&quot;https://github.com/mperham/sidekiq&quot; target=&quot;_blank&quot;&gt;Sidekiq&lt;/a&gt;, &lt;a href=&quot;https://github.com/resque/resque&quot; target=&quot;_blank&quot;&gt;Resque&lt;/a&gt;, &lt;a href=&quot;https://github.com/collectiveidea/delayed_job&quot; target=&quot;_blank&quot;&gt;Delayed Job&lt;/a&gt;といったgemが有名です。&lt;/p&gt;&lt;p&gt;また、Rails4.2からActive Jobが追加されました。これは、たくさんあるバックグラウンド処理を行うgemへの共通インターフェースのようなものが追加されました。&lt;br /&gt;
メリットとして、バックグラウンド処理のgemがどれでも、ソースコードは同じように記述できるようになります。ちなみに、ActiveJobだけではバックグラウンド処理はできないので、バックグラウンド処理のgemを入れる必要があります。&lt;/p&gt;&lt;p&gt;この記事では、DelayedJobでのバックグラウンド処理の実施方法から、ActiveJobとDelayedJobを組み合わせたバックグラウンド処理の実施方法までを説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2&lt;/li&gt;
&lt;li&gt;Active Job 4.2&lt;/li&gt;
&lt;li&gt;delayed_job 4.0.6&lt;/li&gt;
&lt;li&gt;delayed_job_active_record 4.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;#delayed_job&quot;&gt;1. Delayed Jobのインストールと使い方&lt;/a&gt;&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-install&quot;&gt;1.1. DelayedJobのインストール&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-enqueue&quot;&gt;1.2. ジョブを登録する（エンキュー）&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-worker&quot;&gt;1.3. ジョブを実行する（ワーカーの起動・停止・再起動）&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;#delayed_job-aj&quot;&gt;2. ActiveJobとの連携&lt;/a&gt;&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-aj-adapter&quot;&gt;2.1. バックグラウンドジョブとのアダプターを設定&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-aj-create-job&quot;&gt;2.2. ジョブを作成&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-aj-exception&quot;&gt;2.3. Active Jobの例外処理&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;#delayed_job-ref&quot;&gt;3. リファレンス&lt;/a&gt;&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-ref-create&quot;&gt;3.1. ジョブの作成&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-ref-exception&quot;&gt;3.2. ジョブ内の例外処理&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-ref-execution&quot;&gt;3.3. ジョブの実行&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-ref-worker&quot;&gt;3.4. ワーカーの起動/停止&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-ref-callbacks&quot;&gt;3.5. ジョブのコールバックの一覧&lt;/a&gt;&lt;/h5&gt;
    &lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job&quot;&gt;1. Delayed Jobのインストールと使い方&lt;/h3&gt;まずは、Active Jobと連携しない、Delayed Job単体での使い方を見ていきます。&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;delayed_job-install&quot;&gt;1.1. DelayedJobのインストール&lt;/h3&gt;まず、&lt;code&gt;Gemfile&lt;/code&gt;にORM(オブジェクト・リレーション・マッパー)に合わせた&lt;code&gt;delayed_job&lt;/code&gt;のgemを追記します。&lt;br /&gt;
ORMがActiveRecordの場合、&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;delayed_job_active_record&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ODM(オブジェクト・ドキュメント・マッパー)がMongoidの場合、&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;delayed_job_mongoid&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、&lt;code&gt;delayed_job&lt;/code&gt;をインストールします。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ActiveRecordの場合、ジョブを管理するテーブルが必要となるので、次のコマンドで作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g delayed_job:active_record
bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;今回は、ActiveRecordでの説明を行います。それ以外のORMを利用している場合は、GitHubのページを確認してください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-enqueue&quot;&gt;1.2. ジョブを登録する（エンキュー）&lt;/h3&gt;&lt;code&gt;delay&lt;/code&gt;メソッドを呼ぶことにより、バックグラウンドで処理を実行することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# フォアグラウンドで実行される&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@letter&lt;/span&gt;.deliver

&lt;span class=&quot;synComment&quot;&gt;# バックグラウンドで実行される&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@letter&lt;/span&gt;.delay.deliver
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
たとえば、次のような時間のかかる&lt;code&gt;deliver&lt;/code&gt;メソッドがあったとします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/letters_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;LettersController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# POST/letters/1/deliver&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;deliver&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@letter&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Letter&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
    &lt;span class=&quot;synIdentifier&quot;&gt;@letter&lt;/span&gt;.deliver
    redirect_to letters_url, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;手紙を送りました。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# app/models/letter.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Letter&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;deliver&lt;/span&gt;
    sleep &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 処理に時間がかかることを擬似的に実施&lt;/span&gt;
    update(&lt;span class=&quot;synConstant&quot;&gt;delivered_at&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.zone.now)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次のような画面で&lt;code&gt;Deliver&lt;/code&gt;ボタンを押します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150115/20150115211836.jpg&quot; alt=&quot;f:id:nipe880324:20150115211836j:plain:w480&quot; title=&quot;f:id:nipe880324:20150115211836j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;code&gt;deliver&lt;/code&gt;メソッドは時間のかかる処理(sleep 10)なので、&lt;b&gt;10秒後にリダイレクト&lt;/b&gt;されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150115/20150115211848.jpg&quot; alt=&quot;f:id:nipe880324:20150115211848j:plain:w480&quot; title=&quot;f:id:nipe880324:20150115211848j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;しかし、次のように&lt;code&gt;delay&lt;/code&gt;をメソッドをチェインさせてみましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/letters_controller.rb&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@letter&lt;/span&gt;.delay.deliver
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、ジョブを処理するワーカーを起動させます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake &lt;span class=&quot;synStatement&quot;&gt;jobs&lt;/span&gt;:work
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、また&lt;code&gt;Deliver&lt;/code&gt;ボタンを押すと、すぐにリダイレクトされます。&lt;br /&gt;
バックグラウンドで処理されるため、&lt;code&gt;deliverd_at&lt;/code&gt;がまだ設定されていません。&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150115/20150115212009.jpg&quot; alt=&quot;f:id:nipe880324:20150115212009j:plain:w480&quot; title=&quot;f:id:nipe880324:20150115212009j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;バックグラウンドで処理が走っているので、10秒後にブラウザをリロードすればちゃんと設定されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150115/20150115212030.jpg&quot; alt=&quot;f:id:nipe880324:20150115212030j:plain:w480&quot; title=&quot;f:id:nipe880324:20150115212030j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-worker&quot;&gt;1.3. ジョブを実行する（ワーカーの起動・停止・再起動）&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;開発時&lt;/h4&gt;
    &lt;p&gt;rakeタスクでフォアグラウンドでワーカーを走らせ、ジョブを処理します。&lt;br /&gt;
&lt;code&gt;Ctrl+C&lt;/code&gt;でワーカーを終了できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake &lt;span class=&quot;synStatement&quot;&gt;jobs&lt;/span&gt;:work
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;本番時&lt;/h4&gt;
    &lt;p&gt;デーモンでワーカーを走らせ、ジョブを処理します。&lt;br /&gt;
デーモンで動かすので、&lt;code&gt;daemons&lt;/code&gt;というgemを&lt;code&gt;Gemfile&lt;/code&gt;に追加し、&lt;code&gt;bundle install&lt;/code&gt;を実施しておく必要があります。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 別々のプロセス内で2つのワーカーを走らせる&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;RAILS_ENV&lt;/span&gt;=production bin/delayed_job &lt;span class=&quot;synSpecial&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;start&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ワーカーを停止させる&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;RAILS_ENV&lt;/span&gt;=production bin/delayed_job &lt;span class=&quot;synStatement&quot;&gt;stop&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ワーカーを再起動させる(ワーカー数は2つ)&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;RAILS_ENV&lt;/span&gt;=production bin/delayed_job &lt;span class=&quot;synSpecial&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;restart&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-aj&quot;&gt;2. ActiveJobとの連携&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;ActiveJobの目的は、Railsにジョブのインフラを追加することで、&lt;a href=&quot;https://github.com/mperham/sidekiq&quot; target=&quot;_blank&quot;&gt;Sidekiq&lt;/a&gt;, &lt;a href=&quot;https://github.com/resque/resque&quot; target=&quot;_blank&quot;&gt;Resque&lt;/a&gt;, &lt;a href=&quot;https://github.com/collectiveidea/delayed_job&quot; target=&quot;_blank&quot;&gt;Delayed Job&lt;/a&gt;といった実際にバックグラウンドでジョブを実行するgemの差分をほぼ意識しないでジョブを扱えるようにすることです。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-aj-adapter&quot;&gt;2.1. バックグラウンドジョブとのアダプターを設定&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mperham/sidekiq&quot; target=&quot;_blank&quot;&gt;Sidekiq&lt;/a&gt;, &lt;a href=&quot;https://github.com/resque/resque&quot; target=&quot;_blank&quot;&gt;Resque&lt;/a&gt;, &lt;a href=&quot;https://github.com/collectiveidea/delayed_job&quot; target=&quot;_blank&quot;&gt;Delayed Job&lt;/a&gt;に応じて、&lt;code&gt;application.rb&lt;/code&gt;に設定を追加する必要が有ります。&lt;/p&gt;&lt;p&gt;実際に指定する値は、&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveJob/QueueAdapters.html&quot; target=&quot;_blank&quot;&gt;Active Job adapters&lt;/a&gt;を参照してください。&lt;/p&gt;&lt;p&gt;Delayed Jobの場合は、&lt;code&gt;:delayed_job&lt;/code&gt;を指定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/application.rb&lt;/span&gt;
module DelayedJobTestApp
  class Application &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt; Rails::Application
    ...

    &lt;span class=&quot;synComment&quot;&gt;# Gemfileにアダプターのgemを記載されており、gemがインストール済みであり、&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# アダプターのインストール方法を既に実施しているようにしてください。&lt;/span&gt;
    config.active_job.queue_adapter &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; :delayed_job
  end
end
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-aj-create-job&quot;&gt;2.2. ジョブを作成&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;次のコマンドでジョブを作成できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g job news_deliver
      invoke  test_unit
      create    &lt;span class=&quot;synStatement&quot;&gt;test&lt;/span&gt;/&lt;span class=&quot;synStatement&quot;&gt;jobs&lt;/span&gt;/news_deliver_job_test.rb
      create  app/&lt;span class=&quot;synStatement&quot;&gt;jobs&lt;/span&gt;/news_deliver_job.rb
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ジョブファイルの規約として、&lt;code&gt;app/jobs&lt;/code&gt;配下に配置し、&lt;code&gt;ActiveJob::Base&lt;/code&gt;を継承している必要があります。&lt;br /&gt;
Rakeタスクで作成された値は次のようになっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/jobs/news_deliver_job.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveJob&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  queue_as &lt;span class=&quot;synConstant&quot;&gt;:default&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;perform&lt;/span&gt;(*args)
    &lt;span class=&quot;synComment&quot;&gt;# Do something later&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;queue_as&lt;/code&gt;で、どのキューでジョブを走らせるかをを設定できます。デフォルト値は&lt;code&gt;:default&lt;/code&gt;。&lt;br /&gt;
そして、&lt;code&gt;perform&lt;/code&gt;メソッドにジョブに行わせたい処理を記載します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;では、コントローラーの&lt;code&gt;deliver&lt;/code&gt;メソッドの時間がかかる処理を&lt;code&gt;perform&lt;/code&gt;メソッド内に移動させます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/jobs/news_deliver_job.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveJob&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  queue_as &lt;span class=&quot;synConstant&quot;&gt;:default&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;perform&lt;/span&gt;(letter_id)
    &lt;span class=&quot;synType&quot;&gt;Letter&lt;/span&gt;.find(letter_id).deliver
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、コントローラーで、ジョブを呼び出します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/letters_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;LettersController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# POST/letters/1/deliver&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;deliver&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt;.perform_later(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
    redirect_to letters_url, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;手紙を送りました。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ジョブの呼び出し方には次のように時間を指定して呼び出すこともできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 明日の午後に実行される&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt;.set(&lt;span class=&quot;synConstant&quot;&gt;wait_until&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Date&lt;/span&gt;.tomorrow.noon).perform_later(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

&lt;span class=&quot;synComment&quot;&gt;# 1週間後に実行される&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt;.set(&lt;span class=&quot;synConstant&quot;&gt;wait&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.week).perform_later(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ワーカーを起動します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake &lt;span class=&quot;synStatement&quot;&gt;jobs&lt;/span&gt;:work
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
画面から「Deliver」ボタンを押してみると、先ほどと同じようにすぐに画面遷移します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150115/20150115212009.jpg&quot; alt=&quot;f:id:nipe880324:20150115212009j:plain:w480&quot; title=&quot;f:id:nipe880324:20150115212009j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;そして、数秒後に画面をリロードすると、Delivered atの値が設定されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150115/20150115212030.jpg&quot; alt=&quot;f:id:nipe880324:20150115212030j:plain:w480&quot; title=&quot;f:id:nipe880324:20150115212030j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-aj-exception&quot;&gt;2.3. Active Jobの例外処理&lt;/h3&gt;ジョブ内でエラーが発生した時のエラーハンドリングには、&lt;code&gt;rescue_from&lt;/code&gt;を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/letters_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveJob&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  queue_as &lt;span class=&quot;synConstant&quot;&gt;:default&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# performメソッド内でActiveRecord::RecordNotFoundが発生した場合、&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ログに出力する&lt;/span&gt;
  rescue_from(&lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RecordNotFound&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;exception&lt;/span&gt;|
    &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.logger.error &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Letterレコードは見つかりませんでした。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;perform&lt;/span&gt;(letter_id)
    &lt;span class=&quot;synComment&quot;&gt;# 例外処理のハンドリングのために無理やり例外を発生させる&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RecordNotFound&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Letter&lt;/span&gt;.find(letter_id).deliver
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
画面から「Deliver」ボタンを押すと、次のようにログにエラーメッセージが表示されます。もちろん、画面の値は更新されません。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# log/development.log&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;2015-01&lt;/span&gt;-15T20:&lt;span class=&quot;synConstant&quot;&gt;55&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;0900&lt;/span&gt;: &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;Worker(host:nac.local pid:&lt;span class=&quot;synConstant&quot;&gt;51669&lt;/span&gt;)&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; Job ActiveJob::QueueAdapters::DelayedJobAdapter::JobWrapper &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; RUNNING
&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;ActiveJob&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;NewsDeliverJob&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;ecf4386f-5d10-4bc2-bfb3-994a45633070&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; Performing NewsDeliverJob from DelayedJob&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; with arguments: &lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;ActiveJob&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;NewsDeliverJob&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;ecf4386f-5d10-4bc2-bfb3-994a45633070&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; Performed NewsDeliverJob from DelayedJob&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;synError&quot;&gt;in&lt;/span&gt; 0.53ms
Letterレコードは見つかりませんでした。
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-ref&quot;&gt;3. リファレンス&lt;/h3&gt;&lt;h3 id=&quot;delayed_job-ref-create&quot;&gt;3.1. ジョブファイルの作成&lt;/h3&gt;次のコマンドでジョブを作成するか、&lt;code&gt;app/jobs&lt;/code&gt;配下に&lt;code&gt;ActiveJob::Base&lt;/code&gt;を継承したジョブクラスを作成する方法でジョブファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g job news_deliver
      invoke  test_unit
      create    &lt;span class=&quot;synStatement&quot;&gt;test&lt;/span&gt;/&lt;span class=&quot;synStatement&quot;&gt;jobs&lt;/span&gt;/news_deliver_job_test.rb
      create  app/&lt;span class=&quot;synStatement&quot;&gt;jobs&lt;/span&gt;/news_deliver_job.rb
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;perform&lt;/code&gt;メソッドにジョブで実行したい処理を記述します。&lt;br /&gt;
&lt;code&gt;queue_as&lt;/code&gt;で、どのキューでジョブを走らせるかをを設定できます。デフォルト値は&lt;code&gt;:default&lt;/code&gt;。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/jobs/news_deliver_job.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveJob&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  queue_as &lt;span class=&quot;synConstant&quot;&gt;:default&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;perform&lt;/span&gt;(letter_id)
    &lt;span class=&quot;synType&quot;&gt;Letter&lt;/span&gt;.find(letter_id).deliver
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-ref-exception&quot;&gt;3.2. ジョブ内の例外処理&lt;/h3&gt;ジョブ内でエラーが発生した時のエラーハンドリングには、&lt;code&gt;rescue_from&lt;/code&gt;を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/letters_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveJob&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  queue_as &lt;span class=&quot;synConstant&quot;&gt;:default&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# performメソッド内でActiveRecord::RecordNotFoundが発生した場合、&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ログに出力する&lt;/span&gt;
  rescue_from(&lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RecordNotFound&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;exception&lt;/span&gt;|
    &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.logger.error &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Letterレコードは見つかりませんでした。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;perform&lt;/span&gt;(letter_id)
    &lt;span class=&quot;synComment&quot;&gt;# 例外処理のハンドリングのために無理やり例外を発生させる&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RecordNotFound&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Letter&lt;/span&gt;.find(letter_id).deliver
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-ref-execution&quot;&gt;3.3. ジョブの実行&lt;/h3&gt;ジョブの呼び出し方には次のように時間を指定して呼び出すこともできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# すぐにバックグラウンドで実行さえっる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt;.perform_later(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

&lt;span class=&quot;synComment&quot;&gt;# 明日の午後にバックグラウンドで実行される&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt;.set(&lt;span class=&quot;synConstant&quot;&gt;wait_until&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Date&lt;/span&gt;.tomorrow.noon).perform_later(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

&lt;span class=&quot;synComment&quot;&gt;# 1週間後にバックグラウンドで実行される&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt;.set(&lt;span class=&quot;synConstant&quot;&gt;wait&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.week).perform_later(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-ref-worker&quot;&gt;3.4. ワーカーの起動/停止&lt;/h3&gt;ジョブ関連のRakeタスクが使えます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;rake jobs&lt;span class=&quot;synConstant&quot;&gt;:check&lt;/span&gt;[max_age]  &lt;span class=&quot;synComment&quot;&gt;# Exit with error status if any jobs older than max_age seconds haven&#39;t been attempted yet&lt;/span&gt;
rake jobs&lt;span class=&quot;synConstant&quot;&gt;:clear&lt;/span&gt;           &lt;span class=&quot;synComment&quot;&gt;# Delayed Job のキューをクリアな状態にする&lt;/span&gt;
rake jobs&lt;span class=&quot;synConstant&quot;&gt;:work&lt;/span&gt;            &lt;span class=&quot;synComment&quot;&gt;# Delayed Job ワーカーを起動させる&lt;/span&gt;
rake jobs&lt;span class=&quot;synConstant&quot;&gt;:workoff&lt;/span&gt;         &lt;span class=&quot;synComment&quot;&gt;# Delayed Job ワーカーを起動させ、すべてのジョブが完了したら終了する&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;delayed_job-ref-callbacks&quot;&gt;3.5. ジョブのコールバックの一覧&lt;/h3&gt;Active Jobは、ジョブのライフサイクルで次のコールバックを定義しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;before_enqueue&lt;/li&gt;
&lt;li&gt;around_enqueue&lt;/li&gt;
&lt;li&gt;after_enqueue&lt;/li&gt;
&lt;li&gt;before_perform&lt;/li&gt;
&lt;li&gt;around_perform&lt;/li&gt;
&lt;li&gt;after_perform&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/collectiveidea/delayed_job&quot;&gt;collectiveidea/delayed_job &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/collectiveidea/delayed_job_active_record&quot;&gt;collectiveidea/delayed_job_active_record &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/active_job_basics.html&quot;&gt;Active Job Basics &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 04 Mar 2015 00:31:11 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450080332093</guid>
          
            <category>ActiveJob</category>
          
            <category>Rails中級</category>
          
            <category>リファレンス</category>
          
        </item>
      
    
      
      
        <item>
          <title>Ruby 2.1 / Rails4.1 の意外に忘れられている便利なメソッド</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150101/1420049679</link>
          <description>&lt;p&gt;Ruby 2.1 / Rails4.1 での意外に忘れらている便利なメソッドを集めました。&lt;/p&gt;&lt;p&gt;RubyやRailsでは有用なメソッドがたくさん実装されており、車輪の再発明にならないように、それらを覚えて適切な箇所で使うだけで生産性はあがります。&lt;/p&gt;&lt;p&gt;&lt;i&gt;（大雑把に書いたので、まだまとまってないので、随時修正します）&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.1.2&lt;/li&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveSupport 4.1.7&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-ruby-basic&quot;&gt;Rubyの基本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;代入、範囲、正規表現、%記法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-meta-programming&quot;&gt;メタプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;文字列からクラスを作成 constantize&lt;br /&gt;
動的にメソッドを定義 class_eval&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-object&quot;&gt;Object&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;nilや空を判定する(present?, blank?)、nilや空以外の値を取得(present)、nilを扱う(try)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-string&quot;&gt;String&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;複数行の文字列(ヒアドキュメント)、文字列を含む(include?, index)、パターンにマッチする(match, =~)&lt;br /&gt;
パターンで置換する(gsub)、文字列で分割し配列にする(split)&lt;br /&gt;
1行ずつ取り出す(each_line)、1文字ずつ取り出す(each_char)、部分文字列を取り出す(slice)&lt;br /&gt;
文字列を削除(delete)、空白を除く(strip)、改行文字除く(chomp)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-array&quot;&gt;Array&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;長さ(length, size), 空かどうか(empty?), 値が含まれるか(include?)&lt;br /&gt;
繰り返し(each, each_with_index, reverse_each)&lt;br /&gt;
連結(+)、追加(&lt;&lt;)&lt;br /&gt;
１要素の検索(find), 複数要素の検索(select, reject), 最大値、最小値(max, min)、各要素を処理(collect, map)&lt;br /&gt;
すべて◯◯か(all?), どれか◯◯か(any?)&lt;br /&gt;
各要素を結合(join)、合計を計算(sum)&lt;br /&gt;
ソート(sort)、重複除去(uniq)、ランダムに要素を取得(sample)&lt;br /&gt;
&lt;a href=&quot;http://ref.xaio.jp/ruby/classes/array&quot;&gt;その他のArrayクラスのメソッド&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-hash&quot;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;要素の取り出しと設定(&lt;span data-unlink&gt;, &lt;/span&gt;=)、キーを配列で取得(keys)、値を配列で取得(values)、値の数(length)&lt;br /&gt;
空かどうか(empty?)、キーが含まれるか(has_key?)、値が含まれるか(has_value?)&lt;br /&gt;
繰り返し(each)、値の取得(select, collect, map)&lt;br /&gt;
ハッシュを統合(merge)、差を取得する(diff)&lt;br /&gt;
&lt;a href=&quot;http://ref.xaio.jp/ruby/classes/hash&quot;&gt;その他のHashクラスのメソッド&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-activerecord&quot;&gt;ActiveRecord&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;指定した要素を配列で取得(pluck)&lt;br /&gt;
変更を確認する(changes, changed?)&lt;br /&gt;
カラム値の存在有無を確認(カラム名+?)&lt;br /&gt;
DBに保存されていないか(new_record?)、DBに保存されているか(persisted?)&lt;br /&gt;
DBに存在しない場合作成(find_or_create_by)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-controller&quot;&gt;コントローラー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;コントローラーのメソッドをビューで使う（helper_method）&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-ruby-basic&quot;&gt;Rubyの基本&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;代入&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 多重代入&lt;/span&gt;
a, b = &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;
a &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
b &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;

a, b = [&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]
a &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
b &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;

a, *b = [&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]
a &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
b &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [2, 3]&lt;/span&gt;

a, b, c = [&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;]
a &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
b &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
c &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; nil&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 入れ替え&lt;/span&gt;
a, b = b, a

&lt;span class=&quot;synComment&quot;&gt;# 自己代入&lt;/span&gt;
a += &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# a = a + 1&lt;/span&gt;
b ||= &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# b = b || 2&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;範囲&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&gt;ruby|&lt;br /&gt;
(1..5).include?(5)  # =&gt; true  (5も含む)&lt;br /&gt;
(1...5).include?(5) # =&gt; false (5は含まない)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;%記法&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Alice Bob Chrlie&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Alice&amp;quot;, &amp;quot;Bob&amp;quot;, &amp;quot;Chrlie&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-ruby-basic&quot;&gt;Rubyの基本&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;文字列からクラスを作成(constantize)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.constantize &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Userクラスが作成される&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.constantize.new
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; #&amp;lt;User id: nil, name: nil, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 応用: URLから動的にモデルのレコードを読み出す&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# URL例(request.path): /events/:id/comments, /articles/:id/comments&lt;/span&gt;
resource, id = request.path.split(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;# resource = events か articles&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@commentable&lt;/span&gt; = resource.singularize.classify.constantize.find(id)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-meta-programming&quot;&gt;メタプログラミング&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メソッドを動的に定義する(class_eval, module_eval)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Cクラスを定義&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;C&lt;/span&gt;; &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# class_evalメソッドで、Cクラスにmメソッドを定義&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;C&lt;/span&gt;.class_eval &lt;span class=&quot;synSpecial&quot;&gt;%Q{&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  def m&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;    puts &amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  end&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# mメソッドを実行&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;C&lt;/span&gt;.new.m
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; hello&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-object&quot;&gt;Object&lt;/h3&gt;nilや空文字など空でないか確認(present?)&lt;br /&gt;
&#39;&#39;, &#39; &#39;, nil, [], {}など空っぽいもの以外の場合、trueを返す&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, [], {}].each { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;| p a.present? }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# ... （全て false)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;nilや空文字など空であるか確認(blank?)&lt;br /&gt;
&#39;&#39;, &#39; &#39;, &quot;&quot;, &quot; &quot;, nil, [], {}などの空ぽいものの場合、trueを返す&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, [], {}].each { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;| p a.blank? }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# ... （全て true)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;nilや空文字など空でない値を取得(present)&lt;br /&gt;
&#39;&#39;, &#39; &#39;, nil, [], {}など空っぽいもの以外の場合、値を返す。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;.presence &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;a&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&#39;&#39;&lt;/span&gt;.presence  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; nil&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;tryメソッド(nilの場合、nilを返す)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;@person&lt;/span&gt; ? &lt;span class=&quot;synIdentifier&quot;&gt;@pserson&lt;/span&gt;.name : &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# をtryで次のように書き換えれる&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@poerson&lt;/span&gt;.try(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 引数やブロックも渡せる&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.try(&lt;span class=&quot;synConstant&quot;&gt;:includes?&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-string&quot;&gt;String&lt;/h3&gt;複数行に渡る文字列(ヒアドキュメント)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;str = &amp;lt;&amp;lt;&lt;span class=&quot;synSpecial&quot;&gt;TEXT&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;1行目&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;2行目&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;3行目&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;TEXT&lt;/span&gt;

str &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;1行目\n2行目\n3行目\n&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
指定した文字列を含んでいるか(include?)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.include?(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.include?(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;zy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
指定した文字列を含んでいれば、その開始位置を整数で返す(index)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcdefg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.index(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcdefg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.index(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;zy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
パターンにマッチする(=~, match)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;html = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
html.match(&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(\w)&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;m&lt;/span&gt;|
  p match[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]
  p match[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;&amp;lt;p&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;p&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
パターンで置換(gsub)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;html = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hello,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\r\n&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 改行コードを&amp;lt;br /&amp;gt;に置き換える&lt;/span&gt;
html.gsub(&lt;span class=&quot;synSpecial&quot;&gt;/(\r\n|\r|\n)/&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;br /&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;hello,&amp;lt;br /&amp;gt;world&amp;lt;br /&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
指定した文字列で分割し、配列にする(split)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Alice,Bob,Charlie&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.split(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Alice&amp;quot;, &amp;quot;Bob&amp;quot;, &amp;quot;Charlie&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
1行ずつ取り出す(each_line)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&amp;quot;&lt;/span&gt;.each_line { |&lt;span class=&quot;synIdentifier&quot;&gt;line&lt;/span&gt;| p line }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;1行目\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;2行目\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;3行目\n&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
1文字ずつ取り出す(each_char)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.each_char { |&lt;span class=&quot;synIdentifier&quot;&gt;ch&lt;/span&gt;| p ch }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;a&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;b&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
部分文字列を取り出す(slice)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcdefg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.slice(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# 2番目から3文字分&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;bcd&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcdefg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.slice(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# 1文字目から3文字目まで&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;bcd&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcdefg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.slice(&lt;span class=&quot;synSpecial&quot;&gt;/\w+/&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# 正規表現&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;abcdefg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
指定した文字列を削除(delete)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.delete(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;abe&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.delete(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;xy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;abcde&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
先頭と末尾の空白を取り除く(strip)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; hi &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; “.strip # =&amp;gt; “hi”&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
文字列の末尾の改行文字を除く(chomp)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\r\n&amp;quot;&lt;/span&gt;.chomp  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; “hi”&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&amp;quot;&lt;/span&gt;.chomp    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;hi&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\r&amp;quot;&lt;/span&gt;.chomp    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;hi&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&amp;quot;&lt;/span&gt;.chomp &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;1行目\n2行目\n3行目&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-array&quot;&gt;Array&lt;/h3&gt;長さ(length, size)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[].length &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 0&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].length &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 3&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].size   &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 3&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
空かどうか(empty?)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[].empty?  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Railsの場合、ActiveSupportで拡張されたblank?の方が都合が良い場合が多い&lt;/span&gt;
[].blank?  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
値が含まれるか(include?)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].include?(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].include?(&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
繰り返し(each, each_with_index, reverse_each)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].each { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;| p a }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].each_with_index { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;i&lt;/span&gt;| p &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;i&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;番目:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;a&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;0番目:1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;1番目:2&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;2番目:3&amp;quot;&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].reverse_each { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;| p a }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
配列の連結(+)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;] + [&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [1, 2, 3, 4, 5, 6]&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;] + []        &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [1, 2, 3]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
要素の追加(&lt;&lt;)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;      &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [1, 2, 3, 4]&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;] &amp;lt;&amp;lt; [&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [1, 2, 3, [4, 5]]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
１要素の検索(find)、複数要素の検索(select, reject),&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;].find { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n % &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;].find { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n % &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; nil (条件に当てはまらないとnilを返す)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# selectはブロック内の条件に当てはまる要素を返す&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;].select { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n % &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; }
=&amp;gt; [&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;]
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;].select { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n % &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt; }
=&amp;gt; [] (条件に当てはまらないと[]を返す)

&lt;span class=&quot;synComment&quot;&gt;# rejectはブロック内の条件に当てはまらない要素を返す&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;].reject { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n % &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; }
=&amp;gt; [&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;]
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
最大値、最小値(max, min)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;].min  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 1&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;].max &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 10&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
各要素を処理する(collect, map)&lt;br /&gt;
collectもmapも別名で同じ処理をする。ブロックに与えた処理を行ったあとに、それらを配列で返す&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;].map { |&lt;span class=&quot;synIdentifier&quot;&gt;str&lt;/span&gt;| str.capitalize } &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Ruby&amp;quot;, &amp;quot;Rails&amp;quot;]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 別の書き方もできる&lt;/span&gt;
[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;].map(&amp;amp;&lt;span class=&quot;synConstant&quot;&gt;:capitalize&lt;/span&gt;)            &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Ruby&amp;quot;, &amp;quot;Rails&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
すべて◯◯か(all?), どれか◯◯か(any?)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;].all?      &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].all?     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].any?     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].any?   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].one?    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].one?     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].none?  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ブロックを渡して条件判定ができる&lt;/span&gt;
[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abc tomato&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;xyz tomato&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;123 tomato&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].all? { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;| a.include?(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tomato&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
各要素を指定した文字列で結合して文字列で返す(join)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ABC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;DEF&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;GHI&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
=&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ABC,DEF,GHI&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
[].join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
=&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
合計を計算(sum)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].sum             &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 6&lt;/span&gt;
[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ghi&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].sum &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;abcdefghi&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ソート(sort)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;].sort &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [1, 2, 3, 8, 9]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
重複する要素を除去する(uniq)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;].uniq &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [3, 1, 2, 4]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ランダムに要素を取得する(sample)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;].sample &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 5&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;].sample &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-hash&quot;&gt;Hash&lt;/h3&gt;要素の取り出しと設定(&lt;span data-unlink&gt;, &lt;/span&gt;=)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;hash = { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;taro&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;chika&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; } }

&lt;span class=&quot;synComment&quot;&gt;# 要素の取り出し&lt;/span&gt;
hash[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;taro&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;20 }&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 要素の設定&lt;/span&gt;
hash[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] = { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tom&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;25&lt;/span&gt; }
hash
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;1&amp;quot;=&amp;gt;{&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;taro&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;20}, &amp;quot;2&amp;quot;=&amp;gt;{&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;chika&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;18}, &amp;quot;3&amp;quot;=&amp;gt;{&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;tom&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;25}}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;キーを配列で取得(keys)、値を配列で取得(values)、値の数(length)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;hash = { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;taro&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;chika&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; } }

hash.keys   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;]&lt;/span&gt;
hash.values &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [{&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;taro&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;20}, {&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;chika&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;18}]&lt;/span&gt;
hash.length &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;空かどうか(empty?)、キーが含まれるか(has_key?)、値が含まれるか(has_value?)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;hash = { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:tom&lt;/span&gt; }
hash.empty?           &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
hash.has_key?(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;)  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
hash.has_value?(&lt;span class=&quot;synConstant&quot;&gt;:tom&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;

hash = {}
hash.empty?           &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
hash.has_key?(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;)  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
hash.has_value?(&lt;span class=&quot;synConstant&quot;&gt;:tom&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
繰り返し(each)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;hash = { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;taro&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;chika&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; } }

hash.each { |&lt;span class=&quot;synIdentifier&quot;&gt;k&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;v&lt;/span&gt;| p &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;k&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;v&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;1:{\&amp;quot;username\&amp;quot;=&amp;gt;\&amp;quot;taro\&amp;quot;, \&amp;quot;age\&amp;quot;=&amp;gt;20}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;2:{\&amp;quot;username\&amp;quot;=&amp;gt;\&amp;quot;chika\&amp;quot;, \&amp;quot;age\&amp;quot;=&amp;gt;18}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;値の取得(select, collect, map)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;select ... ブロックの条件に合致するハッシュを返す&lt;/li&gt;
&lt;li&gt;collect(map) ... 各要素に対して、処理を行った結果を配列で返す&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;hash = { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;taro&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;chika&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; } }

&lt;span class=&quot;synComment&quot;&gt;# ageが20以上のハッシュを取得する&lt;/span&gt;
hash.select { |&lt;span class=&quot;synIdentifier&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;v&lt;/span&gt;| v[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].to_i &amp;gt;= &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;1&amp;quot;=&amp;gt;{&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;taro&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;20}}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ageを配列で取得する&lt;/span&gt;
hash.collect { |&lt;span class=&quot;synIdentifier&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;v&lt;/span&gt;| v[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].to_i }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [20, 18]&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# mapとcollectのエイリアスであるため挙動は同じ&lt;/span&gt;
hash.map { |&lt;span class=&quot;synIdentifier&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;v&lt;/span&gt;| v[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].to_i }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [20, 18]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ハッシュを統合(merge)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;h1 = { &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt; }
h2 = { &lt;span class=&quot;synConstant&quot;&gt;published&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; }
h1.merge(h2) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {:price=&amp;gt;100, :published=&amp;gt;false}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 同じ値の場合は、後のハッシュが優先になる&lt;/span&gt;
h1 = { &lt;span class=&quot;synConstant&quot;&gt;published&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;  }
h2 = { &lt;span class=&quot;synConstant&quot;&gt;published&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; }
h1.merge(h2) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {:published=&amp;gt;false}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-activerecord&quot;&gt;ActiveRecord&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;指定した要素を配列で取得(pluck)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.all.pluck(&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#(0.2ms)  SELECT &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot;, &amp;quot;users&amp;quot;.&amp;quot;name&amp;quot; FROM &amp;quot;users&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [[1, nil], [2, &amp;quot;田中&amp;quot;]]&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;変更を確認する(changes, changed?)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;u = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.first

&lt;span class=&quot;synComment&quot;&gt;# 変更された要素を取得する&lt;/span&gt;
u.changes       &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {}&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# すべての要素が変更されたかbooleanで取得&lt;/span&gt;
u.changed?      &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# nameカラムが変更されたかbooleanで取得&lt;/span&gt;
u.name_changed? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;

u.name = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

u.changes       &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; {&amp;quot;name&amp;quot;=&amp;gt;[nil, &amp;quot;test&amp;quot;]}&lt;/span&gt;
u.changed?      &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
u.name_changed? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;カラムの存在有無を確認する(カラム名+?)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;boolean値のカラム&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;u = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.first

&lt;span class=&quot;synComment&quot;&gt;# nil, &amp;quot;&amp;quot;, {}, [], falseなどの場合、falseを返す&lt;/span&gt;
u.name  = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
u.name  = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
u.name = {}
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
u.name = []
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
u.name = &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

u.name = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;DBに保存されていないか(new_record?)、DBに保存されているか(persisted?)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# DBに保存されていない値&lt;/span&gt;
u = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.new
u.new_record? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
u.persisted?  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DBに保存されている値&lt;/span&gt;
u = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.first
u.new_record? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;
u.persisted?  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;DBに存在しない場合作成(find_or_create_by)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# DBに存在する場合、レコードを取得&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find_or_create_by(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;User id: 1, name: &amp;quot;test&amp;quot;, created_at: &amp;quot;2014-11-29 09:02:15&amp;quot;, updated_at: &amp;quot;2014-11-30 10:49:04&amp;quot;, active: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DBに存在しない場合、レコードを作成&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find_or_create_by(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;u&lt;/span&gt;|
  &lt;span class=&quot;synComment&quot;&gt;# 引数で指定した値は自動的に設定される&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ブロック内でその他の値を設定する&lt;/span&gt;
  u.active = &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;User id: 4, name: &amp;quot;test3&amp;quot;, created_at: &amp;quot;2014-11-30 10:51:45&amp;quot;, updated_at: &amp;quot;2014-11-30 10:51:45&amp;quot;, active: false&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-controller&quot;&gt;コントローラー&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コントローラーのメソッドをビューで使う（helper_method）&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Controller&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# ビューでcurrent_userメソッドが利用できる&lt;/span&gt;
  helper_method &lt;span class=&quot;synConstant&quot;&gt;:current_user&lt;/span&gt;

  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;current_user&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@_current_user&lt;/span&gt; ||= &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find(session[&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;])
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
end

&lt;span class=&quot;synComment&quot;&gt;# View&lt;/span&gt;
ユーザー名: &amp;lt;%= current_user.name %&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot;&gt;Ruby on Rails API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ref.xaio.jp/ruby&quot;&gt;Ruby&amp;#x30EA;&amp;#x30D5;&amp;#x30A1;&amp;#x30EC;&amp;#x30F3;&amp;#x30B9;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 01 Jan 2015 03:14:39 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075660675</guid>
          
            <category>Ruby</category>
          
            <category>Rails中級</category>
          
            <category>まとめ</category>
          
            <category>リファレンス</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsのテキスト、数値、日付/日時関連のフォーマットヘルパー</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140802/1406969793</link>
          <description>&lt;p&gt;RailsのViewでよく使う&lt;b&gt;日付、数値、テキストのフォーマットヘルパー&lt;/b&gt;のリファレンスです。&lt;br /&gt;
フォーマットヘルパーは、日付/日時、数値、テキストの「表示形式を指定」できます。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;テキスト関連&lt;/h3&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# デバッグ情報を表示する&lt;/span&gt;
&amp;lt;%= debug(params) %&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; リクエストパラメータの中身を表示&lt;/span&gt;
&amp;lt;%= debug(cookies) %&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; クッキーの中身を表示&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 改行やスペースをそのままの形で表示する。テキストエリアの表示などで使う&lt;/span&gt;
&amp;lt;%= simple_format(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;p&amp;gt;ABC&amp;lt;br&amp;gt;ZYX&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;p&amp;gt;ABC&amp;lt;br&amp;gt;ZYX&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 文字列内の「指定文字」にタグを作成する（デフォルト：mark）&lt;/span&gt;
&amp;lt;%= highlight( &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;これはテスト用の文字列です。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;テスト&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; これは&amp;lt;mark&amp;gt;テスト&amp;lt;/mark&amp;gt;用の文字列です。&lt;/span&gt;
&amp;lt;%= highlight(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;これはテスト用の文字列です。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, [&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;テスト&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;文字列&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;], &lt;span class=&quot;synConstant&quot;&gt;highlighter&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;em&amp;gt;\1&amp;lt;/em&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;) %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; これは&amp;lt;em&amp;gt;テスト&amp;lt;/em&amp;gt;用の&amp;lt;em&amp;gt;文字列&amp;lt;/em&amp;gt;です。&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# lengthで指定した文字数以上ある場合は、&amp;quot;...&amp;quot;で文字列を省略して表示する。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#（lengthは、...の数も含む）&lt;/span&gt;
&amp;lt;%= truncate(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;これはテスト用の文字列です。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;length&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;) %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; これはテス...&lt;/span&gt;
&amp;lt;%= truncate(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;これはテスト用文字列です。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;length&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;) { link_to &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;続きを読む&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; } %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; これはテス...&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;続きを読む&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 文字列内の「指定文字」からradius文だけ表示する&lt;/span&gt;
&amp;lt;%= excerpt( &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;これはテスト用の文字列です。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;テスト&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;radius&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;) %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt;...れはテスト用の...&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 日本語では関係ないですが、名詞の単数/複数を識別して表示する&lt;/span&gt;
&amp;lt;%= pluralize(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;) %&amp;gt; &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1 person&lt;/span&gt;
&amp;lt;%= pluralize(&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;) %&amp;gt; &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2 people&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 日本語でちょっと実験してみましたが変な風に表示されてしまいます。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 多分、単数系複数形の辞書があり、そこでマッチしなかったら&amp;quot;s&amp;quot;をつけるとかのロジックなんだと思います。&lt;/span&gt;
&amp;lt;%= pluralize(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;人&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;) %&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 1 人&lt;/span&gt;
&amp;lt;%= pluralize(&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;人&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;) %&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2 人s&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;数値関連&lt;/h3&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 通貨形式で表示する&lt;/span&gt;
&amp;lt;%= number_to_currency( &lt;span class=&quot;synConstant&quot;&gt;1234.56&lt;/span&gt; ) %&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; $1,234.56 （ロケールは en）&lt;/span&gt;
&amp;lt;%= number_to_currency( &lt;span class=&quot;synConstant&quot;&gt;1234.56&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;unit&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;¥&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;precision&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; ) %&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; ¥1,235&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# バイトで表示する&lt;/span&gt;
&amp;lt;%= number_to_human_size( &lt;span class=&quot;synConstant&quot;&gt;1200&lt;/span&gt; ) %&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 1.17 KB&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# パーセントで表示する&lt;/span&gt;
&amp;lt;%= number_to_percentage( &lt;span class=&quot;synConstant&quot;&gt;66.666666&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;precision&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; ) %&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 66.7%&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 3桁毎に区切り文字(デフォルトは ,)を追加して表示する&lt;/span&gt;
&amp;lt;%= number_with_delimiter( &lt;span class=&quot;synConstant&quot;&gt;1234567890&lt;/span&gt; ) %&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 1,234,567,890&lt;/span&gt;
&amp;lt;%= number_with_delimiter( &lt;span class=&quot;synConstant&quot;&gt;1234567890&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;delimiter&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; ) %&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 1_234_567_890&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 表示桁数を指定して表示する（四捨五入される）&lt;/span&gt;
&amp;lt;%= number_with_precision( &lt;span class=&quot;synConstant&quot;&gt;12.3456&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;precision&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; ) %&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 12.35&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;日付/日時関連&lt;/h3&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 現在日時から引数で指定した日時までのおよその日付を表示&lt;/span&gt;
&amp;lt;%= time_ago_in_words(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;.minutes.from_now)  %&amp;gt;   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3 minutes&lt;/span&gt;
&amp;lt;%= time_ago_in_words(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;.minutes.ago)  %&amp;gt;            &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3 minutes&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;</description>
          <pubDate>Sat, 02 Aug 2014 17:56:33 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815729413033</guid>
          
            <category>Rails View</category>
          
            <category>リファレンス</category>
          
        </item>
      
        <item>
          <title>rails generateコマンドのよく使うコマンドまとめ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140802/1406948695</link>
          <description>&lt;p&gt;&lt;code&gt;$ rails generate&lt;/code&gt;コマンドの使い方まとめました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;rails generate コマンドで生成されるファイル一覧表&lt;/li&gt;
&lt;li&gt;rails generate scaffold コマンド（index〜destroyまで全て作成）&lt;/li&gt;
&lt;li&gt;rails generate controller コマンド（コントローラーとビューを作成）&lt;/li&gt;
&lt;li&gt;rails generate model コマンド（モデルとマイグレーションファイルを作成）&lt;/li&gt;
&lt;li&gt;rails generate migration コマンド（マイグレーションファイルを作成）&lt;/li&gt;
&lt;li&gt;rails generate で利用可能なフィールドタイプ一覧&lt;/li&gt;
&lt;li&gt;rails destroy コマンド（rails generateで生成したファイルを削除）&lt;/li&gt;
&lt;li&gt;ヘルプの表示方法&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;&lt;code&gt;$ rails generate&lt;/code&gt;コマンドで生成されるファイル一覧表&lt;/h3&gt;
    &lt;p&gt;&lt;table class=&quot;table table-striped&quot;&gt;
  &lt;thead&gt;&lt;tr&gt;&lt;th&gt;コマンド名&lt;/th&gt;&lt;th&gt;概要&lt;/th&gt;&lt;th&gt;コントローラー(テスト含む)&lt;/th&gt;&lt;th&gt;ビュー&lt;/th&gt;&lt;th&gt;ヘルパー(テスト含む)&lt;/th&gt;&lt;th&gt;モデル(テスト含む)&lt;/th&gt;&lt;th&gt;マイグレーション&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;scaffold&lt;/td&gt;&lt;td&gt;全て作成（基本的なCRUDの画面や機能が欲しい場合）&lt;/td&gt;&lt;td&gt;○&lt;/td&gt;&lt;td&gt;○&lt;/td&gt;&lt;td&gt;○&lt;/td&gt;&lt;td&gt;○&lt;/td&gt;&lt;td&gt;○&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;controller&lt;/td&gt;&lt;td&gt;コントローラーとビューを作成&lt;/td&gt;&lt;td&gt;○&lt;/td&gt;&lt;td&gt;○&lt;/td&gt;&lt;td&gt;○&lt;/td&gt;&lt;td&gt;×&lt;/td&gt;&lt;td&gt;×&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;model&lt;/td&gt;&lt;td&gt;モデルとマイグレーションを作成（新規モデル作成時など）&lt;/td&gt;&lt;td&gt;×&lt;/td&gt;&lt;td&gt;×&lt;/td&gt;&lt;td&gt;×&lt;/td&gt;&lt;td&gt;○&lt;/td&gt;&lt;td&gt;○&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;migrate&lt;/td&gt;&lt;td&gt;マイグレーション作成（カラム追加時など）&lt;/td&gt;&lt;td&gt;×&lt;/td&gt;&lt;td&gt;×&lt;/td&gt;&lt;td&gt;×&lt;/td&gt;&lt;td&gt;×&lt;/td&gt;&lt;td&gt;○&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;&lt;code&gt;$ rails generate scaffold&lt;/code&gt;コマンド&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;$ rails generate[ or g] scaffold&lt;/code&gt;でコントローラー、ビュー、モデル、マイグレーションファイルの全てを作成することができます。&lt;br /&gt;
&lt;code&gt;$ rails g controller&lt;/code&gt;のように、&lt;code&gt;index new&lt;/code&gt;などのアクションを指定して作成することはできません。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 使い方&lt;/span&gt;
$ rails generate scaffold &lt;span class=&quot;synType&quot;&gt;NAME&lt;/span&gt; [field[&lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt;][&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;] field[&lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt;][&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;]] [options]

&lt;span class=&quot;synComment&quot;&gt;# サンプル&lt;/span&gt;
$ rails generate scaffold post title body&lt;span class=&quot;synConstant&quot;&gt;:text&lt;/span&gt; published&lt;span class=&quot;synConstant&quot;&gt;:boolean&lt;/span&gt;
$ rails generate scaffold purchase amount&lt;span class=&quot;synConstant&quot;&gt;:decimal&lt;/span&gt; tracking_id&lt;span class=&quot;synConstant&quot;&gt;:integer:uniq&lt;/span&gt;

使えるフィールドタイプについては、下記の「rails generate で利用可能なフィールドタイプ一覧」を参照して下さい。
よく使うオプションについては、下記の「rails generate のよく使うオプション一覧」を参照して下さい。
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;&lt;code&gt;$ rails generate controller&lt;/code&gt;コマンド&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;$ rails generate[ or g] controller&lt;/code&gt;でコントローラーとビューを作成することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 使い方&lt;/span&gt;
$ rails generate controller &lt;span class=&quot;synType&quot;&gt;NAME&lt;/span&gt; [action action] [options]

&lt;span class=&quot;synComment&quot;&gt;# サンプル&lt;/span&gt;
$ rails g controller &lt;span class=&quot;synType&quot;&gt;CreditCards&lt;/span&gt; open debit credit close
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &#39;credit_cards/open&#39;などの routeを追加&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &#39;app/controllers/credit_cards_controller.rb&#39;を追加（コントローラーのテストも追加）&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &#39;app/views/credit_cards/open.html.erb&#39;などの viewを追加&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &#39;app/helpers/credit_cards_helper.rb&#39;を追加（ヘルパーのテストも追加）&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &#39;credit_cards.js.coffee&#39;と&#39;credit_cards.css.scss&#39;のアセットを追加&lt;/span&gt;

よく使うオプションについては、下記の「rails generate のよく使うオプション一覧」を参照して下さい。
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;&lt;code&gt;$ rails generate model&lt;/code&gt;コマンド&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;$ rails generate[ or g] model&lt;/code&gt;でモデルとマイグレーションファイルを作成することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 使い方&lt;/span&gt;
$ rails generate model &lt;span class=&quot;synType&quot;&gt;NAME&lt;/span&gt; [field[&lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt;][&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;] field[&lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt;][&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;]] [options]

&lt;span class=&quot;synComment&quot;&gt;# サンプル&lt;/span&gt;
$ rails g model post title&lt;span class=&quot;synConstant&quot;&gt;:string&lt;/span&gt; body&lt;span class=&quot;synConstant&quot;&gt;:text&lt;/span&gt; published&lt;span class=&quot;synConstant&quot;&gt;:boolean&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# String型のtitle、Text型のbody、Boolean型のpublishedカラムが存在するマイグレーションファイルと&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Postモデルが作成される&lt;/span&gt;

使えるフィールドタイプについては、下記の「rails generate で利用可能なフィールドタイプ一覧」を参照して下さい。
よく使うオプションについては、下記の「rails generate のよく使うオプション一覧」を参照して下さい。
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;&lt;code&gt;$ rails generate migration&lt;/code&gt;コマンド&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;$ rails generate[ or g] migration&lt;/code&gt;でマイグレーションファイルを作成することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 使い方：&lt;/span&gt;
$ rails generate migration &lt;span class=&quot;synType&quot;&gt;NAME&lt;/span&gt; [field[&lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt;][&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;] field[&lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt;][&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;]] [options]

&lt;span class=&quot;synComment&quot;&gt;# サンプル：&lt;/span&gt;
$ rails g migration add_image_url_to_post image_url&lt;span class=&quot;synConstant&quot;&gt;:string&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; postsテーブルにString型のimage_urlカラムを追加するマイグレーションファイルを作成&lt;/span&gt;

$ rails g migration add_order_id_to_line_item order_id&lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; line_itmesテーブルにInteger型のorder_idカラムを追加するマイグレーションファイルを作成&lt;/span&gt;

使えるフィールドタイプについては、下記の「rails generate で利用可能なフィールドタイプ一覧」を参照して下さい。
よく使うオプションについては、下記の「rails generate のよく使うオプション一覧」を参照して下さい。
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;&lt;code&gt;$ rails generate&lt;/code&gt;で利用可能なフィールドタイプ一覧&lt;/h3&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;利用可能なフィールドタイプ：
integer
primary_key
decimal
float
boolean
binary
string
text
date
time
datetime
timestamp
references
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;ヘルプの表示方法&lt;/h3&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails g -h &lt;span class=&quot;synComment&quot;&gt;# rails g のヘルプ表示&lt;/span&gt;
$ rails g controller -h &lt;span class=&quot;synComment&quot;&gt;# rails g controller のヘルプ表示&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考サイト&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/maeharin/20130212/rails_generate&quot; target=&quot;_blank&quot;&gt;いつも忘れる「Railsのgenerateコマンド」の備忘録&lt;/a&gt;　とても分かりやすく実用的にまとめられています。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sat, 02 Aug 2014 12:04:55 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815729401318</guid>
          
            <category>Rails初級</category>
          
            <category>リファレンス</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsの開発でSublime Text 3を使うなら知っておきたい便利なコマンドとプラグイン</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140724/1406137504</link>
          <description>&lt;p&gt;軽量で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3&quot;&gt;プラグイン&lt;/a&gt;により拡張性に優れた&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Sublime&quot;&gt;Sublime&lt;/a&gt; Text 3（一応有料※1）について、「よく使う便利なコマンドや操作」や「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;で開発をするときの便利な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3&quot;&gt;プラグイン&lt;/a&gt;」について説明します。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※1 購入しなくても購入するか否かのダイアログでNoを押し続ければ購入しなくても機能制限がなく使える。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#sublime-commands&quot;&gt;Sublime Text 3 の便利コマンドや操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sublime-pluguins&quot;&gt;Sublime Text3 のRails用の有用なプラグイン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sublime-settings&quot;&gt;Sublime Text3 の設定&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;sublime-commands&quot;&gt;1. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Sublime&quot;&gt;Sublime&lt;/a&gt; Text 3 の便利コマンドや操作&lt;/h2&gt;タブ操作&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;新規タブを開く Command + n
タブを閉じる    Command + w
タブを左右に移動   Ctrl + Tab / Ctrl + Shift + Tab もしくは、Shift + Cmd + [ / Shift + Cmd + ]&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
レイアウトの変更&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;左サイドバーの表示/非表示 Cmd + k -&amp;gt; Cmd + b
シングルレイアウト Option + Cmd + 1
２カラムレイアウト Option + Cmd + 2
３カラムレイアウト Option + Cmd + 3&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
検索&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;ファイル内の検索 Cmd  + f
プロジェクト内の全てのファイル内を検索 Cmd + Shift + f

Goto Anything（プロジェクト内のファイルに移動。ファイル名は曖昧でも検索できる）
Cmd + P

コマンド検索
Cmd + Shift + P&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
編集&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;同時編集
Cmdを押しながら、複数箇所を同時に選択することで、編集が可能
選択済みで Cmd + d で同じ次の箇所を選択
選択済みで Cmd + Ctrl + G で同じすべての箇所を選択

コメントアウトをつける、はずす
Command + /

Soft Undo（選択やカーソル位置など戻る）
Cmd + U&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
コマンドパレットを開く&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Command + Shift + P

その後、set syntax と打ち、適切なsyntax(ruby, javascriptなど)を選択すれば、現在開いているファイルのプログラム言語を選択できる。

また、install packageと打ち、「Package Control: Install Package」を選択すれば、新しいパッケージをインストールするリストを開ける。&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
サイドバーに移動&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Ctrl + 0 ...サイドバーにカーソルが移動し、十字キーで移動できる。enterキーでメインウインドウにカーソルが戻る&lt;/pre&gt;&lt;p&gt;文字を大きくする&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Cmd + k =&amp;gt; u  ... カーソルの文字列が大文字になる。Constとかの時に便利かも。&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;sublime-pluguins&quot;&gt;2. 有用な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3&quot;&gt;プラグイン&lt;/a&gt;&lt;/h2&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3&quot;&gt;プラグイン&lt;/a&gt;の管理（インストール、アンインストールなど）&lt;/h4&gt;
    &lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3&quot;&gt;プラグイン&lt;/a&gt;の管理は&lt;code&gt;Package Control&lt;/code&gt;という&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3&quot;&gt;プラグイン&lt;/a&gt;を使います。&lt;br /&gt;
インストール方法は&lt;a href=&quot;https://sublime.wbond.net/installation&quot; target=&quot;_blank&quot;&gt;こちら&lt;/a&gt;を見てください。&lt;br /&gt;
英語ですが、要約すると、&lt;code&gt;View &gt; Show Console&lt;/code&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Sublime&quot;&gt;Sublime&lt;/a&gt; Text 3の下にコンソールを表示し、その中にリンク先の値をコピーしてEnterで実行するだけです。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;パッケージをインストール
Command + Shift + P =&amp;gt; install packageと入力し、「Package Control: Install Package」を選択 =&amp;gt; 追加したいパッケージを選択するとインストールされる

パッケージを削除
Command + Shift + P =&amp;gt; remove packageと入力し、「Package Control: Remove Package」を選択 =&amp;gt; 削除したいパッケージを選択するとアンインストールされる&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;有用な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3&quot;&gt;プラグイン&lt;/a&gt;&lt;/h4&gt;
    &lt;p&gt;上記のパッケージ管理を使い、パッケージを探し、インストールしてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&quot;Emmet&quot; =&gt; HTMLを簡易に記載できる（例えば、&lt;code&gt;ul&gt;li*3&lt;/code&gt;と記載し、&lt;code&gt;Tab&lt;/code&gt;を押すとHTMLをつくってくれる）&lt;/li&gt;
&lt;li&gt;&quot;GitGutter&quot; =&gt; gitを使っている場合、ソースの追加/変更/削除した列がわかる&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&quot;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails&quot;&gt;Ruby on Rails&lt;/a&gt; snippets&quot; =&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のハイライトと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%CB%A5%DA%A5%C3%A5%C8&quot;&gt;スニペット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&quot;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt; Slim&quot; =&gt; Slimのハイライトと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%CB%A5%DA%A5%C3%A5%C8&quot;&gt;スニペット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&quot;Better &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CoffeeScript&quot;&gt;CoffeeScript&lt;/a&gt;&quot; =&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CoffeeScript&quot;&gt;CoffeeScript&lt;/a&gt;のハイライトと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%CB%A5%DA%A5%C3%A5%C8&quot;&gt;スニペット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&quot;SCSS&quot;, &quot;SCSS Snippets&quot; =&gt; SCSSのハイライトと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%CB%A5%DA%A5%C3%A5%C8&quot;&gt;スニペット&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Linterは構文チェックを行う&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3&quot;&gt;プラグイン&lt;/a&gt;です。&lt;br /&gt;
構文が誤っている場合、左側の行数が記載されている横に赤丸が表示されるのでとても便利です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&quot;SublimeLinter&quot; =&gt; 他のLinter（Linter-xxx）を使うために必要な必須のもの&lt;/li&gt;
&lt;li&gt;&quot;SublimeLinter-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ruby&quot;&gt;ruby&lt;/a&gt;&quot; =&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;用のLinter&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;CTag - &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;のジャンプと戻る。コードリーディングを効率的にできる。インストール方法:&lt;a href=&quot;http://ntcncp.net/2012/12/21/sublime-useful-tips&quot;&gt;http://ntcncp.net/2012/12/21/sublime-useful-tips&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;sublime-settings&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Sublime&quot;&gt;Sublime&lt;/a&gt; Text3 の設定&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;color_scheme&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Packages/User/SublimeLinter/Monokai (SL).tmTheme&amp;quot;&lt;/span&gt;,
	&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ensure_newline_at_eof_on_save&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;,
	&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;font_size&amp;quot;&lt;/span&gt;: 12,
	&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;highlight_line&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;,
	&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ignored_packages&amp;quot;&lt;/span&gt;:
	&lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
		&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Vintage&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;,
	&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;tab_size&amp;quot;&lt;/span&gt;: 2,
	&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;translate_tabs_to_spaces&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;,
	&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;trim_trailing_white_space_on_save&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;,
	&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;wrap_width&amp;quot;&lt;/span&gt;: 120
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# sublime (subl . でSublimeTextを開けます)&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; PATH=&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/Applications/Sublime Text.app/Contents/SharedSupport/bin&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synPreProc&quot;&gt;$PATH&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 24 Jul 2014 02:45:04 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815728749273</guid>
          
            <category>ツール</category>
          
            <category>リファレンス</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsのルーティング</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140716/1405451238</link>
          <description>
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;有用な参考文献&lt;/h3&gt;
    &lt;p&gt;・基本的なルーティングが記載（Rails3 / 日本語）&lt;br /&gt;
&lt;a href=&quot;http://akkunchoi.github.io/rails3-routes.html&quot; target=&quot;_blank&quot;&gt;Rails3 routes.rb まとめ&lt;/a&gt;&lt;/p&gt;&lt;p&gt;・基本的なRailsのルーティング（英語）&lt;br /&gt;
&lt;a href=&quot;http://guides.rubyonrails.org/routing.html&quot; target=&quot;_blank&quot;&gt;Rails Guide Routing&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    &lt;p&gt;・ルーティングの確認コマンド&lt;br /&gt;
・xxx_path と xxx_urlの違い&lt;br /&gt;
・resourcesメソッドで追加されるRESTの基本７アクション&lt;br /&gt;
・名前付きルート(matchメソッド)&lt;br /&gt;
・memberメソッドとcollectionメソッド&lt;br /&gt;
・ルートの入れ子&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;ルーティングの確認コマンド&lt;/h4&gt;
    &lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ rake routes&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;xxx_path と xxx_urlの違い&lt;/h4&gt;
    &lt;p&gt;慣習として、&lt;br /&gt;
・xxx_path はリダイレクト以外の遷移時に使う&lt;br /&gt;
・xxx_url   はリダイレクト時に使う&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;resourcesメソッドで追加されるRESTの基本７アクション&lt;/h4&gt;
    &lt;p&gt;追加方法&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ vim config/routes.rb
  ...  
  resouces &lt;span class=&quot;synConstant&quot;&gt;:users&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;基本の７アクション&lt;table border&gt;
&lt;tr&gt;&lt;th&gt;HTTPリクエスト&lt;/th&gt;&lt;th&gt;URL&lt;/th&gt;&lt;th&gt;コントローラのアクション&lt;/th&gt;&lt;th&gt;用途&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GET&lt;/td&gt;&lt;td&gt;/users&lt;/td&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;すべてのユーザーを表示するページ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GET&lt;/td&gt;&lt;td&gt;/users/1&lt;/td&gt;&lt;td&gt;show&lt;/td&gt;&lt;td&gt;id=1のユーザーを表示するページ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GET&lt;/td&gt;&lt;td&gt;/users/new&lt;/td&gt;&lt;td&gt;new&lt;/td&gt;&lt;td&gt;ユーザーを新規作成するページ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;POST&lt;/td&gt;&lt;td&gt;/users&lt;/td&gt;&lt;td&gt;create&lt;td&gt;ユーザーを作成するアクション&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;
&lt;tr&gt;&lt;td&gt;GET&lt;/td&gt;&lt;td&gt;/users/1/edit&lt;/td&gt;&lt;td&gt;edit&lt;/td&gt;&lt;td&gt;id=1のユーザーを編集するページ&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;
&lt;tr&gt;&lt;td&gt;PATCH&lt;/td&gt;&lt;td&gt;/users/1&lt;/td&gt;&lt;td&gt;update&lt;/td&gt;&lt;td&gt;id=1のユーザーを更新するアクション&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;
&lt;tr&gt;&lt;td&gt;DELETE&lt;/td&gt;&lt;td&gt;/users/1&lt;/td&gt;&lt;td&gt;destroy&lt;/td&gt;&lt;td&gt;id=1のユーザーを削除するアクション&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;
&lt;/table&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;ルートパス(root_path)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ vim config/routes.rb
  ...
  root &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;static_pages#home&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;名前付きルート(matchメソッド)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;#  GET /help でアクセスしたときにapp/views/static_pages/help.html.erbが呼ばれる&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# また、&amp;quot;help_path&amp;quot; という名前付きルートが用意され、ControllerやViewで使える&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 例：&amp;lt;%= link_to &amp;quot;About&amp;quot;, about_path %&amp;gt;&lt;/span&gt;
  match &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/help&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;to&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;static_pages#help&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;via&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;memberメソッドとcollectionメソッド（基本の７アクションにルートを追加できる）&lt;/h4&gt;
    &lt;p&gt;memberメソッド ... ユーザidを含むURLにそのルートが応答できるようにするもの&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;resources &lt;span class=&quot;synConstant&quot;&gt;:users&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    member &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        get &lt;span class=&quot;synConstant&quot;&gt;:search&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:follow&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

=&amp;gt;
&lt;span class=&quot;synType&quot;&gt;Prefix&lt;/span&gt;          &lt;span class=&quot;synType&quot;&gt;HTTP&lt;/span&gt;リクエスト   &lt;span class=&quot;synType&quot;&gt;URL&lt;/span&gt;                    コントローラ&lt;span class=&quot;synComment&quot;&gt;#アクション&lt;/span&gt;
 follow_user    &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;/follow(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)   users&lt;span class=&quot;synComment&quot;&gt;#follow&lt;/span&gt;
 search_user   &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;/search(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)   users&lt;span class=&quot;synComment&quot;&gt;#search&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
collectionメソッド ... idを指定せずにすべてのメンバーを表示する&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;resouces &lt;span class=&quot;synConstant&quot;&gt;:users&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    collection &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        get &lt;span class=&quot;synConstant&quot;&gt;:search&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

=&amp;gt;
&lt;span class=&quot;synType&quot;&gt;Prefix&lt;/span&gt;          &lt;span class=&quot;synType&quot;&gt;HTTP&lt;/span&gt;リクエスト   &lt;span class=&quot;synType&quot;&gt;URL&lt;/span&gt;                  コントローラ&lt;span class=&quot;synComment&quot;&gt;#アクション&lt;/span&gt;
search_users   &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/se&lt;/span&gt;arch(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)     users&lt;span class=&quot;synComment&quot;&gt;#search&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
・ルートの入れ子&lt;br /&gt;
ユーザ（Userテーブル）がコメント（Commentテーブル）を持つ１対多関係（ has_many と belong_to関係）になる場合などに、route.rbにルートを入れ子で指定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ vim route.rb
resorces &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
	resource &lt;span class=&quot;synConstant&quot;&gt;:comment&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;ルート結果（$rake route）です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;            &lt;span class=&quot;synType&quot;&gt;Prefix&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Verb&lt;/span&gt;   &lt;span class=&quot;synType&quot;&gt;URI&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Pattern&lt;/span&gt;                               &lt;span class=&quot;synType&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#Action&lt;/span&gt;
user_comment_index &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;/comment(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)          comment&lt;span class=&quot;synComment&quot;&gt;#index&lt;/span&gt;
                   &lt;span class=&quot;synType&quot;&gt;POST&lt;/span&gt;   &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;/comment(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)          comment&lt;span class=&quot;synComment&quot;&gt;#create&lt;/span&gt;
  new_user_comment &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;/comment/new(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      comment&lt;span class=&quot;synComment&quot;&gt;#new&lt;/span&gt;
 edit_user_comment &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;/comment/&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;/edit(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;) comment&lt;span class=&quot;synComment&quot;&gt;#edit&lt;/span&gt;
      user_comment &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;/comment/&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      comment&lt;span class=&quot;synComment&quot;&gt;#show&lt;/span&gt;
                   &lt;span class=&quot;synType&quot;&gt;PATCH&lt;/span&gt;  &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;/comment/&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      comment&lt;span class=&quot;synComment&quot;&gt;#update&lt;/span&gt;
                   &lt;span class=&quot;synType&quot;&gt;PUT&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;/comment/&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      comment&lt;span class=&quot;synComment&quot;&gt;#update&lt;/span&gt;
                   &lt;span class=&quot;synType&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;/comment/&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      comment&lt;span class=&quot;synComment&quot;&gt;#destroy&lt;/span&gt;
        user_index &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;                           user#index&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;                   POST   &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/use&lt;/span&gt;r(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)                           user&lt;span class=&quot;synComment&quot;&gt;#create&lt;/span&gt;
          new_user &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/ne&lt;/span&gt;w(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)                       user&lt;span class=&quot;synComment&quot;&gt;#new&lt;/span&gt;
         edit_user &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;/edit(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)                  user&lt;span class=&quot;synComment&quot;&gt;#edit&lt;/span&gt;
              user &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)                       user&lt;span class=&quot;synComment&quot;&gt;#show&lt;/span&gt;
                   &lt;span class=&quot;synType&quot;&gt;PATCH&lt;/span&gt;  &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)                       user&lt;span class=&quot;synComment&quot;&gt;#update&lt;/span&gt;
                   &lt;span class=&quot;synType&quot;&gt;PUT&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)                       user&lt;span class=&quot;synComment&quot;&gt;#update&lt;/span&gt;
                   &lt;span class=&quot;synType&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)                       user&lt;span class=&quot;synComment&quot;&gt;#destroy&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;ちなみに、ビュー（View）のフォーム（form_for）での記載方法です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= form_for [&lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;@comment&lt;/span&gt;] &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;f&lt;/span&gt;| %&amp;gt;
    ...
&amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt; %&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 16 Jul 2014 04:07:18 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815728235988</guid>
          
            <category>Rails初級</category>
          
            <category>リファレンス</category>
          
        </item>
      
    
      
      
        <item>
          <title>rails new や rails serverなどrailsコマンドの使い方</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140713/1405251709</link>
          <description>&lt;p&gt;Railsプロジェクトを作成する&lt;code&gt;rails new&lt;/code&gt;、&lt;br /&gt;
Railsをローカルで動かす開発用サーバーを起動する&lt;code&gt;rails server&lt;/code&gt;、&lt;br /&gt;
Railsとインタラクティブに操作するコンソールを起動する&lt;code&gt;rails console&lt;/code&gt;、&lt;br /&gt;
DBに接続する&lt;code&gt;rails dbconsole&lt;/code&gt;、&lt;br /&gt;
Railsのコードを実行する&lt;code&gt;rails runnner&lt;/code&gt;&lt;br /&gt;
について説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-new&quot;&gt;rails new コマンド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-server&quot;&gt;rails server コマンド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-console&quot;&gt;rails console コマンド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-dbconsole&quot;&gt;rails dbconsole コマンド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-runner&quot;&gt;rails runner コマンド&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;br /&gt;
&lt;i&gt;すべてのコマンドは、&lt;code&gt;-h&lt;/code&gt;か&lt;code&gt;--help&lt;/code&gt;オプションでヘルプを表示することができます。&lt;br /&gt;
&lt;code&gt;rails new&lt;/code&gt;コマンド以外は、&lt;code&gt;rails new&lt;/code&gt;コマンドの結果として作成されたRailsプロジェクトフォルダ内で実行できます。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-new&quot;&gt;rails new コマンド&lt;/h3&gt;新しいRailsアプリケーションを作成するコマンドです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails new app_name
      create  
      create  &lt;span class=&quot;synType&quot;&gt;README&lt;/span&gt;.rdoc
      create  &lt;span class=&quot;synType&quot;&gt;Rakefile&lt;/span&gt;
      create  config.ru
      create  .gitignore
      create  &lt;span class=&quot;synType&quot;&gt;Gemfile&lt;/span&gt;
      create  app
      ....
      ....
         run  bundle install
&lt;span class=&quot;synType&quot;&gt;Fetching&lt;/span&gt; gem metadata from https&lt;span class=&quot;synConstant&quot;&gt;:/&lt;/span&gt;/rubygems.org/..........
&lt;span class=&quot;synType&quot;&gt;Resolving&lt;/span&gt; dependencies...
&lt;span class=&quot;synType&quot;&gt;Using&lt;/span&gt; rake &lt;span class=&quot;synConstant&quot;&gt;10.3&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Using&lt;/span&gt; i18n &lt;span class=&quot;synConstant&quot;&gt;0.6&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Using&lt;/span&gt; json &lt;span class=&quot;synConstant&quot;&gt;1.8&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
....
....
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;※作成されるフォルダの説明は、&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140709/1404912093&quot; target=&quot;_blank&quot;&gt;Railsのフォルダ構造の説明&lt;/a&gt;を参照して下さい。&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;よく使うオプション&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# testディレクトリを作成しない(テスティングフレームワークに&amp;quot;RSpec&amp;quot;などを使う場合)&lt;/span&gt;
$ rails new app_name --skip-test-unit
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails-server&quot;&gt;rails server コマンド&lt;i&gt;（ショートカットコマンド &lt;code&gt;rails s&lt;/code&gt;）&lt;/i&gt;&lt;/h3&gt;Ruby本体と一緒に配布されている簡易なWebサーバ&quot;WEBrick&quot;を起動させます。&lt;br /&gt;
ブラウザで開発中のRailsアプリケーションにアクセスする場合に使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails server
=&amp;gt; &lt;span class=&quot;synType&quot;&gt;Booting&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;WEBrick&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4.1&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt; application starting &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt; development on http&lt;span class=&quot;synConstant&quot;&gt;:/&lt;/span&gt;/&lt;span class=&quot;synConstant&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;0.0&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;3000&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synType&quot;&gt;Run&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails server -h&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; more startup options
=&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;Notice&lt;/span&gt;: server is listening on all interfaces (&lt;span class=&quot;synConstant&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;0.0&lt;/span&gt;). &lt;span class=&quot;synType&quot;&gt;Consider&lt;/span&gt; using &lt;span class=&quot;synConstant&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;0.1&lt;/span&gt; (--binding option)
=&amp;gt; &lt;span class=&quot;synType&quot;&gt;Ctrl&lt;/span&gt;-&lt;span class=&quot;synType&quot;&gt;C&lt;/span&gt; to shutdown server
[&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-08-&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;56&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;34&lt;/span&gt;] &lt;span class=&quot;synType&quot;&gt;INFO&lt;/span&gt;  &lt;span class=&quot;synType&quot;&gt;WEBrick&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;1.3&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-08-&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;56&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;34&lt;/span&gt;] &lt;span class=&quot;synType&quot;&gt;INFO&lt;/span&gt;  ruby &lt;span class=&quot;synConstant&quot;&gt;2.0&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; (&lt;span class=&quot;synConstant&quot;&gt;2013&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;06&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;27&lt;/span&gt;) [x86_64-darwin13.&lt;span class=&quot;synConstant&quot;&gt;2.0&lt;/span&gt;]
[&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-08-&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;56&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;34&lt;/span&gt;] &lt;span class=&quot;synType&quot;&gt;INFO&lt;/span&gt;  &lt;span class=&quot;synType&quot;&gt;WEBrick&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;HTTPServer&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#start: pid=63806 port=3000&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;よく使うオプション&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;server -e ... サーバを起動させる環境を指定する(デフォルトは&quot;development&quot;環境)&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 環境を追加していない場合は、&amp;quot;test&amp;quot;, &amp;quot;development&amp;quot;, &amp;quot;production&amp;quot;の中から選択します。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 2つの書き方があり、どちらもテスト環境でサーバを起動している&lt;/span&gt;
$ rails server -etest
$ rails server --environment=test
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;server -p ... ポート番号を指定する(デフォルトは&quot;3000&quot;)&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 2つの書き方があり、どちらもポート番号を&amp;quot;4000&amp;quot;でサーバを起動している&lt;/span&gt;
$ rails server -p4000
$ rails server --port=&lt;span class=&quot;synConstant&quot;&gt;4000&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;server -d ... デーモンとしてサーバを起動する&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 2つの書き方があります&lt;/span&gt;
$ rails server -d
$ rails server --daemon
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;rails-console&quot;&gt;rails console コマンド&lt;i&gt;（ショートカットコマンド &lt;code&gt;rails c&lt;/code&gt;）&lt;/i&gt;&lt;/h3&gt;Railsアプリケーションとコマンドラインでやりとりができます。&lt;br /&gt;
ブラウザを通さずにDBのデータを操作したり、思いついたメソッドが動くか簡単に試したりするときに使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails console
&lt;span class=&quot;synType&quot;&gt;Loading&lt;/span&gt; development environment (&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4.1&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;)
irb(main):&lt;span class=&quot;synConstant&quot;&gt;001&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&amp;gt; &lt;span class=&quot;synStatement&quot;&gt;exit&lt;/span&gt;
$
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;よく使うオプション&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;console -s ... コンソールをサンドボックスモードで起動する&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# exitでコンソールを終了したときに、データベースにした操作がロールバックされます。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 2つの書き方があり、どちらもテスト環境でコンソールを起動している&lt;/span&gt;
$ rails console -s
$ rails console --sandbox
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;console -e ... コンソールを起動させる環境を指定する。(デフォルトは&quot;development&quot;環境)&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 環境を追加していない場合は、&amp;quot;test&amp;quot;, &amp;quot;development&amp;quot;, &amp;quot;production&amp;quot;の中から選択します。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 2つの書き方があり、どちらもテスト環境でコンソールを起動している&lt;/span&gt;
$ rails console -etest
$ rails console --environment=test
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;rails-dbconsole&quot;&gt;rails dbconsole コマンド&lt;i&gt;（ショートカットコマンド &lt;code&gt;rails db&lt;/code&gt;）&lt;/i&gt;&lt;/h3&gt;データベースにコマンドラインとして接続します。&lt;br /&gt;
サポートしているデータベースは、MySQL、PostgreSQL、SQLiteとSQLite3です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails db
&lt;span class=&quot;synType&quot;&gt;SQLite&lt;/span&gt; version &lt;span class=&quot;synConstant&quot;&gt;3.7&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;2012&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;46&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Enter&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;.help&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; instructions
&lt;span class=&quot;synType&quot;&gt;Enter&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;SQL&lt;/span&gt; statements terminated with a &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
sqlite&amp;gt; .q
$
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;rails-runner&quot;&gt;rails runner コマンド&lt;/h3&gt;Railsのコンテキスト内でRubyコードを実行します。&lt;br /&gt;
&lt;i&gt;ショートカットコマンドは、&lt;code&gt;rails r&lt;/code&gt;&lt;/i&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails runner &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;puts Rails.env&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# development&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    &lt;p&gt;&lt;a href=&quot;http://guides.rubyonrails.org/command_line.html&quot; target=&quot;_blank&quot;&gt;Rails Guides - Commnad Line&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Sun, 13 Jul 2014 20:41:49 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815728055110</guid>
          
            <category>Rails初級</category>
          
            <category>リファレンス</category>
          
        </item>
      
    
  </channel>
</rss>
