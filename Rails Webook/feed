<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja">
  <title>Rails Webook</title>
  
  <subtitle>自社のECを開発している会社で働いています。Rails情報やサービスを成長させる方法を書いていきます</subtitle>
  
  <link href="http://ruby-rails.hatenadiary.com/"/>
  <updated>2015-12-18T02:44:31+09:00</updated>
  <author>
    <name>nipe880324</name>
  </author>
  <generator uri="http://blog.hatena.ne.jp/" version="228df9a6e5a3ae04fdb53d33befa3556">Hatena::Blog</generator>
  <id>hatenablog://blog/12921228815727789780</id>

  
    
    
    <entry>
        <title>Railsにgulpを統合させる</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20151218/1450374260"/>
        <id>hatenablog://entry/6653586347148953100</id>
        <published>2015-12-18T02:44:20+09:00</published>
        <updated>2016-02-23T01:00:08+09:00</updated>
        <summary type="html">Railsでgulpを使ってアセットファイルの管理する環境を構築します。gulpでsass/scssのコンパイル、ES6のコンパイル(babel, webpack)、gulpの便利プラグイン(変更監視、画面リロード、通知)、ミニファイ、ダイジェスト付与をできるようにします。そして、gulpで作成されたcssやjsのアセットファイルをRailsからロードできるようにします。
</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151218/20151218024113.png&quot; alt=&quot;f:id:nipe880324:20151218024113p:plain:w420&quot; title=&quot;f:id:nipe880324:20151218024113p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でgulpを使ってアセットファイルの管理できる環境を構築します。&lt;br /&gt;
gulpはアセットを管理する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB&quot;&gt;ツール&lt;/a&gt;で、js、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/css&quot;&gt;css&lt;/a&gt;、imagesなどのアセットファイルをビルドして、それを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;から参照する流れです。&lt;br /&gt;
また、gemにバンドルされているアセットファイルもあるので、Sprockets(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のアセット管理のgem)は有効にしておきます。有効にしておきますが極力使いません。&lt;/p&gt;&lt;p&gt;gulpでsass/scssの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;、ES6の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;(babel, webpack)、gulpの便利&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3&quot;&gt;プラグイン&lt;/a&gt;(変更監視、画面リロード、通知)、ミニファイ、ダイジェスト付与をできるようにします。&lt;br /&gt;
そして、gulpで作成された&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/css&quot;&gt;css&lt;/a&gt;やjsのアセットファイルを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;からロードできるようにします。&lt;/p&gt;&lt;p&gt;参考にソースファイルを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GitHub&quot;&gt;GitHub&lt;/a&gt;に上げたあります。&lt;br /&gt;
&lt;a href=&quot;https://github.com/nipe0324/rails_with_gulp&quot;&gt;https://github.com/nipe0324/rails_with_gulp&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails_with_gulp-rails-new&quot;&gt;railsの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails_with_gulp-install-gulp&quot;&gt;gulpのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails_with_gulp-compile-sass-scss&quot;&gt;sass/scssのコンパイル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails_with_gulp-compile-es6&quot;&gt;ES6のコンパイル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails_with_gulp-watch-reload-notify&quot;&gt;変更監視、画面リロード、通知&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails_with_gulp-integration-with-rails&quot;&gt;Railsと統合&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認バージョン&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt; 2.2.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;gulp 3.9.0&lt;/li&gt;
&lt;li&gt;webpack 1.12.9&lt;/li&gt;
&lt;li&gt;babel 6.3.13&lt;/li&gt;
&lt;li&gt;その他のnpmライブラリは&lt;code&gt;package.json&lt;/code&gt;を見てください&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails_with_gulp-rails-new&quot;&gt;1. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt;の作成&lt;/h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;プロジェクトを作成します。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;プロジェクトの作成&lt;/h4&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new rails_with_gulp&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;.gitignore&lt;/code&gt;の一番下に&lt;code&gt;node_modules&lt;/code&gt;を追加しておきます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;// .gitignore
..

+ # npm packages
+ node_modules

+ # ignore public/assets for compiled assets by gulp
+ /public/assets&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ジェネレーターで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/javascript&quot;&gt;javascript&lt;/a&gt;や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/css&quot;&gt;css&lt;/a&gt;を作成されないようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;# config/application.rb&lt;/span&gt;
  ...

  &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;RailsWithGulp&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt;
      ...

      &lt;span class=&quot;synComment&quot;&gt;# Do not swallow errors in after_commit/after_rollback callbacks.&lt;/span&gt;
      config.active_record.raise_in_transactional_callbacks = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

+     &lt;span class=&quot;synComment&quot;&gt;# Do not generate asset files&lt;/span&gt;
+     config.generators &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;g&lt;/span&gt;|
+       g.assets &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
+     &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;application.js&lt;/code&gt;と&lt;code&gt;application.css&lt;/code&gt;は極力使わないようにするので、記述を削除します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;# app/assets/javascripts/application.js

  &lt;span class=&quot;synComment&quot;&gt;//&lt;/span&gt;
- &lt;span class=&quot;synComment&quot;&gt;//= require jquery&lt;/span&gt;
- &lt;span class=&quot;synComment&quot;&gt;//= require jquery_ujs&lt;/span&gt;
- &lt;span class=&quot;synComment&quot;&gt;//= require turbolinks&lt;/span&gt;
- &lt;span class=&quot;synComment&quot;&gt;//= require_tree .&lt;/span&gt;


# app/assets/stylesheets/application.js
   *
-  *= require_tree .
-  *= require_self
   */
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
確認用にTopコントローラーを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g controller Top index&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;top#index&lt;/code&gt;をルートに設定しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.routes.draw &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
*   root &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;top#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
    ...
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails_with_gulp-install-gulp&quot;&gt;2. gulpのインストール&lt;/h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;にgulpをインストールしていきます。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;package.&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/json&quot;&gt;json&lt;/a&gt;の作成&lt;/h4&gt;まず、gulpも含めた&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Javascript&quot;&gt;Javascript&lt;/a&gt;のライブラリを&lt;code&gt;npm&lt;/code&gt;を使って管理するため&lt;code&gt;package.json&lt;/code&gt;を作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;npm init -y&lt;/pre&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;
&lt;code&gt;-y&lt;/code&gt;は&lt;code&gt;package.json&lt;/code&gt;を作るときの質問ですべてyesを選択するオプションです。&lt;br /&gt;
&lt;code&gt;npm&lt;/code&gt;はNode Package Managerの略で、最近はJSのライブラリを管理するために使われています。&lt;br /&gt;
&lt;code&gt;npm&lt;/code&gt;は&lt;code&gt;Node.js&lt;/code&gt;をインストールすると一緒にインストールされます。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;作成された&lt;code&gt;package.json&lt;/code&gt;は次のとおりです。&lt;br /&gt;
プロジェクトの基本的な情報が記載されています。ここに依存するライブラリも後ほど追加していきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// package.json&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;rails_with_gulp&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;index.js&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;directories&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;echo &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Error: no test specified&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &amp;amp;&amp;amp; exit 1&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;repository&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;git&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;git+https://github.com/nipe0324/rails_with_gulp.git&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[]&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;license&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ISC&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;bugs&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;https://github.com/nipe0324/rails_with_gulp/issues&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;homepage&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;https://github.com/nipe0324/rails_with_gulp#readme&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;gulpのインストール&lt;/h4&gt;gulpをグローバル(&lt;code&gt;-g&lt;/code&gt;オプション)とプロジェクト(&lt;code&gt;--save-dev&lt;/code&gt;オプション)にインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;npm install -g gulp
npm install --save-dev gulp&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;gulpfile.jsの作成&lt;/h4&gt;gulpのエントリポイントは&lt;code&gt;gulpfile.js&lt;/code&gt;となりますので作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulpfile.js&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; requireDir = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;require-dir&#39;&lt;/span&gt;);
+ requireDir(&lt;span class=&quot;synConstant&quot;&gt;&#39;./gulp/tasks&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; recurse: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;); &lt;span class=&quot;synComment&quot;&gt;// recurse: true はサブディレクトリもrequireする&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/require-dir&quot;&gt;require-dir&lt;/a&gt;は指定したディレクトリをrequireできるので、一気に多くのファイルをrequireしたい時に便利です。&lt;br /&gt;
&lt;code&gt;gulpfile.js&lt;/code&gt;に直接gulpのタスクを記載してもよいですが、タスクが増えた場合に見づらくなるので、&lt;code&gt;gulp/tasks&lt;/code&gt;配下にタスクごとにファイルを作成し、&lt;code&gt;require-dir&lt;/code&gt;ですべてのタスクファイルを読み込むようにします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;mkdir -p gulp/tasks&lt;/pre&gt;&lt;p&gt;&lt;code&gt;require-dir&lt;/code&gt;をインストールしていないので、&lt;code&gt;npm install&lt;/code&gt;コマンドでインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;npm install --save-dev require-dir&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;コンフィグファイルの作成&lt;/h4&gt;&lt;code&gt;config.js&lt;/code&gt;を作成し、設定値をここにまとめます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/tasks/config.js&lt;/span&gt;

+ &lt;span class=&quot;synComment&quot;&gt;// gulpのアセットファイルを配置する場所&lt;/span&gt;
+ gulpAssets   = &lt;span class=&quot;synConstant&quot;&gt;&#39;gulp/assets&#39;&lt;/span&gt;;
+ &lt;span class=&quot;synComment&quot;&gt;// publicのアセットファイルを配置する場所&lt;/span&gt;
+ publicAssets = &lt;span class=&quot;synConstant&quot;&gt;&#39;public/assets&#39;&lt;/span&gt;;
+
+ module.exports = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   gulpAssets:   gulpAssets,
+   publicAssets: publicAssets,
+
+   javascript: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     src:  gulpAssets   + &lt;span class=&quot;synConstant&quot;&gt;&#39;/javascripts/**/*&#39;&lt;/span&gt;,
+     dest: publicAssets + &lt;span class=&quot;synConstant&quot;&gt;&#39;/javascripts&#39;&lt;/span&gt;
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
+   stylesheet: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     srcSass:  gulpAssets   + &lt;span class=&quot;synConstant&quot;&gt;&#39;/stylesheets/**/*.sass&#39;&lt;/span&gt;,
+     srcScss:  gulpAssets   + &lt;span class=&quot;synConstant&quot;&gt;&#39;/stylesheets/**/*.scss&#39;&lt;/span&gt;,
+     dest: publicAssets + &lt;span class=&quot;synConstant&quot;&gt;&#39;/stylesheets&#39;&lt;/span&gt;
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
+   watch: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     javascript:     gulpAssets + &lt;span class=&quot;synConstant&quot;&gt;&#39;/javascripts/**/*&#39;&lt;/span&gt;,
+     stylesheetSass: gulpAssets + &lt;span class=&quot;synConstant&quot;&gt;&#39;/stylesheets/**/*.sass&#39;&lt;/span&gt;,
+     stylesheetScss: gulpAssets + &lt;span class=&quot;synConstant&quot;&gt;&#39;/stylesheets/**/*.scss&#39;&lt;/span&gt;,
+     browserSync: &lt;span class=&quot;synConstant&quot;&gt;&#39;public/**/*&#39;&lt;/span&gt;
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
+   browserSync: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     proxy: &lt;span class=&quot;synConstant&quot;&gt;&#39;localhost:3000&#39;&lt;/span&gt;
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
+   rev: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     dest: publicAssets + &lt;span class=&quot;synConstant&quot;&gt;&#39;/rev-manifest.json&#39;&lt;/span&gt;,
+     opts: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+       base:  process.cwd() + &lt;span class=&quot;synConstant&quot;&gt;&#39;/&#39;&lt;/span&gt; + publicAssets,
+       merge: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
+     &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;gulpのタスクを作成&lt;/h4&gt;まずは、&lt;code&gt;public/assets&lt;/code&gt;ディレクトリを削除する&lt;code&gt;clean&lt;/code&gt;タスクを作成します。&lt;br /&gt;
&lt;a href=&quot;https://www.npmjs.com/package/del&quot;&gt;del&lt;/a&gt;を使うことで、フォルダやファイルを削除できます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;npm install --save-dev del&lt;/pre&gt;&lt;p&gt;&lt;code&gt;clean.js&lt;/code&gt;ファイルを作成し、&lt;code&gt;del&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3&quot;&gt;プラグイン&lt;/a&gt;を使用してファイルを削除します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/tasks/clean.js&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./config&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; gulp = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; del  = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;del&#39;&lt;/span&gt;);
+
+ gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;clean&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; del(config.publicAssets);
+ &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;gulpのタスクを作成するには、&lt;code&gt;gulp.task(&#39;&lt;タスク名&gt;&#39;, function() { &lt;タスクの処理&gt; })&lt;/code&gt;の形式で作成します。&lt;/p&gt;&lt;p&gt;では、&lt;code&gt;gulp clean&lt;/code&gt;コマンドを実行し、&lt;code&gt;clean&lt;/code&gt;タスクを実行し、&lt;code&gt;public/assets&lt;/code&gt;を削除します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ mkdir public/assets

$ gulp clean
[02:04:34] Using gulpfile ~/rails_with_gulp/gulpfile.js
[02:04:34] Starting &amp;#39;clean&amp;#39;...
[02:04:34] Finished &amp;#39;clean&amp;#39; after 5.24 ms

$ ls public/assets
ls: public/assets: No such file or directory&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;デフォルトタスクの作成&lt;/h4&gt;&lt;code&gt;default.js&lt;/code&gt;を作成し、&lt;code&gt;default&lt;/code&gt;タスクを登録します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/tasks/default.js&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; gulp = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);
+
+ gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;default&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;clean&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;gulp&lt;/code&gt;コマンドを実行すると&lt;code&gt;default&lt;/code&gt;タスクが実行されます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ gulp
[02:06:28] Using gulpfile ~/rails_with_gulp/gulpfile.js
[02:06:28] Starting &amp;#39;clean&amp;#39;...
[02:06:28] Finished &amp;#39;clean&amp;#39; after 4.48 ms
[02:06:28] Starting &amp;#39;default&amp;#39;...
[02:06:28] Finished &amp;#39;default&amp;#39; after 12 μs&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails_with_gulp-compile-sass-scss&quot;&gt;3. sass/scssの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;&lt;/h3&gt;gulpで&lt;code&gt;sass&lt;/code&gt;と&lt;code&gt;scss&lt;/code&gt;を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;できるようにします。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;Sassの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;&lt;/h4&gt;まず、&lt;code&gt;gulp-sass&lt;/code&gt;をインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;npm install --save-dev gulp-sass&lt;/pre&gt;&lt;p&gt;sassとscssを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;するタスクの&lt;code&gt;compile-sass&lt;/code&gt;と&lt;code&gt;compile-scss&lt;/code&gt;を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/tasks/sass_scss.js&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./config&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; gulp = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; sass = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-sass&#39;&lt;/span&gt;);
+
+ gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-sass&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; gulp.src(config.stylesheet.srcSass)
+       .pipe(sass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; indentedSyntax: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, errLogToConsole: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
+       .pipe(gulp.dest(config.stylesheet.dest));
+ &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
+
+ gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-scss&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; gulp.src(config.stylesheet.srcScss)
+       .pipe(sass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; indentedSyntax: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, errLogToConsole: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
+       .pipe(gulp.dest(config.stylesheet.dest));
+ &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;src&lt;/code&gt;でインプットとなるファイルを指定し、&lt;code&gt;sass&lt;/code&gt;でsass/scssファイルを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;し、&lt;code&gt;dest&lt;/code&gt;で出力先を指定しています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;デフォルトのタスクを修正します。&lt;br /&gt;
cleanタスクでディレクトリを削除してから、sass/scssの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;を処理したいので&lt;a href=&quot;https://www.npmjs.com/package/run-sequence&quot;&gt;run-sequence&lt;/a&gt;を使います。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;npm install --save-dev run-sequence&lt;/pre&gt;&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;// gulp/tasks/default.js&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; gulp = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; runSequence = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;run-sequence&#39;&lt;/span&gt;);

* gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;default&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   runSequence(
+     &lt;span class=&quot;synConstant&quot;&gt;&#39;clean&#39;&lt;/span&gt;, &lt;span class=&quot;synComment&quot;&gt;// まずcleanタスクを実行&lt;/span&gt;
+     &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-sass&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;compile-scss&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// 次に並列でコンパイル&lt;/span&gt;
+   );
* &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%BF%A5%A4%A5%EB%A5%B7%A1%BC%A5%C8&quot;&gt;スタイルシート&lt;/a&gt;を配置する&lt;code&gt;gulp/assets/stylesheets&lt;/code&gt;ディレクトリを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;mkdir -p gulp/assets/stylesheets&lt;/pre&gt;&lt;p&gt;そして、&lt;code&gt;application.scss&lt;/code&gt;を作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;// gulp/assets/stylesheets/application.scss
+ body {
+   background-color: gray;
+
+   h1 {
+     color: white;
+   }
+ }&lt;/pre&gt;&lt;p&gt;&lt;code&gt;gulp&lt;/code&gt;コマンドでscssを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;してみます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;gulp&lt;/pre&gt;&lt;p&gt;&lt;code&gt;public/stylesheets/application.css&lt;/code&gt;というファイルが作成されます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;body {
  background-color: blue; }
  body h1 {
    color: white; }&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ファイル名を変更&lt;/h4&gt;ビルドで作られたファイルには、&lt;code&gt;.bundle&lt;/code&gt;をつけるようにして、ビルドされたかどうかわかりやすくしたいと思います。&lt;br /&gt;
&lt;a href=&quot;https://www.npmjs.com/package/gulp-rename&quot;&gt;gulp-rename&lt;/a&gt;でファイル名を変更するようにします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;npm install --save-dev gulp-rename&lt;/pre&gt;&lt;p&gt;&lt;code&gt;rename&lt;/code&gt;でファイル名を変更できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/tasks/sass_scss.js&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./config&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; gulp = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; sass = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-sass&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; rename = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-rename&#39;&lt;/span&gt;);

  gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-sass&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; gulp.src(config.stylesheet.srcSass)
        .pipe(sass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; indentedSyntax: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, errLogToConsole: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
+       .pipe(rename(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; suffix: &lt;span class=&quot;synConstant&quot;&gt;&#39;.bundle&#39;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
        .pipe(gulp.dest(config.stylesheet.dest));
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

  gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-scss&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; gulp.src(config.stylesheet.srcScss)
        .pipe(sass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; indentedSyntax: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, errLogToConsole: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
+       .pipe(rename(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; suffix: &lt;span class=&quot;synConstant&quot;&gt;&#39;.bundle&#39;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
        .pipe(gulp.dest(config.stylesheet.dest));
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ファイル名にダイジェストを追加&lt;/h4&gt;&lt;code&gt;unicorn.css =&gt; unicorn-d41d8cd98f.css&lt;/code&gt;のようにファイル名にダイジェストを追加します。&lt;br /&gt;
&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev&quot;&gt;gulp-rev&lt;/a&gt;を使って、ダイジェストをつけれます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;npm install --save-dev gulp-rev&lt;/pre&gt;&lt;p&gt;&lt;code&gt;rev()&lt;/code&gt;でファイル名にダイジェストを追加し、&lt;code&gt;rev.manifest(&lt;ファイル名&gt;)&lt;/code&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%CB%A5%D5%A5%A7%A5%B9%A5%C8&quot;&gt;マニフェスト&lt;/a&gt;ファイルを作成し、&lt;code&gt;gulp.dest&lt;/code&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%CB%A5%D5%A5%A7%A5%B9%A5%C8&quot;&gt;マニフェスト&lt;/a&gt;ファイルの配置先を指定しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/tasks/sass_scss.js&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./config&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; gulp = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; sass = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-sass&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; rename = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-rename&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; rev  = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-rev&#39;&lt;/span&gt;);

  gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-sass&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; gulp.src(config.stylesheet.srcSass)
        .pipe(sass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; indentedSyntax: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, errLogToConsole: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
        .pipe(rename(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; suffix: &lt;span class=&quot;synConstant&quot;&gt;&#39;.bundle&#39;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
+       .pipe(rev())
*       .pipe(gulp.dest(config.stylesheet.dest))
+       .pipe(rev.manifest(config.rev.dest, config.rev.opts))
+       .pipe(gulp.dest(config.publicAssets))
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

  gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-scss&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; gulp.src(config.stylesheet.srcScss)
        .pipe(sass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; indentedSyntax: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, errLogToConsole: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
        .pipe(rename(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; suffix: &lt;span class=&quot;synConstant&quot;&gt;&#39;.bundle&#39;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
+       .pipe(rev())
*       .pipe(gulp.dest(config.stylesheet.dest))
+       .pipe(rev.manifest(config.rev.dest, config.rev.opts))
+       .pipe(gulp.dest(config.publicAssets))
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;gulp&lt;/code&gt;でsass/scssをビルドすると、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;形式で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%CB%A5%D5%A5%A7%A5%B9%A5%C8&quot;&gt;マニフェスト&lt;/a&gt;ファイルが作成されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// public/assets/rev-manifest.json&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;application.bundle.css&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;application-b4f27b6d0b.bundle.css&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/css&quot;&gt;css&lt;/a&gt;ファイルのminify(ミニファイ）&lt;/h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/css&quot;&gt;css&lt;/a&gt;ファイルのファイルサイズを小さくすることでパフォーマンスが少し向上します。&lt;br /&gt;
&lt;a href=&quot;https://www.npmjs.com/package/gulp-minify-css&quot;&gt;gulp-minify-css&lt;/a&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;をミニファイします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;npm install --save-dev gulp-minify-css&lt;/pre&gt;&lt;p&gt;&lt;code&gt;minifyCss&lt;/code&gt;でミニファイできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/tasks/sass_scss.js&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./config&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; gulp = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; sass = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-sass&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; rename = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-rename&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; rev  = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-rev&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; minifyCss = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-minify-css&#39;&lt;/span&gt;);

  gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-sass&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; gulp.src(config.stylesheet.srcSass)
        .pipe(sass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; indentedSyntax: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, errLogToConsole: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
+       .pipe(minifyCss())
        .pipe(rename(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; suffix: &lt;span class=&quot;synConstant&quot;&gt;&#39;.bundle&#39;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
        .pipe(rev())
        .pipe(gulp.dest(config.stylesheet.dest))
        .pipe(rev.manifest(config.rev.dest, config.rev.opts))
        .pipe(gulp.dest(config.publicAssets))
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

  gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-scss&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; gulp.src(config.stylesheet.srcScss)
        .pipe(sass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; indentedSyntax: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, errLogToConsole: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
+       .pipe(minifyCss())
        .pipe(rename(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; suffix: &lt;span class=&quot;synConstant&quot;&gt;&#39;.bundle&#39;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
        .pipe(rev())
        .pipe(gulp.dest(config.stylesheet.dest))
        .pipe(rev.manifest(config.rev.dest, config.rev.opts))
        .pipe(gulp.dest(config.publicAssets))
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;gulp&lt;/code&gt;コマンドで作成された&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/css&quot;&gt;css&lt;/a&gt;ファイルを見ると、&lt;br /&gt;
次のように、スペースが削除されている（ミニファイ）ことがわかります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;// public/assets/stylesheets/application-742938ec8.bundle.css
body{background-color:gray}body h1{color:red}&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails_with_gulp-compile-es6&quot;&gt;4. ES6の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;&lt;/h3&gt;babelを使ってES6を使えるようにします。また、webpackを使うことで、jsファイル群の依存関係を管理するようにします。&lt;br /&gt;
&lt;i&gt;※babelはES6をES5に変換する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB&quot;&gt;ツール&lt;/a&gt;（トランスパイラ）です。トランスパイルすることで、ES6がまだ実装されていない段階でもES6の文法でjsファイルを記載でき、ES6のメリットを享受できます&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;h4&gt;webpackで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;&lt;/h4&gt;&lt;code&gt;webpack&lt;/code&gt;はモジュールバンドラで、js、jade、coffee、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/css&quot;&gt;css&lt;/a&gt;など&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のファイルの依存関係を記載することで、&lt;code&gt;webpack&lt;/code&gt;がいいかんじにまとめてくれるのでそれぞれのモジュールの独立性を保つことができます。&lt;br /&gt;
今回は、主に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のjsを必要に応じてまとめあげるために利用します。&lt;/p&gt;&lt;p&gt;&lt;code&gt;gulp-webpack&lt;/code&gt;をインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;npm install --save-dev gulp-webpack&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
webpackタスクを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/tasks/webpack.js&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config        = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./config&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; gulp          = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; webpack       = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-webpack&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; webpackConfig = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./webpack.config.js&#39;&lt;/span&gt;);
+
+ gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;webpack&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; gulp.src(config.javascript.src)
+       .pipe(webpack(webpackConfig))
+       .pipe(gulp.dest(webpackConfig.output.publicPath))
+ &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;webpack(webpackConfig)&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で、&lt;code&gt;webpackConfig&lt;/code&gt;の設定に従って、ビルドされます。&lt;/p&gt;&lt;p&gt;webpack.config.jsを作成します。&lt;br /&gt;
webpackの設定ファイルは、&lt;code&gt;webpack.config.js&lt;/code&gt;とし、webpackのビルドの設定を記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/taks/webpack.config.js&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./config&#39;&lt;/span&gt;);
+
+ module.exports = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   &lt;span class=&quot;synComment&quot;&gt;// エントリファイルを記載(複数記載できます)&lt;/span&gt;
+   entry: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     application: &lt;span class=&quot;synConstant&quot;&gt;&#39;./&#39;&lt;/span&gt; + config.gulpAssets + &lt;span class=&quot;synConstant&quot;&gt;&#39;/javascripts/application&#39;&lt;/span&gt;
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
+   &lt;span class=&quot;synComment&quot;&gt;// 出力先を記載。filenameで作成されたファイルを指定&lt;/span&gt;
+   output: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     filename:   &lt;span class=&quot;synConstant&quot;&gt;&#39;[name].bundle.js&#39;&lt;/span&gt;,
+     publicPath: config.javascript.dest
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
+   &lt;span class=&quot;synComment&quot;&gt;// 対照するファイル(extension: 拡張子を指定)&lt;/span&gt;
+   resolve: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     extensions: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;.js&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;.jsx&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;
&lt;/pre&gt;&lt;p&gt;webpackのconfigのドキュメント: &lt;a href=&quot;https://webpack.github.io/docs/configuration.html&quot;&gt;configuration&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;defaultタスクに&lt;code&gt;webpack&lt;/code&gt;タスクを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;// gulp/tasks/default.js&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; gulp = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; runSequence = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;run-sequence&#39;&lt;/span&gt;);

  gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;default&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    runSequence(
      &lt;span class=&quot;synConstant&quot;&gt;&#39;clean&#39;&lt;/span&gt;,
*     &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-sass&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;compile-scss&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;,
+     &lt;span class=&quot;synConstant&quot;&gt;&#39;webpack&#39;&lt;/span&gt;
    );
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/jQuery&quot;&gt;jQuery&lt;/a&gt;をインストールしてみます&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;npm install --save jquery&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、作成したjsファイルから&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/jQuery&quot;&gt;jQuery&lt;/a&gt;を呼び込み利用してみます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/assets/javascripts/application.js&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; $ = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;jquery&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synStatement&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&#39;jQuery version:&#39;&lt;/span&gt; + $.fn.jquery);
&lt;/pre&gt;&lt;p&gt;npmでインストールしたパッケージを&lt;code&gt;require(&#39;&lt;パッケージ&gt;&#39;)&lt;/code&gt;でインポートできるようになります。&lt;/p&gt;&lt;p&gt;では、&lt;code&gt;gulp&lt;/code&gt;コマンドでビルドすると、webpackで&lt;code&gt;application.bundle.js&lt;/code&gt;が作成されたのがわかると思います。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ gulp
[11:09:02] Using gulpfile ~/GDrive/rails/rails_with_gulp/gulpfile.js
[11:09:02] Starting &amp;#39;default&amp;#39;...
...
[11:09:02] Starting &amp;#39;webpack&amp;#39;...
[11:09:02] Finished &amp;#39;webpack&amp;#39; after 219 ms
[11:09:02] Finished &amp;#39;default&amp;#39; after 244 ms
[11:09:03] Version: webpack 1.12.9
                Asset    Size  Chunks             Chunk Names
application.bundle.js  257 kB       0  [emitted]  application&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;babelでES6を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;&lt;/h4&gt;&lt;code&gt;babel&lt;/code&gt;をインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;npm install --save-dev babel babel-core babel-cli babel-loader babel-preset-es2015&lt;/pre&gt;&lt;p&gt;&lt;code&gt;webpack.config.js&lt;/code&gt;に&lt;code&gt;babel&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;// gulp/tasks/webpack.config.js&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./config&#39;&lt;/span&gt;);

  module.exports = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// エントリファイルを記載(複数記載できます)&lt;/span&gt;
    entry: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      application: &lt;span class=&quot;synConstant&quot;&gt;&#39;./&#39;&lt;/span&gt; + config.gulpAssets + &lt;span class=&quot;synConstant&quot;&gt;&#39;/javascripts/application&#39;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;synComment&quot;&gt;// 出力先を記載。filenameで作成されたファイルを指定&lt;/span&gt;
    output: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      filename:   &lt;span class=&quot;synConstant&quot;&gt;&#39;[name].bundle.js&#39;&lt;/span&gt;,
      publicPath: config.javascript.dest
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;synComment&quot;&gt;// 対照するファイル(extension: 拡張子を指定)&lt;/span&gt;
    resolve: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      extensions: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;.js&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;.jsx&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
*   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
+   &lt;span class=&quot;synComment&quot;&gt;// baelをloaderとすることでes6をjsに変換できます&lt;/span&gt;
+   &lt;span class=&quot;synComment&quot;&gt;// 他loaderによりcoffeeなどのファイルをjsに変換できます&lt;/span&gt;
+   module: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     loaders: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
+       &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; test: &lt;span class=&quot;synConstant&quot;&gt;/\.js?$/&lt;/span&gt;, loader: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;babel?presets[]=es2015&amp;quot;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+     &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
jsファイルをES6の記法で書きなおしてみます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/assets/javascripts/application.js&lt;/span&gt;
* &lt;span class=&quot;synStatement&quot;&gt;import&lt;/span&gt; $ from &lt;span class=&quot;synConstant&quot;&gt;&#39;jquery&#39;&lt;/span&gt;;
  &lt;span class=&quot;synStatement&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&#39;jQuery version:&#39;&lt;/span&gt; + $.fn.jquery);

+ &lt;span class=&quot;synStatement&quot;&gt;class&lt;/span&gt; Hoge &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   constructor() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     &lt;span class=&quot;synIdentifier&quot;&gt;let&lt;/span&gt; a = 1;
+     console.log(`Hello es6. a is $&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;a&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;`);
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+
+ &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Hoge();
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;gulp&lt;/code&gt;でビルドしなおしても、問題なくbableでES6がトランスパイルされます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;ダイジェストを追加&lt;/h4&gt;sass/scssと同様に、jsファイル名にもダイジェストを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/webpack.js&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config        = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./config&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; gulp          = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; webpack       = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-webpack&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; webpackConfig = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./webpack.config.js&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; rev           = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-rev&#39;&lt;/span&gt;);

  gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;webpack&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; gulp.src(config.javascript.src)
        .pipe(webpack(webpackConfig))
+       .pipe(rev()) &lt;span class=&quot;synComment&quot;&gt;// ダイジェストをファイル名につける&lt;/span&gt;
        .pipe(gulp.dest(webpackConfig.output.publicPath)) &lt;span class=&quot;synComment&quot;&gt;// jsファイルの出力先&lt;/span&gt;
+       .pipe(rev.manifest(config.rev.dest, config.rev.opts)) &lt;span class=&quot;synComment&quot;&gt;// manifestファイルの設定&lt;/span&gt;
+       .pipe(gulp.dest(config.publicAssets)); &lt;span class=&quot;synComment&quot;&gt;// manifestファイルの出力先&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
rev.manifestの引数で適切にパスやオプションを指定しているので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/css&quot;&gt;css&lt;/a&gt;とjsのダイジェスト値が次のようにマージされています。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// public/assets/rev-manifest.json&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;application.bundle.css&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;application-d621e173c7.bundle.css&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;application.bundle.js&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;application-c87f2216e1.bundle.js&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;JSファイルをミニファイ&lt;/h4&gt;JSファイルのミニファイには、&lt;a href=&quot;https://www.npmjs.com/package/gulp-uglify&quot;&gt;gulp-uglify&lt;/a&gt;を使用します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;npm install --save-dev gulp-uglify&lt;/pre&gt;&lt;p&gt;&lt;code&gt;uglify&lt;/code&gt;でjsファイルをミニファイします。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// public/assets/javascripts/webpack.js&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config        = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./config&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; gulp          = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; webpack       = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-webpack&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; webpackConfig = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./webpack.config.js&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; rev           = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-rev&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; uglify        = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-uglify&#39;&lt;/span&gt;);

  gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;webpack&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; gulp.src(config.javascript.src)
        .pipe(webpack(webpackConfig))
+ 　　　 .pipe(uglify())
        .pipe(rev())
        .pipe(gulp.dest(webpackConfig.output.publicPath))
        .pipe(rev.manifest(config.rev.dest, config.rev.opts))
        .pipe(gulp.dest(config.publicAssets));
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;gulp&lt;/code&gt;でビルドし、JSファイルを見ると次のようにミニファイされていることがわかると思います。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// public/assets/javascripts/application-63a661c7c2.bundle.js&lt;/span&gt;

!&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(e)&lt;span class=&quot;synIdentifier&quot;&gt;{function&lt;/span&gt; t(r)&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt;(n&lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;r&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;)&lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; n&lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;r&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;.exports;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; i=n&lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;r&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;exports:&lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt;,id:r,loaded:!1&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;&lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; e&lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;r&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;.call(i.exports,i,i.exports,t),i.loaded=!0,i.exports&lt;span class=&quot;synIdentifier&quot;&gt;}var&lt;/span&gt; n=&lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt;;&lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; t.m=e,t.
...
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails_with_gulp-watch-reload-notify&quot;&gt;5. 変更監視、画面リロード、通知&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;h4&gt;変更監視&lt;/h4&gt;ファイルの変更を監視し、変更されたらビルドが走るようにします。&lt;br /&gt;
&lt;code&gt;gulp.watch&lt;/code&gt;という&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;がデフォルトであるのでそれを利用します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/tasks/watch.js&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./config&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; gulp   = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);
+
+ gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;watch&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   gulp.watch(config.watch.stylesheetSass, &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-sass&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;);
+   gulp.watch(config.watch.stylesheetScss, &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-scss&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;);
+   gulp.watch(config.watch.javascript,     &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;webpack&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;watch&lt;/code&gt;タスクを実行すると、jsやsass/scssファイルを変更すると自動的にビルドを行ってくれるようになります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;gulp watch&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;画面リロード&lt;/h4&gt;ファイルがビルドしたら、画面をリロードするようにします。&lt;br /&gt;
&lt;a href=&quot;https://www.npmjs.com/package/browser-sync&quot;&gt;browser-sync&lt;/a&gt;をインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;npm install --save-dev browser-sync&lt;/pre&gt;&lt;p&gt;browserSyncを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/tasks/watch.js&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./config&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; gulp   = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; browserSync = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;browser-sync&#39;&lt;/span&gt;).create();

  gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;watch&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    browserSync.init(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      proxy: &lt;span class=&quot;synConstant&quot;&gt;&#39;localhost:3000&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// サーバのホスト名を記載&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

    gulp.watch(config.watch.stylesheetSass, &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-sass&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;);
    gulp.watch(config.watch.stylesheetScss, &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-scss&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;);
    gulp.watch(config.watch.javascript,     &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;webpack&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;);

+   &lt;span class=&quot;synComment&quot;&gt;// public配下のファイルが変更された場合画面をリロードする(必要に応じてwatch先を変更)&lt;/span&gt;
+   gulp.watch(config.watch.browserSync).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;change&#39;&lt;/span&gt;, browserSync.reload);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;こちらも&lt;code&gt;gulp watch&lt;/code&gt;で監視し、画面がリロードされます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;通知&lt;/h4&gt;次のように、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;が完了したら通知を出すようにしてみます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151218/20151218023734.png&quot; alt=&quot;f:id:nipe880324:20151218023734p:plain:w240&quot; title=&quot;f:id:nipe880324:20151218023734p:plain:w240&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:240px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-notify&quot;&gt;gulp-notify&lt;/a&gt;をインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;npm install --save-dev gulp-notify&lt;/pre&gt;&lt;p&gt;&lt;code&gt;notify&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を呼ぶことで通知が表示されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/tasks/webpack.js&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config        = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./config&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; gulp          = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; webpack       = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-webpack&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; webpackConfig = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./webpack.config.js&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; rev           = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-rev&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; uglify        = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-uglify&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; notify        = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-notify&#39;&lt;/span&gt;);

  gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;webpack&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; gulp.src(config.javascript.src)
        .pipe(webpack(webpackConfig))
  　　　 .pipe(uglify())
        .pipe(rev())
        .pipe(gulp.dest(webpackConfig.output.publicPath))
        .pipe(rev.manifest(config.rev.dest, config.rev.opts))
*       .pipe(gulp.dest(config.publicAssets))
+       .pipe(notify(&lt;span class=&quot;synConstant&quot;&gt;&#39;finish webpack&#39;&lt;/span&gt;));
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;sass_scss.jsにも追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// gulp/tasks/sass_scss.js&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;./config&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; gulp = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; sass = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-sass&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; rename = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-rename&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; rev  = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-rev&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; minifyCss = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-minify-css&#39;&lt;/span&gt;);
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; notify    = require(&lt;span class=&quot;synConstant&quot;&gt;&#39;gulp-notify&#39;&lt;/span&gt;);

  gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-sass&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; gulp.src(config.stylesheet.srcSass)
        .pipe(sass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; indentedSyntax: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, errLogToConsole: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
        .pipe(minifyCss())
        .pipe(rename(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; suffix: &lt;span class=&quot;synConstant&quot;&gt;&#39;.bundle&#39;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
        .pipe(rev())
        .pipe(gulp.dest(config.stylesheet.dest))
        .pipe(rev.manifest(config.rev.dest, config.rev.opts))
*       .pipe(gulp.dest(config.publicAssets))
+       .pipe(notify(&lt;span class=&quot;synConstant&quot;&gt;&#39;finish compile-sass&#39;&lt;/span&gt;));
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

  gulp.task(&lt;span class=&quot;synConstant&quot;&gt;&#39;compile-scss&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; gulp.src(config.stylesheet.srcScss)
        .pipe(sass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; indentedSyntax: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, errLogToConsole: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
        .pipe(minifyCss())
        .pipe(rename(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; suffix: &lt;span class=&quot;synConstant&quot;&gt;&#39;.bundle&#39;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;))
        .pipe(rev())
        .pipe(gulp.dest(config.stylesheet.dest))
        .pipe(rev.manifest(config.rev.dest, config.rev.opts))
*       .pipe(gulp.dest(config.publicAssets))
+       .pipe(notify(&lt;span class=&quot;synConstant&quot;&gt;&#39;finish compile-scss&#39;&lt;/span&gt;));
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails_with_gulp-integration-with-rails&quot;&gt;6. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;と統合&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;まずは、&lt;code&gt;gulp&lt;/code&gt;でビルドしておきます。&lt;/p&gt;&lt;p&gt;&lt;code&gt;index.html.erb&lt;/code&gt;などの各テンプレートファイルから特定のjsや&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/css&quot;&gt;css&lt;/a&gt;を読み込めるようにするために、、&lt;code&gt;content_for&lt;/code&gt;を追加ます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/layouts/application.html.erb --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;GulpTest&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;-   &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; stylesheet_link_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;all&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;-   &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; javascript_include_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;+   &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; yield&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :head if content_for?(:head) %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; csrf_meta_tags&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; yield&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;

+ &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; yield&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :head if content_for?(:foot) %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;index.html.erb&lt;/code&gt;でjsファイルをロードするようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Top#index&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Find me in app/views/top/index.html.erb&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

+ &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% content_for :head do %&amp;gt;&lt;/span&gt;
+   &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; stylesheet_link_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; gulp_asset_path(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application.bundle.css&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
+
+ &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% content_for :foot do %&amp;gt;&lt;/span&gt;
+   &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; javascript_include_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; gulp_asset_path(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application.bundle.js&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;ダイジェストに対応できるために&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%CB%A5%D5%A5%A7%A5%B9%A5%C8&quot;&gt;マニフェスト&lt;/a&gt;ファイルを&lt;code&gt;REV_MANIFEST&lt;/code&gt;定数に入れておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/initializers/rev_manifest.rb&lt;/span&gt;
+ rev_manifest_path = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;public/assets/rev-manifest.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
+
+ &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.exist?(rev_manifest_path)
+   &lt;span class=&quot;synType&quot;&gt;REV_MANIFEST&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;.parse(&lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.read(rev_manifest_path))
+ &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;gulpで作成されたファイルへのパスを返す&lt;code&gt;gulp_assets_path&lt;/code&gt;ヘルパーを作成します。&lt;br /&gt;
※少しバグがあるので適宜直してください。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/helpers/applicaiton_helper.rb&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
+   &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;gulp_asset_path&lt;/span&gt;(path)
+     new_path = &lt;span class=&quot;synType&quot;&gt;REV_MANIFEST&lt;/span&gt;[path] &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;defined?&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;REV_MANIFEST&lt;/span&gt;)
+     &lt;span class=&quot;synStatement&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;path miss match error: &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;path&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; new_path.blank?
+
+     &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/assets/javascripts/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;new_path&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; new_path.end_with?(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;.js&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
+     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/assets/stylesheets/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;new_path&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; new_path.end_with?(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;.css&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
+   &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;rails server&lt;/code&gt;でサーバーを起動させ、&lt;code&gt;gulp watch&lt;/code&gt;でbrowserSyncを起動させると次のように画面が開きます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151218/20151218023652.png&quot; alt=&quot;f:id:nipe880324:20151218023652p:plain:w420&quot; title=&quot;f:id:nipe880324:20151218023652p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;アセットファイルなどを変更すると、ビルドされ、通知が出て、画面がリロードされます。&lt;/p&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;</content>
        
        
        <category term="gulp" label="gulp" />
        
        <category term="assets" label="assets" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>RailsでReact.jsをサーバーレンダリングする</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20151124/1448300267"/>
        <id>hatenablog://entry/6653586347146273156</id>
        <published>2015-11-24T02:37:47+09:00</published>
        <updated>2015-11-24T02:37:47+09:00</updated>
        <summary type="html">react-railsを使いReact.jsをサーバーレンダリングする方法を説明します。サーバーレンダリングすることで、初期値をHTMLの初期レンダー時に渡せるようになるので、ロード中による画面のばたつきや、ロード中といった表示をなくせます。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122001321.png&quot; alt=&quot;f:id:nipe880324:20151122001321p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122001321p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-rails&quot;&gt;react-rails&lt;/a&gt;というReact.jsを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;に簡単に統合できるgemを使い、React.jsをサーバー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;する方法を説明します。&lt;br /&gt;
サーバー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;することで、初期値をHTMLの初期レンダー時に渡せるようになるので、ロード中による画面のばたつきや、ロード中といった表示をなくせます。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151122/1448118932&quot;&gt;Rails&amp;#x3067;React&amp;#x3092;&amp;#x4F7F;&amp;#x3063;&amp;#x3066;&amp;#x30E1;&amp;#x30C3;&amp;#x30BB;&amp;#x30FC;&amp;#x30B8;&amp;#x30DC;&amp;#x30C3;&amp;#x30AF;&amp;#x30B9;&amp;#x30A2;&amp;#x30D7;&amp;#x30EA;&amp;#x3092;&amp;#x4F5C;&amp;#x6210; - Rails Webook&lt;/a&gt;をベースに説明しています。&lt;/p&gt;&lt;p&gt;また、この記事の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;は&lt;br /&gt;
&lt;a href=&quot;https://github.com/nipe0324/rails_samples/tree/master/react_server_rendering_test&quot;&gt;https://github.com/nipe0324/rails_samples/tree/master/react_server_rendering_test&lt;/a&gt;&lt;br /&gt;
です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#react-server-rendering-react_component&quot;&gt;RailsでReactコンポーネントをレンダーする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-server-rendering-prerender&quot;&gt;Reactコンポーネントをサーバーレンダリングする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-server-rendering-controller-render&quot;&gt;コントローラーでReactコンポーネントをレンダーする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt; 2.2.0&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;react-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 1.4.2&lt;/li&gt;
&lt;li&gt;react 0.14.2&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;react-server-rendering-react_component&quot;&gt;1. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をレンダーする&lt;/h3&gt;&lt;code&gt;react-rails&lt;/code&gt;は、&lt;code&gt;react_component&lt;/code&gt;というビューヘルパーを用意しており、ビュー上でこの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使うことで、React&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;のレンダーを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0&quot;&gt;バインディング&lt;/a&gt;なしでできるようになります。&lt;/p&gt;&lt;p&gt;main.js.jsxでのReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;のレンダーしている&lt;code&gt;ReactDOM.render&lt;/code&gt;を削除します。&lt;code&gt;react_component&lt;/code&gt;ビューヘルパーのおかげでこれが必要なくなります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/main.js.jsx&lt;/span&gt;
- $(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
-   ReactDOM.render(
-     &amp;lt;MessageBox url=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/messages&amp;quot;&lt;/span&gt;/&amp;gt;,
-     &lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;synConstant&quot;&gt;&#39;content&#39;&lt;/span&gt;)
-   );
- &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;react_component&lt;/code&gt;を使うように修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Message Box&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

- &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; react_component(&#39;MessageBox&#39;,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;/messages&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;最後に、&lt;code&gt;application.js&lt;/code&gt;に&lt;code&gt;react_ujs&lt;/code&gt;があることを確認します。&lt;br /&gt;
&lt;code&gt;react_ujs&lt;/code&gt;がページをスキャンをし、&lt;code&gt;react_component&lt;/code&gt;の箇所に指定したReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をマウントしています。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/application.js&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;//= require jquery&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require jquery_ujs&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require react&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require react_ujs&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require_tree .&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
画面を確認するとちゃんとメッセージ一覧が表示されます。&lt;br /&gt;
[&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000620.png&quot; alt=&quot;f:id:nipe880324:20151122000620p:plain&quot; title=&quot;f:id:nipe880324:20151122000620p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;:420]&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;HTMLは次のようになっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-react-&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;MessageBox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-react-props=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/messages&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Turbolinksと一緒に使う場合や、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;名が階層構造になっているなどの場合などは公式ドキュメントを参照ください。&lt;br /&gt;
&lt;a href=&quot;https://github.com/reactjs/react-rails#rendering--mounting&quot;&gt;reactjs/react-rails &amp;middot; GitHub&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;react-server-rendering-prerender&quot;&gt;2. React&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をサーバー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;する&lt;/h3&gt;今度は、サーバーサイドでReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をレンダーするようにします。&lt;br /&gt;
&lt;code&gt;react_component&lt;/code&gt;ビューヘルパーに、&lt;code&gt;prerender: true&lt;/code&gt;を渡します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Message Box&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

* &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; react_component(&#39;MessageBox&#39;,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; { &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;/messages&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; }, { prerender: true }) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、規約により&lt;code&gt;components.js&lt;/code&gt;が必要です。その中で、「React&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;」や必要であればUnderscore.jsなどの「依存ライブラリ」を読み込むようにします。&lt;br /&gt;
今回は、React&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を配置している&lt;code&gt;components&lt;/code&gt;ディレクトリを読み込むようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/components.js&lt;/span&gt;

+ &lt;span class=&quot;synComment&quot;&gt;//= require_tree ./components&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;application.js&lt;/code&gt;でこの&lt;code&gt;components.js&lt;/code&gt;を読み込むように修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/application.js&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;//= require jquery&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;//= require jquery_ujs&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;//= require react&lt;/span&gt;
+ &lt;span class=&quot;synComment&quot;&gt;//= require components&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;//= require react_ujs&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;//= require_tree .&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
公式ドキュメントに&lt;a href=&quot;https://facebook.github.io/react/docs/component-specs.html#lifecycle-methods&quot;&gt;Component Specs and Lifecycle | React&lt;/a&gt;に書かれていますが、&lt;code&gt;componentDidMount&lt;/code&gt;はサーバーサイドで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;した時には呼ばれないので、&lt;code&gt;props&lt;/code&gt;でReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;に渡すようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Message Box&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

* &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; react_component(&#39;MessageBox&#39;,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; { &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;/messages&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, messages: @messages }, { prerender: true }) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;コントローラーで&lt;code&gt;@messages&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&quot;&gt;インスタンス&lt;/a&gt;変数に値を設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/top_controller.rb&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TopController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
+     &lt;span class=&quot;synIdentifier&quot;&gt;@messages&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Message&lt;/span&gt;.all
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;componentDidMount&lt;/code&gt;でメッセージをサーバーから取得してましたが、上記の通り、サーバーサイドでprops経由でMessageBoxに渡すようにしたので、初期値をpropsから取得するように修正します。&lt;br /&gt;
また、&lt;code&gt;componentDidMount&lt;/code&gt;も呼ばれないので削除します。&lt;br /&gt;
さらに、メッセージのロード中と言う状態がなくなるので合わせて削除します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/components/message_box.js.jsx&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
*   getInitialState: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(props) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
*     &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;　messages: &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.messages &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

-   componentDidMount: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
-     $.ajax(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
-       url:      &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url,
-       dataType: &lt;span class=&quot;synConstant&quot;&gt;&#39;json&#39;&lt;/span&gt;,
-       cache:    &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
-       success: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(messages) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
-         &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.setState(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; messages: messages, isLoading: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
-       &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;),
-       eror: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(_xhr, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
-         console.error(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err.toString());
-       &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;)
-     &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
-   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

    handleMessageSubmit: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      $.ajax(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        url:      &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url,
        dataType: &lt;span class=&quot;synConstant&quot;&gt;&#39;json&#39;&lt;/span&gt;,
        type:     &lt;span class=&quot;synConstant&quot;&gt;&#39;POST&#39;&lt;/span&gt;,
        data:     message,
        success: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; newMessages = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.concat(message);
          &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.setState(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; messages: newMessages &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
        &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;),
        error: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(_xhr, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
          console.error(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err.toString());
        &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;)
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

    render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; messageItems = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.map(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
          &amp;lt;MessageItem key=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message.id&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; message=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
        );
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

-     &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.isLoading) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
-       &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
-         &amp;lt;div&amp;gt;ロード中&amp;lt;/div&amp;gt;
-       );
-     &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
        &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;messageItems&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
          &amp;lt;MessageForm onMessageSubmit=&lt;span class=&quot;synIdentifier&quot;&gt;{this&lt;/span&gt;.handleMessageSubmit&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
        &amp;lt;/div&amp;gt;
      );
-     &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;画面を確認するとメッセージ一覧が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000620.png&quot; alt=&quot;f:id:nipe880324:20151122000620p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000620p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;注意点として、&lt;code&gt;react_component&lt;/code&gt;でレンダーするReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;群の&lt;code&gt;render&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で&lt;code&gt;document&lt;/code&gt;を参照できません。そのため、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/jQuery&quot;&gt;jQuery&lt;/a&gt;やライブラリなどいくつか動かない場合があります。サブミット時に$.&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ajax&quot;&gt;ajax&lt;/a&gt;などはつかえます。どこらへんまで使用可能かはよくわかってないですが、うまくいかないときはこれを疑ってください。&lt;/p&gt;&lt;p&gt;また、&lt;code&gt;therubyracer&lt;/code&gt;を使ったほうがパフォーマンスがいいなど、サーバー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;の設定は&lt;a href=&quot;https://github.com/reactjs/react-rails#server-rendering&quot;&gt;reactjs/react-rails &amp;middot; GitHub&lt;/a&gt;を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;react-server-rendering-controller-render&quot;&gt;3. コントローラーでReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をレンダーする&lt;/h3&gt;おまけで、使う頻度は少ないと思いますが、コントローラーから直接React&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をレンダーできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;//&lt;/span&gt; app/controllers/top_controller.rb
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TopController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@messages&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Message&lt;/span&gt;.all
    render &lt;span class=&quot;synConstant&quot;&gt;component&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MessageBox&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;props&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/messages&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;messages&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@messages&lt;/span&gt; }
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3&gt;まとめ&lt;/h3&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をレンダーする&lt;/h4&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;react_component&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;でReact&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をレンダーする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react_ujs&lt;/code&gt;が必要（react_ujsがマウントしてくれる）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;h4&gt;サーバーサイド&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;を行う&lt;/h4&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;react_component&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に&lt;code&gt;prerender: true&lt;/code&gt;をつける&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react_ujs&lt;/code&gt;が必要（react_ujsがマウントしてくれる）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;components.js&lt;/code&gt;が必要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document&lt;/code&gt;が使えない&lt;/li&gt;
&lt;li&gt;サーバーサイド&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;では幾つかライフサイクルの呼ばれない&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;がある。詳細:&lt;a href=&quot;https://facebook.github.io/react/docs/component-specs.html#lifecycle-methods&quot;&gt;Component Specs and Lifecycle | React&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/reactjs/react-rails#server-rendering&quot;&gt;reactjs/react-rails &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="Javascript" label="Javascript" />
        
        <category term="React.js" label="React.js" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>RailsでReactを使ってメッセージボックスアプリを作成</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20151122/1448118932"/>
        <id>hatenablog://entry/6653586347146034337</id>
        <published>2015-11-22T00:15:32+09:00</published>
        <updated>2015-12-18T20:04:38+09:00</updated>
        <summary type="html">Railsに簡単にReact.jsを統合できるreact-raisというgemを使い、RailsでReact.jsを使う方法を説明します。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122001321.png&quot; alt=&quot;f:id:nipe880324:20151122001321p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122001321p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-rails&quot;&gt;react-rails&lt;/a&gt;というReact.jsを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;に簡単に統合できるgemを使い、React.jsについて説明します。&lt;/p&gt;&lt;p&gt;次のような画面をReact.jsで実装し、Reactとサーバ(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;)間でメッセージ一覧の取得や作成をできるようにします。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;はこちらです。 &lt;a href=&quot;https://github.com/nipe0324/rails_samples/tree/master/react_test&quot;&gt;https://github.com/nipe0324/rails_samples/tree/master/react_test&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000620.png&quot; alt=&quot;f:id:nipe880324:20151122000620p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000620p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#react-install-gem&quot;&gt;react-railsのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-render&quot;&gt;Reactのコンポーネントの表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-design&quot;&gt;メッセージボックスの概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-message-item&quot;&gt;メッセージボックスのリストを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-message-form&quot;&gt;メッセージフォームを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-integration-with-rails&quot;&gt;サーバーサイド(Rails)との連携&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt; 2.2.0&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;react-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 1.4.2&lt;/li&gt;
&lt;li&gt;react 0.14.2&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3&gt;0. React.jsとは&lt;/h3&gt;React.jsは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MVC&quot;&gt;MVC&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;でいう、ビューのみを扱っています。&lt;/p&gt;&lt;p&gt;Backbone.jsやAngularJS、React.jsなど触ってきた私の個人的な感想として、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React.jsは、状態をルートの一箇所(※1)で管理し、その状態を更新すれば、自動的に全ての&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をレンダーしてくれます。&lt;/li&gt;
&lt;li&gt;状態を一箇所で管理できるので、レンダーの細かな制御が必要なくなるので可読性や保守性は高いと思います。また、React.jsが差分だけレンダーするのでパフォーマンスも悪くはなりにくいです。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;※1: 基本的には状態をルートの１箇所で管理するとよいと思いますが、ルートの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;がFatになってしまうので大規模化するとつらくなりそうです。Fluxで解決できるかもですが、Flux実装が乱立しているのでどうしようか迷っています。Flux実装で最近よく聞くReduxを軽く触ってみようかと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backbone.jsの場合、モデルやコレクションの更新やクリックイベントなどをトリガーとして、細かく分けたビューを更新します。ビューが大きくなり大規模化していくと、異なるビュー同士でイベントが絡み合うので、状態が増えて、つらくなってくる気がします。&lt;/li&gt;
&lt;li&gt;AngularJSの場合、個人的に嫌いじゃないですが、&lt;code&gt;ng-xxx&lt;/code&gt;というディレクティブがたくさん必要になり覚えることがたくさんあるのでつらいかなと思います。また、Angularに処理がラッピングされているので、バグを踏んだ時に対応するのがなかなか難しい気がします。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;react-install-gem&quot;&gt;1. react-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt;のインストール&lt;/h3&gt;&lt;code&gt;react-rails&lt;/code&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でReact.jsとJSXを簡易に使えるようにするgemです。&lt;/p&gt;&lt;p&gt;プロジェクトを作成します&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new react_test
cd ./react_test&lt;/pre&gt;&lt;p&gt;&lt;code&gt;react-rails&lt;/code&gt;をGemfileに追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
+ gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;react-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;~&amp;gt; 1.4.0&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;&lt;code&gt;applicaiton.js&lt;/code&gt;に&lt;code&gt;react&lt;/code&gt;を追加し、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;がReact.jsを読み込むようにします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;// app/assets/javascripts/application.js

 //= require jquery_ujs
-  //= require turbolinks
+  //= require react
+  //= require react_ujs
 //= require_tree .&lt;/pre&gt;&lt;p&gt;React.jsの環境値を設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/environments/development.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
...
+ &lt;span class=&quot;synComment&quot;&gt;# Reactの環境値を development にする&lt;/span&gt;
+ config.react.variant = &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# config/environments/production.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
...
+ &lt;span class=&quot;synComment&quot;&gt;# Reactの環境値を production にする&lt;/span&gt;
+ config.react.variant = &lt;span class=&quot;synConstant&quot;&gt;:production&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;補足&lt;br /&gt;
今回は入れないですが、ReactにはAddonと言うものが付いていて、Addonも使いたい場合は、下記の設定をします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/environments/(development|test|production).rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
...
  &lt;span class=&quot;synComment&quot;&gt;# React.jsのAddonを有効にする(デフォルトはfalse)&lt;/span&gt;
  config.react.addons = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;TopController#indxを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g controller top index&lt;/pre&gt;&lt;p&gt;ルートのパス(/)にtop#indexを設定しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
+ root &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;top#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt;にアクセスし、トップ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Javascript&quot;&gt;Javascript&lt;/a&gt;コンソールにエラーがでないことを確認します。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;react-render&quot;&gt;2. Reactの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の表示&lt;/h3&gt;まずはReactで&lt;code&gt;Hello react with rails&lt;/code&gt;を表示しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/main.js.jsx&lt;/span&gt;

+ $(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+    ReactDOM.render(
+      &amp;lt;h1&amp;gt;Hello react &lt;span class=&quot;synStatement&quot;&gt;with&lt;/span&gt; rails&amp;lt;/h1&amp;gt;,
+      &lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;synConstant&quot;&gt;&#39;content&#39;&lt;/span&gt;)
+    );
+ &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;ReactDOM.render(&lt;Reactコンポーネント&gt;, &lt;element&gt;)でReactの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;群をレンダー開始します。&lt;br /&gt;
※少し前まではReact.renderでした。&lt;br /&gt;
&lt;code&gt;&lt;h1&gt;Hello react with rails&lt;/h1&gt;&lt;/code&gt;がReactの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;として認識されて表示されます。&lt;br /&gt;
他にも、divやspanなど基本的なHTML要素は利用できます。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Message Box&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
+ 
+ &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
画面を再表示すると次のように「Hello react with &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt;」とReactにより表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151121/20151121235843.png&quot; alt=&quot;f:id:nipe880324:20151121235843p:plain:w420&quot; title=&quot;f:id:nipe880324:20151121235843p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;react-design&quot;&gt;3. メッセージボックスの概要&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;ReactはVirtual DOMツリーを使って差分のみのHTMLを更新します。&lt;br /&gt;
ルートノードがstate(変更可能)を持っていて、必要な子ノードにstate(変更不可)を渡します。&lt;br /&gt;
子は親から渡された値をprops(変更不可)として受け取り、それを使ってHTMLをレンダーします。&lt;br /&gt;
各子ノードはイベントが発生したら親までイベントを伝え、親のstate(変更可能)をsetState&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で更新します。&lt;br /&gt;
すると、親ノードから全てのノードが再度更新されます。この時、Virtual DOMツリーがあるためHTMLを差分だけ更新します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;次のようなツリー構造を作っていきます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;MessageBox
L MessageList
|  L MessageItem
L MessageForm&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;react-message-item&quot;&gt;4. メッセージボックスのリストを作成&lt;/h3&gt;では、ここからメッセージボックスを作成していきます。&lt;br /&gt;
まずは、Reactの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を配置するディレクトリを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;mkdir app/assets/javascripts/components&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;MessageBox&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の作成&lt;/h4&gt;MessageBox&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/components/message_box.js.jsx&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
+       &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
+         This is message box.
+       &amp;lt;/div&amp;gt;
+     );
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;React.createClass()&lt;/code&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を作成します。&lt;br /&gt;
また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;が表示するHTMLを&lt;code&gt;render&lt;/code&gt;の関数で返します。&lt;br /&gt;
classが予約されているので、HTMLのclass属性の指定は&lt;code&gt;className&lt;/code&gt;を使います。&lt;/p&gt;&lt;p&gt;main.js.jsxからMessageBox&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を呼び出すように修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/main.js.jsx&lt;/span&gt;
 $(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
   ReactDOM.render(
*    &amp;lt;MessageBox /&amp;gt;,
     &lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;synConstant&quot;&gt;&#39;content&#39;&lt;/span&gt;)
   );
 &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;画面を確認すると次のようになります&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000052.png&quot; alt=&quot;f:id:nipe880324:20151122000052p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000052p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;code&gt;ReactDOM.render&lt;/code&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;しているHTMLは次のようになっています。&lt;br /&gt;
MessageBox&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の&lt;code&gt;render&lt;/code&gt;のHTMLが表示されていることがわかると思います。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    This is message box.
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;※&lt;code&gt;data-reactid&lt;/code&gt;は、Reactが各DOMを管理するために自動的に付与しているデータです。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;Reactの&lt;code&gt;render&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の実装時にはまりやすいポイント&lt;/h4&gt;&lt;code&gt;render&lt;/code&gt;で返すトップのHTML要素は１つでないといけません。&lt;br /&gt;
次のように、div要素を2つ返そうとするとエラーになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// 2つのdiv要素を返しているのでエラーになる&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
      &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
        This is message box.
      &amp;lt;/div&amp;gt;
      &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
        This is message box.
      &amp;lt;/div&amp;gt;
    );
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、inputやimageなどの要素でも&lt;b&gt;必ず閉じタグが必要&lt;/b&gt;です。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
      &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
        &amp;lt;image src=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/path/to/file&amp;quot;/&amp;gt; {/* 正しい */&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
        &amp;lt;image src=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/path/to/file&amp;quot;&lt;/span&gt;&amp;gt;  &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;/* エラー */&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
      &amp;lt;/div&amp;gt;
    );
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;MessageItem&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の作成&lt;/h4&gt;各メッセージを表示するMessageItem&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を作成します。&lt;br /&gt;
MessageBox&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/components/message_item.js.jsx&lt;/span&gt;
+&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageItem = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+  render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
+      &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&amp;gt;
+        &amp;lt;h2 className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageUser&amp;quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;synIdentifier&quot;&gt;{this&lt;/span&gt;.props.message.user&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;&amp;lt;/h2&amp;gt;
+        &amp;lt;span&amp;gt;&lt;span class=&quot;synIdentifier&quot;&gt;{this&lt;/span&gt;.props.message.text&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;&amp;lt;/span&amp;gt;
+      &amp;lt;/div&amp;gt;
+    );
+  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;this.props&lt;/code&gt;には、親&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;から渡された値が入ります。&lt;br /&gt;
また、&lt;code&gt;{変数名}&lt;/code&gt;で変数の値を表示することができます。&lt;/p&gt;&lt;p&gt;ここでは、親から&lt;code&gt;message = { user: &#39;username&#39;, text: &#39;text&#39; }&lt;/code&gt;といったような値が渡されて、&lt;code&gt;{}&lt;/code&gt;を使ってそれぞれユーザ名とメッセージのテキストを表示しています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;message_box.js.jsxでMessageItem&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を作成し、returnで返すようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// message_box.js.jsx&lt;/span&gt;
 &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
   render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; messageItems = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.map(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
+        &amp;lt;MessageItem key=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message.id&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; message=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
+      );
+    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

     &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
       &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
+        &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;messageItems&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
       &amp;lt;/div&amp;gt;
     );
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;this.state&lt;/code&gt;は変更可能な値で名前からわかる通りアプリの状態を保持します。&lt;br /&gt;
基本的にはルートのノード(MessageBox)だけで&lt;code&gt;state&lt;/code&gt;を管理すると、いろいろな&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;に状態が散らばらないので分かり易い、保守し易いJSコードになります。&lt;br /&gt;
そして、&lt;code&gt;this.setState&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を通して&lt;code&gt;state&lt;/code&gt;を更新することでルート以下の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の&lt;code&gt;render&lt;/code&gt;が呼ばれ、&lt;code&gt;state&lt;/code&gt;の状態を表せます。この時、Reactが差分だけ更新するのでパフォーマンスをあまり気にしなくてもrenderが行えるようになっています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;最終的にはサーバーからデータを取得しますがまずは仮で、初期データを用意します。&lt;br /&gt;
&lt;code&gt;getInitialState&lt;/code&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;が作成された時に１度だけ呼ばれ、&lt;code&gt;state&lt;/code&gt;の初期値を返すように実装します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// message_box.js.jsx&lt;/span&gt;
 &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+  getInitialState: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+      messages: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
+        &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; id: 1, user: &lt;span class=&quot;synConstant&quot;&gt;&#39;Tom&#39;&lt;/span&gt;,   text: &lt;span class=&quot;synConstant&quot;&gt;&#39;Good morning&#39;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
+        &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; id: 2, user: &lt;span class=&quot;synConstant&quot;&gt;&#39;John&#39;&lt;/span&gt;,  text: &lt;span class=&quot;synConstant&quot;&gt;&#39;Good afternoon&#39;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
+        &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; id: 3, user: &lt;span class=&quot;synConstant&quot;&gt;&#39;Emily&#39;&lt;/span&gt;, text: &lt;span class=&quot;synConstant&quot;&gt;&#39;Good evening&#39;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+      &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
+    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;
+  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

   render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
     ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面をリロードします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000154.png&quot; alt=&quot;f:id:nipe880324:20151122000154p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000154p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;ちなみにHTMLは次のようになっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageUser&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Tom&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$1.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Good morning&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$2&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageUser&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$2.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;John&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$2.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Good afternoon&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageUser&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$3.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Emily&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-reactid=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;.0.$3.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Good evening&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;react-message-form&quot;&gt;5. メッセージフォームを作成&lt;/h3&gt;メッセージを入力するフォームのMessageForm&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を作成し、メッセージを投稿できるようにします。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;MessageForm&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の作成&lt;/h4&gt;まずはイベントなどないシンプルなMessageForm&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/components/message_form.js.jsx&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageForm = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
+       &amp;lt;form className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;commentForm&amp;quot;&lt;/span&gt;&amp;gt;
+         &amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; placeholder=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Yousr name&amp;quot;&lt;/span&gt; /&amp;gt;
+         &amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; placeholder=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Message&amp;quot;&lt;/span&gt; /&amp;gt;
+         &amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Post&amp;quot;&lt;/span&gt; /&amp;gt;
+       &amp;lt;/form&amp;gt;
+     );
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+ &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;MessageBoxからMessageFormをレンダーするように修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// message_box.js.jsx&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  getInitialState: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

  render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; messageItems = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.map(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
        &amp;lt;MessageItem key=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message.id&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; message=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
      );
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
      &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;messageItems&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+       &amp;lt;MessageForm /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;画面を確認するとFormが表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000252.png&quot; alt=&quot;f:id:nipe880324:20151122000252p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000252p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;Submitイベントのハンドリング&lt;/h4&gt;Postボタンを押した時に、動的にMessageItemを追加するように修正します。&lt;/p&gt;&lt;p&gt;まずは、MessageFormにイベントのハンドリングを行う&lt;code&gt;handleSubmit&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageForm = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+   handleSubmit: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.preventDefault();
+     &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; user = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.refs.user.value.trim();
+     &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; text = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.refs.text.value.trim();
+     &lt;span class=&quot;synComment&quot;&gt;// どちらか入力されてなければ何もしない&lt;/span&gt;
+     &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!user || !text) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+       &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt;;
+     &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
+     &lt;span class=&quot;synComment&quot;&gt;// 親コンポーネントのMessageBoxのイベントを呼ぶ&lt;/span&gt;
+     &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.onMessageSubmit(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; user: user, text: text &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
+     &lt;span class=&quot;synComment&quot;&gt;// フォームの内容を削除&lt;/span&gt;
+     &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.refs.user.value = &lt;span class=&quot;synConstant&quot;&gt;&#39;&#39;&lt;/span&gt;;
+     &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.refs.text.value = &lt;span class=&quot;synConstant&quot;&gt;&#39;&#39;&lt;/span&gt;;
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

    render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
*       &amp;lt;form className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;commentForm&amp;quot;&lt;/span&gt; onSubmit=&lt;span class=&quot;synIdentifier&quot;&gt;{this&lt;/span&gt;.handleSubmit&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;&amp;gt;
*         &amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; placeholder=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Yousr name&amp;quot;&lt;/span&gt; ref=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt; /&amp;gt;
*         &amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; placeholder=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Message&amp;quot;&lt;/span&gt; ref=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;/&amp;gt;
          &amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Post&amp;quot;&lt;/span&gt; /&amp;gt;
        &amp;lt;/form&amp;gt;
      );
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;まず&lt;code&gt;onSubmit={this.handleSubmit}&lt;/code&gt;でSubmitイベントが発生したら、handleSubmitが呼ばれるように定義しています。&lt;/p&gt;&lt;p&gt;Postボタンを押すとリストに入力内容が追加されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000403.png&quot; alt=&quot;f:id:nipe880324:20151122000403p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000403p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;keyについて&lt;/h4&gt;Postボタンでもう一つメッセージを追加すると&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Javascript&quot;&gt;Javascript&lt;/a&gt;コンソールに次のようなメッセージが表示されます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;react.self-bf407d87....js?body=1:2166
Warning: Each child in an array or iterator should have a unique &amp;#34;key&amp;#34; prop. Check the render method of `MessageBox`. See https://fb.me/react-warning-keys for more information.&lt;/pre&gt;&lt;p&gt;和訳すると、&lt;br /&gt;
&gt; 配列や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%C6%A5%EC%A1%BC%A5%BF&quot;&gt;イテレータ&lt;/a&gt;のそれぞれの子要素はユニークな&quot;key&quot;属性をつけてください。&lt;br /&gt;
&gt; &quot;MessageBox&quot;のrender&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;のところが怪しいです。&lt;br /&gt;
&gt; より詳細を知りたい場合は、&lt;a href=&quot;https://fb.me/react-warning-keys&quot;&gt;https://fb.me/react-warning-keys&lt;/a&gt; を読んでください。&lt;br /&gt;
です。&lt;/p&gt;&lt;p&gt;なぜ、Reactで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;の同じ子要素(liやReactの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;など)を表示するときにkey属性を指定しないといけないかは、&lt;br /&gt;
Reactのstateが変わったときにどの要素を更新すればいいか識別するために使われています。key属性がなくてもうまく更新ができますが、Reactがいい感じにしないといけず計算量が多くなってしまいパフォーマンスが悪くなってしまう基本的にはkey属性をつけます。&lt;/p&gt;&lt;p&gt;今回は、MessageItemがリスト要素になっているので、key属性に値を設定します。&lt;br /&gt;
すでに設定していますが、新たにフォームから追加したメッセージはidがないので、&lt;code&gt;handleMessageSubmit&lt;/code&gt;ないでユニークなidを生成するようにします。&lt;br /&gt;
※後ほどサーバーから取得したメッセージを取得するようにしますが、今はidを生成する仕組みがないので暫定で日付を設定するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// message_box.js.jsx&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    getInitialState: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      ...
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

    handleMessageSubmit: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     message.id = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Date&lt;/span&gt;();
      &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; newMessages = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.concat(message);
      &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.setState(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; messages: newMessages &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

    render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; messageItems = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.map(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
          &amp;lt;MessageItem key=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message.id&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; message=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
        );
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
        &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;messageItems&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
          &amp;lt;MessageForm onMessageSubmit=&lt;span class=&quot;synIdentifier&quot;&gt;{this&lt;/span&gt;.handleMessageSubmit&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
        &amp;lt;/div&amp;gt;
      );
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;これでワーニングが出なくなりました。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;react-integration-with-rails&quot;&gt;6. サーバーサイド(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;)との連携&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を作成&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のエンドポイントとして下記2つを用意します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;GET  /messages.json - メッセージの一覧を取得する
POST /messages.json - メッセージを作成する&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
まず、コントローラ、モデルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g resource Message user:string text:string&lt;/pre&gt;&lt;p&gt;※&lt;code&gt;railg g resource&lt;/code&gt;は、モデル、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイル、コントローラ、アセット、ヘルパーを作成（ビューを作成しない）&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;ルートをエンドポイントの2つだけにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;

  &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.routes.draw &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
*   resources &lt;span class=&quot;synConstant&quot;&gt;:messages&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;only&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;], &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
    root &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;top#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
MessageControllerで&lt;code&gt;index&lt;/code&gt;と&lt;code&gt;create&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を実装します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;# app/controllers/messages_controller.rb&lt;/span&gt;
+ &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;MessagesController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
+   &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
+     messages = &lt;span class=&quot;synType&quot;&gt;Message&lt;/span&gt;.all
+     render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: messages
+   &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
+
+   &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
+     message = &lt;span class=&quot;synType&quot;&gt;Message&lt;/span&gt;.new(create_params)
+     &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; message.save
+       render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: message, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:created&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 201&lt;/span&gt;
+     &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
+       render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: message, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:unprocessable_entity&lt;/span&gt;
+     &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
+   &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
+
+   &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
+
+     &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create_params&lt;/span&gt;
+       params.permit(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:text&lt;/span&gt;)
+     &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
+ &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
初期データを作成し、投入しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/seeds.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Message&lt;/span&gt;.delete_all
&lt;span class=&quot;synType&quot;&gt;Message&lt;/span&gt;.create!([
  { &lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Tom&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Good morning&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; },
  { &lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;John&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,  &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Good afternoon&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; },
  { &lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Emily&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Good evening&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
])


&lt;span class=&quot;synComment&quot;&gt;# terminal&lt;/span&gt;
bundle exec rake db&lt;span class=&quot;synConstant&quot;&gt;:migrate&lt;/span&gt; db&lt;span class=&quot;synConstant&quot;&gt;:seed&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
サーバー再起動して、&lt;a href=&quot;http://localhost:3000/messages.json&quot;&gt;http://localhost:3000/messages.json&lt;/a&gt;にアクセスすると次のように値が返ってくると思います。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:1,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Good morning&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2015-11-19T04:02:27.956Z&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2015-11-19T04:02:27.956Z&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:2,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;John&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Good afternoon&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2015-11-19T04:02:27.958Z&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2015-11-19T04:02:27.958Z&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:3,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Emily&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Good evening&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2015-11-19T04:02:27.962Z&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2015-11-19T04:02:27.962Z&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Reactでサーバからメッセージ一覧を取得&lt;/h4&gt;メッセージの一覧を取得するエンドポイントは、&lt;code&gt;GET /messages.json&lt;/code&gt;なので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ajax&quot;&gt;Ajax&lt;/a&gt;でサーバからメッセージを取得して、それをReactで表示するようにしてみます。&lt;/p&gt;&lt;p&gt;まずは、MessageBoxに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;へのエンドポイントとなるurl属性を渡します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/main.js.jsx&lt;/span&gt;
  $(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    ReactDOM.render(
*     &amp;lt;MessageBox url=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/messages&amp;quot;&lt;/span&gt;/&amp;gt;,
      &lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;synConstant&quot;&gt;&#39;content&#39;&lt;/span&gt;)
    );
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;次に&lt;code&gt;getInitialState&lt;/code&gt;の仮で用意していた初期値を空の配列にします。&lt;br /&gt;
また、&lt;code&gt;componentDidMount&lt;/code&gt;を定義し、その中でサーバーからメッセージ一覧を取得し、&lt;code&gt;setState({ messages: messages })&lt;/code&gt;でstateにメッセージを設定します。&lt;/p&gt;&lt;p&gt;&lt;code&gt;componentDidMount&lt;/code&gt;は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;が表示された時にReactによって自動的に呼ばれる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;です。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/components/message_box.js.jsx&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    getInitialState: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
*     &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; messages: &lt;span class=&quot;synIdentifier&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

+   componentDidMount: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     $.ajax(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+       url:      &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url,
+       dataType: &lt;span class=&quot;synConstant&quot;&gt;&#39;json&#39;&lt;/span&gt;,
+       cache:    &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
+       success: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(messages) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+         &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.setState(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; messages: messages &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
+       &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;),
+       eror: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(_xhr, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+         console.error(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err.toString());
+       &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;)
+     &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;画面を確認するとメッセージ一覧が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000516.png&quot; alt=&quot;f:id:nipe880324:20151122000516p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000516p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;この時若干画面がバタつくのは、次のようになっているからです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;getInitialState&lt;/code&gt;でmessagesに空の配列がセットされる。&lt;/li&gt;
&lt;li&gt;Reactが&lt;code&gt;MessageBox&lt;/code&gt;を表示する。この時、メッセージがないので一覧は表示されない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MessageBox&lt;/code&gt;が表示されたので、&lt;code&gt;componentDidMount&lt;/code&gt;が呼ばれ、サーバからメッセージを取得し、messagesにメッセージをセットする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setState&lt;/code&gt;でmessagesが更新されたので、Reactは差分をレンダーする。この時、メッセージがあるので一覧は表示される。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;このように、一度なにも表示しないで、その後、サーバーからメッセージを取得して、一覧を表示するので若干バタつくようになっています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;ロード中と表示&lt;/h4&gt;ロード中に「ロード中」と表示するようにします。うまくスタイリングすれば、「getInitialState〜サーバーからのデータ取得」をまでの間のバタつくような表示を解消できます。&lt;br /&gt;
具体的には、次のようにロード中と一瞬だけ出てから一覧が表示されるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000634.png&quot; alt=&quot;f:id:nipe880324:20151122000634p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000634p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;MessageBoxを修正し、&lt;code&gt;isLoading&lt;/code&gt;というステータスをもたせて、ロードが完了した時点でロードが完了したと設定しています。&lt;br /&gt;
また、その&lt;code&gt;isLoading&lt;/code&gt;の値を見て、レンダーする表示を変えています。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/components/message_box.js.jsx&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  getInitialState: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// isLoading = true : ロード中を表示&lt;/span&gt;
*   &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;　messages:  &lt;span class=&quot;synIdentifier&quot;&gt;[]&lt;/span&gt;,　isLoading: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;　&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

  componentDidMount: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    $.ajax(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      url:      &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url,
      dataType: &lt;span class=&quot;synConstant&quot;&gt;&#39;json&#39;&lt;/span&gt;,
      cache:    &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
      success: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(messages) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;synComment&quot;&gt;// isLoading = false : ロード中を表示しない&lt;/span&gt;
*        &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.setState(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; messages: messages, isLoading: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;),
      eror: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(_xhr, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        console.error(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err.toString());
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;)
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

  handleMessageSubmit: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

  render: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; messageItems = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.map(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
        &amp;lt;MessageItem key=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message.id&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; message=&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
      );
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

    &lt;span class=&quot;synComment&quot;&gt;// isLoadingの値により表示するRenderする内容を変えている&lt;/span&gt;
+   &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.isLoading) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
+       &amp;lt;div&amp;gt;ロード中&amp;lt;/div&amp;gt;
+     );
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
*     &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (
*       &amp;lt;div&amp;gt;
*         &amp;lt;h1&amp;gt;Message Box&amp;lt;/h1&amp;gt;
*         &amp;lt;div className=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messageBox&amp;quot;&lt;/span&gt;&amp;gt;
*           &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;messageItems&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
*           &amp;lt;MessageForm onMessageSubmit=&lt;span class=&quot;synIdentifier&quot;&gt;{this&lt;/span&gt;.handleMessageSubmit&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;/&amp;gt;
*         &amp;lt;/div&amp;gt;
*       &amp;lt;/div&amp;gt;
*     );
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;このローディング中という表示が嫌な場合は、、サーバー側で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;するデータも含めて返すようにする「サーバー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;」という方法があります。そちらについては、次の記事で書きます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;ReactでサーバへメッセージをPOSTする&lt;/h4&gt;メッセージを作成するエンドポイントは、&lt;code&gt;POST /messages.json&lt;/code&gt;なので、フォームのPostボタンが押された時に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ajax&quot;&gt;Ajax&lt;/a&gt;でサーバーにメッセージ情報をPOSTするようにします。&lt;/p&gt;&lt;p&gt;MessageBoxの&lt;code&gt;handleSubmit&lt;/code&gt;でサーバー側にフォームに入力されたメッセージ情報をPOSTするようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/components/message_box.js.jsx&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MessageBox = React.createClass(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    ...

+   handleMessageSubmit: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+     $.ajax(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+       url:      &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url,
+       dataType: &lt;span class=&quot;synConstant&quot;&gt;&#39;json&#39;&lt;/span&gt;,
+       type:     &lt;span class=&quot;synConstant&quot;&gt;&#39;POST&#39;&lt;/span&gt;,
+       data:     message,
+       success: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
*         &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; newMessages = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.state.messages.concat(message);
          &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.setState(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; messages: newMessages &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
+       &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;),
+       error: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(_xhr, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
+         console.error(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.props.url, &lt;span class=&quot;synStatement&quot;&gt;status&lt;/span&gt;, err.toString());
+       &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;.bind(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;)
+     &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
+   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;確認&lt;/h4&gt;投稿できるようになります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151122/20151122000620.png&quot; alt=&quot;f:id:nipe880324:20151122000620p:plain:w420&quot; title=&quot;f:id:nipe880324:20151122000620p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;&lt;p&gt;サーバーサイドでReact.jsを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;する「サーバー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;」について記載しましたので、ロード中による画面のばたつきや、ロード中といった表示をなくしたい場合は参考にしてください。&lt;br /&gt;
&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151124/1448300267&quot;&gt;Rails&amp;#x3067;React.js&amp;#x3092;&amp;#x30B5;&amp;#x30FC;&amp;#x30D0;&amp;#x30FC;&amp;#x30EC;&amp;#x30F3;&amp;#x30C0;&amp;#x30EA;&amp;#x30F3;&amp;#x30B0;&amp;#x3059;&amp;#x308B; - Rails Webook&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/tutorial.html&quot;&gt;Tutorial | React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="Javascript" label="Javascript" />
        
        <category term="React.js" label="React.js" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>RailsでElasticsearch: サジェスト (Suggest) 機能でオートコンプリート</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20151027/1445957667"/>
        <id>hatenablog://entry/6653458415126053650</id>
        <published>2015-10-27T23:54:27+09:00</published>
        <updated>2015-10-27T23:54:27+09:00</updated>
        <summary type="html">RailsでElasticsearchのサジェスト機能を使用してオートコンプリート機能を実装します。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151027/20151027234933.png&quot; alt=&quot;f:id:nipe880324:20151027234933p:plain:w420&quot; title=&quot;f:id:nipe880324:20151027234933p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;今回は、「&lt;b&gt;Elasticsearchのサジェスト(Suggest)機能でオートコンプリートを実装&lt;/b&gt;」します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151018/1445142266&quot;&gt;RailsでElasticsearchを使って簡単な全文検索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151019/1445265581&quot;&gt;ページネーション・１ページあたりの表示件数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151021/1445353566&quot;&gt;ソート機能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151022/1445439798&quot;&gt;アグリゲーション（ファセット）と Post Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151025/1445703231&quot;&gt;ハイライト (Highlight)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;と&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でElasticsearchを使って検索機能を実装してきました。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;サジェスト機能では、サジェスター（Suggester）を利用し、入力したテキストから似たような単語を返す機能です。&lt;br /&gt;
Elasticsearch 1.7 では、サジェスト機能の一部はまだ「開発中」のようです。&lt;/p&gt;&lt;p&gt;参考までに、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;はこちらです。&lt;a href=&quot;https://github.com/nipe0324/rails_samples/tree/master/elasticsearch_test&quot; target=&quot;_blank&quot;&gt;elasticsearch_test - GitHub&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-6-data&quot;&gt;データを投入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-6-es-suggest&quot;&gt;Elasticsearchのサジェストクエリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-6-autocomplete&quot;&gt;オートコンプリートでサジェスト機能を利用&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac%20OS%20X&quot;&gt;Mac OS X&lt;/a&gt; 10.11 El Capitan&lt;/li&gt;
&lt;li&gt;elasticsearch 1.7.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/dsl&quot;&gt;dsl&lt;/a&gt; 0.1.2&lt;/li&gt;
&lt;li&gt;elasticsearch-model 0.1.8&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 0.1.8&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-6-data&quot;&gt;1. データを投入&lt;/h3&gt;そろそろデータが寂しくなってきたので、&lt;a href=&quot;https://github.com/livedoor/datasets&quot; target=&quot;_blank&quot;&gt;livedoorグルメの研究用データセット&lt;/a&gt;を使い、それっぽいレストラン情報を表示するようにします。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;データベースを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/postgresql&quot;&gt;postgresql&lt;/a&gt;に変更&lt;/h4&gt;現在、sqlite3を使っているので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/postgresql&quot;&gt;postgresql&lt;/a&gt;に変更します。&lt;/p&gt;&lt;p&gt;&lt;code&gt;sqlite3&lt;/code&gt;を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%E1%A5%F3%A5%C8%A5%A2%A5%A6%A5%C8&quot;&gt;コメントアウト&lt;/a&gt;し、&lt;code&gt;pg&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;#gem &#39;sqlite3&#39;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Use postgresql&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;database.yml&lt;/code&gt;を修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;&amp;amp;default&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; postgresql
  &lt;span class=&quot;synIdentifier&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; postgres
  &lt;span class=&quot;synIdentifier&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; postgres
  &lt;span class=&quot;synIdentifier&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; unicode
  &lt;span class=&quot;synIdentifier&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;lt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;*default&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; elasticsearch_test_development

&lt;span class=&quot;synIdentifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;lt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;*default&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; elasticsearch_test_test

&lt;span class=&quot;synIdentifier&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;lt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;*default&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; elasticsearch_test_production
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;データを投入する&lt;/h4&gt;データベースを&lt;code&gt;postgres&lt;/a&gt;ユーザーをオーナーとして作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;createdb -U postgres elasticsearch_test_development&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/nipe0324/rails_samples/blob/master/elasticsearch_test/db/dump.sql&quot;&gt;dump.sql&lt;/a&gt;からダンプファイルをダウンロードし、下記コマンドでデータを投入します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;psql -U postgres elasticsearch_test_development &amp;lt; db/dump.sql&lt;/pre&gt;&lt;p&gt;※ dump.sqlは、livedoorグルメの研究用データセットを少し加工したダンプデータです&lt;/p&gt;&lt;p&gt;マイグレーションファイルを使わずに、データベースをマイグレートしたので、今後マイグレーションが使えなくなります。&lt;br /&gt;
そのため、マイグレーションファイルを削除します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rm -f ./db/migrate/*.rb&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Elasticsearchにインデクシング&lt;/h4&gt;データを投入したついでに、いくつかカラムも追加したので、それらのデータをElasticsearchにインデクシングします。&lt;/p&gt;&lt;p&gt;まずは、マッピング(DBでいうスキーマ)を修正します。&lt;br /&gt;
詳細は、コメントで記載しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;

  ...

  &lt;span class=&quot;synComment&quot;&gt;# インデックス(index)とマッピング(mappings)の設定&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# katakana_analyzerというカタカナとしてアナライズするアナライザーを定義&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# kuromoji_tokenizerでトークン化し、katakana_readingformでフィルターをする&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# katakana_readingformはカタカナかローマ字に変換するトークンフィルター&lt;/span&gt;
  settings &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: {
    &lt;span class=&quot;synConstant&quot;&gt;analysis&lt;/span&gt;: {
      &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: {
        &lt;span class=&quot;synConstant&quot;&gt;katakana_analyzer&lt;/span&gt;: {
          &lt;span class=&quot;synConstant&quot;&gt;tokenizer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji_tokenizer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;filter&lt;/span&gt;: [&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;katakana_readingform&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;]
        }
      },
      &lt;span class=&quot;synConstant&quot;&gt;filter&lt;/span&gt;: {
        &lt;span class=&quot;synConstant&quot;&gt;katakana_readingform&lt;/span&gt;: {
          &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji_readingform&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;use_romaji&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
        }
      }
    }
  } &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    mappings &lt;span class=&quot;synConstant&quot;&gt;dynamic&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# デフォルトでマッピングが自動作成されるがそれを無効にする&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# マッピングの公式ドキュメント&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-core-types.html&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# indexesメソッドでインデックスする値を定義します。&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# analyzer: インデクシング時、検索時に使用するアナライザーを指定します。指定しない場合、グローバルで設定されているアナライザーが利用されます。&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# kuromojiは日本語のアナライザーです。&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;,      &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:name_kana&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:alphabet&lt;/span&gt;

      indexes &lt;span class=&quot;synConstant&quot;&gt;:zip&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:address&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:description&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# type: booleanでclosedはboolean型として定義します&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      indexes &lt;span class=&quot;synConstant&quot;&gt;:access_count&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# date型として定義&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# formatは日付のフォーマットを指定(2015-10-16T19:26:03.679Z)&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# 詳細: https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;date_time&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:updated_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;date_time&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# ロケーション情報も定義&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:location&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;geo_point&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# 階層化してインデクシングできます。pref.nameとして検索できます。&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;not_analyzed&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      indexes &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;not_analyzed&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# サジェストのために、レストラン名を、そのまま(raw)、ひらがな(hira)、&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# かたかな(kana)、ローマ字(romaji)で作成&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# type: &#39;completion&#39;にすることで前方一致でサジェスト検索できる&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:suggest&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name_raw&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name_hira&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name_kana&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;index_analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;katakana_analyzer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name_romaji&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次にインデクシング時に呼ばれる&lt;code&gt;as_indexed_json&lt;/code&gt;メソッドを修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# インデクシング時に呼び出されるメソッド&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# マッピングのデータを返すようにする&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;as_indexed_json&lt;/span&gt;(options = {})
    attributes
      .symbolize_keys
      .slice(
        &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name_kana&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:alphabet&lt;/span&gt;,
        &lt;span class=&quot;synConstant&quot;&gt;:zip&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:address&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:description&lt;/span&gt;,
        &lt;span class=&quot;synConstant&quot;&gt;:access_count&lt;/span&gt;,
        &lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:updated_at&lt;/span&gt;)
      .merge(&lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: pref.name })
      .merge(&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: category.name })
      .merge(&lt;span class=&quot;synConstant&quot;&gt;location&lt;/span&gt;: location)
      .merge(&lt;span class=&quot;synConstant&quot;&gt;suggest&lt;/span&gt;: {
        &lt;span class=&quot;synConstant&quot;&gt;name_raw&lt;/span&gt;: name,
        &lt;span class=&quot;synConstant&quot;&gt;name_hira&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;input&lt;/span&gt;: name_kana, &lt;span class=&quot;synConstant&quot;&gt;output&lt;/span&gt;: name },
        &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: name,
        &lt;span class=&quot;synConstant&quot;&gt;name_romaji&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;input&lt;/span&gt;: alphabet, &lt;span class=&quot;synConstant&quot;&gt;output&lt;/span&gt;: name },
      })
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# ロケーションが存在しない場合もあるため、&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# マッピングのgeo_point型の場合、&amp;quot;lat,lon&amp;quot;の形式で返す必要がある&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-geo-point-type.html&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;location&lt;/span&gt;
    (lat &amp;amp;&amp;amp; lon) ? &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;lat&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;lon&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、インデックスを再作成して、データをインデクシングします。&lt;br /&gt;
※ レストラン数が20万件ほどあるので、数十分ほどかかります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# rails console&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.create_index! &lt;span class=&quot;synConstant&quot;&gt;force&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.refresh_index!
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.import
&lt;/pre&gt;&lt;p&gt;最後に、少しデータ項目も増えたので検索結果画面の表示内容を修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の数をカラム区切りで表示できるように number_with_delimiter を呼ぶようにする --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;検索結果: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; number_with_delimiter&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; current_document %&amp;gt;&lt;/span&gt; / 約&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; number_with_delimiter&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @restaurants.results.total %&amp;gt;&lt;/span&gt;件&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;表示件数: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; per_page_links&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;ソート順: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; sort_links&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.each do |r| %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;（&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :name_kana) %&amp;gt;&lt;/span&gt;）&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- description を表示するように修正 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.description&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text-muted&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- アクセス数 を表示するように修正 --&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;アクセス数&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; (&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.access_count&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;)&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;都道府県:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;pref.name&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;カテゴリ:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;category.name&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;出店日:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.created_at&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  ...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、検索をしてみると、Elasticsearchにうまくインデクシングされていれば、検索結果が「約20万件」と表示されれると思います。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151027/20151027234849.png&quot; alt=&quot;f:id:nipe880324:20151027234849p:plain:w420&quot; title=&quot;f:id:nipe880324:20151027234849p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-6-es-suggest&quot;&gt;2. Elasticsearchのサジェストクエリ&lt;/h3&gt;Elasticsearchの公式ドキュメントの「&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html&quot; target=&quot;_blank&quot;&gt;suggester&lt;/a&gt;」を参考にすると、サジェストを行うには、&lt;code&gt;_search&lt;/code&gt;と&lt;code&gt;_suggest&lt;/code&gt;の２つのエンドポイントがあることがわかります。&lt;/p&gt;&lt;p&gt;今回は、オートコンプリートのためのサジェストであり、検索結果やアグリゲーションなど必要ないため、&lt;code&gt;_suggest&lt;/code&gt;のほうを利用します。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://localhost:9200/_plugin/marvel/sense/index.html&quot; target=&quot;_blank&quot;&gt;Marvel Sense&lt;/a&gt;を開き、サジェストのクエリを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/restaurant/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 0,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggest&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;my_suggest&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;レストラン&amp;quot;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;completion&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggest.name_raw&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;// 結果&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;took&amp;quot;&lt;/span&gt;: 41,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;timed_out&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_shards&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 5,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;successful&amp;quot;&lt;/span&gt;: 5,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;: 0
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 214227,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;: 0,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[]&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggest&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;my_suggest&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
         &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;レストラン&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;offset&amp;quot;&lt;/span&gt;: 0,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;length&amp;quot;&lt;/span&gt;: 5,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;options&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
               &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;レストラン鎌倉山&amp;quot;&lt;/span&gt;,
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;: 3
               &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
               &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;レストラン オリーブ&amp;quot;&lt;/span&gt;,
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;: 2
               &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
               &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;レストラン オーパス&amp;quot;&lt;/span&gt;,
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;: 2
               &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
               &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;レストラン スコット&amp;quot;&lt;/span&gt;,
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;: 2
               &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
               &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;レストラン ポルト&amp;quot;&lt;/span&gt;,
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;: 2
               &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
         &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;※Marvel Senseから&lt;code&gt;_suggest&lt;/code&gt;をうまく使えなかったので&lt;code&gt;_search&lt;/code&gt;で実行しています。&lt;/p&gt;&lt;p&gt;このように、&lt;code&gt;suggest.&lt;サジェスト名&gt;.options&lt;/code&gt;内に配列で返ってきます。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-6-autocomplete&quot;&gt;3. オートコンプリートでサジェスト機能を利用&lt;/h3&gt;jQuery UI と Elasticsearchのサジェスト機能でオートコンプリートを実装します。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;jQuery UIでオートコンプリート&lt;/h4&gt;まずは、jQuery UIでオートコンプリートを作成します。&lt;/p&gt;&lt;p&gt;Gemfileに&lt;code&gt;jquery-ui-rails&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;jquery-ui-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;インストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;&lt;code&gt;application.js&lt;/code&gt;にオートコンプリートモジュールのみ追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/applciation.js&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;//= require jquery&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require jquery-ui/autocomplete&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require jquery_ujs&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require turbolinks&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require_tree .&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;application.css&lt;/code&gt;にもオートコンプリートのスタイリングファイルを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;/* app/assets/stylesheets/applicaiton.css */&lt;/span&gt;

 &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt;= require jquery-ui/autocomplete
 &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt;= require jquery-ui-custom
 &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt;= require_tree &lt;span class=&quot;synSpecial&quot;&gt;.&lt;/span&gt;
 &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt;= require_self
 &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt;/
&lt;/pre&gt;&lt;p&gt;Bootstrapに合うようにjQuery UIのオートコンプリートのスタイリングを修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;/* app/assets/stylesheets/jquery-ui-custom.css */&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;.ui-autocomplete&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;absolute&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100%&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1000&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;float&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;left&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;display&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;none&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;min-width&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;160px&lt;/span&gt;;
  _width: &lt;span class=&quot;synConstant&quot;&gt;160px&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;4px&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;list-style&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;none&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;#ffffff&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;border-color&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;#ccc&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;border-color&lt;/span&gt;: rgba(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0.2&lt;/span&gt;);
  &lt;span class=&quot;synType&quot;&gt;border-style&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;solid&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;border-width&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1px&lt;/span&gt;;
  -webkit-&lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt;;
  -moz-&lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt;;
  -webkit-box-shadow: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;10px&lt;/span&gt; rgba(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0.2&lt;/span&gt;);
  -moz-box-shadow: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;10px&lt;/span&gt; rgba(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0.2&lt;/span&gt;);
  box-shadow: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;10px&lt;/span&gt; rgba(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0.2&lt;/span&gt;);
  -webkit-&lt;span class=&quot;synType&quot;&gt;background&lt;/span&gt;-&lt;span class=&quot;synType&quot;&gt;clip&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;padding&lt;/span&gt;-box;
  -moz-&lt;span class=&quot;synType&quot;&gt;background&lt;/span&gt;-&lt;span class=&quot;synType&quot;&gt;clip&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;padding&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;background&lt;/span&gt;-&lt;span class=&quot;synType&quot;&gt;clip&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;padding&lt;/span&gt;-box;
  *&lt;span class=&quot;synType&quot;&gt;border-right-width&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;2px&lt;/span&gt;;
  *&lt;span class=&quot;synType&quot;&gt;border-bottom-width&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;2px&lt;/span&gt;;

  .ui-&lt;span class=&quot;synType&quot;&gt;menu&lt;/span&gt;-item &amp;gt; a.ui-corner-&lt;span class=&quot;synType&quot;&gt;all&lt;/span&gt; {
    &lt;span class=&quot;synType&quot;&gt;display&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;block&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;3px&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;15px&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;clear&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;both&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;font-weight&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;normal&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;18px&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;#555555&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;white-space&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;nowrap&lt;/span&gt;;

    &amp;amp;.ui-state-hover, &amp;amp;.ui-state-active {
      &lt;span class=&quot;synType&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;#ffffff&lt;/span&gt;;
      &lt;span class=&quot;synType&quot;&gt;text-decoration&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;none&lt;/span&gt;;
      &lt;span class=&quot;synType&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;#0088cc&lt;/span&gt;;
      &lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;0px&lt;/span&gt;;
      -webkit-&lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;0px&lt;/span&gt;;
      -moz-&lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;0px&lt;/span&gt;;
      &lt;span class=&quot;synType&quot;&gt;background-image&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;none&lt;/span&gt;;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synError&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;最後にオートコンプリートを呼び出すようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-coffee&quot; data-lang=&quot;coffee&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/top.coffee&lt;/span&gt;
$ &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt;
  $&lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;#q&#39;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;autocomplete
    &lt;span class=&quot;synIdentifier&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/top/suggest.json&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;サーバーサイドのサジェスト機能を実装&lt;/h4&gt;クライアント側の処理を追加したので、サーバー側でサジェスト機能の実装をします。&lt;/p&gt;&lt;p&gt;&lt;code&gt;top/suggest&lt;/code&gt;のルートを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.routes.draw &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  root &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;top#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  get  &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;top/suggest&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;to&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;top#suggest&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;defaults&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
コントローラーに&lt;code&gt;suggest&lt;/code&gt;アクションを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/top_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TopController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  ...

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;suggest&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# jQuery UI Autocompleteから&amp;quot;term&amp;quot;キーで入力フィールドの値が送られてくる&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# namesはレストラン名の配列&lt;/span&gt;
    names = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.suggest(params[&lt;span class=&quot;synConstant&quot;&gt;:term&lt;/span&gt;])
    render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: names
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、Restaurantモデルに&lt;code&gt;suggets&lt;/code&gt;メソッドを追加します。&lt;br /&gt;
&lt;code&gt;elasticsearch-dsl gem&lt;/code&gt;ではまだ&lt;code&gt;_suggest&lt;/code&gt;エンドポイントにアクセスするDSLは定義されていなかったので、&lt;code&gt;elasticserch-persistence gem&lt;/code&gt;を利用します。&lt;/p&gt;&lt;p&gt;Gemfileに追加し、&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch-persistence&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-rails.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;インストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;

  ...

  &lt;span class=&quot;synComment&quot;&gt;# サジェストのキー&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;SUGGEST_KEYS&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; name_raw name_kana name_romaji name_hira &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;

  ...

  &lt;span class=&quot;synComment&quot;&gt;# サジェスト結果を配列で返す&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;suggest&lt;/span&gt;(keyword)

    &lt;span class=&quot;synComment&quot;&gt;# 次のようなサジェストのボディ(Hash)を作成&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# name_raw: {&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   text: &amp;lt;keyword&amp;gt;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   completion: { field: &amp;quot;suggest.name_raw&amp;quot;, size: 10 }&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# },&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# name_kana: {&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   ...&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# }&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
    suggest_definition = &lt;span class=&quot;synType&quot;&gt;SUGGEST_KEYS&lt;/span&gt;.inject({}) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;result&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;key&lt;/span&gt;|
      result.merge(
        key =&amp;gt; {
          &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: keyword,
          &lt;span class=&quot;synConstant&quot;&gt;completion&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;field&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;suggest.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;key&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt; }
        }
      )
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# elasticsearch-persistence を利用し、Elasticsearchにサジェストクエリを送る&lt;/span&gt;
    response = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Persistence&lt;/span&gt;.client.suggest({
      &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.index_name,
      &lt;span class=&quot;synConstant&quot;&gt;body&lt;/span&gt;: suggest_definition
    })

    &lt;span class=&quot;synComment&quot;&gt;# Elasticsearchからの結果を配列に変換する&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;SUGGEST_KEYS&lt;/span&gt;.map &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;key&lt;/span&gt;|
      response[key][&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;].map{|&lt;span class=&quot;synIdentifier&quot;&gt;opt&lt;/span&gt;| opt.fetch(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;)}
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;.flatten.uniq
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  ...
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;動作確認&lt;/h4&gt;サジェスト機能を使ってオートコンプリートを実装しましたので、画面から確認します。&lt;br /&gt;
検索バーに適当にキーワードを入れると、前方一致で検索した店名が検索されます。&lt;br /&gt;
ひらがな、カタカナ、ローマ字などでもサジェスト検索するようにしていますので、それらのキーワードでもサジェストされます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151027/20151027234933.png&quot; alt=&quot;f:id:nipe880324:20151027234933p:plain:w420&quot; title=&quot;f:id:nipe880324:20151027234933p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/kijtra/items/36dd35b3b9db75c88f55&quot;&gt;Elasticsearch&amp;#x3067;&amp;#x3001;&amp;#x6F22;&amp;#x5B57;&amp;#x30C7;&amp;#x30FC;&amp;#x30BF;&amp;#x3067;&amp;#x3082;&amp;#x5E73;&amp;#x4EEE;&amp;#x540D;&amp;#x3067;&amp;#x30B5;&amp;#x30B8;&amp;#x30A7;&amp;#x30B9;&amp;#x30C8;&amp;#x53D6;&amp;#x5F97; - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/daz/2168334&quot;&gt;Bootstrap styling for jQuery UI autocomplete &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="elasticsearch" label="elasticsearch" />
        
        <category term="検索" label="検索" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>RailsでElasticsearch: ハイライト（Highlight）</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20151025/1445703231"/>
        <id>hatenablog://entry/6653458415125740097</id>
        <published>2015-10-25T01:13:51+09:00</published>
        <updated>2015-10-27T23:55:25+09:00</updated>
        <summary type="html">RailsでElasticsearchを使ってハイライト（Highlight）機能を実装します。Elasticsearchのhighlightキーを指定することでハイライトを実施できます。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170217.png&quot; alt=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151018/1445142266&quot;&gt;RailsでElasticsearchを使って簡単な全文検索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151019/1445265581&quot;&gt;ページネーション・１ページあたりの表示件数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151021/1445353566&quot;&gt;ソート機能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151022/1445439798&quot;&gt;アグリゲーション（ファセット）と Post Filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;と&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でElasticsearchを使って検索機能を実装してきました。&lt;br /&gt;
今回は、「&lt;b&gt;Elasticsearchのハイライト機能&lt;/b&gt;」について簡単に説明します。&lt;/p&gt;&lt;p&gt;参考までに、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;はこちらです。&lt;a href=&quot;https://github.com/nipe0324/rails_samples/tree/master/elasticsearch_test&quot; target=&quot;_blank&quot;&gt;elasticsearch_test - GitHub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-5-highlight&quot;&gt;ハイライト機能を実装&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac%20OS%20X&quot;&gt;Mac OS X&lt;/a&gt; 10.11 El Capitan&lt;/li&gt;
&lt;li&gt;elasticsearch 1.7.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/dsl&quot;&gt;dsl&lt;/a&gt; 0.1.2&lt;/li&gt;
&lt;li&gt;elasticsearch-model 0.1.8&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 0.1.8&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-5-highlight&quot;&gt;1. ハイライト機能を実装&lt;/h3&gt;次のようにハイライト機能を実装します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151025/20151025010952.png&quot; alt=&quot;f:id:nipe880324:20151025010952p:plain:w420&quot; title=&quot;f:id:nipe880324:20151025010952p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;Elasticsearchのハイライトクエリを作成&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html&quot; target=&quot;_blank&quot;&gt;Highlighting - Elasticsearch Documentation&lt;/a&gt;によると、&lt;code&gt;&quot;highlight&quot;&lt;/code&gt;キーを指定することで、ハイライトを行えます。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby/blob/master/elasticsearch-dsl/lib/elasticsearch/dsl/search/highlight.rb&quot; target=&quot;_blank&quot;&gt;highlight.rb - elasticsearch-dsl&lt;/a&gt;を参考にし、&lt;code&gt;search&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;にハイライトキーを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
    ...
    search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
      query { ... }

      &lt;span class=&quot;synComment&quot;&gt;# highlightキーを指定&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#   pre_tagsでマッチした文字列の前(pre)に追加するタグを指定&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#   post_tagsでマッチした文字列の後(post)に追加するタグを指定&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#   filedsでハイライトを行うフィールドを指定&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#   マッチした場合次のようになります。&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;highlight&amp;gt;文字列&amp;lt;/highlight&amp;gt;&lt;/span&gt;
      highlight {
        pre_tags [&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;highlight&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;]
        post_tags [&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;/highlight&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;]
        fields &lt;span class=&quot;synSpecial&quot;&gt;%w{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; name name_kana address pref.name category.name &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
      }
    }
    ...
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;レスポンスの確認&lt;/h4&gt;クエリで&lt;code&gt;highlight&lt;/code&gt;を指定したので、レスポンスを確認します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 「牛角」で検索したときのレスポンス&lt;/span&gt;
response = __elasticsearch__.search(search_definition)
result = response.first
=&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#&amp;lt;Elasticsearch::Model::Response::Result:0x007fa5f5509400&lt;/span&gt;
 &lt;span class=&quot;synIdentifier&quot;&gt;@result&lt;/span&gt;=
  {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;restaurant_development&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_type&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;restaurant&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;605&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_score&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;,
   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_source&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;
    {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ぎゅうかく&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;130-0033&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;池袋3-33&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015-10-18T11:41:12.335Z&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;東京都&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;},
     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;居酒屋&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}},
   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;highlight&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;highlight&amp;gt;牛&amp;lt;/highlight&amp;gt;&amp;lt;highlight&amp;gt;角&amp;lt;/highlight&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]},
   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;[&lt;span class=&quot;synConstant&quot;&gt;1445168472335&lt;/span&gt;]}&amp;gt;

&lt;span class=&quot;synComment&quot;&gt;# highlightキーに格納されています&lt;/span&gt;
result.highlight
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;name&amp;quot;=&amp;gt;[&amp;quot;&amp;lt;highlight&amp;gt;牛&amp;lt;/highlight&amp;gt;&amp;lt;highlight&amp;gt;角&amp;lt;/highlight&amp;gt;&amp;quot;]}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# マッチしたフィールド名で取得できます&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 形態素解析のkuromojiが「牛」と「角」に分割しているので次のようになっている。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# そこら辺は辞書登録などアナライザーをチューニングする必要があるがここでは省略します&lt;/span&gt;
result.highlight.name
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;&amp;lt;highlight&amp;gt;牛&amp;lt;/highlight&amp;gt;&amp;lt;highlight&amp;gt;角&amp;lt;/highlight&amp;gt;&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ハイライト文字列を表示するヘルパーを作成&lt;/h4&gt;ハイライトの値を表示するヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# ハイライト文字列(&amp;lt;highlight&amp;gt;[文字列]&amp;lt;/highlight&amp;gt;)か文字列([文字列])を返す&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   result [Elasticsearch::Model::Response::Result] を指定&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   field  フィールド名&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;highlight_or_text&lt;/span&gt;(result, field)
    highlight_for_result(result, field) || text_for_result(result, field)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# ハイライト文字列を返す&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 存在しな場合もあるのでtryを行っている&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;highlight_for_result&lt;/span&gt;(result, field)
    result.try(&lt;span class=&quot;synConstant&quot;&gt;:highlight&lt;/span&gt;).try(field.to_sym).try(&lt;span class=&quot;synConstant&quot;&gt;:join&lt;/span&gt;).try(&lt;span class=&quot;synConstant&quot;&gt;:html_safe&lt;/span&gt;)
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 文字列を返す&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# pref.nameなどに対応できるようにするためにinjectメソッドを利用しています&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;text_for_result&lt;/span&gt;(result, field)
    field.to_s.split(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).inject(result) { |&lt;span class=&quot;synIdentifier&quot;&gt;result&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;field&lt;/span&gt;| result.send(field.to_sym) }
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;※これらの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;はresultを使っているので、&lt;code&gt;[Elasticsearch::Model::Response::Result]&lt;/code&gt;をラッピングさせたResultクラスを作って、その中で処理をさせたほうがよいと思います。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;ビューでハイライトさせる&lt;/h4&gt;ハイライト文字列は&lt;code&gt;highlight&lt;/code&gt;タグで囲むようにしていますので、スタイリングを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;/* app/assets/stylesheets/application.css */

...
highlight {
  color: #d9534f;
  font-style: italic;
}&lt;/pre&gt;&lt;p&gt;そして、ビューファイルで先程の&lt;code&gt;highlight_or_text&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を呼び出します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;

...

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.each do |r| %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- highlight_or_textヘルパーメソッドに変更する --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;（&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :name_kana) %&amp;gt;&lt;/span&gt;）&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text-muted&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;都道府県:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;pref.name&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;カテゴリ:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;category.name&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;出店日:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.created_at&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ハイライトの画面確認&lt;/h4&gt;次のように「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%ED%B3%D1&quot;&gt;牛角&lt;/a&gt;」で検索すると&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%ED%B3%D1&quot;&gt;牛角&lt;/a&gt;が赤文字で表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151025/20151025010952.png&quot; alt=&quot;f:id:nipe880324:20151025010952p:plain:w420&quot; title=&quot;f:id:nipe880324:20151025010952p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;まとめ&lt;/h3&gt;
    &lt;p&gt;Elasticsearchで&lt;code&gt;highlihgt&lt;/code&gt;キーを指定することで、ハイライト機能を実装しました。レスポンスでは、マッチした文字列がある場合、&lt;code&gt;highlight&lt;/code&gt;に値が入ります。&lt;br /&gt;
次は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151027/1445957667&quot;&gt;Elasticsearchのサジェスト機能を使用してオートコンプリート機能&lt;/a&gt;」を実装します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html&quot;&gt;Highlighting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="elasticsearch" label="elasticsearch" />
        
        <category term="検索" label="検索" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>RailsでElasticsearch: アグリゲーション（ファセット）と Post Filter</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20151022/1445439798"/>
        <id>hatenablog://entry/6653458415125052769</id>
        <published>2015-10-22T00:03:18+09:00</published>
        <updated>2015-10-25T01:15:07+09:00</updated>
        <summary type="html">RailsでElasticsearchを使って、アグリゲーション（ファセット）と Post Filter を使ってファセット機能を実装します。
「アグリゲーション」は、SQLでいうGROUP BYのようなもので、最小値、最大値、平均値などを求めたり、カテゴリ毎の数を数えたりなどドキュメントを集約させるものです。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170217.png&quot; alt=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151018/1445142266&quot;&gt;RailsでElasticsearchを使って簡単な全文検索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151019/1445265581&quot;&gt;ページネーション・１ページあたりの表示件数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151021/1445353566&quot;&gt;ソート機能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;と&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でElasticsearchを使って検索機能を実装してきました。&lt;br /&gt;
今回は、「&lt;b&gt;アグリゲーション（ファセット）と Post Filter&lt;/b&gt;」について説明します。&lt;/p&gt;&lt;p&gt;「アグリゲーション」は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SQL&quot;&gt;SQL&lt;/a&gt;でいうGROUP BYのようなもので、最小値、最大値、平均値などを求めたり、カテゴリ毎の数を数えたりなどドキュメントを集約させるものです。Elasticsearchでは、従来あった集約機能の「ファセット」では複雑な集約を処理できなかったので、新しくアグリゲーションを作ったぽいです。&lt;/p&gt;&lt;p&gt;具体的には、下記画像の左側のサイドバーで検索結果を絞り込めるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151021/20151021235800.png&quot; alt=&quot;f:id:nipe880324:20151021235800p:plain:w420&quot; title=&quot;f:id:nipe880324:20151021235800p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-4-es-query&quot;&gt;アグリゲーションのためのElasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-4-category-aggregation&quot;&gt;カテゴリのアグリゲーションの実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-4-multi-category&quot;&gt;複数カテゴリの検索に対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-4-pref&quot;&gt;都道府県のアグリゲーションと複数都道府県の検索&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac%20OS%20X&quot;&gt;Mac OS X&lt;/a&gt; 10.11 El Capitan&lt;/li&gt;
&lt;li&gt;elasticsearch 1.7.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/dsl&quot;&gt;dsl&lt;/a&gt; 0.1.2&lt;/li&gt;
&lt;li&gt;elasticsearch-model 0.1.8&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 0.1.8&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-4-es-query&quot;&gt;アグリゲーションのためのElasticsearch&lt;br /&gt;
&lt;h4&gt;アグリゲーションの形式&lt;/h4&gt;アグリゲーションの形式は次の様に記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;aggregations&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;lt;アグリゲーション名&amp;gt;&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;lt;アグリゲーションタイプ&amp;gt;&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &amp;lt;アグリゲーションタイプに応じた記載&amp;gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;アグリゲーション名は、&lt;code&gt;caetgory&lt;/code&gt;や&lt;code&gt;min_price&lt;/code&gt;など自分で自由にアグリゲーションの名前を決めます。&lt;br /&gt;
アグリゲーションタイプは、&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html&quot;&gt;Aggregations - Elasticsearch&lt;/a&gt;のサイドバーに記載されている、Min Aggregation、Max Aggregation、Terms Aggregation、Filter Aggregationなどどのようにアグリゲーションするかによってアグリゲーションタイプを分けます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;カテゴリで集約&lt;/h4&gt;カテゴリのアグリゲーションを作成してみます。&lt;br /&gt;
&lt;a href=&quot;http://localhost:9200/_plugin/marvel/sense/index.html&quot; target=&quot;_blank&quot;&gt;Marvel Sense&lt;/a&gt;を開き、下記クエリを実行してください。&lt;br /&gt;
アグリゲーション名は&lt;code&gt;category&lt;/code&gt;、アグリゲーションタイプは&lt;code&gt;Terms Aggregation&lt;/code&gt;を利用しています。&lt;br /&gt;
&lt;code&gt;Terms Aggregation&lt;/code&gt;では、&lt;code&gt;field&lt;/code&gt;でカテゴリ名(category.name)でグルーピングし、&lt;code&gt;size&lt;/code&gt;で最大10件表示すると指定しています。&lt;br /&gt;
結果として、&lt;code&gt;aggregations.category.bucket&lt;/code&gt;にグルーピングした結果が入ります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 0, &lt;span class=&quot;synComment&quot;&gt;// hitsを表示したくないのであえてsizeは0に指定&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;aggs&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;terms&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category.name&amp;quot;&lt;/span&gt;,
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 10
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// 結果&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;took&amp;quot;&lt;/span&gt;: 1,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;timed_out&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_shards&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    ...
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 600,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;: 0,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[]&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;aggregations&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count_error_upper_bound&amp;quot;&lt;/span&gt;: 0,
         &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sum_other_doc_count&amp;quot;&lt;/span&gt;: 0,
         &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;buckets&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;イタリアン&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count&amp;quot;&lt;/span&gt;: 200
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
            &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;定食&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count&amp;quot;&lt;/span&gt;: 200
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
            &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;居酒屋&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count&amp;quot;&lt;/span&gt;: 200
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;検索結果のみフィルタする&lt;/h4&gt;一番最初に&lt;code&gt;filterd&lt;/code&gt;によって、検索結果やアグリゲーションの結果を絞り込むことができることを説明しましたが、検索結果は絞りたいが、アグリゲーションはナビゲーション的な役割を示しているので絞りたくないという場合が往々にあります。&lt;br /&gt;
そういう場合に、&lt;code&gt;post_filter&lt;/code&gt;キーを利用して、検索結果のみを絞りことができます。&lt;/p&gt;&lt;p&gt;例えば、以下のように&lt;code&gt;filterd&lt;/code&gt;内にカテゴリの検索条件を指定してしまうと、検索結果とともに、アグリゲーションも絞りこまれてしまっています。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;GET restaurant_development/_search
{
  &amp;#34;query&amp;#34;: {
    &amp;#34;filtered&amp;#34;: {
      &amp;#34;query&amp;#34;: { &amp;#34;match_all&amp;#34;: {} },
      &amp;#34;filter&amp;#34;: {
        &amp;#34;bool&amp;#34;: { // bool filterは複数のフィルタを使用できるようにする
          &amp;#34;must&amp;#34;: [ // mustは各フィルタがAND条件、shouldは各フィルタがOR条件
            { &amp;#34;term&amp;#34;: { &amp;#34;closed&amp;#34;: &amp;#34;false&amp;#34; } },
            { &amp;#34;term&amp;#34;: { &amp;#34;category.name&amp;#34;: &amp;#34;定食&amp;#34; } }
          ]
        }
      }
    }
  },
  &amp;#34;size&amp;#34;: 0,
  &amp;#34;aggregations&amp;#34;: {
    &amp;#34;category&amp;#34;: {
      &amp;#34;terms&amp;#34;: { &amp;#34;field&amp;#34;: &amp;#34;category.name&amp;#34;, &amp;#34;size&amp;#34;: 10 }
    }
  }
}

// 結果
{
   &amp;#34;took&amp;#34;: 5,
   &amp;#34;timed_out&amp;#34;: false,
   &amp;#34;_shards&amp;#34;: {
      &amp;#34;total&amp;#34;: 5,
      &amp;#34;successful&amp;#34;: 5,
      &amp;#34;failed&amp;#34;: 0
   },
   &amp;#34;hits&amp;#34;: {
      &amp;#34;total&amp;#34;: 200, // 検索結果は、category.nameとclosedで絞られて600件から200件になっている
      &amp;#34;max_score&amp;#34;: 0,
      &amp;#34;hits&amp;#34;: []
   },
   &amp;#34;aggregations&amp;#34;: {
      &amp;#34;category&amp;#34;: {
         &amp;#34;doc_count_error_upper_bound&amp;#34;: 0,
         &amp;#34;sum_other_doc_count&amp;#34;: 0,
         &amp;#34;buckets&amp;#34;: [ // アグリゲーションの結果もcategory.nameとclosedで絞られて「定食」のみになっている
            {
               &amp;#34;key&amp;#34;: &amp;#34;定食&amp;#34;,
               &amp;#34;doc_count&amp;#34;: 200
            }
         ]
      }
   }
}&lt;/pre&gt;&lt;p&gt;このように、アグリゲーションの結果も絞り込んでしまいたく場合は次のように&lt;code&gt;post_filter&lt;/code&gt;を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;filtered&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;filter&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;must&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;closed&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 0,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;aggregations&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;terms&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category.name&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 10 &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;post_filter&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;must&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category.name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;定食&amp;quot;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// 結果&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;took&amp;quot;&lt;/span&gt;: 4,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;timed_out&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_shards&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 5,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;successful&amp;quot;&lt;/span&gt;: 5,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;: 0
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 200, &lt;span class=&quot;synComment&quot;&gt;// 検索結果はcateogyr.nameとclosedで絞りこまれている&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;: 0,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[]&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;aggregations&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count_error_upper_bound&amp;quot;&lt;/span&gt;: 0,
         &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sum_other_doc_count&amp;quot;&lt;/span&gt;: 0,
         &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;buckets&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// アグリゲーションの結果は、closedのみで絞りこまれている&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;定食&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count&amp;quot;&lt;/span&gt;: 200
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
            &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;イタリアン&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count&amp;quot;&lt;/span&gt;: 100
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
            &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;居酒屋&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count&amp;quot;&lt;/span&gt;: 100
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-4-category-aggregation&quot;&gt;カテゴリのアグリゲーションの実装&lt;br /&gt;
次のようにカテゴリで検索結果を絞り込めるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151021/20151021235853.png&quot; alt=&quot;f:id:nipe880324:20151021235853p:plain:w420&quot; title=&quot;f:id:nipe880324:20151021235853p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;アグリゲーションのクエリを作成&lt;/h4&gt;まずは、アグリゲーションのクエリを作成します。アグリゲーション名は「category」、アグリゲーションタイプには「Terms Aggregation」を利用します。&lt;br /&gt;
&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby/blob/master/elasticsearch-dsl/lib/elasticsearch/dsl/search/aggregations/terms.rb&quot;&gt;elasticsearch-ruby/elasticsearch-dsl/lib/elasticsearch/dsl/search/aggregations/terms.rb&lt;/a&gt;を参考にして、&lt;code&gt;search_definition&lt;/code&gt;にカテゴリのアグリゲーションを追加します。&lt;br /&gt;
また、検索結果のみにカテゴリの検索条件を適用させたいので&lt;code&gt;post_filter&lt;/code&gt;も利用しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
  &lt;span class=&quot;synComment&quot;&gt;# 検索パラメータを取得&lt;/span&gt;
  ...
  category_name = params[&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;]

  search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
    ...

    &lt;span class=&quot;synComment&quot;&gt;# アグリゲーション - 集約をする&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/aggregations.html&lt;/span&gt;
    aggregation &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      terms &lt;span class=&quot;synConstant&quot;&gt;field&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# Post Filter - 検索結果のみにフィルターをしたい場合に使う。アグリゲーションに対してフィルターされない&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/_post_filter.html&lt;/span&gt;
    post_filter {
      bool {
        must {
          term &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; category_name
        } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; category_name.present?
      }
    } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; category_name.present?
  }
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;カテゴリのアグリゲーションの表示&lt;/h4&gt;カテゴリのアグリゲーションを画面に表示させる前に、Elasticsearchからのレスポンスがどのように構造になっているか確認します。基本的には、Marvel Senseで実行した結果と同じ構造になっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# rails console&lt;/span&gt;
resposne = __elasticsearch__.search(search_definition)

&lt;span class=&quot;synComment&quot;&gt;# aggregationsキーにアグリゲーションの結果が入っている&lt;/span&gt;
response.aggregations &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; アグリゲーション結果が入っている&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 自分が指定したアグリゲーション名(category)のbucketsに値が入っている&lt;/span&gt;
response.aggregations.category.buckets
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# [&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   {&amp;quot;key&amp;quot;=&amp;gt;&amp;quot;定食&amp;quot;, &amp;quot;doc_count&amp;quot;=&amp;gt;200},&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   {&amp;quot;key&amp;quot;=&amp;gt;&amp;quot;イタリアン&amp;quot;, &amp;quot;doc_count&amp;quot;=&amp;gt;100},&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   {&amp;quot;key&amp;quot;=&amp;gt;&amp;quot;居酒屋&amp;quot;, &amp;quot;doc_count&amp;quot;=&amp;gt;100}&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# ]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面にこれらを表示させるようにします。&lt;br /&gt;
例によってアグリゲーションのカテゴリリンクを作成する&lt;code&gt;category_aggs_link&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を作成しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索フォーム --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; root_path, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :get, enforce_utf8: false do %&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- アグリゲーションの表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- カテゴリ --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel panel-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel-heading&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; category_aggs_link(name:&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;カテゴリ一覧&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, all: true) %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.aggregations.category.buckets.each do |bucket| %&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group-item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; category_aggs_link(name:&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; bucket[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;key&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;], count: bucket.doc_count) %&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
アグリゲーションのカテゴリリンクを表示する&lt;code&gt;category_aggs_link&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を作成します。&lt;br /&gt;
また、&lt;code&gt;query_string&lt;/code&gt;に&lt;code&gt;:cateogy&lt;/code&gt;を追加して、カテゴリの条件を引き継げるようにしておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# アグリゲーションのカテゴリリンクを返す&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   name:  [String]  リンクのテキスト名&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   count: [Integer] カテゴリのドキュメント数。リンクのテキスト名に追加されて表示される (オプション)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   all:   [Boolean] true: カテゴリ一覧のリンク、false: カテゴリ一覧以外のリンク（オプション）&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;category_aggs_link&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;:, &lt;span class=&quot;synConstant&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
    &lt;span class=&quot;synComment&quot;&gt;# 表示するリンク名&lt;/span&gt;
    link_text = count ? &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;name&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;count&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : name

    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; all &lt;span class=&quot;synComment&quot;&gt;# カテゴリ一覧のリンク&lt;/span&gt;
      params = query_string.except(&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# クエリストリングからcategoryを抜く&lt;/span&gt;
      url = params.empty? ? &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# urlを作成&lt;/span&gt;
      link_to link_text, url &lt;span class=&quot;synComment&quot;&gt;# aタグ作成&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# カテゴリ一覧以外のリンク&lt;/span&gt;
      current = query_string.fetch(&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# 現在選択されているカテゴリ名&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; name == current
        name &lt;span class=&quot;synComment&quot;&gt;# 現在選択されているカテゴリはテキストで表示&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
        params = query_string.merge(&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: name)
        url = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
        link_to link_text, url
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 各リンクで引き継ぐクエリストリングパラメータ&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 表示件数やソート順などのリンクを押した時に`q`や`closed`などのパラメータは引き続き設定したままにするために使用&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 下記で`:page`は設定しないので、リンクを押した時に、ページは0ページ目ににクリアされる&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;query_string&lt;/span&gt;
    params.slice(&lt;span class=&quot;synConstant&quot;&gt;:q&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:per&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;画面の確認&lt;/h4&gt;カテゴリのアグリゲーションを表示させます。また、リンクを押すと、そのカテゴリで検索結果が絞られます。&lt;br /&gt;
このとき&lt;code&gt;post_filter&lt;/code&gt;を使っているので、アグリゲーションの結果は絞られていません。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151021/20151021235853.png&quot; alt=&quot;f:id:nipe880324:20151021235853p:plain:w420&quot; title=&quot;f:id:nipe880324:20151021235853p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;例によって、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;ログからElasticsearchのクエリを確認すると、&lt;code&gt;aggregations&lt;/code&gt;でカテゴリ名で集約、&lt;code&gt;post_filter&lt;/code&gt;でカテゴリ名でフィルタしていることがわかります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Started GET &amp;#34;/?category=%E5%AE%9A%E9%A3%9F&amp;#34; for ::1 at 2015-10-18 22:19:59 +0900
Processing by TopController#index as HTML
  Parameters: {&amp;#34;category&amp;#34;=&amp;gt;&amp;#34;定食&amp;#34;}
  Restaurant Search (5.8ms) {index: &amp;#34;restaurant_development&amp;#34;, type: &amp;#34;restaurant&amp;#34;, body: {query: {filtered: {query: {match_all: {}}, filter: {term: {closed: &amp;#34;false&amp;#34;}}}}, post_filter: {bool: {must: [{term: {&amp;#34;category.name&amp;#34;=&amp;gt;&amp;#34;定食&amp;#34;}}]}}, aggregations: {category: {terms: {field: &amp;#34;category.name&amp;#34;, size: 10}}}, sort: [{&amp;#34;created_at&amp;#34;=&amp;gt;{order: &amp;#34;desc&amp;#34;}}]}, size: 40, from: 0}
  Rendered top/index.html.erb within layouts/application (23.7ms)
Completed 200 OK in 59ms (Views: 51.8ms | ActiveRecord: 0.0ms | Elasticsearch: 5.8ms)&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-4-multi-category&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;カテゴリの検索に対応&lt;br /&gt;
現在は１つのカテゴリでしか絞れないので、次のように&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のカテゴリで絞れるように修正します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151021/20151021235921.png&quot; alt=&quot;f:id:nipe880324:20151021235921p:plain:w420&quot; title=&quot;f:id:nipe880324:20151021235921p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;h4&gt;デリミタの定義&lt;/h4&gt;デリミタ（セパレータ）を&lt;code&gt;+&lt;/code&gt;にし、&lt;code&gt;/?category=定食+イタリアン&lt;/code&gt;といったようなURLで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のカテゴリを検索できるようにします。&lt;/p&gt;&lt;p&gt;このとき注意しないといけないのが、カテゴリ名に&lt;code&gt;+&lt;/code&gt;が入らないようにしないといけません。&lt;br /&gt;
カテゴリ名に&lt;code&gt;+&lt;/code&gt;が入ってしまうと、誤ってデリミタで分割してしまいそのカテゴリでうまく検索できなくなってしまいます。&lt;/p&gt;&lt;p&gt;カテゴリ名に&lt;code&gt;+&lt;/code&gt;が入らないようにバリデーションを追加しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# デリミタ: 複数カテゴリなどの検索条件に使用する&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/models/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:restaurants&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# +を含んでいるカテゴリ名はinvalidとする&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# REgexp.newで作成される正規表現 /\/+/&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;without&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Regexp&lt;/span&gt;.new(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;\\#{&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;) }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# うまくバリデーションが設定されているか確認&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).valid? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hoge+hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).valid? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
カテゴリリンクを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のカテゴリを処理できるように修正します。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;方式にして、現在選択されているカテゴリは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;をON、選択されていないカテゴリは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;をOFFにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# カテゴリリンクのパターン&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   カテゴリ一覧のリンク    =&amp;gt; params[:category]を覗いたリンクを作成&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   カテゴリ一覧以外のリンク(現在選択されている)  =&amp;gt; params[:category]の値からカテゴリ名を削除&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   カテゴリ一覧以外のリンク(現在選択されていない) =&amp;gt; params[:category]の値にカテゴリ名を追加&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 引数&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   name:  [String]  リンクのテキスト名&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   count: [Integer] カテゴリのドキュメント数。リンクのテキスト名に追加されて表示される (オプション)&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   all:   [Boolean] true: カテゴリ一覧のリンク、false: カテゴリ一覧以外のリンク（オプション）&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;category_aggs_link&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;:, &lt;span class=&quot;synConstant&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
  &lt;span class=&quot;synComment&quot;&gt;# 表示するリンク名&lt;/span&gt;
  link_text = count ? &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;name&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;count&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : name

  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; all &lt;span class=&quot;synComment&quot;&gt;# カテゴリ一覧のリンク&lt;/span&gt;
    params = query_string.except(&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# クエリストリングからcategoryを抜く&lt;/span&gt;
    url = params.empty? ? &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# aタグのリンク&lt;/span&gt;
    link_to link_text, url &lt;span class=&quot;synComment&quot;&gt;# aタグ作成&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# カテゴリ一覧以外のリンク&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 現在選択されているカテゴリ名の取得ために、カテゴリ名をデリミタで分割する。値がない場合もあるので、tryを使う&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# query_string[:categoyr]は nil や &#39;定食&#39; 、 &#39;定食+イタリアン&#39; などの値がくる&lt;/span&gt;
    currents = query_string[&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;].try(&lt;span class=&quot;synConstant&quot;&gt;:split&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;) || []

    &lt;span class=&quot;synComment&quot;&gt;# 複数のカテゴリで結合できるように、現在選択されている場合はパラメータからカテゴリ名を削除、選択されていない場合はカテゴリ名を追加する&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; name.in?(currents) &lt;span class=&quot;synComment&quot;&gt;# 現在選択されているカテゴリ名&lt;/span&gt;
      category_names = currents - [name]
      params = category_names.empty? ? query_string.except(&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;) : query_string.merge(&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: category_names.join(&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;))
      url = params.empty? ? &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
      link_to url &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;input type=&#39;checkbox&#39; checked=&#39;checked&#39;&amp;gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;link_text&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;.html_safe
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 現在選択されていないカテゴリ名&lt;/span&gt;
      category_names = (currents + [name]).uniq
      params = query_string.merge(&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: category_names.join(&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;))
      url = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
      link_to url &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;input type=&#39;checkbox&#39;&amp;gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;link_text&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;.html_safe
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;search&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;も&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;カテゴリに対応できるようにします。&lt;br /&gt;
カテゴリ名パラメータをデリミタで分割し、&lt;code&gt;post_filter&lt;/code&gt;で&lt;code&gt;should&lt;/code&gt;で各カテゴリ名をOR検索するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;
&lt;span class=&quot;synComment&quot;&gt;# Elasticsearchからのレスポンスを返す&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
  &lt;span class=&quot;synComment&quot;&gt;# 検索パラメータを取得&lt;/span&gt;
  ...
  &lt;span class=&quot;synComment&quot;&gt;# カテゴリ名をデリミタで分割する。値がない場合もあるので、tryを使う&lt;/span&gt;
  category_names = params[&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;].try(&lt;span class=&quot;synConstant&quot;&gt;:split&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;) || []

  &lt;span class=&quot;synComment&quot;&gt;# 検索クエリを作成（Elasticsearch::DSLを利用）&lt;/span&gt;
  search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
    ...

    &lt;span class=&quot;synComment&quot;&gt;# Post Filter - 検索結果のみにフィルターをしたい場合に使う。アグリゲーションに対してフィルターされない&lt;/span&gt;
    post_filter {
      bool {
        &lt;span class=&quot;synComment&quot;&gt;# 複数のカテゴリでOR検索したいので、shouldに変更し、eachで回す&lt;/span&gt;
        category_names.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;category_name&lt;/span&gt;|
          should { term &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; category_name }
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      }
    } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; category_names.present?
  }
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;動作確認&lt;/h4&gt;次の通り、サイドバーのカテゴリ一覧が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;になり、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;を選択できるようになりました。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151021/20151021235921.png&quot; alt=&quot;f:id:nipe880324:20151021235921p:plain:w420&quot; title=&quot;f:id:nipe880324:20151021235921p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;ログでも、&lt;code&gt;post_filter: {bool: {should: [{term: {&quot;category.name&quot;=&gt;&quot;定食&quot;}}, {term: {&quot;category.name&quot;=&gt;&quot;イタリアン&quot;}}]}}&lt;/code&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のカテゴリ名で検索結果を絞っていることがわかります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Started GET &amp;#34;/?category=%E5%AE%9A%E9%A3%9F%2B%E3%82%A4%E3%82%BF%E3%83%AA%E3%82%A2%E3%83%B3&amp;amp;per=80&amp;#34; for ::1 at 2015-10-18 22:27:39 +0900
Processing by TopController#index as HTML
  Parameters: {&amp;#34;category&amp;#34;=&amp;gt;&amp;#34;定食+イタリアン&amp;#34;, &amp;#34;per&amp;#34;=&amp;gt;&amp;#34;80&amp;#34;}
  Restaurant Search (10.7ms) {index: &amp;#34;restaurant_development&amp;#34;, type: &amp;#34;restaurant&amp;#34;, body: {query: {filtered: {query: {match_all: {}}, filter: {term: {closed: &amp;#34;false&amp;#34;}}}}, post_filter: {bool: {should: [{term: {&amp;#34;category.name&amp;#34;=&amp;gt;&amp;#34;定食&amp;#34;}}, {term: {&amp;#34;category.name&amp;#34;=&amp;gt;&amp;#34;イタリアン&amp;#34;}}]}}, aggregations: {category: {terms: {field: &amp;#34;category.name&amp;#34;, size: 10}}}, sort: [{&amp;#34;created_at&amp;#34;=&amp;gt;{order: &amp;#34;desc&amp;#34;}}]}, size: 80, from: 0}
  Rendered top/index.html.erb within layouts/application (29.8ms)
Completed 200 OK in 58ms (Views: 46.4ms | ActiveRecord: 0.0ms | Elasticsearch: 10.7ms)&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-4-pref&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県のアグリゲーションと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県の検索&lt;br /&gt;
カテゴリと同じように&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県もアグリゲーションを行います。また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県で絞り込めるようにします。&lt;br /&gt;
また、アグリゲーション同士の検索条件は連動するようにします。例えば、「カテゴリ:定食屋」で絞りこむと、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県のアグリゲーションは「カテゴリ:定食屋」の集計したものを表示するようにします。逆もしかりです。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151022/20151022000118.png&quot; alt=&quot;f:id:nipe880324:20151022000118p:plain:w420&quot; title=&quot;f:id:nipe880324:20151022000118p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県のアグリゲーション&lt;/h4&gt;画面に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県(pref)のアグリゲーションを表示、絞り込むようにできるようにします。&lt;br /&gt;
例によって、&lt;code&gt;pref_aggs_link&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使用してリンクを表示します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;

...
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- アグリゲーションの表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- カテゴリ --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel panel-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 都道府県 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel panel-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel-heading&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; pref_aggs_link(name:&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;都道府県一覧&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, all: true) %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.aggregations.pref.buckets.each do |bucket| %&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group-item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; pref_aggs_link(name:&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; bucket[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;key&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;], count: bucket.doc_count) %&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、アグリゲーションの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県のリンクを作成する&lt;code&gt;pref_aggs_link&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を実装します。&lt;br /&gt;
&lt;code&gt;category_aggs_link&lt;/code&gt;と&lt;code&gt;pref_aggs_link&lt;/code&gt;はキー名が&lt;code&gt;category&lt;/code&gt;か&lt;code&gt;pref&lt;/code&gt;だけが異なるだけなので、&lt;code&gt;aggs_link&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に共通部分を切り出しました。&lt;br /&gt;
また、&lt;code&gt;query_string&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に&lt;code&gt;:pref&lt;/code&gt;キーを追加しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# アグリゲーションのカテゴリリンクを作成&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;category_aggs_link&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;:, &lt;span class=&quot;synConstant&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
    aggs_link(&lt;span class=&quot;synConstant&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: name, &lt;span class=&quot;synConstant&quot;&gt;count&lt;/span&gt;: count, &lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: all)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# アグリゲーションの都道府県リンクを作成&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;pref_aggs_link&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;:, &lt;span class=&quot;synConstant&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
    aggs_link(&lt;span class=&quot;synConstant&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: name, &lt;span class=&quot;synConstant&quot;&gt;count&lt;/span&gt;: count, &lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: all)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# アグリゲーションのリンクを作成&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# リンクのパターン&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   一覧のリンク    =&amp;gt; params[key]を除いたリンクを作成&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   一覧以外のリンク(現在選択されている)  =&amp;gt; params[key]の値からカテゴリ名を削除&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   一覧以外のリンク(現在選択されていない) =&amp;gt; params[key]の値にカテゴリ名を追加&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 引数&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   name:  [String]  リンクのテキスト名&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   count: [Integer] カテゴリのドキュメント数。リンクのテキスト名に追加されて表示される (オプション)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   all:   [Boolean] true: リンク、false: 一覧以外のリンク（オプション）&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;aggs_link&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;key&lt;/span&gt;:, &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;:, &lt;span class=&quot;synConstant&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
    &lt;span class=&quot;synComment&quot;&gt;# 表示するリンク名&lt;/span&gt;
    link_text = count ? &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;name&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;count&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : name

    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; all &lt;span class=&quot;synComment&quot;&gt;# 一覧のリンク&lt;/span&gt;
      params = query_string.except(key)
      url = params.empty? ? &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
      link_to link_text, url
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 一覧以外のリンク&lt;/span&gt;
      currents = query_string[key].try(&lt;span class=&quot;synConstant&quot;&gt;:split&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;) || [] &lt;span class=&quot;synComment&quot;&gt;# 現在選択されているカテゴリ名&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# 複数のカテゴリで結合できるように、現在選択されている場合はパラメータからカテゴリ名を削除、選択されていない場合はカテゴリ名を追加する&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; name.in?(currents) &lt;span class=&quot;synComment&quot;&gt;# 現在選択されているカテゴリ名&lt;/span&gt;
        aggs_names = currents - [name]
        params = aggs_names.empty? ? query_string.except(key) : query_string.merge(key =&amp;gt; aggs_names.join(&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;))
        url = params.empty? ? &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
        link_to url &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;input type=&#39;checkbox&#39; checked=&#39;checked&#39;&amp;gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;link_text&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;.html_safe
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 現在選択されていないカテゴリ名&lt;/span&gt;
        aggs_names = (currents + [name]).uniq
        params = query_string.merge(key =&amp;gt; aggs_names.join(&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;))
        url = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
        link_to url &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;input type=&#39;checkbox&#39;&amp;gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;link_text&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;.html_safe
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 各リンクで引き継ぐクエリストリングパラメータ&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;query_string&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# :prefを追加&lt;/span&gt;
    params.slice(&lt;span class=&quot;synConstant&quot;&gt;:q&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:per&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
最後に、検索クエリを修正します。&lt;code&gt;parmas[:pref]&lt;/code&gt;を受け取るようにし、アグリゲーションとPost Filterにprefを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
  &lt;span class=&quot;synComment&quot;&gt;# 検索パラメータを取得&lt;/span&gt;
  ...
  pref_names     = params[&lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt;].try(&lt;span class=&quot;synConstant&quot;&gt;:split&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;) || []

  search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
    ...

    &lt;span class=&quot;synComment&quot;&gt;# アグリゲーション&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/aggregations.html&lt;/span&gt;
    aggregation &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      terms &lt;span class=&quot;synConstant&quot;&gt;field&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# アグリゲーションにprefを追加。sizeは都道府県が47なので、47にしておきます&lt;/span&gt;
    aggregation &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      terms &lt;span class=&quot;synConstant&quot;&gt;field&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pref.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;47&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# Post Filter - 検索結果のみにフィルターをしたい場合に使う。アグリゲーションに対してフィルターされない&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Post Filter - 検索結果のみにフィルターをしたい場合に使う。アグリゲーションに対してフィルターされない&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/_post_filter.html&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; category_names.present? || pref_names.present?
      post_filter {
        &lt;span class=&quot;synComment&quot;&gt;# (カテゴリ1 OR カテゴリ2 OR ...) AND (都道府県1 OR 都道府県2 OR ...) となる&lt;/span&gt;
        bool {
          &lt;span class=&quot;synComment&quot;&gt;# カテゴリのフィルタ&lt;/span&gt;
          must {
            bool {
              category_names.each { |&lt;span class=&quot;synIdentifier&quot;&gt;category_name&lt;/span&gt;|
                should { term &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; category_name }
              }
            }
          } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; category_names.present?

          &lt;span class=&quot;synComment&quot;&gt;# 都道府県のフィルタ&lt;/span&gt;
          must {
            bool {
              pref_names.each { |&lt;span class=&quot;synIdentifier&quot;&gt;pref_name&lt;/span&gt;|
                should { term &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pref.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; pref_name }
              }
            }
          } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; pref_names.present?
        }
      }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  }
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;アグリゲーション同士の検索条件の連携&lt;/h4&gt;&lt;code&gt;post_filter&lt;/code&gt;で検索条件を指定したので、検索結果はうまく表示されるようになりました。&lt;br /&gt;
しかし、サイドバーのアグリゲーションのカウント表示はアグリゲーション内でフィルタを行っていないのでうまく表示されていないので表示するようにします。&lt;/p&gt;&lt;p&gt;具体的には、カテゴリを選択すると、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県アグリゲーション内で選択されたカテゴリでフィルタします。&lt;br /&gt;
また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県を選択すると、カテゴリアグリゲーション内で選択された&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県でフィルタをします。&lt;/p&gt;&lt;p&gt;アグリゲーションにフィルタを実施するには、Filter Aggregationを使います。&lt;br /&gt;
&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby/blob/0cf4dd7dcc4c990dc03c33c5c2b4946e4e733bbe/elasticsearch-dsl/lib/elasticsearch/dsl/search/aggregations/filter.rb
&quot; target=&quot;_blank&quot;&gt;elasticsearch-ruby/elasticsearch-dsl/lib/elasticsearch/dsl/search/aggregations/filter.rb&lt;/a&gt;を参考にし、フィルタをアグリゲーションに追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Elasticsearchのクエリを作成し、検索を実施する&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
  ...

  search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
    query {
      ...
    }

    sort {
      ...
    }

    &lt;span class=&quot;synComment&quot;&gt;# アグリゲーション&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/aggregations.html&lt;/span&gt;
    aggregation &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# categoryアグリゲーションのフィルタ条件&lt;/span&gt;
      condition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Filters&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Bool&lt;/span&gt;.new {
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; pref_names.present?
          pref_names.each { |&lt;span class=&quot;synIdentifier&quot;&gt;pref_name&lt;/span&gt;|
            should { term &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pref.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; pref_name }
          }
        &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
          must { match_all }
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      }

      &lt;span class=&quot;synComment&quot;&gt;# アグリゲーションのフィルタを行う&lt;/span&gt;
      filter condition &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        aggregation &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
          terms &lt;span class=&quot;synConstant&quot;&gt;field&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    aggregation &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# prefアグリゲーションのフィルタ条件&lt;/span&gt;
      condition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Filters&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Bool&lt;/span&gt;.new {
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; category_names.present?
          category_names.each { |&lt;span class=&quot;synIdentifier&quot;&gt;category_name&lt;/span&gt;|
            should { term &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; category_name }
          }
        &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
          must { match_all }
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      }

      &lt;span class=&quot;synComment&quot;&gt;# アグリゲーションのフィルタを行う&lt;/span&gt;
      filter condition &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        aggregation &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
          terms &lt;span class=&quot;synConstant&quot;&gt;field&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pref.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;47&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# Post Filter&lt;/span&gt;
    post_filter {
      ...
    }
  }
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
フィルタアグリゲーションを追加したことでレスポンスの結果の構造が変わりましたので、ビューファイルを修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- アグリゲーションの表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- カテゴリ --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel panel-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
      &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- category から category.category に変更 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.aggregations.category.category.buckets.each do |bucket| %&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 都道府県 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel panel-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
      &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- pref から pref.pref に変更 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.aggregations.pref.pref.buckets.each do |bucket| %&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;動作確認&lt;/h4&gt;これで、カテゴリと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県のアグリゲーション同士が連動するようになりました。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151022/20151022000118.png&quot; alt=&quot;f:id:nipe880324:20151022000118p:plain:w420&quot; title=&quot;f:id:nipe880324:20151022000118p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Elasticsearchのクエリが長くなってきて見づらくなってきましたが一応次のようになります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Started GET &amp;#34;/?category=%E5%AE%9A%E9%A3%9F%2B%E3%82%A4%E3%82%BF%E3%83%AA%E3%82%A2%E3%83%B3&amp;amp;pref=%E7%A5%9E%E5%A5%88%E5%B7%9D%E7%9C%8C&amp;#34; for ::1 at 2015-10-18 23:02:08 +0900
Processing by TopController#index as HTML
  Parameters: {&amp;#34;category&amp;#34;=&amp;gt;&amp;#34;定食+イタリアン&amp;#34;, &amp;#34;pref&amp;#34;=&amp;gt;&amp;#34;神奈川県&amp;#34;}
  Restaurant Search (9.4ms) {index: &amp;#34;restaurant_development&amp;#34;, type: &amp;#34;restaurant&amp;#34;, body: {query: {filtered: {query: {match_all: {}}, filter: {term: {closed: &amp;#34;false&amp;#34;}}}}, post_filter: {bool: {must: [{bool: {should: [{term: {&amp;#34;category.name&amp;#34;=&amp;gt;&amp;#34;定食&amp;#34;}}, {term: {&amp;#34;category.name&amp;#34;=&amp;gt;&amp;#34;イタリアン&amp;#34;}}]}}, {bool: {should: [{term: {&amp;#34;pref.name&amp;#34;=&amp;gt;&amp;#34;神奈川県&amp;#34;}}]}}]}}, aggregations: {category: {filter: #&amp;lt;Elasticsearch::DSL::Search::Filters::Bool:0x007fbc27bda188 @hash={bool: {should: [{term: {&amp;#34;pref.name&amp;#34;=&amp;gt;&amp;#34;神奈川県&amp;#34;}}]}}, @args={}, @options={}, @block=#&amp;lt;Proc:0x007fbc27bd9df0@/Users/shoji/GDrive/rails/rails_samples/elasticsearch_test/app/models/restaurant.rb:107&amp;gt;&amp;gt;, aggregations: {category: {terms: {field: &amp;#34;category.name&amp;#34;, size: 10}}}}, pref: {filter: #&amp;lt;Elasticsearch::DSL::Search::Filters::Bool:0x007fbc27bd2aa0 @hash={bool: {should: [{term: {&amp;#34;category.name&amp;#34;=&amp;gt;&amp;#34;定食&amp;#34;}}, {term: {&amp;#34;category.name&amp;#34;=&amp;gt;&amp;#34;イタリアン&amp;#34;}}]}}, @args={}, @options={}, @block=#&amp;lt;Proc:0x007fbc27bd2938@/Users/shoji/GDrive/rails/rails_samples/elasticsearch_test/app/models/restaurant.rb:127&amp;gt;&amp;gt;, aggregations: {pref: {terms: {field: &amp;#34;pref.name&amp;#34;, size: 47}}}}}, sort: [{&amp;#34;created_at&amp;#34;=&amp;gt;{order: &amp;#34;desc&amp;#34;}}]}, size: 40, from: 0}
  Rendered top/index.html.erb within layouts/application (35.8ms)
Completed 200 OK in 96ms (Views: 85.1ms | ActiveRecord: 0.0ms | Elasticsearch: 9.4ms)&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;まとめ&lt;/h3&gt;
    &lt;p&gt;今回はアグリゲーション（ファセット）とPost Filterを使い、よくあるファセット検索を実装しました。&lt;br /&gt;
次は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151025/1445703231&quot;&gt;ハイライト機能&lt;/a&gt;」について説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-post-filter.html&quot;&gt;Post filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="elasticsearch" label="elasticsearch" />
        
        <category term="検索" label="検索" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>RailsでElasticsearch: ソート機能を実装</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20151021/1445353566"/>
        <id>hatenablog://entry/6653458415124951669</id>
        <published>2015-10-21T00:06:06+09:00</published>
        <updated>2015-10-22T00:04:14+09:00</updated>
        <summary type="html">RailsでElasticsearchのソート機能を実装します。Elasticsearchではsortキーでソートをするキーを指定します。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170217.png&quot; alt=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;前々回は「&lt;a href=&quot;/entry/20151018/1445142266&quot;&gt;RailsでElasticsearchを使って簡単な全文検索&lt;/a&gt;」、&lt;br /&gt;
前回は、「&lt;a href=&quot;/entry/20151019/1445265581&quot;&gt;ページネーション・１ページあたりの表示件数&lt;/a&gt;」を実装しました。&lt;br /&gt;
今回は、「&lt;b&gt;ソート機能&lt;/b&gt;」を実装します。Elasticsearchのソート機能があるのでかなり簡単に作成できます。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-3-es-query&quot;&gt;ソートのElasticsearchのクエリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-3-sort&quot;&gt;ソート機能を実装&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac%20OS%20X&quot;&gt;Mac OS X&lt;/a&gt; 10.11 El Capitan&lt;/li&gt;
&lt;li&gt;elasticsearch 1.7.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/dsl&quot;&gt;dsl&lt;/a&gt; 0.1.2&lt;/li&gt;
&lt;li&gt;elasticsearch-model 0.1.8&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 0.1.8&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-3-es-query&quot;&gt;1. ソートのElasticsearchのクエリ&lt;/h3&gt;&lt;code&gt;sort&lt;/code&gt;パラメータを指定することで、ソートすることができます。&lt;br /&gt;
ソートキーと&lt;code&gt;order&lt;/code&gt;にソート順の「&lt;code&gt;asc&lt;/code&gt;(昇順)」か「&lt;code&gt;desc&lt;/code&gt;(降順)」を指定します。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;日付でソート&lt;/h4&gt;デフォルトのソート順は&lt;code&gt;asc&lt;/code&gt;(昇順)です。&lt;br /&gt;
&lt;a href=&quot;http://localhost:9200/_plugin/marvel/sense/index.html&quot;&gt;Marvel Sense&lt;/a&gt;を開き下記クエリを実行します。&lt;br /&gt;
ドキュメントを&lt;code&gt;created_at&lt;/code&gt;の降順(desc)に並べます。つまり、「新しい順」に並べます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sort&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;order&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;desc&amp;quot;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これを使えば、商品などで価格フィールドがある場合は、「安い順」「高い順」なども簡単にできます。&lt;/p&gt;&lt;p&gt;ソートするフィールドに値がない場合に、最後に表示するか(&lt;code&gt;_last&lt;/code&gt;)、最初に表示するか(&lt;code&gt;_first&lt;/code&gt;)を&lt;code&gt;missing&lt;/code&gt;で指定することもできます。&lt;br /&gt;
デフォルトでは最後に表示するようになっているので特段指定しなくてもいいと思います。&lt;br /&gt;
下記は、created_atに値がないドキュメントを最初に表示します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sort&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;order&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;desc&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;missing&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_first&amp;quot;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;関連度でソート&lt;/h4&gt;関連度でソートをする場合、デフォルトのソート順は&lt;code&gt;desc&lt;/code&gt;(関連度が高い順)です。&lt;br /&gt;
&lt;code&gt;_score&lt;/code&gt;を指定することで関連度順にソートできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sort&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;例えば、titleとcommentがあるときに、titleにマッチしたほうがスコアを高くなるように設定するなどして、関連度のスコアを変えます。スコアの設定は省略します。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-3-sort&quot;&gt;2. ソート機能を実装&lt;/h3&gt;「出店の新しい順」「あいうえお順」などのソート順を指定できるリンクを追加します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018052901.png&quot; alt=&quot;f:id:nipe880324:20151018052901p:plain:w420&quot; title=&quot;f:id:nipe880324:20151018052901p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;ソート順のリンクを表示&lt;/h4&gt;ソート順のリンクを画面に表示する&lt;code&gt;sort_links&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;でリンクを作成します。&lt;br /&gt;
また、&lt;code&gt;created_at&lt;/code&gt;を出店日とし、画面に表示させます。&lt;br /&gt;
（※&lt;code&gt;created_at&lt;/code&gt;はあくまでレコードが作成された日付なので、管理上は&lt;code&gt;opend_at&lt;/code&gt;などカラムを新たに追加し、その値を出店日としたほうがよいです）&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;検索結果: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; current_page(params:&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; params) %&amp;gt;&lt;/span&gt; / 約&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @restaurants.results.total&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;件&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;表示件数: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; per_page_links&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; per_pages: [40, 80, 120], query_string: query_string(params) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- ソート順のリンクを追加 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;ソート順: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; sort_links&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.each do |r| %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;（&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.name_kana&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;）&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text-muted&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;都道府県: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.pref.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;カテゴリ: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.category.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 出店日を追加 --&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;出店日: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.created_at&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;sort_linksヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を作成&lt;/h4&gt;ソート順のリンクを返す&lt;code&gt;sort_links&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を作成します。&lt;br /&gt;
また、&lt;code&gt;query_string&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に&lt;code&gt;:sort&lt;/code&gt;キーを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  ...
  &lt;span class=&quot;synComment&quot;&gt;# ソートのリンクを返す&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;sort_links&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 現在の値の設定。例：{ sort: &#39;created_at+asc&#39; }&lt;/span&gt;
    current = { &lt;span class=&quot;synConstant&quot;&gt;sort&lt;/span&gt;: query_string.fetch(&lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;, ::&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;SORTS&lt;/span&gt;.first[&lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;]) }

    &lt;span class=&quot;synComment&quot;&gt;# aタグの作成&lt;/span&gt;
    ::&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;SORTS&lt;/span&gt;.map &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;sort&lt;/span&gt;|
      &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; current == sort.except(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;)
        sort[&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;# 現在設定されているソート順をテキストで表示&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
        link_to(sort[&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;], &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;query_string.merge(&lt;span class=&quot;synConstant&quot;&gt;sort&lt;/span&gt;: sort[&lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;]).to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;.join(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).html_safe
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# クエリストリングを作成&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;query_string&lt;/span&gt;(params)
    params.slice(&lt;span class=&quot;synConstant&quot;&gt;:q&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:per&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;ソート順のデータをRestaurantモデルにSORTSという定数で定義しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# ソートの組み合わせ&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# name: 画面に表示する文字列。sort: &amp;lt;ソートするキー名&amp;gt;+&amp;lt;ソート順序(asc or desc)&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;SORTS&lt;/span&gt; = [
    { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;出店の新しい順&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;sort&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at+desc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; },
    { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;出店の古い順&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;sort&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at+asc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; },
    { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;あいうえお順&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;sort&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name_kana+asc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
  ]
  ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ソートクエリの作成&lt;/h4&gt;&lt;code&gt;searchメソッド&lt;/code&gt;を修正して、ソートをできるようにします。&lt;br /&gt;
まずは、&lt;code&gt;params&lt;/code&gt;からソートキーとソートオーダーを取得します。&lt;br /&gt;
また、&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby/blob/master/elasticsearch-dsl/lib/elasticsearch/dsl/search/sort.rb&quot;&gt;lasticsearch-ruby/elasticsearch-dsl/lib/elasticsearch/dsl/search/sort.rb&lt;/a&gt;を参考にし、&lt;code&gt;search_definition&lt;/code&gt;に&lt;code&gt;sort&lt;/code&gt;を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;#app/models/restaurant.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
  &lt;span class=&quot;synComment&quot;&gt;# 検索パラメータを取得&lt;/span&gt;
  ...
  &lt;span class=&quot;synComment&quot;&gt;# sort_by: ソートのキー(&#39;created_at&#39;など)、order: ソートの順序(&#39;asc&#39;か&#39;desc&#39;)&lt;/span&gt;
  sort_by, order = (params[&lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;] || &lt;span class=&quot;synType&quot;&gt;SORTS&lt;/span&gt;.first[&lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;]).split(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

  &lt;span class=&quot;synComment&quot;&gt;# 検索クエリを作成（Elasticsearch::DSLを利用）&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 参考: https://github.com/elastic/elasticsearch-ruby/tree/master/elasticsearch-dsl&lt;/span&gt;
  search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
    query {
      ...
    }

    &lt;span class=&quot;synComment&quot;&gt;# ソート&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html&lt;/span&gt;
    sort {
      by sort_by, &lt;span class=&quot;synConstant&quot;&gt;order&lt;/span&gt;: order
    }
  }

  __elasticsearch__.search(search_definition)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ソートの動作確認&lt;/h4&gt;&lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt;にアクセスし、ソート順が指定できます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018052901.png&quot; alt=&quot;f:id:nipe880324:20151018052901p:plain:w420&quot; title=&quot;f:id:nipe880324:20151018052901p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;このときElasticsearchへのクエリは次のようになり、&lt;code&gt;sort&lt;/code&gt;でソートするフィールド名が、&lt;code&gt;order&lt;/code&gt;で順序が指定されていることがわかると思います。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Started GET &amp;#34;/?sort=created_at%2Basc&amp;#34; for ::1 at 2015-10-18 05:24:09 +0900
Processing by TopController#index as HTML
  Parameters: {&amp;#34;sort&amp;#34;=&amp;gt;&amp;#34;created_at+asc&amp;#34;}
  Restaurant Search (18.5ms) {index: &amp;#34;restaurant_development&amp;#34;, type: &amp;#34;restaurant&amp;#34;, body: {query: {filtered: {query: {match_all: {}}, filter: {term: {closed: &amp;#34;false&amp;#34;}}}}, sort: [{&amp;#34;created_at&amp;#34;=&amp;gt;{order: &amp;#34;asc&amp;#34;}}]}, size: 40, from: 0}
  Rendered top/index.html.erb within layouts/application (222.3ms)
Completed 200 OK in 472ms (Views: 441.0ms | ActiveRecord: 0.0ms | Elasticsearch: 18.5ms)&lt;/pre&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;まとめ&lt;/h3&gt;
    &lt;p&gt;今回は、Elasticsearchの&lt;code&gt;sort&lt;/code&gt;キーを追加することで簡単にソートに実装しました。&lt;br /&gt;
次回は、&lt;a herf=&quot;/entry/20151022/1445439798&quot;&gt;ファセット（アグリゲーション）と Post Filter&lt;/a&gt;を実装します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html&quot;&gt;Sort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="elasticsearch" label="elasticsearch" />
        
        <category term="検索" label="検索" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>RailsでElasticsearch: ページネーションと１ページの表示件数を実装</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20151019/1445265581"/>
        <id>hatenablog://entry/6653458415124942939</id>
        <published>2015-10-19T23:39:41+09:00</published>
        <updated>2015-10-21T00:06:59+09:00</updated>
        <summary type="html">RailsでElasticsearchを使って「ページネーションを実装します。また、１ページの表示件数を変更できるようにします。Railsのページネーションで有名なgemのkaminariを使って実装します。
</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170217.png&quot; alt=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;前回の記事で、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151018/1445142266&quot; target=&quot;_blank&quot;&gt;RailsでElasticsearchを使って簡単な全文検索&lt;/a&gt;」を実装しました。&lt;br /&gt;
今回は、「&lt;b&gt;ページネーション・１ページあたりの表示件数&lt;/b&gt;」について実装していきます。&lt;br /&gt;
ページネーションの実装は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のページネーションを実装する有名なgemの&lt;a href=&quot;https://github.com/amatsuda/kaminari&quot; target=&quot;_blank&quot;&gt;kaminari&lt;/a&gt;を使って実装します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-2-seeds&quot;&gt;データを投入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-2-es-query&quot;&gt;ページネーションのためのElasticsearchのクエリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-2-pagination&quot;&gt;Elasticsearchでページネーションを実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-2-per-pages&quot;&gt;ページあたりの表示件数を変更&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac%20OS%20X&quot;&gt;Mac OS X&lt;/a&gt; 10.11 El Capitan&lt;/li&gt;
&lt;li&gt;elasticsearch 1.7.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/dsl&quot;&gt;dsl&lt;/a&gt; 0.1.2&lt;/li&gt;
&lt;li&gt;elasticsearch-model 0.1.8&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 0.1.8&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;rails-elasticsearch-2-seeds&quot;&gt;1. データを投入&lt;/h3&gt;ページネーションのためにデータを増やします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/seeds.rb&lt;/span&gt;
...
restaurants = [
  {
    &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;松屋&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;まつや&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;240-0113&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;三浦郡葉山町堀内24-3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: tokyo, &lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: teisyoku, &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
  },
  ...
] * &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 600件(6 * 100)のデータを作成&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.create!(restaurants)
&lt;/pre&gt;&lt;p&gt;データを投入します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:seed&lt;/pre&gt;&lt;p&gt;Elasticsearverを起動させます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;elasticsearch&lt;/pre&gt;&lt;p&gt;インデックスを作成しなおします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# rails console&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.create_index! &lt;span class=&quot;synConstant&quot;&gt;force&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.refresh_index!
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.import
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで、データベース、ドキュメントともに「600件」のレストランデータが作成されました。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-2-es-query&quot;&gt;2. ページネーションのためのElasticsearchのクエリ&lt;/h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;で実装を始める前に、Elasticsearchのクエリで表示件数やページ数を指定する方法を説明します。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;取得するドキュメント数を指定する&lt;/h4&gt;&lt;code&gt;size&lt;/code&gt;パラメータを指定することで取得するドキュメント数を指定できます。&lt;br /&gt;
デフォルトでは、「10件」となっています。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://localhost:9200/_plugin/marvel/sense/index.html&quot; target=&quot;_blank&quot;&gt;Marvel Sense&lt;/a&gt;を開き、&lt;code&gt;size&lt;/code&gt;を指定して、&lt;code&gt;match_all&lt;/code&gt;を実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 3
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;すると、結果は&lt;code&gt;hits.total&lt;/code&gt;は「600件」となっていますが、&lt;code&gt;hits.hits&lt;/code&gt;の数を数えると「3件」となっていることがわかります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// 検索結果&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;took&amp;quot;&lt;/span&gt;: 2,
 &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;timed_out&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
 &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_shards&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 5,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;successful&amp;quot;&lt;/span&gt;: 5,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;: 0
 &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
 &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 600,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;: 1,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
       &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;restaurant_development&amp;quot;&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;restaurant&amp;quot;&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;73&amp;quot;&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;: 1,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_source&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;松屋&amp;quot;&lt;/span&gt;,
             &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name_kana&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;まつや&amp;quot;&lt;/span&gt;,
             &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;zip&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;240-0113&amp;quot;&lt;/span&gt;,
             &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;address&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;三浦郡葉山町堀内24-3&amp;quot;&lt;/span&gt;,
             ...
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
       ...
    &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;特定の範囲のドキュメントを取得する&lt;/h4&gt;&lt;code&gt;from&lt;/code&gt;と&lt;code&gt;size&lt;/code&gt;パラメータを指定することで取得するドキュメントの範囲を決めることができます。&lt;br /&gt;
&lt;code&gt;from&lt;/code&gt;のデフォルト値で「0」となりま。&lt;/p&gt;&lt;p&gt;下記は、ドキュメント「11から20」までを取得します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;from&amp;quot;&lt;/span&gt;: 10,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 10
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-2-pagination&quot;&gt;3. Elasticsearchでページネーションを実装&lt;/h3&gt;&lt;code&gt;kaminari&lt;/code&gt;を使ってページネーションを実装します。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;kaminariのインストール&lt;/h4&gt;&lt;code&gt;Gemfile&lt;/code&gt;に&lt;b&gt;&lt;code&gt;elasticsearch&lt;/code&gt;の前&lt;/b&gt;に&lt;code&gt;gem &#39;kaminari&#39;&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kaminari&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-ruby.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch-dsl&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-ruby.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch-model&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-rails.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-rails.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;インストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ページネーションのビューを追加&lt;/h4&gt;Bootstrap 3のテーマでページネーションのビューファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g kaminari:views bootstrap3&lt;/pre&gt;&lt;p&gt;kaminariの&lt;code&gt;paginate&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使うことでページネーションのリンクを表示できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- ページネーションを表示するヘルパーメソッド --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; paginate&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @restaurants %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;fromとsizeを指定する&lt;/h4&gt;Elasticsearchの&lt;code&gt;from&lt;/code&gt;と&lt;code&gt;size&lt;/code&gt;を指定します。&lt;br /&gt;
&lt;code&gt;kaminari&lt;/code&gt;の機能の、&lt;code&gt;page&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で「ページ番号」を、&lt;code&gt;per&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で「ページあたりの表示数」を設定することで自動的に&lt;code&gt;from&lt;/code&gt;と&lt;code&gt;size&lt;/code&gt;が計算されて、Elasticsearchに渡されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/top_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TopController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# page(params[:page]) - ページ番号を取得(paginateヘルパーがいいかんじにやってくれる)&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# per(40) - 1ページあたりの表示数 40件&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@restaurants&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.search(params).page(params[&lt;span class=&quot;synConstant&quot;&gt;:page&lt;/span&gt;]).per(&lt;span class=&quot;synConstant&quot;&gt;40&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次のように&lt;code&gt;elasticsearch-model&lt;/code&gt;が内部的に&lt;code&gt;size&lt;/code&gt;と&lt;code&gt;from&lt;/code&gt;を計算しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# elasticsearch-rails/elasticsearch-model/lib/elasticsearch/model/response/pagination.rb&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;@page&lt;/span&gt;     = [num.to_i, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;].max
&lt;span class=&quot;synIdentifier&quot;&gt;@per_page&lt;/span&gt; ||= __default_per_page
&lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.search.definition.update &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@per_page&lt;/span&gt;,
                              &lt;span class=&quot;synConstant&quot;&gt;from&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@per_page&lt;/span&gt; * (&lt;span class=&quot;synIdentifier&quot;&gt;@page&lt;/span&gt; - &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ページネーションの動作確認&lt;/h4&gt;画面をロードすると１ページあたり40件表示されるようになります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018040113.png&quot; alt=&quot;f:id:nipe880324:20151018040113p:plain:w420&quot; title=&quot;f:id:nipe880324:20151018040113p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;このとき、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;ログのElasticsearchに発行されているクエリを見ると、&lt;code&gt;size: 40, from: 40&lt;/code&gt;となっているので、うまくElasticsearchに値を渡せているとわかります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Started GET &amp;#34;/?page=2&amp;#34; for ::1 at 2015-10-18 00:10:54 +0900
Processing by TopController#index as HTML
  Parameters: {&amp;#34;page&amp;#34;=&amp;gt;&amp;#34;2&amp;#34;}
  Restaurant Search (22.5ms) {index: &amp;#34;restaurant_development&amp;#34;, type: &amp;#34;restaurant&amp;#34;, body: {query: {filtered: {query: {match_all: {}}}}}, size: 40, from: 40}
  Rendered top/index.html.erb within layouts/application (32.5ms)
Completed 200 OK in 68ms (Views: 61.2ms | ActiveRecord: 0.0ms | Elasticsearch: 5.8ms)&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-2-per-pages&quot;&gt;4. ページあたりの表示件数を変更&lt;/h3&gt;次のように、「現在の表示件数のfrom値」と「ページあたりの表示件数のリンク」を表示できるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018040416.png&quot; alt=&quot;f:id:nipe880324:20151018040416p:plain:w420&quot; title=&quot;f:id:nipe880324:20151018040416p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;h4&gt;ビューの修正&lt;/h4&gt;「現在の表示件数のfrom値」は、&lt;code&gt;current_document&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使って表示します。&lt;br /&gt;
また、「表示件数のリンク」は、&lt;code&gt;per_page_links&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使ってaタグを作成するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;検索結果: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; current_document&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt; / 約&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @restaurants.results.total&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;件&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;表示件数: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; per_page_links&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;from値の取得&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を作成&lt;/h4&gt;現在の表示件数のfrom値は、「現在のページ数 x 現在の表示件数」なので、それを返すようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 現在表示しているドキュメントのfrom値を表示&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ※文字列を指定されるとうまくいかないかもしれない&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;current_document&lt;/span&gt;
    (params.fetch(&lt;span class=&quot;synConstant&quot;&gt;:page&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;).to_i - &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;) * params.fetch(&lt;span class=&quot;synConstant&quot;&gt;:per&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;).to_i 
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;表示件数のリンクを作成する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を作成&lt;/h4&gt;次に、表示件数のリンクを作成する&lt;code&gt;per_page_links&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# ページ表示件数のリンクを返す&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;per_page_links&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 表示件数の初期値の設定&lt;/span&gt;
    current = query_string.fetch(&lt;span class=&quot;synConstant&quot;&gt;:per&lt;/span&gt;, ::&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;PER_PAGES&lt;/span&gt;.first).to_i

    &lt;span class=&quot;synComment&quot;&gt;# aタグの作成&lt;/span&gt;
    ::&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;PER_PAGES&lt;/span&gt;.map &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;per_page&lt;/span&gt;|
      &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; current == per_page
        per_page
      &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
        link_to(per_page, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;query_string.merge(&lt;span class=&quot;synConstant&quot;&gt;per&lt;/span&gt;: per_page).to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;.join(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).html_safe
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# クエリストリングを作成&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 表示件数やソート順などのリンクを押した時にqやclosedなどのパラメータは設定したままにする&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# pageは設定しないのでページは0ページ目ににクリアされる&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   params - paramsオブジェクト&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;query_string&lt;/span&gt;(params)
    params.slice(&lt;span class=&quot;synConstant&quot;&gt;:q&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:per&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
RestaurantモデルにPER_PAGESとページネーションの表示件数を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...
  &lt;span class=&quot;synComment&quot;&gt;# ページの表示件数を追加&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;PER_PAGES&lt;/span&gt; = [&lt;span class=&quot;synConstant&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;120&lt;/span&gt;]

  &lt;span class=&quot;synComment&quot;&gt;# デフォルトの１ページの表示件数&lt;/span&gt;
  paginates_per &lt;span class=&quot;synType&quot;&gt;PER_PAGES&lt;/span&gt;.first
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
コントローラーで&lt;code&gt;per&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を定数40から、&lt;code&gt;params[:per]&lt;/code&gt;に変更します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/top_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TopController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# per(params[:per])に変更&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@restaurants&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.search(params).page(params[&lt;span class=&quot;synConstant&quot;&gt;:page&lt;/span&gt;]).per(params[&lt;span class=&quot;synConstant&quot;&gt;:per&lt;/span&gt;])
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;動作確認&lt;/h4&gt;画面を表示し、検索ボタン、表示件数のリンク、ページネーションのリンクを押してうまく動きます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018040416.png&quot; alt=&quot;f:id:nipe880324:20151018040416p:plain:w420&quot; title=&quot;f:id:nipe880324:20151018040416p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;ログのElasticsearchのクエリを見ると、&lt;code&gt;size&lt;/code&gt;や&lt;code&gt;from&lt;/code&gt;の値が表示内容と同じあれば問題なさそうです。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Started GET &amp;#34;/?closed=t&amp;amp;page=2&amp;amp;per=120&amp;amp;q=%E6%9D%B1%E4%BA%AC%E9%83%BD&amp;#34; for ::1 at 2015-10-18 04:03:57 +0900
Processing by TopController#index as HTML
  Parameters: {&amp;#34;closed&amp;#34;=&amp;gt;&amp;#34;t&amp;#34;, &amp;#34;page&amp;#34;=&amp;gt;&amp;#34;2&amp;#34;, &amp;#34;per&amp;#34;=&amp;gt;&amp;#34;120&amp;#34;, &amp;#34;q&amp;#34;=&amp;gt;&amp;#34;東京都&amp;#34;}
  Restaurant Search (11.2ms) {index: &amp;#34;restaurant_development&amp;#34;, type: &amp;#34;restaurant&amp;#34;, body: {query: {filtered: {query: {multi_match: {query: &amp;#34;東京都&amp;#34;, fields: [&amp;#34;name&amp;#34;, &amp;#34;name_kana&amp;#34;, &amp;#34;address&amp;#34;, &amp;#34;pref.name&amp;#34;, &amp;#34;category.name&amp;#34;]}}}}}, size: 120, from: 120}
  Rendered top/index.html.erb within layouts/application (36.7ms)
Completed 200 OK in 73ms (Views: 60.8ms | ActiveRecord: 0.0ms | Elasticsearch: 11.2ms)&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;まとめ&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;kaminari&lt;/code&gt;を使ってページネーションを実装しました。&lt;br /&gt;
次は、「&lt;a href=&quot;/entry/20151021/1445353566&quot;&gt;ソート機能&lt;/a&gt;」を実装します。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-rails/tree/master/elasticsearch-model#pagination&quot;&gt;elasticsearch-rails/elasticsearch-model at master &amp;middot; elastic/elasticsearch-rails &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amatsuda/kaminari&quot;&gt;amatsuda/kaminari &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="elasticsearch" label="elasticsearch" />
        
        <category term="検索" label="検索" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>RailsでElasticsearch: 全文検索を実装</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20151018/1445142266"/>
        <id>hatenablog://entry/6653458415124899634</id>
        <published>2015-10-18T13:24:26+09:00</published>
        <updated>2015-10-19T23:44:17+09:00</updated>
        <summary type="html">RailsでElasticsearchを使ってレストラン検索アプリを作成、店名、住所、カテゴリなどからレストランを全文検索できるようにします。また、フィルタ(filter)(filter)も使って検索条件を指定することで、閉店している店舗も含めて検索できるようにします。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170217.png&quot; alt=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でElasticsearchを使ってレストラン検索アプリを作成、店名、住所、カテゴリなどからレストランを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C1%B4%CA%B8%B8%A1%BA%F7&quot;&gt;全文検索&lt;/a&gt;できるようにします。また、フィルタ(filter)も使って検索条件を指定することで、閉店している店舗も含めて検索できるようにします。&lt;/p&gt;&lt;p&gt;今後、Elasticsearchのページネーション・ページあたりの表示件数、ソート、ファセット・post_filter、ハイライト、サジェスト機能などをより実践的な機能を実装していきます。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-1-setup&quot;&gt;ElasticsearchのMacへのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-1-rails-new&quot;&gt;Railsプロジェクト作成とテストデータ作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-1-freetext-keyword&quot;&gt;RailsとElasticsearchで全文検索を実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-1-filter&quot;&gt;検索条件を指定する&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac%20OS%20X&quot;&gt;Mac OS X&lt;/a&gt; 10.11 El Capitan&lt;/li&gt;
&lt;li&gt;elasticsearch 1.7.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/dsl&quot;&gt;dsl&lt;/a&gt; 0.1.2&lt;/li&gt;
&lt;li&gt;elasticsearch-model 0.1.8&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 0.1.8&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;rails-elasticsearch-1-setup&quot;&gt;1. Elasticsearchの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac&quot;&gt;Mac&lt;/a&gt;へのインストール&lt;/h3&gt;Homvebrewを使って&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac&quot;&gt;Mac&lt;/a&gt;にElasticsearchインストールします。&lt;br /&gt;
Elasticsearchを使うためには&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Java&quot;&gt;Java&lt;/a&gt;が必要なので&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Java&quot;&gt;Java&lt;/a&gt;もインストールします。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac&quot;&gt;Mac&lt;/a&gt;以外で実行する場合は適宜&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Java&quot;&gt;Java&lt;/a&gt;とElasticsearchをインストールしてください。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;Homebrewのインストール&lt;/h4&gt;Homebrewが入っていない場合は、&lt;a href=&quot;http://qiita.com/_daisuke/items/d3b2477d15ed2611a058&quot; target=&quot;_blank&quot;&gt;MacにHomebrewをインストールする&lt;/a&gt;を参照してインストールしてください。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;JDK8のインストール&lt;/h4&gt;Elasticsearchは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Java&quot;&gt;Java&lt;/a&gt;を利用しているのでインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;brew install caskroom/cask/brew-cask
brew tap caskroom/versions
brew cask install java
java -version #=&amp;gt; 「java version &amp;#34;1.8.0_60&amp;#34;」のように表示される&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Elasticsearchのインストール&lt;/h4&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;brew install elasticsearch
elasticsearch -v #=&amp;gt; 「Version: 1.7.2, ...」と表示されること&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Elasticsearch Pluginのインストール&lt;/h4&gt;ElasticsearchはPluginをインストールすることで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%C1%C2%D6%C1%C7%B2%F2%C0%CF&quot;&gt;形態素解析&lt;/a&gt;や管理画面など拡張することができます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;which elasticsearch
/usr/local/bin/elasticsearch

# 日本語の形態素解析プラグイン kuromoji のインストール
# https://github.com/elastic/elasticsearch-analysis-kuromoji
/usr/local/bin/plugin install elasticsearch/elasticsearch-analysis-kuromoji/2.7.0

# Elasticsearchの管理プラグイン mervel のインストール
# https://www.elastic.co/guide/en/marvel/current/_installation.html
/usr/local/bin/plugin install elasticsearch/marvel/latest&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Elasticsearchの起動&lt;/h4&gt;&lt;code&gt;elasticsearch&lt;/code&gt;コマンドでElasticsearchを起動させます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# フォアグラウンドでElasticsearchが起動します
elasticsearch
# バックグラウンドでElasticsearchを起動させる
# elasticsearch -d&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Elasticsearchの確認&lt;/h4&gt;&lt;a href=&quot;http://localhost:9200/_plugin/marvel/&quot; target=&quot;_blank&quot;&gt;http://localhost:9200/_plugin/marvel/&lt;/a&gt;にアクセスするとMarvel&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3&quot;&gt;プラグイン&lt;/a&gt;をいれたので、Elasticsearchの管理画面が見れます。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF&quot;&gt;クラスタ&lt;/a&gt;ー、インデックスやキャッシュのヒット、ドキュメント数などが見れます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170605.png&quot; alt=&quot;f:id:nipe880324:20151017170605p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170605p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;また、右上の「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Dashboard&quot;&gt;Dashboard&lt;/a&gt; -&gt; Sense」をクリックすると、次のようにクエリを実行できる画面を表示できます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170622.png&quot; alt=&quot;f:id:nipe880324:20151017170622p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170622p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-1-rails-new&quot;&gt;2. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;プロジェクト作成とテストデータ作成&lt;/h3&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;プロジェクトの作成&lt;/h4&gt;&lt;code&gt;rails new&lt;/code&gt;コマンドで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;プロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new elasticsearch_test&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;モデル作成&lt;/h4&gt;次のようなシンプルなER図を作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;restaurants - (N-1) - categories (カテゴリ)
            - (N-1) - prefs (都道府県)&lt;/pre&gt;&lt;p&gt;モデルと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Restaurant name name_kana pref_id:integer zip address category_id:integer closed:boolean
rails g model Pref name
rails g model Category name name_kana&lt;/pre&gt;&lt;p&gt;アソシエーションを定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/models/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:restaurants&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/models/pref.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Pref&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:restaurants&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;を実行します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;シードデータの作成&lt;/h4&gt;検索のテスト用に少量のシードデータを作成しておきます。&lt;br /&gt;
後ほど、大量のデータで行いますが、はじめのうちはElasticsearchのクエリ結果が正しいか確認しやすいように5件程度のデータで行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/seeds.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;.transaction &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# すべてのレコードを削除する&lt;/span&gt;
  [&lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Pref&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;].each(&amp;amp;&lt;span class=&quot;synConstant&quot;&gt;:delete_all&lt;/span&gt;)

  &lt;span class=&quot;synComment&quot;&gt;# カテゴリの作成(3件)&lt;/span&gt;
  teisyoku = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;定食&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,      &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ていしょく&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
  italian = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;イタリアン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;いたりあん&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
  izakaya = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;居酒屋&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,    &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;いざかや&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

  &lt;span class=&quot;synComment&quot;&gt;# 都道府県の作成(2件)&lt;/span&gt;
  tokyo = &lt;span class=&quot;synType&quot;&gt;Pref&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;東京都&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
  kanagawa = &lt;span class=&quot;synType&quot;&gt;Pref&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;神奈川県&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

  &lt;span class=&quot;synComment&quot;&gt;# レストラン作成(各カテゴリ, 都道府県の掛け算で6件)&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.create!([
    {
      &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;松屋&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;まつや&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;240-0113&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;三浦郡葉山町堀内24-3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: tokyo, &lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: teisyoku, &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
    },
    {
      &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ラ・マーレ・ド・茶屋&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;らまーれどちゃや&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;142-0111&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;港区六本木1-1-1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: kanagawa, &lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: teisyoku, &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
    },
    {
      &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;レストラン シェ・リュイ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;しぇりゅい&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;150-0033&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;渋谷区猿楽町11-11&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: tokyo, &lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: italian, &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
    },
    {
      &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;スパゲティ　ハシヤ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;はしや&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;162-0023&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;三浦1-11&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: kanagawa, &lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: italian, &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
    },
    {
      &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ぎゅうかく&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;130-0033&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;池袋3-33&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: tokyo, &lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: izakaya, &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
    },
    {
      &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;沖縄そば やんばる&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;おきなわそばやんばる&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;231-0011&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;西区横浜1-11&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: kanagawa, &lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: izakaya, &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
    }
  ])
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;シードデータを投入します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:seed&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;検索画面を作成&lt;/h4&gt;シンプルな検索画面を作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g controller top index&lt;/pre&gt;&lt;p&gt;パスを修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.routes.draw &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  root &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;top#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;レストランをすべて表示するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/top_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TopController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@restaurants&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.all.includes(&lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;レイアウトファイルにBootstrapを読み込むようにしておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;ElasticsearchTest&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; stylesheet_link_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;all&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; javascript_include_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; csrf_meta_tags&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- headにcssとscriptを追加 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;//netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;//netdna.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- headにcssとscriptを追加 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; yield&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;シンプルにすべてのレストランを表示するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;レストラン検索&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.each do |r| %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;　（都道府県: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.pref.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;、カテゴリ: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.category.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;）&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;動作確認&lt;/h4&gt;&lt;code&gt;rails s&lt;/code&gt;でサーバを起動し、&lt;a href=&quot;http://localhost:3000/&quot; target=&quot;_blank&quot;&gt;http://localhost:3000/&lt;/a&gt;にアクセスすると次のように表示されると思います。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170800.png&quot; alt=&quot;f:id:nipe880324:20151017170800p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170800p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-1-freetext-keyword&quot;&gt;3. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;とElasticsearchで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C1%B4%CA%B8%B8%A1%BA%F7&quot;&gt;全文検索&lt;/a&gt;を実装&lt;/h3&gt;Elasticsearchのセットアップと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;で検索できるようにしたのでElasticsearchの基礎をまじえながらRilsで使う方法を説明します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;ElsticSearchの起動&lt;/h4&gt;フロントエンドで起動しておきます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;elasticsearch&lt;/pre&gt;&lt;p&gt;また、&lt;a href=&quot;http://localhost:9200/_plugin/marvel/&quot; target=&quot;_blank&quot;&gt;http://localhost:9200/_plugin/marvel/&lt;/a&gt;にアクセスし、Marvel(管理画面)も開いておきます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でElasticsearchを使った検索の流れ&lt;/h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でElasticsearchを使ったときの検索の流れは次のようになります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;[前準備] Elasticsearchにインデックス(RDSでいうとデータベース)を作成&lt;/li&gt;
&lt;li&gt;[前準備] 作成したインデックスにドキュメントタイプ(RDSでいうとテーブル)を作成&lt;/li&gt;
&lt;li&gt;[前準備] DBからデータを取得し、ドキュメント(RDSでいうレコード)を作成&lt;/li&gt;
&lt;li&gt;検索画面を作成する（画面から検索ボタンを押すと、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;が検索パラメータを受け取る）&lt;/li&gt;
&lt;li&gt;検索パラメータからElasticsearchのクエリを作成し、検索する&lt;/li&gt;
&lt;li&gt;Elasticsearchのレスポンスを画面に表示する&lt;/li&gt;
&lt;li&gt;定期的にドキュメントを追加/更新/削除する&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;次からはこの流れにしたがって、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;とElasticsearchを使って「フリーキーワード検索」を実装していきます。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;Elasticsearchのgemをインストール&lt;/h4&gt;まずは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;からElasticsearchを便利に使えるgemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-ruby.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch-dsl&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-ruby.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch-model&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-rails.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-rails.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle&lt;/pre&gt;&lt;p&gt;それぞれのgemが提供する機能は次のとおりです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby&quot; target=&quot;_blank&quot;&gt;elasticsearch&lt;/a&gt;: Elasticsearch用の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;クライアントと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を提供&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby/tree/master/elasticsearch-dsl&quot; target=&quot;_blank&quot;&gt;elasticsearch-dsl&lt;/a&gt;: Elasticsearchのクエリを書きやすくするための&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3%C6%C3%B2%BD%B8%C0%B8%EC&quot;&gt;ドメイン特化言語&lt;/a&gt;)を提供&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-rails&quot; target=&quot;_blank&quot;&gt;elasticsearch-modelとelasticsearch-rails&lt;/a&gt;: &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt;、ActiveModel、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;からElasticsearchを使えるようにする&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;[前準備] Elasticsearchにインデックス(RDSでいうとデータベース)を作成&lt;/h4&gt;インデックスとはRDSでいうデータベースのようなものです。&lt;br /&gt;
インデックスを作るには、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt;に&lt;code&gt;Elasticsearch::Model&lt;/code&gt;をインクルードし、Elasticsearchクライアントの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を呼び出すことでインデックスを作成できます。&lt;/p&gt;&lt;p&gt;Restaurantに&lt;code&gt;Elasticsearch::Model&lt;/code&gt;をインクルードします。&lt;br /&gt;
そして、&lt;code&gt;index_name&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;にインデックス名を指定します。デフォルトはモデル名になりますが、環境ごとにインデックスを分けたほうが都合が良いので、&lt;code&gt;Rails.env&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Model&lt;/span&gt;

  index_name &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;restaurant_&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.env&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# インデックス名を指定(RDBでいうデータベース)&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、下記コマンドを実行することで、インデックスの作成ができます。&lt;br /&gt;
既にインデックスがある場合は削除もできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# rails console&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# インデックスの作成。index:にはインデックス名、settingsにはインデックスの設定、mappingsにはマッピングの設定を記載&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.client.indices.create \
  &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.index_name,
  &lt;span class=&quot;synConstant&quot;&gt;body&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;settings&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.settings.to_hash, &lt;span class=&quot;synConstant&quot;&gt;mappings&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.mappings.to_hash }

&lt;span class=&quot;synComment&quot;&gt;# インデックスの削除&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.client.indices.delete &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.index_name &lt;span class=&quot;synStatement&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これらのコマンドは結構長いので、下記コマンドで強制的インデックスの削除/作成ができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# rails console&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.create_index! &lt;span class=&quot;synConstant&quot;&gt;force&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.refresh_index!
&lt;/pre&gt;&lt;p&gt;これで、&lt;code&gt;restaurant_development&lt;/code&gt;というインデックスを作成できました。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;[前準備] 作成したインデックスにドキュメントタイプ(RDSでいうとテーブル)を作成&lt;/h4&gt;ドキュメントタイプはRDSでいうテーブルのようなもので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;（RDSでいう&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DDL&quot;&gt;DDL&lt;/a&gt;）というもので作成します。&lt;/p&gt;&lt;p&gt;では、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;を定義し作成します。&lt;br /&gt;
Elasticsearch:Modelの&lt;code&gt;settings&lt;/code&gt;の&lt;code&gt;mappings&lt;/code&gt;を定義することで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  index_name &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;restaurant_&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.env&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# インデックス名を指定(RDBでいうデータベース)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# document_type # ドキュメントタイプを指定(RDBでいうテーブル)。デフォルトでクラス名&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# インデックス設定とマッピング(RDBでいうスキーマ)を設定&lt;/span&gt;
  settings &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    mappings &lt;span class=&quot;synConstant&quot;&gt;dynamic&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# デフォルトでマッピングが自動作成されるがそれを無効にする&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# マッピングの公式ドキュメント&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-core-types.html&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# indexesメソッドでインデックスする値を定義します。&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# analyzer: インデクシング時、検索時に使用するアナライザーを指定します。指定しない場合、グローバルで設定されているアナライザーが利用されます。&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# kuromojiは日本語のアナライザーです。&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;,      &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:name_kana&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      indexes &lt;span class=&quot;synConstant&quot;&gt;:zip&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:address&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# type: booleanでclosedはboolean型として定義します&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# date型として定義&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# formatは日付のフォーマットを指定(2015-10-16T19:26:03.679Z)&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# 詳細: https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;date_time&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# 階層化してインデクシングできます。pref.nameとして検索できます。&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;not_analyzed&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      indexes &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;not_analyzed&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;インデックスを作成し直します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# rails console&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.create_index! &lt;span class=&quot;synConstant&quot;&gt;force&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.refresh_index!
&lt;/pre&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/curl&quot;&gt;curl&lt;/a&gt;コマンドで定義した&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;を確認できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;curl -XGET &lt;span class=&quot;synConstant&quot;&gt;&#39;localhost:9200/restaurant_development/_mapping/restaurant?pretty=true&#39;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;restaurant_development&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;mappings&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;restaurant&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;dynamic&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;,
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;address&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;analyzer&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;kuromoji&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;,
                &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;not_analyzed&amp;quot;&lt;/span&gt;,
                &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;analyzer&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;closed&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;boolean&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;format&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;date_time&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;analyzer&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;kuromoji&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name_kana&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;analyzer&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;kuromoji&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;pref&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;,
                &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;not_analyzed&amp;quot;&lt;/span&gt;,
                &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;analyzer&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;zip&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;[前準備] DBからデータを取得し、ドキュメントタイプにドキュメント(RDSでいうレコード)を作成&lt;/h4&gt;ドキュメントをインポートするときに呼ばれる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の&lt;code&gt;as_indexed_json&lt;/code&gt;を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# インデクシング時に呼び出されるメソッド&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# マッピングのデータを返すようにする&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;as_indexed_json&lt;/span&gt;(options = {})
    attributes
      .symbolize_keys
      .slice(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name_kana&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:zip&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:address&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;)
      .merge(&lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: pref.name })
      .merge(&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: category.name })
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 次のような出力になります&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.first.as_indexed_json
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {:name=&amp;gt;&amp;quot;松屋&amp;quot;, :name_kana=&amp;gt;&amp;quot;まつや&amp;quot;, :zip=&amp;gt;&amp;quot;240-0113&amp;quot;, :address=&amp;gt;&amp;quot;三浦郡葉山町堀内24-3&amp;quot;, :closed=&amp;gt;false, :created_at=&amp;gt;Fri, 16 Oct 2015 19:26:03 UTC +00:00, :pref=&amp;gt;{:name=&amp;gt;&amp;quot;東京都&amp;quot;}, :category=&amp;gt;{:name=&amp;gt;&amp;quot;定食&amp;quot;}}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、&lt;code&gt;import&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;でインデクシングを行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.import
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 0&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これで、インデクシングされたので、&lt;a href=&quot;http://localhost:9200/_plugin/marvel/&quot; target=&quot;_blank&quot;&gt;Marvel&lt;/a&gt;のINDICESの&lt;code&gt;restaurant_development&lt;/code&gt;のDocuments数が「6」になっています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170915.png&quot; alt=&quot;f:id:nipe880324:20151017170915p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170915p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://localhost:9200/_plugin/marvel/sense/index.html&quot; target=&quot;_blank&quot;&gt;Marvel Sense&lt;/a&gt;からクエリを実行すると、次のように結果が返ってきます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170931.png&quot; alt=&quot;f:id:nipe880324:20151017170931p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170931p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;検索フォームを作成する&lt;/h4&gt;フリーキーワードを入力できる検索フォームを作成します。&lt;br /&gt;
検索/検索結果表示画面(&lt;code&gt;index.html.erb&lt;/code&gt;)にフォームを追加します。&lt;br /&gt;
検索結果の表示も変えています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;レストラン検索&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索フォーム --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; root_path, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :get, enforce_utf8: false do %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; search_field_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :q, params[:q], &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;form-control&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, placeholder: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;店名、場所、カテゴリ&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;btn btn-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;検索&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.each do |r| %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;（&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.name_kana&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;）&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text-muted&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;都道府県: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.pref.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;カテゴリ: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.category.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;画面を表示すると次のようになります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170957.png&quot; alt=&quot;f:id:nipe880324:20151017170957p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170957p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;検索パラメータからElasticsearchのクエリを作成し、検索する&lt;/h4&gt;まずは、Elasticsearchのクエリを作成し、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;からElasticsearchにどのようなクエリを投げればよいか確認します。&lt;br /&gt;
&lt;a href=&quot;http://localhost:9200/_plugin/marvel/sense/index.html&quot; target=&quot;_target&quot;&gt;Marvel Sense&lt;/a&gt;を開き、クエリを試します。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のフィールドからクエリ文字列にマッチするドキュメントを取得するには&lt;code&gt;multi_match&lt;/code&gt;を使用します。&lt;br /&gt;
参考: &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/1.7/query-dsl-multi-match-query.html&quot; target=&quot;_blank&quot;&gt;Multi Matchクエリ&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;から次のクエリを作成するようにします。&lt;br /&gt;
&lt;code&gt;query&lt;/code&gt;にはユーザが入力した検索キーワード、&lt;code&gt;fields&lt;/code&gt;には検索を行うフィールド名を指定します。&lt;br /&gt;
下記の例では、&lt;code&gt;name&lt;/code&gt;、&lt;code&gt;name_kana&lt;/code&gt;、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;pref.name&lt;/code&gt;、&lt;code&gt;category.name&lt;/code&gt;に「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%ED%B3%D1&quot;&gt;牛角&lt;/a&gt;」という文字列が入っているドキュメントを取得します。&lt;br /&gt;
※&lt;code&gt;pref.name&lt;/code&gt;と&lt;code&gt;category.name&lt;/code&gt;は&quot;keyword&quot;アナライザーを使用しているので全文マッチしないとヒットしません。例：「東京」ではヒットせず、「東京都」でヒットする。ここらへんの検索のチューニングは専門的なので省きます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;multi_match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;:    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;牛角&amp;quot;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;fields&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name_kana&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;address&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;pref.name&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category.name&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// 結果&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;took&amp;quot;&lt;/span&gt;: 3,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;timed_out&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_shards&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 5,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;successful&amp;quot;&lt;/span&gt;: 5,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;: 0
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 1, &lt;span class=&quot;synComment&quot;&gt;// ヒットしたドキュメント数&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;: 0.08322528, &lt;span class=&quot;synComment&quot;&gt;// 最大の関連度&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
         &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;restaurant_development&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synComment&quot;&gt;// インデックス&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;restaurant&amp;quot;&lt;/span&gt;,  &lt;span class=&quot;synComment&quot;&gt;// ドキュメントタイプ&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;: 0.08322528, &lt;span class=&quot;synComment&quot;&gt;// 関連度&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_source&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;// データ&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;牛角&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name_kana&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ぎゅうかく&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;zip&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;130-0033&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;address&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;池袋3-33&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;closed&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2015-10-16T19:26:03.683Z&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;pref&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;東京都&amp;quot;&lt;/span&gt;
               &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;居酒屋&amp;quot;&lt;/span&gt;
               &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;上記のクエリを作成するには、ユーザの検索キーワードが必要になります。&lt;br /&gt;
そのため、コントローラーで検索フォームの&lt;code&gt;q&lt;/code&gt;パラメータを&lt;code&gt;search&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に渡すようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controller/top_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TopController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@restaurants&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.search(params)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、Restaurantモデルに&lt;code&gt;search&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を定義します。&lt;br /&gt;
&lt;code&gt;search&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;は、Elasticsearchのクエリを作成し、検索を実施、Elasticsearchからのレスポンスを返します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# Elasticsearchのクエリを作成し、検索を実施する&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Elasticsearchからのレスポンスを返す&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
    &lt;span class=&quot;synComment&quot;&gt;# 検索パラメータを取得&lt;/span&gt;
    keyword = params[&lt;span class=&quot;synConstant&quot;&gt;:q&lt;/span&gt;]

    &lt;span class=&quot;synComment&quot;&gt;# 検索クエリを作成（Elasticsearch::DSLを利用）&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 参考: https://github.com/elastic/elasticsearch-ruby/tree/master/elasticsearch-dsl&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 検索キーワードが入力されたときは、下記クエリを作成&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# &amp;quot;query&amp;quot;: {&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   &amp;quot;multi_match&amp;quot;: {&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#     &amp;quot;query&amp;quot;:    &amp;quot;牛角&amp;quot;, // 検索キーワード&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#     &amp;quot;fields&amp;quot;: [&amp;quot;name&amp;quot;, &amp;quot;name_kana&amp;quot;, &amp;quot;address&amp;quot;, &amp;quot;pref.name&amp;quot;, &amp;quot;category.name&amp;quot;]&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   }&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# }&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 検索キーワードが入力されてない時は、下記クエリを作成（すべてのドキュメントを取得）&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# &amp;quot;query&amp;quot;: {&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   &amp;quot;match_all&amp;quot;: {}&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# }&lt;/span&gt;
    search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
      query {
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; keyword.present?
          multi_match {
            query keyword
            fields &lt;span class=&quot;synSpecial&quot;&gt;%w{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; name name_kana address pref.name category.name &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
          }
        &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
          match_all
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      }
    }

    &lt;span class=&quot;synComment&quot;&gt;# 検索クエリをなげて結果を表示&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# __elasticsearch__にElasticsearchを操作するたくさんのメソッドが定義されている&lt;/span&gt;
    __elasticsearch__.search(search_definition)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;最後に&lt;cocd&gt;application.rb&lt;/code&gt;に&lt;code&gt;require &#39;elasticsearch/rails/instrumentation&#39;&lt;/code&gt;を追加します。&lt;br /&gt;
こうすることで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;ログにElasticsearchの実行時間やは発行したクエリが表示されるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/application.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Require the gems listed in Gemfile, including any gems&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# you&#39;ve limited to :test, :development, or :production.&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Bundler&lt;/span&gt;.require(*&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.groups)
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch/rails/instrumentation&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで画面から「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%ED%B3%D1&quot;&gt;牛角&lt;/a&gt;」と検索すると&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%ED%B3%D1&quot;&gt;牛角&lt;/a&gt;が表示されます。「東京都」と検索すると東京都の店が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017171045.png&quot; alt=&quot;f:id:nipe880324:20151017171045p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017171045p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;このとき&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;ログで注目してもらいたいのが、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SQL&quot;&gt;SQL&lt;/a&gt;の実行がないこと(AcriveRecord: 0.0ms)です。代わりに、Elasticsearchへの実行時間が記載されています。さらに、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0&quot;&gt;デバッグ&lt;/a&gt;用でElasticsearchに送られたクエリも表示されています。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Started GET &amp;#34;/?q=%E6%9D%B1%E4%BA%AC%E9%83%BD&amp;#34; for ::1 at 2015-10-17 16:05:19 +0900
Processing by TopController#index as HTML
  Parameters: {&amp;#34;q&amp;#34;=&amp;gt;&amp;#34;東京都&amp;#34;}
  Restaurant Search (9.1ms) {index: &amp;#34;restaurant_development&amp;#34;, type: &amp;#34;restaurant&amp;#34;, body: {query: {multi_match: {query: &amp;#34;東京都&amp;#34;, fields: [&amp;#34;name&amp;#34;, &amp;#34;name_kana&amp;#34;, &amp;#34;address&amp;#34;, &amp;#34;pref.name&amp;#34;, &amp;#34;category.name&amp;#34;]}}}}
  Rendered top/index.html.erb within layouts/application (10.2ms)
Completed 200 OK in 44ms (Views: 34.0ms | ActiveRecord: 0.0ms | Elasticsearch: 9.1ms)&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Elasticsearchのレスポンスを画面に表示する&lt;/h4&gt;既に画面に表示されてレストランの表示がされてしまっていますが、&lt;code&gt;__elasticsearch__.search&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の帰り値について説明することでうまく表示されている理由を説明します。&lt;/p&gt;&lt;p&gt;Elasticsearchはヒットするドキュメントを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;形式で返します。Elasticsearch::Modelによりそれをインスタン化して扱いやすいものにしています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;response = __elasticsearch__.search(search_definition)

&lt;span class=&quot;synComment&quot;&gt;# レスポンスのクラス名はElasticsearch::Model::Response::Response&lt;/span&gt;
response.class &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Elasticsearch::Model::Response::Response&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ヒットしたドキュメント数を取得&lt;/span&gt;
response.results.total &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 3&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ヒットしたドキュメントの最初のドキュメントを取得&lt;/span&gt;
response.results.first
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Elasticsearch::Model::Response::Result:0x007fc0c6dc28a8&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  @result=&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   {&amp;quot;_index&amp;quot;=&amp;gt;&amp;quot;restaurant_development&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#    &amp;quot;_type&amp;quot;=&amp;gt;&amp;quot;restaurant&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#    &amp;quot;_id&amp;quot;=&amp;gt;&amp;quot;1&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#    &amp;quot;_score&amp;quot;=&amp;gt;0.41762865,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#    &amp;quot;_source&amp;quot;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     {&amp;quot;name&amp;quot;=&amp;gt;&amp;quot;松屋&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;name_kana&amp;quot;=&amp;gt;&amp;quot;まつや&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;zip&amp;quot;=&amp;gt;&amp;quot;240-0113&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;address&amp;quot;=&amp;gt;&amp;quot;三浦郡葉山町堀内24-3&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;closed&amp;quot;=&amp;gt;false,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;created_at&amp;quot;=&amp;gt;&amp;quot;2015-10-16T19:26:03.679Z&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;pref&amp;quot;=&amp;gt;{&amp;quot;name&amp;quot;=&amp;gt;&amp;quot;東京都&amp;quot;},&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;category&amp;quot;=&amp;gt;{&amp;quot;name&amp;quot;=&amp;gt;&amp;quot;定食&amp;quot;}}}&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# response.first でも同じ結果が返ってきます&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# これは、responseオブジェクトがEnumerableモジュールのメソッドをresultsにデリゲートしているためです。&lt;/span&gt;
result = response.first

&lt;span class=&quot;synComment&quot;&gt;# 関連度を取得&lt;/span&gt;
result._score &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 0.41762865&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ドキュメント(_source)の内容を取得&lt;/span&gt;
result._source.name &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;松屋&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# _sourceを省略できる&lt;/span&gt;
result.name &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;松屋&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 入れ子になっている値は.(ドット)でアクセスできる&lt;/span&gt;
result.pref &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; {&amp;quot;name&amp;quot;=&amp;gt;&amp;quot;東京都&amp;quot;}&lt;/span&gt;
result.pref.name &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;東京都&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# データベースからヒットしたドキュメントのActiveRecordのインスタンスの配列を取得&lt;/span&gt;
response.records.to_a
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [#&amp;lt;Restaurant:xxxx&amp;gt;, #&amp;lt;Restaurant:yyyy&amp;gt;, ...]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;このようにレスポンスが&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt;と同じように扱えるため、&lt;code&gt;each&lt;/code&gt;や&lt;code&gt;pref.name&lt;/code&gt;などと記載したままでも問題なく表示されていたということです。&lt;br /&gt;
せっかくなので、ヒットしたドキュメント数を表示するように追加しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/top/index.html.erb
...

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の数を表示する --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;検索結果: 約&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @restaurants.results.total&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;件&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ドキュメントも追加/更新/削除する&lt;/h4&gt;これで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;とElasticsearchを使って、検索キーワードで検索をできるようにできました。&lt;br /&gt;
最後に、ドキュメントの取得元のDBのレコードの追加/更新/削除があった場合、ドキュメントも追加/更新/削除するようにします。&lt;br /&gt;
そうしないと、レコードが更新されたのに、検索結果の内容が正しくないものになってしまいます。&lt;/p&gt;&lt;p&gt;DBを更新しても、Elasticsearchのドキュメントを更新しないと以下のようになってしまいます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# DBの変更前にクエリを実行&lt;/span&gt;
response = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.search(&lt;span class=&quot;synConstant&quot;&gt;q&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
response.first.address &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;池袋3-33&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DBを更新&lt;/span&gt;
record = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.find_by(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
record.update(&lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;池袋9-99&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DBの更新後にクエリ実行。住所が変わっていない&lt;/span&gt;
response = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.search(&lt;span class=&quot;synConstant&quot;&gt;q&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
response.first.address &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;池袋3-33&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;一番シンプルな方法は、&lt;code&gt;Elasticsearch::Model::Callbacks&lt;/code&gt;をインクルードします。&lt;br /&gt;
これをインクルードすることで、&lt;code&gt;after_commit&lt;/code&gt;後にドキュメントを作成/更新/削除する処理が走るようになります。（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;: &lt;a href=&quot;https://github.com/elastic/elasticsearch-rails/blob/master/elasticsearch-model/lib/elasticsearch/model/adapters/active_record.rb#L65&quot; target=&quot;_blank&quot;&gt;コールバックの実装&lt;/a&gt;）&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Model&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Model&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Callbacks&lt;/span&gt;

  ...
&lt;/pre&gt;&lt;p&gt;DBを更新するとドキュメントも更新されるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# DBの変更前にクエリを実行&lt;/span&gt;
response = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.search(&lt;span class=&quot;synConstant&quot;&gt;q&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
response.first.address &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;池袋3-33&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DBを更新。コールバックでドキュメントも更新される&lt;/span&gt;
record = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.find_by(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
record.update(&lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;池袋5-55&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DBの更新後にクエリ実行。住所が変わっている&lt;/span&gt;
response = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.search(&lt;span class=&quot;synConstant&quot;&gt;q&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
response.first.address &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;池袋5-55&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これはシンプルなのですが、大量にレコード追加/更新/削除があると、Elasticsearchのドキュメントの追加/更新/削除が溜まっていき、溜まっている場合、それが&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DC%A5%C8%A5%EB%A5%CD%A5%C3%A5%AF&quot;&gt;ボトルネック&lt;/a&gt;となり、パフォーマンスが悪くなってしまいます。&lt;br /&gt;
そのため、一般的には、非同期で行うのが普通です。非同期で行うので検索結果の内容がDBの内容と少しの時間ずれが発生します。&lt;br /&gt;
非同期でドキュメントを更新する方法は次のとおりです。&lt;br /&gt;
&lt;a href=&quot;https://github.com/elastic/elasticsearch-rails/tree/master/elasticsearch-model#asynchronous-callbacks&quot; target=&quot;_blank&quot;&gt;elasticsearch-model - 非同期コールバック&lt;/a&gt;を参照ください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-1-filter&quot;&gt;4. 検索条件を指定する&lt;/h3&gt;Restaurantモデルの&lt;code&gt;closed&lt;/code&gt;は、レストランが閉店したかどうかをboolean値で保持しています。&lt;br /&gt;
次のような&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;を表示し、デフォルトでは、閉店したレストランを除外して検索できるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018035057.png&quot; alt=&quot;f:id:nipe880324:20151018035057p:plain:w320&quot; title=&quot;f:id:nipe880324:20151018035057p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;をクリックすることで、閉店したレストランも含めて検索できるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018035115.png&quot; alt=&quot;f:id:nipe880324:20151018035115p:plain:w320&quot; title=&quot;f:id:nipe880324:20151018035115p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;検索条件を指定するfilterクエリ&lt;/h4&gt;&lt;a href=&quot;http://localhost:9200/_plugin/marvel/sense/index.html&quot; target=&quot;_blank&quot;&gt;Marvel Sense&lt;/a&gt;を開きます。&lt;/p&gt;&lt;p&gt;下記のように、&lt;code&gt;filtered&lt;/code&gt;を指定し、&lt;code&gt;filter&lt;/code&gt;内でフィルタを指定します。&lt;br /&gt;
&lt;code&gt;term&lt;/code&gt;は、termフィルタで、「&quot;closed&quot;フィールドがfalseのものを取得する」という検索条件になります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;filtered&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;filter&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;closed&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;フィルターにはさまざまなものがあり、&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-filters.html&quot; target=&quot;_blank&quot;&gt;query-dsl-filter&lt;/a&gt;を参照ください。&lt;br /&gt;
よく使うのは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のフィルタをANDやORで指定できる「boolフィルタ」や日付や数値の範囲で検索できる「rangeフィルタ」、termsフィルタやtermフィルタです。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;検索条件を実装&lt;/h4&gt;まず、画面に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;レストラン検索&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索フォーム --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; root_path, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :get, enforce_utf8: false do %&amp;gt;&lt;/span&gt;
  ...
  
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- チェックボックスのフィールドを追加 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; check_box_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :closed, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;t&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, params[:closed].present? %&amp;gt;&lt;/span&gt; 閉店しているレストランも検索結果に含める
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;btn btn-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;検索&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、&lt;code&gt;search&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で&lt;code&gt;closed&lt;/code&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;が押されているかどうかを取得します。&lt;br /&gt;
「閉店しているレストランも検索結果に含める」&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;が押されている場合のみ、&lt;code&gt;params[:closed]&lt;/code&gt;に値が設定されるので、closed変数は&lt;code&gt;true&lt;/code&gt;になります。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;が押されていない場合は、blankになるので、closed変数は&lt;code&gt;false&lt;/code&gt;になります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
  &lt;span class=&quot;synComment&quot;&gt;# 検索パラメータを取得&lt;/span&gt;
  keyword = params[&lt;span class=&quot;synConstant&quot;&gt;:q&lt;/span&gt;]
  closed  = params[&lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;].present?
  ...
&lt;/pre&gt;&lt;p&gt;次にフィルタを利用した&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;を作成します。&lt;br /&gt;
Elasticsearch::&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;でのtermフィルタの使い方は、&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby/blob/master/elasticsearch-dsl/lib/elasticsearch/dsl/search/filters/term.rb&quot; target=&quot;_blank&quot;&gt;elasticsearch-ruby/elasticsearch-dsl/lib/elasticsearch/dsl/search/filters/term.rb&lt;/a&gt;に記載されているので参考にしてクエリを記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;

search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
  query {
    filtered {
      query {
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; keyword.present?
          multi_match {
            query keyword
            fields &lt;span class=&quot;synSpecial&quot;&gt;%w{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; name name_kana address pref.name category.name &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
          }
        &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
          match_all
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      }

      &lt;span class=&quot;synComment&quot;&gt;# 開店しているレストランのみ表示する条件(closed: false)&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# closed=trueの場合は、この検索条件を実施しない&lt;/span&gt;
      filter {
        term &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      } &lt;span class=&quot;synStatement&quot;&gt;unless&lt;/span&gt; closed
    }
  }
}
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;フィルタの動作確認&lt;/h4&gt;&lt;a href=&quot;http://localhost:3000/&quot; target=&quot;_blank&quot;&gt;http://localhost:3000/&lt;/a&gt;でアクセスすると、検索結果が「開店しているレストラン4件」のみ表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018035057.png&quot; alt=&quot;f:id:nipe880324:20151018035057p:plain:w320&quot; title=&quot;f:id:nipe880324:20151018035057p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;「閉店しているレストランも検索結果に含める」&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;を選択し、検索ボタンを押すと、すべてのレストラン(6件)表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018035115.png&quot; alt=&quot;f:id:nipe880324:20151018035115p:plain:w320&quot; title=&quot;f:id:nipe880324:20151018035115p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;まとめ&lt;/h3&gt;
    &lt;p&gt;これで、シンプルですが、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;とElasticsearchを使って、検索キーワードで検索をできるようにできました。&lt;br /&gt;
これに、Elasticsearchの機能の「ページネーション・ページ当たりの表示数」、「ソート」、「ファセット・post_filter」、「ハイライト」、「サジェスト」などの機能を付け加えていけばより実践的な検索機能が実装できるようになります。&lt;/p&gt;&lt;p&gt;次は「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151019/1445265581&quot;&gt;ページネーションとページあたりの表示変更できる&lt;/a&gt;」を実装します。&lt;/p&gt;&lt;p&gt;以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-rails/tree/master/elasticsearch-model&quot;&gt;elasticsearch-rails/elasticsearch-model at master &amp;middot; elastic/elasticsearch-rails &amp;middot; GitHub&lt;/a&gt; - Elasticsearchへの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby/tree/master/elasticsearch-dsl&quot;&gt;elasticsearch-ruby/elasticsearch-dsl at master &amp;middot; elastic/elasticsearch-ruby &amp;middot; GitHub&lt;/a&gt; - クエリ作成&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/1.7/query-dsl-multi-match-query.html#type-best-fields&quot;&gt;Multi Match Query&lt;/a&gt; - multi matchクエリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="検索" label="検索" />
        
        <category term="elasticsearch" label="elasticsearch" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>Phoenix入門3 - WebSocketのチャット機能</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20151016/1444930756"/>
        <id>hatenablog://entry/6653458415124742795</id>
        <published>2015-10-16T02:39:16+09:00</published>
        <updated>2015-10-16T03:12:36+09:00</updated>
        <summary type="html">Phoenixでチャット機能を実装します。Phoenixでソケット、チャネル、トークン、API作成、モデルのアソシエーションなどを行っていきます。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151011/20151011193641.png&quot; alt=&quot;f:id:nipe880324:20151011193641p:plain:w420&quot; title=&quot;f:id:nipe880324:20151011193641p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;前々回の記事は「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151011/1444560106&quot;&gt;Phoenix環境のセットアップから、静的ページを作成し、表示&lt;/a&gt;」させました。&lt;br /&gt;
前回の記事では、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151013/1444662887&quot;&gt;Phoenixで認証機能を実装&lt;/a&gt;」しました。&lt;br /&gt;
今回の記事では、入門最後として「&lt;b&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;でチャット機能を実装&lt;/b&gt;」します。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;でソケット、チャネル、トークン、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;作成、モデルのアソシエーションなどを行っていきます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;サンプル&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tranquil-mesa-7338.herokuapp.com/login&quot; target=&quot;_blank&quot;&gt;ChatPhoenix - Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nipe0324/chat_phoenix&quot; target=&quot;_blank&quot;&gt;ChatPhoenix - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#phoenix-tutorial-3-terms&quot;&gt;ソケットの基礎用語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#phoenix-tutorial-3-chat&quot;&gt;チャット機能の追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#phoenix-tutorial-3-integration&quot;&gt;チャット機能をログイン機能と統合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#phoenix-tutorial-3-persist&quot;&gt;チャットメッセージの永続化&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Erlang&quot;&gt;Erlang&lt;/a&gt; 7.1&lt;/li&gt;
&lt;li&gt;Elixir 1.1.1&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt; 10.0.3&lt;/li&gt;
&lt;li&gt;Hex 0.9.0&lt;/li&gt;
&lt;li&gt;node.js 0.12.7&lt;/li&gt;
&lt;li&gt;npm 2.14.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PostgreSQL&quot;&gt;PostgreSQL&lt;/a&gt; 9.4.4&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;phoenix-tutorial-3-terms&quot;&gt;1. ソケットの基礎用語&lt;/h3&gt;ソケットの基本的な用語について簡単に記載します。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;ソケットハンドラ(Socket Handlers)&lt;/h4&gt;ソケットハンドラは、ソケット接続の認証や識別を行うモジュールです。&lt;br /&gt;
そして、すべてのチャネルで使用されるデフォルトのソケットを設定します。&lt;br /&gt;
デフォルトで&lt;code&gt;web/channels/user_socket.ex&lt;/code&gt;というソケットハンドラが用意されています。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;チャネルルート(Channel Routes)&lt;/h4&gt;ソケットハンドラ内で定義され、トピック文字列にマッチしたリクエストを、特定のチャネルモジュールにルートさせます。&lt;br /&gt;
また、&lt;code&gt;*&lt;/code&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EF%A5%A4%A5%EB%A5%C9%A5%AB%A1%BC%A5%C9&quot;&gt;ワイルドカード&lt;/a&gt;を示します。&lt;br /&gt;
例えば次のようにチャネルルートを定義した場合、&lt;code&gt;rooms:music&lt;/code&gt;や&lt;code&gt;rooms:sports&lt;/code&gt;は&lt;code&gt;RoomChannel&lt;/code&gt;にディスパッチされます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;channel &amp;#34;rooms:*&amp;#34;, HelloPhoenix.RoomChannel&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;チャネル(Channels)&lt;/h4&gt;チャネルはクライアントからのイベントを扱います。Webの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MVC&quot;&gt;MVC&lt;/a&gt;でいうコントローラのようなものです。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;パブサブ(PubSub)&lt;/h4&gt;出版-購読型モデル(Publish/Subscribe)で、あるチャネルに誰かがイベントを発行(Publish)すると、そのチャネルを購読(Subscribe)している人すべてにそのイベントが通知されるというモデルです。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;メッセージ&lt;/h4&gt;チャネルでやりとりされるデータ。&lt;br /&gt;
&lt;a href=&quot;http://hexdocs.pm/phoenix/Phoenix.Socket.Message.html&quot; target=&quot;_blank&quot;&gt;Phoenix.Socket.Message&lt;/a&gt;モジュールで定義されていて、下記のデータを保持しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;topic - &lt;code&gt;&lt;トピック名&gt;&lt;/code&gt; か &lt;code&gt;&lt;トピック名&gt;:&lt;サブトピック名&gt;&lt;/code&gt;の文字列で保持。例：&quot;rooms&quot;、&quot;rooms:sport&quot;&lt;/li&gt;
&lt;li&gt;event - イベント名の文字列で保持。。例: &quot;new:message&quot;&lt;/li&gt;
&lt;li&gt;payload - メッセージ本体を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;形式の文字列で保持。&lt;/li&gt;
&lt;li&gt;ref - incoming evnetに返信するためのユニーク文字列で保持。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;h4&gt;クライアントライブラリ&lt;/h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Javascript&quot;&gt;Javascript&lt;/a&gt;クライアントを提供しています。また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/iOS&quot;&gt;iOS&lt;/a&gt;、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Android&quot;&gt;Android&lt;/a&gt;、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/C%23&quot;&gt;C#&lt;/a&gt;クライアントもVer. 1.0から提供しています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;phoenix-tutorial-3-chat&quot;&gt;2. チャット機能の追加&lt;/h3&gt;基礎用語をさくっと記載しましたので、チャット機能を実装します。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;ソケットルートを定義&lt;/h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;アプリを新規作成すると次のように&lt;code&gt;endpoint.ex&lt;/code&gt;に&lt;code&gt;UserSocket&lt;/code&gt;というソケットハンドラを使うように定義されています。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# lib/chat_phoenix/endpoint.ex
defmodule HelloPhoenix.Endpoint do
  use Phoenix.Endpoint, otp_app: :chat_phoenix

  # ソケットハンドラ
  # &amp;#34;/socket&amp;#34; につなぐと、ソケットハンドラ UserSocket に接続されます
  socket &amp;#34;/socket&amp;#34;, ChatPhoenix.UserSocket
  ...
end&lt;/pre&gt;&lt;p&gt;ソケットハンドラのUserSocketでは、チャネルルートを定義します。&lt;br /&gt;
&lt;code&gt;channel &quot;rooms:*&quot;, ChatPhoenix.RoomChannel&lt;/code&gt;が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%E1%A5%F3%A5%C8%A5%A2%A5%A6%A5%C8&quot;&gt;コメントアウト&lt;/a&gt;されているのでコメントを外します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/channels/user_socket.ex
defmodule HelloPhoenix.UserSocket do
  use Phoenix.Socket

  ## Channels
  # クライアントが&amp;#34;rooms:&amp;#34;で始まるトピックにメッセージを送るとRoomChannelモジュールにルートされる
  channel &amp;#34;rooms:*&amp;#34;, ChatPhoenix.RoomChannel
  ...
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;チャット画面を追加&lt;/h4&gt;次にチャット画面を追加します。&lt;code&gt;page/index.html.eex&lt;/code&gt;を下記に置き換えます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- web/templates/page/index.html.eex --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;messages&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-3 form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Username&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-control&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9 form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Messenger&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-control&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;次に、&lt;code&gt;app.html.eex&lt;/code&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/jQuery&quot;&gt;jQuery&lt;/a&gt;を読み込むようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- web/templates/layout/app.html.eex --&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- /container --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;//code.jquery.com/jquery-2.1.4.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;lt;%= static_path(@conn, &amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;/js/app.js&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;) %&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;web/static/js/app.js&lt;/code&gt;で&lt;code&gt;my_socket.js&lt;/code&gt;を読み込むようにします。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;では、デフォルトでは、ES6の文法ででJSを記載し、branch.ioでビルドしています。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;// web/static/js/app.js

// ローカルファイルをインポート
//
// ローカルファイルを相対パス(&amp;#34;./socket&amp;#34;)か絶対パス(&amp;#34;web/static/js/socket&amp;#34;)で
// 指定してインポートできます。

// web/static/js/my_socket.js をインポート
import &amp;#34;./my_socket&amp;#34;&lt;/pre&gt;&lt;p&gt;そして、&lt;code&gt;my_socket.js&lt;/code&gt;を作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;// web/static/js/app.js

// Phoenisではデフォルトで&amp;#34;deps/phoenix/web/static/js/phoenix&amp;#34;に
// JSのSocketクラスが実装されています。そのSocketクラスをimportします。
import {Socket} from &amp;#34;deps/phoenix/web/static/js/phoenix&amp;#34;

// チャットを行うクラス
class MySocket {

  // newのときに呼ばれるコンストラクタ
  constructor() {
    console.log(&amp;#34;Initialized&amp;#34;)

    // 入力フィールド
    this.$username = $(&amp;#34;#username&amp;#34;)
    this.$message  = $(&amp;#34;#message&amp;#34;)

    // 表示領域
    this.$messagesContainer = $(&amp;#34;#messages&amp;#34;)

    // キー入力イベントの登録
    this.$message.off(&amp;#34;keypress&amp;#34;).on(&amp;#34;keypress&amp;#34;, e =&amp;gt; {
      if (e.keyCode === 13) { // 13: Enterキー
        // `${変数}` は式展開
        console.log(`[${this.$username.val()}]${this.$message.val()}`)
        // メッセージの入力フィールドをクリア(空)にする
        this.$message.val(&amp;#34;&amp;#34;)
      }
    })
  }
}

$(
  () =&amp;gt; {
    new MySocket()
  }
)

export default MySocket&lt;/pre&gt;&lt;p&gt;&lt;code&gt;my_socket.js&lt;/code&gt;を保存すると自動的に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;されます。&lt;br /&gt;
画面をリロードし、UsernameとMessengerに値をいれて、Enterキーを押すと、JSコンソールに内容が表示されると思います。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151016/20151016022228.png&quot; alt=&quot;f:id:nipe880324:20151016022228p:plain:w420&quot; title=&quot;f:id:nipe880324:20151016022228p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;JSでソケットに接続&lt;/h4&gt;&lt;code&gt;my_socket.js&lt;/code&gt;でソケットに接続します。&lt;br /&gt;
&lt;code&gt;Socket&lt;/code&gt;クラスを作成し、&lt;code&gt;connect()&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で接続できます。&lt;br /&gt;
ソケット接続を&lt;code&gt;connectSocket()&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;として切り出しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// web/static/app.js&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// チャットを行うクラス&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;class&lt;/span&gt; MySocket &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  constructor() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; ... &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;// ソケットに接続&lt;/span&gt;
  connectSocket(socket_path) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// &amp;quot;lib/chat_phoenix/endpoint.ex&amp;quot;　に定義してあるソケットパス(&amp;quot;/socket&amp;quot;)で&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// ソケットに接続すると、UserSocketに接続されます&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.socket = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Socket(socket_path)
    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.socket.connect()
    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.socket.onClose( e =&amp;gt; console.log(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Closed connection&amp;quot;&lt;/span&gt;) )
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

$(
  () =&amp;gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;let&lt;/span&gt; my_socket = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; MySocket()
    my_socket.connectSocket(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/socket&amp;quot;&lt;/span&gt;)
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;サーバーでチャネルモジュールを定義&lt;/h4&gt;ソケットに接続できましたので、チャネルのRoomChannelを定義します。&lt;br /&gt;
クライアントがチャネルに入るためにはサーバーのチャネルモジュールで&lt;code&gt;join&lt;/code&gt;関数を実装する必要があり、&lt;code&gt;{:ok, socket}&lt;/code&gt;を返ことでチャネルに入ることができます。&lt;br /&gt;
また、&lt;code&gt;join&lt;/code&gt;関数の第一引数ではトピック名を指定し、トピックごとに&lt;code&gt;join&lt;/code&gt;関数を定義します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/channels/room_channel.ex
defmodule ChatPhoenix.RoomChannel do
  use Phoenix.Channel

  # &amp;#34;rooms:lobby&amp;#34;トピックのjoin関数
  # {:ok, socket} を返すだけなのですべてのクライアントが接続可能
  def join(&amp;#34;rooms:lobby&amp;#34;, message, socket) do
    {:ok, socket}
  end
end&lt;/pre&gt;&lt;p&gt;許可するには、&lt;code&gt;{:ok, socket}&lt;/code&gt; か &lt;code&gt;{:ok, reply, socket}&lt;/code&gt; を返します。&lt;br /&gt;
拒否するには、&lt;code&gt;{:error, reply}&lt;/code&gt; を返します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;JSでチャネルに接続&lt;/h4&gt;いま作成したRoomChannelモジュールに接続します。接続するトピックは&lt;code&gt;&quot;rooms:lobby&quot;&lt;/code&gt;です。&lt;br /&gt;
&lt;code&gt;socket.channel(&quot;&lt;トピック名&gt;&quot;, {})&lt;/code&gt;でチャネルを作成し、&lt;code&gt;channel.join()&lt;/code&gt;でチャネルにジョインします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;// web/static/app.js

class MySocket {
  ...
  // チャネルに接続
  connectChannel(chanel_name) {
    this.channel = this.socket.channel(chanel_name, {})
    this.channel.join()
      .receive(&amp;#34;ok&amp;#34;, resp =&amp;gt; { // チャネルに入れたときの処理
        console.log(&amp;#34;Joined successfully&amp;#34;, resp)
      })
      .receive(&amp;#34;error&amp;#34;, resp =&amp;gt; { // チャネルに入れなかった時の処理
        console.log(&amp;#34;Unable to join&amp;#34;, resp)
      })
  }
}

$(
  () =&amp;gt; {
    // ソケット/チャネルに接続
    let my_socket = new MySocket()
    my_socket.connectSocket(&amp;#34;/socket&amp;#34;)
    my_socket.connectChannel(&amp;#34;rooms:lobby&amp;#34;)
  }
)&lt;/pre&gt;&lt;p&gt;画面をリロードすると、うまくいけばJSコンソールに次のように表示されると思います。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Initialized
Joined successfully Object {}&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;JSでチャネルにメッセージを送る&lt;/h4&gt;&lt;code&gt;channel.push(event名, メッセージ)&lt;/code&gt;でチャネルにメッセージを送ります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// web/static/app.js&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// キー入力イベントの登録&lt;/span&gt;
message.off(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;keypress&amp;quot;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;keypress&amp;quot;&lt;/span&gt;, e =&amp;gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (e.keyCode === 13) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// 13: Enterキー&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// `${変数}` は式展開&lt;/span&gt;
    console.log(`&lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;$&lt;span class=&quot;synIdentifier&quot;&gt;{this&lt;/span&gt;.$username.val()&lt;span class=&quot;synIdentifier&quot;&gt;}]&lt;/span&gt;$&lt;span class=&quot;synIdentifier&quot;&gt;{this&lt;/span&gt;.$message.val()&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;`)
    &lt;span class=&quot;synComment&quot;&gt;// サーバーに&amp;quot;new:messege&amp;quot;というイベント名で、ユーザ名とメッセージを送る&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.channel.push(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;new:message&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; user: &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.$username.val(), body: &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.$message.val() &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;synComment&quot;&gt;// メッセージの入力フィールドをクリア(空)にする&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.$message.val(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;サーバーでIncoming eventsを処理する&lt;/h4&gt;クライアントからサーバーへ入ってくるイベントをIncoming eventsと呼びます。&lt;br /&gt;
Incoming eventsは、チャネルに&lt;code&gt;handle_in&lt;/code&gt;関数を定義することで処理をすることができます。&lt;br /&gt;
&lt;code&gt;handle_in&lt;/code&gt;関数の第一引数にイベント名を記載し、送られてきたイベント名に対応した&lt;code&gt;handle_in&lt;/code&gt;関数が呼ばれます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/channels/room_channel.ex

# イベント名&amp;#34;new:message&amp;#34;のIncoming eventsを処理する
def handle_in(&amp;#34;new:message&amp;#34;, message, socket) do
  # broadcat!は同じチャネルのすべてのサブスクライバーにメッセージを送る
  broadcast! socket, &amp;#34;new:message&amp;#34;, %{user: message[&amp;#34;user&amp;#34;], body: message[&amp;#34;body&amp;#34;]}
  {:noreply, socket}
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;JSでメッセージをサーバーから受け取る&lt;/h4&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// web/static/js/my_socket.js&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;class&lt;/span&gt; MySocket &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;// チャネルに接続&lt;/span&gt;
  connectChannel(chanel_name) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    ...
    &lt;span class=&quot;synComment&quot;&gt;// チャネルの&amp;quot;new:message&amp;quot;イベントを受け取った時のイベント処理&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.channel.on(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;new:message&amp;quot;&lt;/span&gt;, message =&amp;gt; &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;._renderMessage(message) )
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;// メッセージを画面に表示&lt;/span&gt;
  _renderMessage(message) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;let&lt;/span&gt; user = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;._sanitize(message.user || &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;New User&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synIdentifier&quot;&gt;let&lt;/span&gt; body = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;._sanitize(message.body)

    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.$messagesContainer.append(`&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;&lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;$&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;user&lt;span class=&quot;synIdentifier&quot;&gt;}]&lt;/span&gt;&amp;lt;/b&amp;gt;: $&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;body&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;&amp;lt;/p&amp;gt;`)
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;// メッセージをサニタイズする&lt;/span&gt;
  _sanitize(str) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; $(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;lt;div/&amp;gt;&amp;quot;&lt;/span&gt;).text(str).html()
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;チャネルの動作確認&lt;/h4&gt;2つブラウザを開き、&lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot;&gt;http://localhost:4000/&lt;/a&gt;にアクセスします。&lt;br /&gt;
UsernameとMessengerを入力してEnterキーを押すとリアルタイムでメッセージが表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151016/20151016022846.png&quot; alt=&quot;f:id:nipe880324:20151016022846p:plain:w420&quot; title=&quot;f:id:nipe880324:20151016022846p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;phoenix-tutorial-3-integration&quot;&gt;3. チャット機能をログイン機能と統合&lt;/h3&gt;チャット機能ができましたので、前回の記事で作成したログイン機能と統合します。&lt;br /&gt;
具体的には、ログインしないとチャット機能を使えないようにします。&lt;br /&gt;
また、そのときに、UsernameにUserのemailを設定するようにしてみます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;チャット画面でログインを必須にする&lt;/h4&gt;チャット画面を開く前にログインをしているかチェックする&lt;code&gt;authenticate_user!&lt;/code&gt;関数を作成し、アクション前に呼びだすようにします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/controllers/page_controller.ex
defmodule ChatPhoenix.PageController do
  use ChatPhoenix.Web, :controller

  # アクションの前に実行される
  plug :authenticate_user!

  @doc &amp;#34;&amp;#34;&amp;#34;
  チャット画面を表示
  &amp;#34;&amp;#34;&amp;#34;
  def index(conn, _params) do
    render conn, &amp;#34;index.html&amp;#34;
  end

  # ログインしていない場合は、ログインページにリダイレクトさせる
  defp authenticate_user!(conn, _params) do
    unless logged_in?(conn) do
      conn
        |&amp;gt; put_flash(:info, &amp;#34;チャット機能を行うにはログインが必要です&amp;#34;)
        |&amp;gt; redirect(to: session_path(conn, :new))
    end
    conn  # plug は connを返す必要がある
  end
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
PageContorollerで&lt;code&gt;current_user&lt;/code&gt;と&lt;code&gt;logged_in?&lt;/code&gt;関数を使えるようにするために、&lt;code&gt;web/web.ex&lt;/code&gt;のcontrollerの箇所にimportを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/web.ex
def controller do
  quote do
    ...

    import ChatPhoenix.Router.Helpers
    # Sessionモジュールのcurrent_userとlogged_in?をWebのcontrollerに追加
    import ChatPhoenix.Session, only: [current_user: 1, logged_in?: 1]
  end
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ログインしていない状態で&lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot;&gt;チャット画面(http://localhost:4000)&lt;/a&gt;にアクセスすると次のようにログイン画面にリダイレクトされるようになります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151016/20151016023042.png&quot; alt=&quot;f:id:nipe880324:20151016023042p:plain:w420&quot; title=&quot;f:id:nipe880324:20151016023042p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;ソケットとチャネルの認証&lt;/h4&gt;画面としては、ログインしていない場合チャット画面を開けないようにしました。&lt;br /&gt;
しかし、まだJSでソケットにつなぎ、チャネルに入ることができます。&lt;br /&gt;
そのため、ソケットとチャネルもログインしていないと繋げないようにします。&lt;/p&gt;&lt;p&gt;まずは、&lt;code&gt;Phoenix.Token&lt;/code&gt;モジュールを利用し、トークンを作成し、チャット画面に埋め込みます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/router.ex

pipeline :browser do
  ...
  // ブラウザの場合、ユーザーのトークンを設定
  plug :put_user_token
end

...

// ログインしている場合、user_tokenキーにユーザーのトークンを設定します
defp put_user_token(conn, _) do
  if logged_in?(conn) do
    token = Phoenix.Token.sign(conn, &amp;#34;user&amp;#34;, current_user(conn).id)
    assign(conn, :user_token, token)
  else
    conn
  end
end&lt;/pre&gt;&lt;p&gt;Routerモジュールで&lt;code&gt;logged_in?&lt;/code&gt;と&lt;code&gt;current_user&lt;/code&gt;関数を利用できるようにするために、&lt;code&gt;web/web.ex&lt;/code&gt;のrouterにimoprtを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/web.ex
def router do
  quote do
    use Phoenix.Router

    # Sessionモジュールのcurrent_userとlogged_in?をWebのviewに追加
    import ChatPhoenix.Session, only: [current_user: 1, logged_in?: 1]
  end
end&lt;/pre&gt;&lt;p&gt;そして、レイアウトの箇所で&lt;code&gt;userToken&lt;/code&gt;にトークン値を設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- web/templates/layout/app.html.eex --&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- /container --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.userToken = &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;lt;%= assigns[:user_token] %&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;//code.jquery.com/jquery-2.1.4.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;lt;%= static_path(@conn, &amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;/js/app.js&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;) %&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
UserSocketの&lt;code&gt;connect&lt;/code&gt;関数を実装し、チャネルへの接続可否を制御します。&lt;br /&gt;
&lt;code&gt;Phoenix.Token.verify&lt;/code&gt;でトークン値を検証し、成功した場合は:ok(ソケットに接続)を返し、:&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/error&quot;&gt;error&lt;/a&gt;(ソケットに接続拒否)を返します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/channels/user_socket.ex

def connect(%{&amp;#34;token&amp;#34; =&amp;gt; token}, socket) do
  # Max age of 2 weeks (1209600 seconds)
  case Phoenix.Token.verify(socket, &amp;#34;user&amp;#34;, token, max_age: 1209600) do
    {:ok, user_id} -&amp;gt;
      {:ok, assign(socket, :user_id, user_id)}
    {:error, _} -&amp;gt;
      :error
  end
end&lt;/pre&gt;&lt;p&gt;RoomChannelの&lt;code&gt;join&lt;/code&gt;関数でソケット接続の接続可否を制御します。&lt;br /&gt;
userがある場合は :ok(接続許可)、userがない場合は :&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/error&quot;&gt;error&lt;/a&gt;(接続拒否) を返します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/channels/room_channel.ex

defmodule ChatPhoenix.RoomChannel do
  use Phoenix.Channel
  alias ChatPhoenix.Repo
  alias ChatPhoenix.User

  # &amp;#34;rooms:lobby&amp;#34;トピックのjoin関数
  def join(&amp;#34;rooms:lobby&amp;#34;, message, socket) do
    user = Repo.get(User, socket.assigns[:user_id])
    if user do
      {:ok, %{email: user.email}, socket}
    else
      {:error, %{reason: &amp;#34;unauthorized&amp;#34;}}
    end
  end

end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
サーバー側の認証処理を実装したので、JS側の処理を追加します。&lt;br /&gt;
&lt;code&gt;my_socket.js&lt;/code&gt;のソケット接続時に画面から受け取ったトークンを送るようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// web/static/js/my_socket.js&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;class&lt;/span&gt; MySocket &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;// ソケットに接続&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// トークンを受け取り、トークンがない場合はアラートを表示&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// new Socketで接続するときにトークンをサーバー側に送る&lt;/span&gt;
  connectSocket(socket_path, token) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!token) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ソケットにつなぐにはトークンが必要です&amp;quot;&lt;/span&gt;)
      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;// &amp;quot;lib/chat_phoenix/endpoint.ex&amp;quot;　に定義してあるソケットパス(&amp;quot;/socket&amp;quot;)で&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// ソケットに接続すると、UserSocketに接続されます&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.socket = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Socket(socket_path, &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; params: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; token: token &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.socket.connect()
    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.socket.onClose( e =&amp;gt; console.log(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Closed connection&amp;quot;&lt;/span&gt;) )
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;// チャネルに接続&lt;/span&gt;
  connectChannel(chanel_name) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.channel = &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.socket.channel(chanel_name, &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt;)
    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.channel.join()
      .receive(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;, resp =&amp;gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        console.log(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Joined successfully&amp;quot;&lt;/span&gt;, resp)
        &lt;span class=&quot;synComment&quot;&gt;// Username入力フィールドにユーザのemailを自動的にセットするようにする&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.$username.val(resp.email)
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;)
      .receive(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;, resp =&amp;gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        console.log(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Unable to join&amp;quot;&lt;/span&gt;, resp)
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;)
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;


$(
  () =&amp;gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// userTokenがある場合のみソケットにつなぐ&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// 本来は、app.html.eexでこのJSを読み込まなくするほうがよさそう&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// そのためにはJSを分割し、PageControllerのindexアクションで読みこむように&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// render_existingを行う必要がある&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;.userToken) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;let&lt;/span&gt; my_socket = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; MySocket()
      &lt;span class=&quot;synComment&quot;&gt;// app.html.eexでセットしたトークンを使ってソケットに接続&lt;/span&gt;
      my_socket.connectSocket(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/socket&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;.userToken)
      my_socket.connectChannel(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;rooms:lobby&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
)

&lt;span class=&quot;synStatement&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;default&lt;/span&gt; MySocket
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
画面をリロードすると、ログインしているユーザのemailが入力フィールドに設定された状態で表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151016/20151016023423.png&quot; alt=&quot;f:id:nipe880324:20151016023423p:plain:w420&quot; title=&quot;f:id:nipe880324:20151016023423p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;phoenix-tutorial-3-persist&quot;&gt;4. チャットメッセージの永続化&lt;/h3&gt;チャットで送信したメッセージ文を保持するMessageモデルを作成し、メッセージを永続化できるようにします。&lt;br /&gt;
こうすることで画面をリロードしても、投稿したメッセージが表示された状態になります。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;Messageモデルを作成&lt;/h4&gt;&lt;code&gt;mix phoenix.gen.model&lt;/code&gt;コマンドでMessageモデルを作成します。&lt;br /&gt;
UserモデルとMessageモデルは1対n関係を作成します。そのとき、&lt;code&gt;user_id:references:users&lt;/code&gt;と記載します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ mix phoenix.gen.model Message messages content:string user_id:references:users
* creating priv/repo/migrations/20151015152654_create_message.exs
* creating web/models/message.ex
* creating test/models/message_test.exs&lt;/pre&gt;&lt;p&gt;&lt;code&gt;mix ecto.migrate&lt;/code&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;を実行し、&lt;code&gt;messages&lt;/code&gt;テーブルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ mix ecto.migrate
00:30:08.602 [info]  == Running ChatPhoenix.Repo.Migrations.CreateMessage.change/0 forward
00:30:08.602 [info]  create table messages
00:30:08.637 [info]  create index messages_user_id_index
00:30:08.644 [info]  == Migrated in 0.3s&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;UserモデルとMessageモデルのアソシエーション&lt;/h4&gt;UserモデルとMessageモデルは、1対N関連です。&lt;br /&gt;
Userモデルの&lt;code&gt;schema&lt;/code&gt;で&lt;code&gt;has_many&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/models/user.ex
defmodule ChatPhoenix.User do

  schema &amp;#34;users&amp;#34; do
    field :email, :string
    field :crypted_password, :string
    # passwordフィールドを追加。virtual: trueとすることでデータベースには保存されない
    field :password, :string, virtual: true

    has_many :messages, ChatPhoenix.Message
    timestamps
  end
  ...&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Messageモデルの&lt;code&gt;schema&lt;/code&gt;には&lt;code&gt;belongs_to&lt;/code&gt;があります。&lt;br /&gt;
これは、&lt;code&gt;mix phoenix.gen.model&lt;/code&gt;コマンドのときに&lt;code&gt;references&lt;/code&gt;を指定していたためです。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/models/message.ex
defmodule ChatPhoenix.Message do
  use ChatPhoenix.Web, :model

  schema &amp;#34;messages&amp;#34; do
    field :content, :string
    belongs_to :user, ChatPhoenix.User

    timestamps
  end
  ...&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
モデルに1対Nのアソシエーションが定義できたので、軽くアソシエーションの使い方を説明します。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%E9%A5%AF%A5%C6%A5%A3%A5%D6&quot;&gt;インタラクティブ&lt;/a&gt;コンソールを開きます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ iex -S mix phoenix.server

# aliasでChatPhoneixを省略可能にしておきます
&amp;gt; alias ChatPhoenix.Repo
&amp;gt; alias ChatPhoenix.User
&amp;gt; alias ChatPhoenix.Message

# 登録されているユーザを取得(自分の登録したユーザのemailを入力してください)
&amp;gt; user = Repo.get_by(User, email: &amp;#34;test@example.com&amp;#34;)
# 関連するメッセージを作成
&amp;gt; message = Ecto.Model.build(user, :messages, content: &amp;#34;How are you?&amp;#34;)
# メッセージをDBにインサートする
&amp;gt; Repo.insert!(message)

# ユーザと関連するメッセージを取得
&amp;gt; user = Repo.get_by(User, email: &amp;#34;test@example.com&amp;#34;) |&amp;gt; Repo.preload(:messages)
&amp;gt; user.messages #=&amp;gt; メッセージが表示される&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
その他、モデルの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRUD&quot;&gt;CRUD&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を確認したい場合、&lt;a href=&quot;http://qiita.com/yoavlt/items/2faa2107eedd8c82ff8f&quot; target=&quot;_blank&quot;&gt;Elixir Phoenixのデータベース操作モジュールEcto入門2&lt;/a&gt;を参考にしてください。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;Message &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;コントローラを作成&lt;/h4&gt;Messageモデルを作成したので、Messageの一覧を取得する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;コントローラを作成します。&lt;br /&gt;
まず、ルートを作成しておきます。&lt;br /&gt;
&lt;code&gt;scope &quot;/api&quot;内にルートを追加します。また、上の方に、&lt;code&gt;pipeline :api&lt;/code&gt;が記載されており、jsonと記載されています。これは、このAPIはJSON形式でやりとりすることを意味しています。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/router.ex
pipeline :api do
  plug :accepts, [&amp;#34;json&amp;#34;]
end

# Other scopes may use custom stacks.
scope &amp;#34;/api&amp;#34;, ChatPhoenix do
  pipe_through :api

  # メッセージ一覧取得(:index)
  get  &amp;#34;/messages&amp;#34;, MessageController, :index
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
MessageControllerを作成します。いまはアクションは未定義でおいておきます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/controllers/message_controller.ex
defmodule ChatPhoenix.MessageController do
  use ChatPhoenix.Web, :controller
  alias ChatPhoenix.Repo
  alias ChatPhoenix.Message

  @doc &amp;#34;&amp;#34;&amp;#34;
  メッセージ一覧取得API
  &amp;#34;&amp;#34;&amp;#34;
  def index(conn, _params) do
    # TODO: 実装する
  end

  # TODO: authentication（本記事で実施しない）
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
空のMessageViewも作成しておきます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/views/message_view.ex
defmodule ChatPhoenix.MessageView do
  use ChatPhoenix.Web, :view
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Message 一覧取得API&lt;/h4&gt;&lt;code&gt;Repo.all(Message)&lt;/code&gt;関数ですべてのメッセージをDBから取得して、&lt;code&gt;render&lt;/code&gt;関数でViewに渡します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/controllers/message_controller.ex
@doc &amp;#34;&amp;#34;&amp;#34;
メッセージ一覧取得API
&amp;#34;&amp;#34;&amp;#34;
def index(conn, _params) do
  # すべてのメッセージを取得。userも一緒にロードしておく
  messages = Repo.all(Message) |&amp;gt; Repo.preload(:user)
  render conn, :index, messages: messages
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
MessageViewでは、JSONに変換します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/views/message_view.ex
defmodule ChatPhoenix.MessageView do
  use ChatPhoenix.Web, :view

  def render(&amp;#34;index.json&amp;#34;, %{messages: messages}) do
    # messagesの各messageを下記のmessage.jsonで表示する
    %{messages: render_many(messages, ChatPhoenix.MessageView, &amp;#34;message.json&amp;#34;)}
  end

  def render(&amp;#34;message.json&amp;#34;, %{message: message}) do
    # messageのid, content, messageのuserのemail をJSON形式で表示する
    %{id: message.id, body: message.content, user: message.user.email}
  end
end&lt;/pre&gt;&lt;p&gt;今のままだとログインしていなくてもメッセージ一覧取得APIにアクセスできてしまいますが、認証機能はここでは割愛します。&lt;br /&gt;
Plugを作成し、router.exのpipelineに追加する流れです。&lt;br /&gt;
参考: &lt;a href=&quot;http://www.jonathanbirkholz.com/authenticating-users-using-a-token-with-phoenix/&quot; target=&quot;_blank&quot;&gt;Authenticating Users using a Token with Phoenix&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;JSでメッセージ一覧を取得/表示&lt;/h4&gt;若干雑ですが、MySocketクラスにメッセージの一覧を取得する&lt;code&gt;all()&lt;/code&gt;メソッドを定義し、呼び出します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;// web/static/js/my_socket.js

class mySocket {
  // メッセージを取得
  all() {
    $.ajax({
      url: &amp;#34;/api/messages&amp;#34;
    }).done((data) =&amp;gt; {
      console.log(data)
      // 取得したデータをレンダーする
      data.messages.forEach((message) =&amp;gt; this._renderMessage(message))
    }).fail((data) =&amp;gt; {
      alert(&amp;#34;エラーが発生しました&amp;#34;)
      console.log(data)
    })
  }
}

$(
  () =&amp;gt; {
    if (window.userToken) {
      ...
      // メッセージを取得
      my_socket.all()
    }
  }
)&lt;/pre&gt;&lt;p&gt;これで画面をリロードすると、次のように画面上部にDBのメッセージが表示されます&lt;br /&gt;
（DBのメッセージをJSで取得して、JSがappendしている）&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151016/20151016023622.png&quot; alt=&quot;f:id:nipe880324:20151016023622p:plain:w420&quot; title=&quot;f:id:nipe880324:20151016023622p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;Message 作成API&lt;/h4&gt;メッセージの作成は、RoomChannelの&lt;code&gt;new:message&lt;/code&gt;イベント側でメッセージを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/channel/room_channel.ex

# イベント名&amp;#34;new:message&amp;#34;のIncoming eventsを処理する
def handle_in(&amp;#34;new:message&amp;#34;, message, socket) do
# メッセージを作成
user = Repo.get(User, socket.assigns[:user_id]) |&amp;gt; Repo.preload(:messages)
message = Ecto.Model.build(user, :messages, content: message[&amp;#34;body&amp;#34;])
Repo.insert!(message)

# broadcastする値も、作成した値を使用するようにする
broadcast! socket, &amp;#34;new:message&amp;#34;, %{user: user.email, body: message.content}
{:noreply, socket}
end&lt;/pre&gt;&lt;p&gt;これで画面からメッセージを投稿するとDBにメッセージが書き込まれ、画面をリロードしてもメッセージが表示されるようになります。もちろん、WebSocketにより他の人の投稿がリアルタイムにメッセージが表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151016/20151016023811.png&quot; alt=&quot;f:id:nipe880324:20151016023811p:plain:w420&quot; title=&quot;f:id:nipe880324:20151016023811p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。これで終わりです。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;参考文献&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/FL4TLiN3/items/41ca80cdbfca1956ed78&quot;&gt;Elixir - Phoenix&amp;#x3067;JSON&amp;#x3092;&amp;#x8FD4;&amp;#x3059;Web API&amp;#x3092;&amp;#x4F5C;&amp;#x308B; - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hexdocs.pm/ecto/Ecto.html&quot;&gt;Ecto &amp;ndash; Ecto v1.0.4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="phoenix" label="phoenix" />
        
        <category term="elixer" label="elixer" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>Phoenix入門2 - Phonixで認証機能</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20151013/1444662887"/>
        <id>hatenablog://entry/6653458415124299016</id>
        <published>2015-10-13T00:14:47+09:00</published>
        <updated>2015-10-16T03:12:52+09:00</updated>
        <summary type="html">Phoenixでユーザ登録、ログイン、ログアウトといった認証機能を実装します。
Userモデル作成、マイグレーション、外部ライブラリの使用、ヘルパー関数の定義と利用などWebアプリケーションを作るための基本的な箇所を説明します。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151011/20151011193641.png&quot; alt=&quot;f:id:nipe880324:20151011193641p:plain:w420&quot; title=&quot;f:id:nipe880324:20151011193641p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;前回の記事は「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151011/1444560106&quot;&gt;Phonix環境のセットアップから、静的ページを作成し、表示&lt;/a&gt;」させました。&lt;br /&gt;
今回の記事では、「&lt;b&gt;Phoneixで認証機能を実装&lt;/b&gt;」します。&lt;br /&gt;
それを通して、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;、モデル、外部ライブラリ利用などのWebアプリケーションを作るための基本的な箇所を説明します。&lt;br /&gt;
次回は「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151016/1444930756&quot;&gt;チャット機能を実装&lt;/a&gt;」します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;サンプル&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tranquil-mesa-7338.herokuapp.com/login&quot; target=&quot;_blank&quot;&gt;ChatPhoenix - Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nipe0324/chat_phoenix&quot; target=&quot;_blank&quot;&gt;ChatPhoenix - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#phoenix-tutorial-2-signup&quot;&gt;ユーザ登録機能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#phoenix-tutorial-2-login-logout&quot;&gt;ログイン・ログアウト機能&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Erlang&quot;&gt;Erlang&lt;/a&gt; 7.1&lt;/li&gt;
&lt;li&gt;Elixir 1.1.1&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt; 10.0.3&lt;/li&gt;
&lt;li&gt;Hex 0.9.0&lt;/li&gt;
&lt;li&gt;node.js 0.12.7&lt;/li&gt;
&lt;li&gt;npm 2.14.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PostgreSQL&quot;&gt;PostgreSQL&lt;/a&gt; 9.4.4&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;phoenix-tutorial-2-signup&quot;&gt;1. ユーザ登録機能&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;h4&gt;ユーザモデルの作成&lt;/h4&gt;まず、最初にユーザモデルを作成します。&lt;br /&gt;
メールとパスワードでログインをできるようにし、パスワードは平文ではなくハッシュ化してデータベースに保存します。&lt;br /&gt;
モデルや&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイルを作成するコマンドは&lt;code&gt;mix phoenix.gen.model&lt;/code&gt;です。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ mix phoenix.gen.model User users email:string crypted_password:string
* creating priv/repo/migrations/20151010202152_create_user.exs
* creating web/models/user.ex
* creating test/models/user_test.exs&lt;/pre&gt;&lt;p&gt;&lt;code&gt;mix phoenix.gen.model&lt;/code&gt;の引数で、&lt;br /&gt;
&lt;code&gt;User&lt;/code&gt;はモデル名、&lt;code&gt;users&lt;/code&gt;はテーブル名、&lt;code&gt;email&lt;/code&gt;や&lt;code&gt;crypted_password&lt;/code&gt;はフィールド名、&lt;code&gt;string&lt;/code&gt;はデータ型です。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;作成された&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイルにnull制約(&lt;code&gt;null: false&lt;/code&gt;)とunique制約(&lt;code&gt;unique_index&lt;/code&gt;)をつけます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# priv/repo/migrations/YYYYMMDDhhmmdd_create_user.exs
defmodule ChatPhoenix.Repo.Migrations.CreateUser do
  use Ecto.Migration

  def change do
    # usersテーブルを作成
    create table(:users) do
      # emailとcrypted_passwordフィールドをstring型でnull制約で作成
      add :email, :string, null: false
      add :crypted_password, :string, null: false

      # created_atとupdated_atフィールドを作成
      timestamps
    end

    # emailフィールドにunique制約をつける
    create unique_index(:users, [:email])
  end
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;を実行し、usersテーブルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ mix ecto.migrate
Compiled web/models/user.ex
Generated chat_phoenix app
17:07:58.973 [info]  == Running ChatPhoenix.Repo.Migrations.CreateUser.change/0 forward
17:07:58.973 [info]  create table users
17:07:59.001 [info]  create index users_email_index
17:07:59.005 [info]  == Migrated in 0.2s||&amp;lt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ルートの追加&lt;/h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC&quot;&gt;ルーター&lt;/a&gt;にユーザーの登録画面と登録処理のルートを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/router.ex

scope &amp;#34;/&amp;#34;, ChatPhoenix do
  pipe_through :browser # Use the default browser stack

  ...
  # 登録画面表示(new)と登録処理(create)
  get  &amp;#34;/register&amp;#34;, RegistrationController, :new
  post &amp;#34;/register&amp;#34;, RegistrationController, :create
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
現在設定されているルートを確認すると次のようになっていると思います。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ mix phoenix.routes
Generated chat_phoenix app
        page_path  GET   /          ChatPhoenix.PageController :index
       hello_path  GET   /hello     ChatPhoenix.HelloController :index
registration_path  GET   /register  ChatPhoenix.RegistrationController :new
registration_path  POST  /register  ChatPhoenix.RegistrationController :create&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ユーザ登録画面へ遷移できるようにするために、ヘッダーにユーザ登録画面へのリンクを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- web/templates/layout/app.html.eex --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;nav nav-pills pull-right&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- registration_pathはヘルパーメソッドで、&amp;quot;GET /register&amp;quot;に変換される --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ユーザ登録&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, to: registration_path(@conn, :new) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;logo&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ユーザ登録コントローラーの追加&lt;/h4&gt;ルートに追記したRegistrationControllerの&lt;code&gt;new&lt;/code&gt;アクションの&quot;ユーザ登録画面の表示処理&quot;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/controllers/registration_controller.ex
defmodule ChatPhoenix.RegistrationController do
  use ChatPhoenix.Web, :controller
  alias ChatPhoenix.User

  @doc &amp;#34;&amp;#34;&amp;#34;
  ユーザ登録画面の表示
  &amp;#34;&amp;#34;&amp;#34;
  def new(conn, _params) do
    # chnageset関数は、newメソッドのようなもので、Userのデータを返す
    changeset = User.changeset(%User{})
    # renderの第三引数に値を渡すことで、ビューやテンプレートで値を使用できる
    render conn, &amp;#34;new.html&amp;#34;, changeset: changeset
  end
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ユーザ登録ビューの追加&lt;/h4&gt;空のビューモジュールを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/views/registration_view.ex
defmodule ChatPhoenix.RegistrationView do
  use ChatPhoenix.Web, :view
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ユーザ登録画面のテンプレート作成&lt;/h4&gt;ユーザ登録画面を作成します。&lt;br /&gt;
&lt;code&gt;@changeset&lt;/code&gt;となっている箇所は、コントローラーの&lt;code&gt;render&lt;/code&gt;関数で渡した値です。&lt;br /&gt;
詳しくは説明しませんが、フォームやinput要素はこんなふうに記載するんだなと思っていただければと思います。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;&amp;lt;!-- web/templates/registration/new.html.eex --&amp;gt;
&amp;lt;h1&amp;gt;ユーザ登録&amp;lt;/h1&amp;gt;

&amp;lt;%= form_for @changeset, registration_path(@conn, :create), fn form -&amp;gt; %&amp;gt;
  &amp;lt;%= if form.errors != [] do %&amp;gt;
    &amp;lt;div class=&amp;#34;alert alert-danget&amp;#34;&amp;gt;
      &amp;lt;p&amp;gt;エラーが発生しました。&amp;lt;/p&amp;gt;
      &amp;lt;ul&amp;gt;
        &amp;lt;%= for {attr, message} &amp;lt;- form.errors do %&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;%= humanize(attr) %&amp;gt; &amp;lt;%= message %&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;% end %&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;

  &amp;lt;div class=&amp;#34;form-group&amp;#34;&amp;gt;
    &amp;lt;label&amp;gt;メールアドレス&amp;lt;/label&amp;gt;
    &amp;lt;%= email_input form, :email, class: &amp;#34;form-control&amp;#34; %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;#34;form-group&amp;#34;&amp;gt;
    &amp;lt;label&amp;gt;パスワード&amp;lt;/label&amp;gt;
    &amp;lt;%= password_input form, :password, class: &amp;#34;form-control&amp;#34; %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;#34;form-group&amp;#34;&amp;gt;
    &amp;lt;%= submit &amp;#34;ユーザ登録&amp;#34;, class: &amp;#34;btn btn-primary&amp;#34; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ユーザ登録画面の確認&lt;/h4&gt;&lt;a href=&quot;http://localhost:4000/register&quot; target=&quot;_blank&quot;&gt;http://localhost:4000/register&lt;/a&gt;にアクセスすると、次のようにユーザ登録画面が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151012/20151012042356.png&quot; alt=&quot;f:id:nipe880324:20151012042356p:plain:w420&quot; title=&quot;f:id:nipe880324:20151012042356p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;ユーザ登録処理の追加&lt;/h4&gt;ユーザ登録画面が表示されるようになったので次は、ユーザ登録処理を追加します。&lt;br /&gt;
RegistrationControllerにユーザ登録処理の&lt;code&gt;create&lt;/code&gt;アクションを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/controllers/registration_controller.ex
defmodule ChatPhoenix.RegistrationController do
  ...

  @doc &amp;#34;&amp;#34;&amp;#34;
  ユーザ登録処理
  &amp;#34;&amp;#34;&amp;#34;
  def create(conn, %{&amp;#34;user&amp;#34; =&amp;gt; user_params}) do
    # フォーム情報user_paramsの値でuserデータを作成
    changeset = User.changeset(%User{}, user_params)

    # ユーザ登録
    case User.create(changeset, ChatPhoenix.Repo) do
      {:ok, user} -&amp;gt;
        # バリデーションに成功した場合、userレコードを作成し、ログインし、&amp;#34;/&amp;#34;にリダイレクト
        conn
        |&amp;gt; put_flash(:info, &amp;#34;ようこそ&amp;#34; &amp;lt;&amp;gt; changeset.params[&amp;#34;email&amp;#34;])
        |&amp;gt; redirect(to: &amp;#34;/&amp;#34;)
      {:error, changeset} -&amp;gt;
        # バリデーションに失敗した場合、&amp;#34;new.html&amp;#34;を表示
        conn
        |&amp;gt; put_flash(:info, &amp;#34;アカウントを作成できませんでした&amp;#34;)
        |&amp;gt; render(&amp;#34;new.html&amp;#34;, changeset: changeset)
    end
  end
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Userモデルにvirtual属性、バリデーションの定義&lt;/h4&gt;データベースに保存されないpasswordフィールドというvirtualフィールドを追加します。&lt;br /&gt;
また、必須のフィールド(@required_fields)として、emailとpasswordに変更します。&lt;br /&gt;
最後に、ユニーク制約やフォーマットなどのバリデーションを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/models/user.ex
defmodule ChatPhoenix.User do
  use ChatPhoenix.Web, :model

  schema &amp;#34;users&amp;#34; do
    field :email, :string
    field :crypted_password, :string
    # passwordフィールドを追加。virtual: trueとすることでデータベースには保存されない
    field :password, :string, virtual: true

    timestamps
  end

  # crypted_passwordの代わりにpasswordに変更
  # @required_fields ~w(email crypted_password)
  @required_fields ~w(email password)
  @optional_fields ~w()

  @doc &amp;#34;&amp;#34;&amp;#34;
  &amp;#34;model&amp;#34;と&amp;#34;params&amp;#34;に基づいたchangesetを作成する
  &amp;#34;params&amp;#34;がない場合は、invalidなchangesetを返します。

  castはparamsの値でモデルの値を設定
  update_changeは、&amp;#34;email&amp;#34;の値をフィールドの値を小文字に変更
  unique_constraintは、&amp;#34;email&amp;#34;にユニーク制約のバリデーション
  validate_formatは、&amp;#34;email&amp;#34;に&amp;#34;@&amp;#34;が含まれているかバリデーション
  validate_lengthは、&amp;#34;password&amp;#34;が5文字以上であるかバリデーション
  &amp;#34;&amp;#34;&amp;#34;
  def changeset(model, params \\ :empty) do
    model
    |&amp;gt; cast(params, @required_fields, @optional_fields)
    |&amp;gt; update_change(:email, &amp;amp;String.downcase/1)
    |&amp;gt; unique_constraint(:email)
    |&amp;gt; validate_format(:email, ~r/@/)
    |&amp;gt; validate_length(:password, min: 5)
  end
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Userモデルにcreate&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の追加&lt;/h4&gt;RegistrationControllerで追加した、&lt;code&gt;create&lt;/code&gt;関数を作成します。&lt;br /&gt;
&lt;code&gt;create&lt;/code&gt;関数はusersテーブルにユーザレコードを1件作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/models/user.ex
defmodule ChatPhoenix.User do
  ...

  @doc &amp;#34;&amp;#34;&amp;#34;
  userレコードを1件作成する

  put_changeは、crypated_passwordに値を設定
  insert()は、テーブルにレコードを作成(SQLのinsert文が走る)
  ectoの関数であり、より詳細を知りたい場合は、http://www.phoenixframework.org/docs/ecto-models を参照してください
  &amp;#34;&amp;#34;&amp;#34;
  def create(changeset, repo) do
    changeset
    |&amp;gt; put_change(:crypted_password, hashed_password(changeset.params[&amp;#34;password&amp;#34;]))
    |&amp;gt; repo.insert()
  end

  @doc &amp;#34;&amp;#34;&amp;#34;
  パスワードをハッシュ値にする
  Comeoninという値をハッシュ化するライブラリを使用しています
  defpはプライベートメソッド
  &amp;#34;&amp;#34;&amp;#34;
  defp hashed_password(password) do
    Comeonin.Bcrypt.hashpwsalt(password)
  end
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Comeoninのインストール&lt;/h4&gt;&lt;a href=&quot;https://github.com/elixircnx/comeonin&quot; target=&quot;_blank&quot;&gt;comeonin&lt;/a&gt;パスワードをハッシュ化するライブラリ)をインストールします。&lt;br /&gt;
依存ライブラリを記載するファイルの&lt;code&gt;mix.exs&lt;/code&gt;に&lt;code&gt;comeonin&lt;/code&gt;を追加します。&lt;br /&gt;
ライブラリ名とバージョンをTuple(長さがあらかじめ決まっている配列のようなもの)で記載します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# mix.exs

# Specifies your project dependencies.
#
# Type `mix help deps` for examples and options.
defp deps do
  [{:phoenix, &amp;#34;~&amp;gt; 1.0.3&amp;#34;},
   {:phoenix_ecto, &amp;#34;~&amp;gt; 1.1&amp;#34;},
   {:postgrex, &amp;#34;&amp;gt;= 0.0.0&amp;#34;},
   {:phoenix_html, &amp;#34;~&amp;gt; 2.1&amp;#34;},
   {:phoenix_live_reload, &amp;#34;~&amp;gt; 1.0&amp;#34;, only: :dev},
   {:comeonin, &amp;#34;~&amp;gt; 1.2&amp;#34;},
   {:cowboy, &amp;#34;~&amp;gt; 1.0&amp;#34;}]
end&lt;/pre&gt;&lt;p&gt;そして、&lt;code&gt;mix.exs&lt;/code&gt;のアプリケーションの依存関係のリストに&lt;code&gt;:comeonin&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# mix.exs

# Configuration for the OTP application.
#
# Type `mix help compile.app` for more information.
def application do
  [mod: {ChatPhoenix, []},
   applications: [:phoenix, :phoenix_html, :cowboy, :logger,
                  :phoenix_ecto, :postgrex, :comeonin]]
end&lt;/pre&gt;&lt;p&gt;そして、comeoninをインストールし、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;mix do deps.get, compile&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ユーザ登録処理の確認&lt;/h4&gt;&lt;a href=&quot;http://localhost:4000/register&quot; target=&quot;_blank&quot;&gt;http://localhost:4000/register&lt;/a&gt;にアクセスし、「ユーザ登録」ボタンを押すと、&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151012/20151012042428.png&quot; alt=&quot;f:id:nipe880324:20151012042428p:plain:w420&quot; title=&quot;f:id:nipe880324:20151012042428p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;ユーザが登録され、ルートページ(&quot;/&quot;)にリダイレクトされます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151012/20151012042444.png&quot; alt=&quot;f:id:nipe880324:20151012042444p:plain&quot; title=&quot;f:id:nipe880324:20151012042444p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;phoenix-tutorial-2-login-logout&quot;&gt;3. ログイン・ログアウト機能&lt;/h3&gt;ユーザを登録できるようになりましたので、次はログインとログアウト機能を追加します。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;ログイン/ログアウトのルートを追加&lt;/h4&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/router.ex
scope &amp;#34;/&amp;#34;, ChatPhoenix do
  ...

  # ログイン画面表示(:new)、ログイン処理(create)、ログアウト処理(delete)
  get    &amp;#34;/login&amp;#34;,  SessionController, :new
  post   &amp;#34;/login&amp;#34;,  SessionController, :create
  delete &amp;#34;/logout&amp;#34;, SessionController, :delete
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;コントローラーを追加&lt;/h4&gt;SessionControllerを追加し、&lt;code&gt;new&lt;/code&gt;アクションを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/controllers/session_controller.ex
defmodule ChatPhoenix.SessionController do
  use ChatPhoenix.Web, :controller
  alias ChatPhoenix.User

  @doc &amp;#34;&amp;#34;&amp;#34;
  ログイン画面の表示
  &amp;#34;&amp;#34;&amp;#34;
  def new(conn, _params) do
    render conn, &amp;#34;new.html&amp;#34;
  end
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ビューの追加&lt;/h4&gt;空のSessionViweを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/views/session_view.ex
defmodule ChatPhoenix.RegistrationView do
  use ChatPhoenix.Web, :view
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ログイン画面のテンプレートの追加&lt;/h4&gt;ログイン画面を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# web/templates/session/new.html.eex
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;ログイン&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @conn, session_path(@conn, :create), [&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :session], fn form -&amp;gt;&lt;/span&gt; %&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;メールアドレス&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; email_input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; form, :email, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-control&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;パスワード&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; password_input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; form, :password, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-control&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; submit&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ログイン&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;btn btn-primary&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ログイン画面の確認&lt;/h4&gt;&lt;a href=&quot;http://localhost:4000/login&quot; target=&quot;_blank&quot;&gt;http://localhost:4000/login&lt;/a&gt;を開くと、ログイン画面が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151012/20151012042535.png&quot; alt=&quot;f:id:nipe880324:20151012042535p:plain:w420&quot; title=&quot;f:id:nipe880324:20151012042535p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;ログイン処理アクションの追加&lt;/h4&gt;ログイン画面を表示できましたので、ここからは、ログイン処理を追加します。&lt;br /&gt;
コントローラーにログイン処理を行う&lt;code&gt;create&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/controllers/session_controller.ex
defmodule ChatPhoenix.SessionController do
  ...

  @doc &amp;#34;&amp;#34;&amp;#34;
  ログイン処理
  &amp;#34;&amp;#34;&amp;#34;
  def create(conn, %{&amp;#34;session&amp;#34; =&amp;gt; session_params}) do
    # Sessionモジュールのlogin関数でログイン可否を判定する
    case ChatPhoenix.Session.login(session_params, ChatPhoenix.Repo) do
      # ログイン成功の場合、セッションにuser.idを設定し、ホーム(&amp;#34;/&amp;#34;)にリダイレクトする
      {:ok, user} -&amp;gt;
        conn
        |&amp;gt; put_session(:current_user, user.id)
        |&amp;gt; put_flash(:info, &amp;#34;ログインしました&amp;#34;)
        |&amp;gt; redirect(to: &amp;#34;/&amp;#34;)
      # errorの場合、ログイン画面を再表示する
      :error -&amp;gt;
        conn
        |&amp;gt; put_flash(:info, &amp;#34;メールアドレスかパスワードが間違っています&amp;#34;)
        |&amp;gt; render(&amp;#34;new.html&amp;#34;)
    end
  end
end&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;セッションモジュールを追加&lt;/h4&gt;&lt;code&gt;create&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;内で読んでいる&lt;code&gt;login&lt;/code&gt;関数を実装します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/models/session.ex
defmodule ChatPhoenix.Session do
  alias ChatPhoenix.User

  @doc &amp;#34;&amp;#34;&amp;#34;
  ログイン処理をする

  get_by関数でUserモデルをemailで取得します
  authenticateが成功すれば、{:ok, user}を返し、失敗すれば:errorを返します
  &amp;#34;&amp;#34;&amp;#34;
  def login(params, repo) do
    user = repo.get_by(User, email: String.downcase(params[&amp;#34;email&amp;#34;]))
    case authenticate(user, params[&amp;#34;password&amp;#34;]) do
      true -&amp;gt; {:ok, user}
      _    -&amp;gt; :error
    end
  end

  @doc &amp;#34;&amp;#34;&amp;#34;
  認証処理をする

  Comeonin.Bcrypt.checkpw関数でpasswordをハッシュ化してデータベースのハッシュ値と比較します
  &amp;#34;&amp;#34;&amp;#34;
  defp authenticate(user, password) do
    case user do
      nil -&amp;gt; false
      _   -&amp;gt; Comeonin.Bcrypt.checkpw(password, user.crypted_password)
    end
  end
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ヘルパー関数を追加&lt;/h4&gt;Sessionモジュールにヘルパー関数を追加します。&lt;br /&gt;
追加するヘルパー関数は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;現在のログインユーザを取得する &lt;code&gt;current_user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;現在ログインをしているか確認する &lt;code&gt;logged_in?&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;です。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/models/session.ex
defmodule ChatPhoenix.Session do
  alias ChatPhoenix.User

  ...

  @doc &amp;#34;&amp;#34;&amp;#34;
  現在のログインユーザを取得するヘルパー関数

  get_session関数で:current_userからidを取得し、idが存在する場合はDBからUser情報を取得します
  &amp;#34;&amp;#34;&amp;#34;
  def current_user(conn) do
    id = Plug.Conn.get_session(conn, :current_user)
    if id, do: ChatPhoenix.Repo.get(User, id)
  end


  @doc &amp;#34;&amp;#34;&amp;#34;
  ログインしているかどうかを返すヘルパー関数
  &amp;#34;&amp;#34;&amp;#34;
  def logged_in?(conn) do
    !!current_user(conn)
  end
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ヘルパー関数をビューやテンプレートで使えるようにします。&lt;br /&gt;
そのためには、&lt;code&gt;web/web.ex&lt;/code&gt;の&lt;code&gt;view&lt;/code&gt;ブロック内でimportをします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/web.ex

def view do
  quote do
    use Phoenix.View, root: &amp;#34;web/templates&amp;#34;

    # Import convenience functions from controllers
    import Phoenix.Controller, only: [get_csrf_token: 0, get_flash: 2, view_module: 1]

    # Use all HTML functionality (forms, tags, etc)
    use Phoenix.HTML

    import ChatPhoenix.Router.Helpers
    # Sessionモジュールのcurrent_userとlogged_in?をWebのviewに追加
    import ChatPhoenix.Session, only: [current_user: 1, logged_in?: 1]
  end
end&lt;/pre&gt;&lt;p&gt;こうすることで、&lt;code&gt;use ChatPhoenix.Web, :view&lt;/code&gt;の箇所で&lt;code&gt;current_user&lt;/code&gt;と&lt;colde&gt;logged_in?&lt;/colde&gt;関数がインポートされるようになるので、ビューやテンプレートでこれらの関数が使えるよになります。&lt;/p&gt;&lt;p&gt;では、実際に&lt;code&gt;logged_in?&lt;/code&gt;関数と&lt;code&gt;current_user&lt;/code&gt;関数をテンプレートで使用します。&lt;br /&gt;
レイアウトファイルのヘッダー部分をログインしているときと、していないときで表示を修正します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;&amp;lt;!-- web/templates/layout/app.html.eex --&amp;gt;
&amp;lt;div class=&amp;#34;header&amp;#34;&amp;gt;
  &amp;lt;ul class=&amp;#34;nav nav-pills pull-right&amp;#34;&amp;gt;
    &amp;lt;%= if logged_in?(@conn) do %&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;%= current_user(@conn).email %&amp;gt;&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;%= link &amp;#34;ログアウト&amp;#34;, to: session_path(@conn, :delete), method: :delete %&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;% else %&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;%= link &amp;#34;ユーザ登録&amp;#34;, to: registration_path(@conn, :new) %&amp;gt;&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;%= link &amp;#34;ログイン&amp;#34;, to: session_path(@conn, :new) %&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;span class=&amp;#34;logo&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ログアウト関数の追加&lt;/h4&gt;SessionControllerにログアウト処理の&lt;code&gt;delete&lt;/code&gt;関数を追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/controllers/session_controller.ex
defmodule ChatPhoenix.SessionController do
  ...

  @doc &amp;#34;&amp;#34;&amp;#34;
  ログアウト処理

  delete_sessionでセッション情報を削除し、ホーム(&amp;#34;/&amp;#34;)にリダイレクトする
  &amp;#34;&amp;#34;&amp;#34;
  def delete(conn, _) do
    conn
    |&amp;gt; delete_session(:current_user)
    |&amp;gt; put_flash(:info, &amp;#34;ログアウトしました&amp;#34;)
    |&amp;gt; redirect(to: &amp;#34;/&amp;#34;)
  end
end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
セッション情報の&lt;code&gt;current_user&lt;/code&gt;があるとログインしているということなので、最後にユーザ登録時にもログインするようにセッションに&lt;code&gt;current_user&lt;/code&gt;を作成するようにします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/controllers/registration_controller.ex
def create(conn, %{&amp;#34;user&amp;#34; =&amp;gt; user_params}) do
  ...
  # ユーザ登録
  case User.create(changeset, ChatPhoenix.Repo) do
    {:ok, user} -&amp;gt;
      # バリデーションに成功した場合、userレコードを作成し、ログインし、&amp;#34;/&amp;#34;にリダイレクト
      conn
      |&amp;gt; put_session(:current_user, user.id)
      |&amp;gt; put_flash(:info, &amp;#34;ようこそ&amp;#34; &amp;lt;&amp;gt; changeset.params[&amp;#34;email&amp;#34;])
      |&amp;gt; redirect(to: &amp;#34;/&amp;#34;)
  ...
end&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;ログイン/ログアウト処理の確認&lt;/h4&gt;ログインやログアウト、ユーザ登録ができることを確認します。&lt;/p&gt;&lt;p&gt;これで簡単ですが&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;で認証機能を実装できました。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.phoenixframework.org/docs&quot;&gt;Overview &amp;middot; Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hexdocs.pm/ecto/Ecto.html&quot;&gt;Ecto &amp;ndash; Ecto v1.0.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nithinbekal.com/posts/phoenix-authentication/&quot;&gt;Adding user authentication to a Phoenix app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/niku/items/729ece76d78057b58271&quot;&gt;Elixir &amp;#x57FA;&amp;#x790E;&amp;#x6587;&amp;#x6CD5;&amp;#x6700;&amp;#x901F;&amp;#x30DE;&amp;#x30B9;&amp;#x30BF;&amp;#x30FC; - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elixircnx/comeonin&quot;&gt;elixircnx/comeonin &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="phoenix" label="phoenix" />
        
        <category term="elixer" label="elixer" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>Phoenix入門1 - Hello Phoenix</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20151011/1444560106"/>
        <id>hatenablog://entry/6653458415124257812</id>
        <published>2015-10-11T19:41:46+09:00</published>
        <updated>2015-10-16T03:13:14+09:00</updated>
        <summary type="html">Phonixとは、elixerという言語で書かれたWebフレームワークです。APIやリアルタイムストリーミングに特化し、大規模かつスケーラブルで高可用性で早いという特徴があります。
この記事では、Phonix環境のセットアップから、静的ページを作成、表示させます。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151011/20151011193641.png&quot; alt=&quot;f:id:nipe880324:20151011193641p:plain:w420&quot; title=&quot;f:id:nipe880324:20151011193641p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;a href=&quot;http://www.phoenixframework.org/&quot; target=&quot;_blank&quot;&gt;Phoneix&lt;/a&gt;とは、elixer(※1)という言語で書かれたWebフレームワークです。&lt;br /&gt;
最近の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/iOS&quot;&gt;iOS&lt;/a&gt;や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Android&quot;&gt;Android&lt;/a&gt;アプリやSPI(シングルページアプリケーショん)が普及してきたため、サーバーサイドは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;やリアルタイムストリーミングの機能を提供することが増えてきました。&lt;br /&gt;
Phonixは一般的なWebの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MVC&quot;&gt;MVC&lt;/a&gt;に加え、&lt;b&gt;デフォルトで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;やソケットによるリアルタイムストリーミング機能&lt;/b&gt;を提供していて、このようなニーズに対応しやすくなっています。&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%A4%A5%C6%A5%F3%A5%B7%A1%BC&quot;&gt;レイテンシー&lt;/a&gt;がとても低く、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;のレスポンスタイムはミリセカンドの代わりにマイクロセカンドで表示されるぐらい早さが段違いと言われています。&lt;br /&gt;
また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のコントリビュータが作っているだけありかなり&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;の仕組みに似ているので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;などの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MVC&quot;&gt;MVC&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;に触れている方には、かなり理解しやすいと思います。&lt;br /&gt;
若干、elixirの独特な文法があるため、必要に応じて&lt;a href=&quot;http://qiita.com/niku/items/729ece76d78057b58271&quot; target=&quot;_blank&quot;&gt;Elixir 基礎文法最速マスター&lt;/a&gt;や&lt;a href=&quot;http://elixir-lang.org/&quot; target=&quot;_blank&quot;&gt;elixier - 公式&lt;/a&gt;を参考にしてください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;i&gt;&lt;br /&gt;
※1 &lt;a href=&quot;http://www.erlang.org/&quot; target=&quot;_blank&quot;&gt;earlang&lt;/a&gt;(アーラン)は、高可用性で大規模な並列処理が可能なリアル&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%E0%A5%B7%A5%B9%A5%C6%A5%E0&quot;&gt;タイムシステム&lt;/a&gt;を構築するためにの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%B8%C0%B8%EC&quot;&gt;関数型言語&lt;/a&gt;です。例えば、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Facebook&quot;&gt;Facebook&lt;/a&gt;が買収したWhat&#39;s Appという月間アクティブユーザ8億人以上のメッセージアプリ（LINEのようなもの）でも使われています。&lt;br /&gt;
しかし、文法が独特で書きづらいというところ不満点があり、それを解決するために、&lt;a href=&quot;http://elixir-lang.org/&quot; target=&quot;_blank&quot;&gt;elixer&lt;/a&gt;という&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;風のわかりやすい&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9&quot;&gt;シンタックス&lt;/a&gt;で書きやすく、読みやすくした言語が作られました。exlixerはearlang &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/VM&quot;&gt;VM&lt;/a&gt;上で動く&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%C8%A5%B3%A1%BC%A5%C9&quot;&gt;バイトコード&lt;/a&gt;に変換されて実行されます。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;この記事では、「&lt;b&gt;Phonix環境のセットアップから、静的ページを作成し、表示させる&lt;/b&gt;」ことを行います。&lt;br /&gt;
次回の記事では、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151013/1444662887&quot; target=&quot;_blank&quot;&gt;Phoneixで認証機能&lt;/a&gt;」を実装します。&lt;br /&gt;
そして、最後に、WebSocketを使った次回は「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151016/1444930756&quot;&gt;チャット機能&lt;/a&gt;」を実装します。&lt;/p&gt;&lt;p&gt;サンプル&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tranquil-mesa-7338.herokuapp.com/login&quot; target=&quot;_blank&quot;&gt;ChatPhoenix - Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nipe0324/chat_phoenix&quot; target=&quot;_blank&quot;&gt;ChatPhoenix - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#phoenix-tutorial-1-insatall-phonix&quot;&gt;Phoenix環境のセットアップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#phoenix-tutorial-1-create-project&quot;&gt;Phoenixプロジェクトの作成とサーバー起動&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#phoenix-tutorial-1-static-page&quot;&gt;静的ページの作成&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Erlang&quot;&gt;Erlang&lt;/a&gt; 7.1&lt;/li&gt;
&lt;li&gt;Elixir 1.1.1&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt; 10.0.3&lt;/li&gt;
&lt;li&gt;Hex 0.9.0&lt;/li&gt;
&lt;li&gt;node.js 0.12.7&lt;/li&gt;
&lt;li&gt;npm 2.14.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PostgreSQL&quot;&gt;PostgreSQL&lt;/a&gt; 9.4.4&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;phoenix-tutorial-1-insatall-phonix&quot;&gt;1. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;環境のセットアップ&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;h4&gt;Elixerをインストール&lt;/h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;はElixerで書かれています。そのため、まずElixerをインストールします。&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/mac&quot;&gt;mac&lt;/a&gt;でHomebrewを使ってインストールする場合は&lt;code&gt;brew&lt;/code&gt;コマンドを使います。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ brew update
$ brew install elixir&lt;/pre&gt;&lt;p&gt;他のOSや方法でインストールしたい場合は、&lt;a href=&quot;http://elixir-lang.org/install.html&quot; target=&quot;_blank&quot;&gt;Elixerのインストールページ&lt;/a&gt;を参照してインストールしてください。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Erlang&quot;&gt;Erlang&lt;/a&gt;のインストール&lt;/h4&gt;Elixirは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Erlang&quot;&gt;Erlang&lt;/a&gt;に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;されて、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Erlang&quot;&gt;Erlang&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/VM&quot;&gt;VM&lt;/a&gt;上で動きます。そのため、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Erlang&quot;&gt;Erlang&lt;/a&gt;のインストールが必要です。&lt;br /&gt;
&lt;code&gt;brew&lt;/code&gt;コマンドでElixerをインストールした場合、一緒に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Erlang&quot;&gt;Erlang&lt;/a&gt;もインストールされていれますので、インストールされていることを確認します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ which erl
/usr/local/bin/erl&lt;/pre&gt;&lt;p&gt;インストールされていない場合は、&lt;a href=&quot;http://elixir-lang.org/install.html#installing-erlang&quot; target=&quot;_blank&quot;&gt;Erlangのインストール方法&lt;/a&gt;を参照してインストールしてください。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;Hex（パッケージマネージャ）のインストール&lt;/h4&gt;&lt;code&gt;mix local.hex&lt;/code&gt;でHexという&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Erlang&quot;&gt;Erlang&lt;/a&gt;のパッケージマネージャをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ mix local.hex&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;のインストール&lt;/h4&gt;Phonixのアーカイブをローカルに取得します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ mix archive.install https://github.com/phoenixframework/phoenix/releases/download/v1.0.3/phoenix_new-1.0.3.ez&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;node.js (&gt;=0.12.0) のインストール&lt;/h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Javascript&quot;&gt;Javascript&lt;/a&gt;や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;などのアセット管理に&lt;a href=&quot;http://brunch.io/&quot; target=&quot;_blank&quot;&gt;branch.io&lt;/a&gt;というビルド&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB&quot;&gt;ツール&lt;/a&gt;を使っています。(他に有名なビルド&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB&quot;&gt;ツール&lt;/a&gt;として、gruntやgulpというものがあります。)&lt;br /&gt;
その&lt;code&gt;branch.io&lt;/code&gt;がnpm（node用のパッケージマネージャ）を使っているのでnode.jsとnpmが必要になります。&lt;/p&gt;&lt;p&gt;nodeとnpmコマンドが使えるか確認し、使えな場合はインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ which node
/usr/local/bin/node
$ which npm
/usr/local/bin/npm

# nodeやnpmがない場合はインストール
$ brew install node&lt;/pre&gt;&lt;p&gt;その他のOSや方法の場合は、&lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot;&gt;node.jsのインストール&lt;/a&gt;を参照してインストールしてください。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PostgreSQL&quot;&gt;PostgreSQL&lt;/a&gt;のインストール&lt;/h4&gt;PhonexはデフォルトでPostgresを使う設定になっています。そのため、Postgresが必要になります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;brew install postgres&lt;/pre&gt;&lt;p&gt;もし&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MySQL&quot;&gt;MySQL&lt;/a&gt;を使いたい場合は、プロジェクトを作成するときに&lt;code&gt;--database mysql&lt;/code&gt;を指定すればよいようです。&lt;/p&gt;&lt;p&gt;これで一通りPhonix環境がセットアップ出来ました。&lt;br /&gt;
簡単にまとめると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Phonixは、Elixerで書かれていて、ElixerはEarlang &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/VM&quot;&gt;VM&lt;/a&gt;上で動作するのでEarlangも必要&lt;/li&gt;
&lt;li&gt;Phonixの依存ライブラリのパッケージ管理は、HexというEarlangのパッケージマネージャを使う&lt;/li&gt;
&lt;li&gt;Phonixのアセット管理は、branch.ioというビルド&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB&quot;&gt;ツール&lt;/a&gt;を使っている。branch.ioを使うためには、node.jsやnpmが必要&lt;/li&gt;
&lt;li&gt;PhonixのデフォルトのDBは、Postgresを使う。もちろん、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MySQL&quot;&gt;MySQL&lt;/a&gt;や他のDBも使える&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;という形になっていて、これらの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB&quot;&gt;ツール&lt;/a&gt;をインストールしました。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;phoenix-tutorial-1-create-project&quot;&gt;2. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;プロジェクトの作成とサーバー起動&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;プロジェクトの作成&lt;/h4&gt;&lt;code&gt;mix phonnix.new&lt;/code&gt;コマンドで新規の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;プロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ mix phoenix.new chat_phoenix
* creating chat_phoenix/config/config.exs
* creating chat_phoenix/config/dev.exs
...

Fetch and install dependencies? [Yn] Y
* running npm install &amp;amp;&amp;amp; node node_modules/brunch/bin/brunch build
* running mix deps.get
...&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;Postgresのセットアップ&lt;/h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;はデフォルトでPostgresを使います。&lt;br /&gt;
また、ユーザ名:&lt;code&gt;postgres&lt;/code&gt;、パスワード:&lt;code&gt;postgres&lt;/code&gt;のアカウントが必要になります。&lt;br /&gt;
&lt;code&gt;createuser&lt;/code&gt;コマンドで&lt;code&gt;postgres&lt;/code&gt;アカウントをパスワード&lt;code&gt;postgres&lt;/code&gt;で作成します。一応、DB、ロール作成権限をつけておきます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;createuser postgres --createdb --createrole --encrypted --password
Password: postgres&lt;/pre&gt;&lt;p&gt;既にpostgresアカウントがある場合や別のアカウントを使いたい場合は、&lt;code&gt;config/dev.exs&lt;/code&gt;の一番下にユーザ名とパスワードが記載されていますので、こちらを変更してください。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# config/dev.exs

# Configure your database
config :chat_phoenix, ChatPhoenix.Repo,
  adapter: Ecto.Adapters.Postgres,
  username: &amp;#34;postgres&amp;#34;,
  password: &amp;#34;postgres&amp;#34;,
  database: &amp;#34;chat_phoenix_dev&amp;#34;,
  hostname: &amp;#34;localhost&amp;#34;,
  pool_size: 10&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;データベースの作成&lt;/h4&gt;&lt;code&gt;mix ecto.create&lt;/code&gt;コマンドでdev環境用のデータベースを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;cd chat_phoenix
mix ecto.create
=&amp;gt; chat_phoenix_devデータベースが作成される

# また、MIX_ENV=testを指定することでtest環境用のデータベースが作成できます
env MIX_ENV=test mix ecto.create
=&amp;gt; chat_phoenix_testデータベースが作成される&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/elixir-lang/ecto&quot; target=&quot;_blank&quot;&gt;ecto&lt;/a&gt;は、データベース操作や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SQL&quot;&gt;SQL&lt;/a&gt;クエリを簡単に記載できるElixerの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;です。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;でいう&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt;のようなものです。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;サーバーの起動&lt;/h4&gt;&lt;code&gt;mix phoenix.server&lt;/code&gt;でサーバーを起動します。&lt;b&gt;Ctrl + c&lt;/b&gt;を2回おすとサーバーを停止できます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;mix phoenix.server&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot;&gt;http://localhost:4000&lt;/a&gt;にアクセスすれば、次のようが画面が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151011/20151011193832.png&quot; alt=&quot;f:id:nipe880324:20151011193832p:plain:w420&quot; title=&quot;f:id:nipe880324:20151011193832p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;開発で有用なコマンド&lt;/h4&gt;これで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;でWebアプリケーションを動かすことができました。&lt;br /&gt;
次は静的ページを追加しますが、その前に開発で使える有用なコマンドを記載します。&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;の環境設定で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%E9%A5%AF%A5%C6%A5%A3%A5%D6&quot;&gt;インタラクティブ&lt;/a&gt;にElixerコマンドを実行するには&lt;code&gt;iex -S mix phoenix.server&lt;/code&gt;と実行します。&lt;code&gt;iex&lt;/code&gt;はinteractive elixerの略です。&lt;b&gt;Ctrl + c&lt;/b&gt;を2回押すと停止できます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ iex -S mix phoenix.server
iex(1)&amp;gt; IO.puts &amp;#34;こんにちは&amp;#34;
こんにちは
:ok&lt;/pre&gt;&lt;p&gt;&lt;code&gt;mix phoenix.routes&lt;/code&gt;コマンドで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;に定義されたすべてのルートを確認できます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ mix phoenix.routes
page_path  GET  /  ChatPhoenix.PageController :index&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;phoenix-tutorial-1-static-page&quot;&gt;3. 静的ページの作成&lt;/h3&gt;Phonixで静的ページを追加します。それを通し、ルート、コントローラ、ビュー、テンプレートについて簡単に説明します。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;Phonixのディレクトリ構成&lt;/h4&gt;Phonixのディレクトリ構成は次のようになっています。&lt;br /&gt;
主に&lt;code&gt;web&lt;/code&gt;にコントローラやモデル、テンプレートなどのアプリケーションのメインとなるファイルを配置します。&lt;br /&gt;
また、&lt;code&gt;priv/static&lt;/code&gt;にJSや&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;、イメージなどのアセットファイルを配置します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;chat_phoenix
├── README.md
├── _build
├── brunch-config.js
├── config
├── deps
├── lib
├── mix.exs
├── mix.lock
├── node_modules
├── package.json
├── priv
├── test
└── web&lt;/pre&gt;&lt;p&gt;また、&lt;code&gt;lib/chat_phoenix/endpoint.ex&lt;/code&gt;がアプリケーションのエンドポイントになります。&lt;br /&gt;
また、&lt;code&gt;lib/chat_phoenix.ex&lt;/code&gt;がアプリケーションファイルになります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;chat_phoenix
├── lib
│   ├── chat_phoenix
│   │   ├── endpoint.ex
│   │   └── repo.ex
│   └── chat_phoenix.ex
...&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;ルートの追加&lt;/h4&gt;&lt;code&gt;web/router.ex&lt;/code&gt;にルートを記載します。&lt;br /&gt;
ルートの記載方法は、HTTP&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;(GET,POSTなど)とパスをコントローラとアクションにひも付けます。&lt;br /&gt;
デフォルトで次のように記載されています。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/router.ex
defmodule ChatPhoenix.Router do
  use ChatPhoenix.Web, :router

  pipeline :browser do
    plug :accepts, [&amp;#34;html&amp;#34;]
    plug :fetch_session
    plug :fetch_flash
    plug :protect_from_forgery
    plug :put_secure_browser_headers
  end

  # api用のスコープ(jsonをaccept)
  pipeline :api do
    plug :accepts, [&amp;#34;json&amp;#34;]
  end

  # htmlページ用のスコープ(htmlをaccept)
  scope &amp;#34;/&amp;#34;, ChatPhoenix do
    pipe_through :browser # 上記の :browser の処理を行う

    # &amp;#34;GET /&amp;#34;にアクセスすると、PageControllerのindexアクションが呼ばれる
    get &amp;#34;/&amp;#34;, PageController, :index
  end

  # Other scopes may use custom stacks.
  # scope &amp;#34;/api&amp;#34;, ChatPhoenix do
  #   pipe_through :api
  # end
end&lt;/pre&gt;&lt;p&gt;では&lt;code&gt;get &quot;/hello&quot;, HelloController, :index&lt;/code&gt;という新しいルートを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;scope &amp;#34;/&amp;#34;, ChatPhoenix do
  pipe_through :browser # 上記の :browser の処理を行う

  get &amp;#34;/&amp;#34;, PageController, :index
  # &amp;#34;GET /hello&amp;#34;にアクセスすると、HelloControllerのindexアクションが呼ばれる
  get &amp;#34;/hello&amp;#34;, HelloController, :index
end&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;コントローラの追加&lt;/h4&gt;コントローラは、ルートで定義したURLからコントローラとアクションが呼ばれます。&lt;br /&gt;
そのため、先ほど追加したルートの、&lt;code&gt;HelloController&lt;/code&gt;の&lt;code&gt;index&lt;/code&gt;アクションを作成します。&lt;/p&gt;&lt;p&gt;ファイルの命名は、&lt;code&gt;web/controllers/&lt;コントローラ名&gt;.ex&lt;/code&gt;となります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/controllers/hello_controller.ex
defmodule ChatPhoenix.HelloController do
  # Webのcontrollerモジュールを使用できるようにする(おまじないのようなもの)
  use ChatPhoenix.Web, :controller

  # indexアクション
  #  conn - リクエスト情報を保持
  #  params - クエリストリングやフォーム入力などのパラメータ
  def index(conn, _params) do
    # index.html.eexテンプレートを表示する
    render conn, &amp;#34;index.html&amp;#34;
  end
end&lt;/pre&gt;&lt;p&gt;※引数を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;内で使っていない場合は、引数名の前に&lt;code&gt;_&lt;/code&gt;を追加することで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;でwarningが発生しなくなります。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;ビューを追加&lt;/h4&gt;ビューは、コントローラとテンプレートの中間に位置し、プレゼンテーション層としての役割を持ちます。&lt;br /&gt;
コントローラから渡されたデータを表示用にフォーマットなどしてテンプレートに渡します。&lt;/p&gt;&lt;p&gt;ビューの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CC%BF%CC%BE%B5%AC%C2%A7&quot;&gt;命名規則&lt;/a&gt;は、&lt;code&gt;web/views/&lt;コントローラ名&gt;_view.ex&lt;/code&gt;となります。&lt;br /&gt;
特にリプレゼンテーションする必要もないので空のビューを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# web/views/hello_view.ex
defmodule ChatPhoenix.HelloView do
  # Webのviewモジュールを使用できるようにする(おまじないのようなもの)
  use ChatPhoenix.Web, :view
end&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;テンプレートを追加&lt;/h4&gt;テンプレートは、HTMLや&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を記載します。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Phoenix&quot;&gt;Phoenix&lt;/a&gt;はデフォルトのテンプレートエンジンを&lt;code&gt;eex&lt;/code&gt;(&lt;a href=&quot;http://elixir-lang.org/docs/stable/eex/EEx.html&quot; target=&quot;_blank&quot;&gt;Embedded Elixir&lt;/a&gt;)を使っています。そのため、ファイルの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B3%C8%C4%A5%BB%D2&quot;&gt;拡張子&lt;/a&gt;は&lt;code&gt;.eex&lt;/code&gt;になります。&lt;/p&gt;&lt;p&gt;テンプレートは基本的には&lt;code&gt;web/templates/&lt;コントローラ名&gt;/&lt;アクション名&gt;.html.eex&lt;/code&gt;に配置します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- web/templates/hello/index.html.eex --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;jumbotron&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Hello Phoenix!!&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;静的ページの確認&lt;/h4&gt;&lt;a href=&quot;http://localhost:4000/hello&quot; target=&quot;_blank&quot;&gt;http://localhost:4000/hello&lt;/a&gt;にアクセスすると、次のようにページが表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151011/20151011193853.png&quot; alt=&quot;f:id:nipe880324:20151011193853p:plain:w420&quot; title=&quot;f:id:nipe880324:20151011193853p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;code&gt;index.html.eex&lt;/code&gt;のテンプレートファイルに少ししか書いてませんが、ヘッダやフッターが表示されています。&lt;br /&gt;
これは、&lt;code&gt;web/templates/layout/app.html.eex&lt;/code&gt;にヘッダーやフッターが記載されているためです。&lt;br /&gt;
Phonixはこの&lt;code&gt;app.html.eex&lt;/code&gt;を表示し、このファイル内に、&lt;code&gt;&lt;%= @inner %&gt;&lt;/code&gt;があり、ここに&lt;code&gt;index.html.eex&lt;/code&gt;テンプレートの内容が表示されています。&lt;/p&gt;&lt;p&gt;これで、静的ページを表示させることができました。&lt;br /&gt;
まとめると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;web/router.ex&lt;/code&gt;でルートを追加し、HTTP&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;とURLをコントローラーとアクションにつなげます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;web/controllers/&lt;コントローラ名&gt;.ex&lt;/code&gt;にコントローラを作成し、アクションの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を定義します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;web/views/&lt;コントローラ名&gt;_view.ex&lt;/code&gt;でビューを作成します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;web/templates/&lt;コントローラ名&gt;/&lt;アクション名&gt;.html.eex&lt;/code&gt;にテンプレートを作成し、htmlを記載します。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;という流れでした。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.phoenixframework.org/docs&quot;&gt;Overview &amp;middot; Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hexdocs.pm/ecto/Ecto.html&quot;&gt;Ecto &amp;ndash; Ecto v1.0.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nithinbekal.com/posts/phoenix-authentication/&quot;&gt;Adding user authentication to a Phoenix app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/niku/items/729ece76d78057b58271&quot;&gt;Elixir &amp;#x57FA;&amp;#x790E;&amp;#x6587;&amp;#x6CD5;&amp;#x6700;&amp;#x901F;&amp;#x30DE;&amp;#x30B9;&amp;#x30BF;&amp;#x30FC; - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elixircnx/comeonin&quot;&gt;elixircnx/comeonin &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="phoenix" label="phoenix" />
        
        <category term="elixer" label="elixer" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>リファクタリング: デメテルの法則(Law of Demeter, LoD)</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150922/1442923521"/>
        <id>hatenablog://entry/6653458415122273567</id>
        <published>2015-09-22T21:05:21+09:00</published>
        <updated>2015-09-22T21:10:55+09:00</updated>
        <summary type="html">デメテルの法則は、オブジェクト指向の設計におけるガイドラインで、簡潔にいうと「直接の友達とだけ話すこと」ができるようにするということです。
デメテルの法則に違反しているソースコードとそれの対処する方法を説明します。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150922/20150922205235.jpg&quot; alt=&quot;f:id:nipe880324:20150922205235j:plain:w320&quot; title=&quot;f:id:nipe880324:20150922205235j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/wonderlane/&quot;&gt;Wonderlane | Flickr - Photo Sharing!&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%E1%A5%C6%A5%EB&quot;&gt;デメテル&lt;/a&gt;の法則について勉強したのでまとめてみました。間違っているかもしれませんのでコメントいただけると助かります。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#low-of-demeter-what&quot;&gt;デメテルの法則とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#low-of-demeter-violation&quot;&gt;デメテルの法則に反している例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#low-of-demeter-apply&quot;&gt;デメテルの法則の適用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#low-of-demeter-conclusion&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;low-of-demeter-what&quot;&gt;1. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%E1%A5%C6%A5%EB&quot;&gt;デメテル&lt;/a&gt;の法則とは&lt;/h3&gt;&lt;/p&gt;

    &lt;blockquote&gt;
        &lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/wikipedia&quot;&gt;wikipedia&lt;/a&gt;より引用 &lt;br /&gt;
&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%A1%E3%83%86%E3%83%AB%E3%81%AE%E6%B3%95%E5%89%87&quot;&gt;&amp;#x30C7;&amp;#x30E1;&amp;#x30C6;&amp;#x30EB;&amp;#x306E;&amp;#x6CD5;&amp;#x5247; - Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%E1%A5%C6%A5%EB&quot;&gt;デメテル&lt;/a&gt;の法則 、または最小知識の原則とは、ソフトウェアの設計、特に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE&quot;&gt;オブジェクト指向&lt;/a&gt;プログラムの設計における&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AC%A5%A4%A5%C9%A5%E9%A5%A4%A5%F3&quot;&gt;ガイドライン&lt;/a&gt;である。&lt;br /&gt;
簡潔に言うと「直接の友達とだけ話すこと」と要約できる。&lt;br /&gt;
あるオブジェクトAは別のオブジェクトBのサービスを要求してもよい（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を呼び出してもよい）が、オブジェクトAがオブジェクトBを「経由して」さらに別のオブジェクトCのサービスを要求してはならない。&lt;br /&gt;
これが望ましくないのは、オブジェクトAがオブジェクトBに対して、オブジェクトB自身の内部構造以上の知識を要求してしまうためである。&lt;br /&gt;
このような場合には、クラスBを変更し、クラスAがクラスBに対して行った要求を適切なBのサブ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;に伝播させるようにすればよい。または、AがCへのリファレンスを持つようにして、AがCを直接呼ぶようにしてもよい。この法則に従えば、オブジェクトBが知っているのは自分自身の内部構造だけになる。&lt;/p&gt;

    &lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;low-of-demeter-violation&quot;&gt;2. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%E1%A5%C6%A5%EB&quot;&gt;デメテル&lt;/a&gt;の法則に反している例&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;クラス図としては次のような例で考えてみます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[Result] =1:n=&amp;gt; [Answer] &amp;lt;=1:n= [Question]&lt;/pre&gt;&lt;p&gt;テスト結果(Result)には、回答(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Answer&quot;&gt;Answer&lt;/a&gt;)が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;あります。&lt;br /&gt;
そして、回答から質問(Question)が辿れるようになっています。&lt;/p&gt;&lt;p&gt;ここで、テスト結果を計算する&lt;code&gt;score&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を実装してみます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Result&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:answers&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;score&lt;/span&gt;
    answers.inject(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;result&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;answer&lt;/span&gt;|
      &lt;span class=&quot;synComment&quot;&gt;# resultからquestionまで辿っているのでデメテルの法則に反している&lt;/span&gt;
      question = answer.quesiton
      result + question.score(answer.text)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Answer&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:question&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:result&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Question&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:answers&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;score&lt;/span&gt;(text)
    &lt;span class=&quot;synComment&quot;&gt;# correct_textは正解のtext&lt;/span&gt;
    text == correct_text ? &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

result = &lt;span class=&quot;synType&quot;&gt;Result&lt;/span&gt;.find(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
result.score &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Answerに応じてスコアが算出される&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;ここで、&lt;code&gt;score&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;のブロック内で、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%E1%A5%C6%A5%EB&quot;&gt;デメテル&lt;/a&gt;の法則であったように、&lt;br /&gt;
&lt;b&gt;「あるオブジェクトA(Result)は別のオブジェクトB(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Answer&quot;&gt;Answer&lt;/a&gt;)のサービスを要求してもよい（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を呼び出してもよい）が、オブジェクトA(Result)がオブジェクトB(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Answer&quot;&gt;Answer&lt;/a&gt;)を「経由して」さらに別のオブジェクトC(Question)のサービスを要求してはならない。」&lt;/b&gt;に合致しています。&lt;br /&gt;
つまり、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%E1%A5%C6%A5%EB&quot;&gt;デメテル&lt;/a&gt;の法則に違反しています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;low-of-demeter-apply&quot;&gt;3. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%E1%A5%C6%A5%EB&quot;&gt;デメテル&lt;/a&gt;の法則の適用&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;そのため、&lt;br /&gt;
&lt;b&gt;「クラスB(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Answer&quot;&gt;Answer&lt;/a&gt;)を変更し、クラスA(Result)がクラスB(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Answer&quot;&gt;Answer&lt;/a&gt;)に対して行った要求を適切なBのサブ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;に伝播させるようにすればよい。」&lt;/b&gt;をしてみます。&lt;/p&gt;&lt;p&gt;具体的には、&lt;code&gt;score&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;内の処理を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Answer&quot;&gt;Answer&lt;/a&gt;クラスに委託します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Result&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:answers&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;score&lt;/span&gt;
    answers.inject(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;result&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;answer&lt;/span&gt;|
      &lt;span class=&quot;synComment&quot;&gt;# answerに委託しているのでQuestionについて知らなくてもよい&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# つまり、Questionの変更に対して強くなる&lt;/span&gt;
      result + answer.score
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Answer&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:question&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;score&lt;/span&gt;
    question.score(text)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Question&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:answers&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;score&lt;/span&gt;(text)
    text == correct_text ? &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

result = &lt;span class=&quot;synType&quot;&gt;Result&lt;/span&gt;.find(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
result.score &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Answerに応じてスコアが算出される&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;low-of-demeter-conclusion&quot;&gt;4. まとめ&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;これは、簡単な例なので分かりづらいですが、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%E1%A5%C6%A5%EB&quot;&gt;デメテル&lt;/a&gt;の法則に反した実装をしていると、規模が大きくなるにつれて、クラス同士の余計な依存関係が多くなり、クラス同士の関連が複雑になります。&lt;br /&gt;
それにより、修正に対する影響範囲が大きくなり、保守が辛い、予想外のバグを生みやすくなってしまうのではと思いました。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%A1%E3%83%86%E3%83%AB%E3%81%AE%E6%B3%95%E5%89%87&quot;&gt;&amp;#x30C7;&amp;#x30E1;&amp;#x30C6;&amp;#x30EB;&amp;#x306E;&amp;#x6CD5;&amp;#x5247; - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://thoughtbot.com/books&quot;&gt;Our Books - thoughtbot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="Ruby" label="Ruby" />
        
        <category term="リファクタリング" label="リファクタリング" />
        
        <category term="設計" label="設計" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>Rubyテクニック: Rubyの通常の引数とキーワード引数の違い</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150921/1442839934"/>
        <id>hatenablog://entry/6653458415122165399</id>
        <published>2015-09-21T21:52:14+09:00</published>
        <updated>2015-09-22T20:49:25+09:00</updated>
        <summary type="html">Ruby2.0からキーワード引数が導入され、Ruby2.1からRequiredキーワード引数が導入されました。
Rubyの通常の引数とキーワード引数のメリット、デメリット、どういうときにキーワード引数を使ったほうが良さそうかということをまとめました。
Rubyの通常の引数に比べ、キーワード引数には次のようなメリットがあります。
1. 引数の意味がわかりやすくなる
2. 引数の順番を気にしなくてもよくなる
それぞれソースコードを交えながら説明します。
</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150921/20150921215037.png&quot; alt=&quot;f:id:nipe880324:20150921215037p:plain:w240&quot; title=&quot;f:id:nipe880324:20150921215037p:plain:w240&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:240px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Ruby2.0からキーワード引数が導入され、Ruby2.1からRequiredキーワード引数が導入されました。&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;の通常の引数とキーワード引数のメリット、デメリット、どういうときにキーワード引数を使ったほうが良さそうかということをまとめました。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;キーワード引数の通常の引数に比べたメリット&lt;/h3&gt;
    &lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;の通常の引数に比べ、キーワード引数には次のようなメリットがあります。&lt;/p&gt;&lt;p&gt;1. 引数の意味がわかりやすくなる&lt;br /&gt;
2. 引数の順番を気にしなくてもよくなる&lt;/p&gt;&lt;p&gt;それぞれ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;を交えながら説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;メリット1: 引数の意味がわかりやすくなる&lt;/h3&gt;
    &lt;p&gt;通常の引数の場合、引数がある程度増えるとそれぞれの引数が何を意味しているかわかりづらくなってしまいます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;total&lt;/span&gt;(subtotal, tax, discount)
  subtotal + tax - discount
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

total(&lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 105&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;キーワード引数を使うことでそれぞれの引数の意味が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の中身を見なくてもわかるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;total&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;subtotal&lt;/span&gt;:, &lt;span class=&quot;synConstant&quot;&gt;tax&lt;/span&gt;:, &lt;span class=&quot;synConstant&quot;&gt;discount&lt;/span&gt;:)
  subtotal + tax - discount
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

total(&lt;span class=&quot;synConstant&quot;&gt;subtotal&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;tax&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;discount&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 105&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;しかし、次のようにとても簡易な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の場合はキーワード引数が冗長になってしまうので通常の引数のほうが良さそうです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 通常の引数&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;plus&lt;/span&gt;(num1, num2)
  num1 + num2
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

plus(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 8&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# キーワード引数&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;plus&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;num1&lt;/span&gt;:, &lt;span class=&quot;synConstant&quot;&gt;num2&lt;/span&gt;:)
  num1 + num2
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

plus(&lt;span class=&quot;synConstant&quot;&gt;num1&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;num2&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 8&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;メリット2: 引数の順番を気にしなくてもよくなる&lt;/h3&gt;
    &lt;p&gt;キーワード引数を使うメリットの２つ目として、引数の順番を気にしなくてもよくなります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 引数の順番を変えると結果が変わってしまいます&lt;/span&gt;
total(&lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 95&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 引数の順番を変えてもキーワードで指定しているので結果は変わりません&lt;/span&gt;
total(&lt;span class=&quot;synConstant&quot;&gt;subtotal&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;discount&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;tax&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 105&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;まとめ&lt;/h3&gt;
    &lt;p&gt;キーワード引数をつかうことで読みやすさが向上し、また、順番を気にしなくてもよくなるので積極的に取り入れていったほうが良さそうです。&lt;br /&gt;
しかし、本当に簡易な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に対しては、冗長になってしまう箇所もあるので判断は必要です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0&quot;&gt;リファクタリング&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://robots.thoughtbot.com/ruby-2-keyword-arguments&quot;&gt;Ruby 2 Keyword Arguments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="Ruby" label="Ruby" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>ChefでRails環境を構築(Ruby+Nginx+Unicorn+PostgreSQL+Redis+Fluentd)</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150721/1437404524"/>
        <id>hatenablog://entry/8454420450102328597</id>
        <published>2015-07-21T00:02:04+09:00</published>
        <updated>2015-07-26T17:12:39+09:00</updated>
        <summary type="html">ローカルの仮想マシンにChefでRails環境を構築する方法を説明します。環境は、CentOS 6.6、Ruby(rbenv)、Nginx、Unicorn、PostgreSQL、Redis、Fluentd(td-agent)を使っています。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150720/20150720234335.png&quot; alt=&quot;f:id:nipe880324:20150720234335p:plain&quot; title=&quot;f:id:nipe880324:20150720234335p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;ローカルの仮想マシンにChefでRails環境を構築する方法を説明します。&lt;br /&gt;
Chefで構築しているので、AWSやVPSなどのsshやrubyがインストールできる環境であれば同じ環境を構築できます。&lt;/p&gt;&lt;p&gt;具体的には、次のようなものを使用するようにしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 6.6&lt;/li&gt;
&lt;li&gt;Ruby(rbenv)&lt;/li&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;li&gt;Unicorn&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Fluentd(td-agent)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Chefのソースは&lt;a href=&quot;https://github.com/nipe0324/rails_samples/tree/master/chef_test&quot; target=&quot;_blank&quot;&gt;nipe0324/chef - GitHub&lt;/a&gt;に配置しています。&lt;br /&gt;
また、インストール方法は&lt;a href=&quot;https://github.com/nipe0324/rails_samples/tree/master/chef_test#install-process&quot; target=&quot;_blank&quot;&gt;README - install process&lt;/a&gt;に記載しています。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.2.2&lt;/li&gt;
&lt;li&gt;Vagrant 1.7.2&lt;/li&gt;
&lt;li&gt;Chef 12.4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    &lt;p&gt;1. &lt;a href=&quot;#chef-basic&quot;&gt;Chefのあれこれ基本&lt;/a&gt;&lt;br /&gt;
2. &lt;a href=&quot;#chef-install&quot;&gt;Chefのインストール&lt;/a&gt;&lt;br /&gt;
3. &lt;a href=&quot;#chef-repository&quot;&gt;chefリポジトリを作成&lt;/a&gt;&lt;br /&gt;
4. &lt;a href=&quot;#chef-cookbook&quot;&gt;クックブックを作成&lt;/a&gt;&lt;br /&gt;
4.1. &lt;a href=&quot;#chef-cookbook-time-zone&quot;&gt;サーバーのタイムゾーンのクックブック&lt;/a&gt;&lt;br /&gt;
4.2. &lt;a href=&quot;#chef-cookbook-user&quot;&gt;ユーザーのクックブック&lt;/a&gt;&lt;br /&gt;
4.3. &lt;a href=&quot;#chef-cookbook-nginx&quot;&gt;Nginxの設定ファイルのクックブック&lt;/a&gt;&lt;br /&gt;
4.4. &lt;a href=&quot;#chef-cookbook-ruby&quot;&gt;Rubyのクックブック&lt;/a&gt;&lt;br /&gt;
5. &lt;a href=&quot;#chef-community-cookbook&quot;&gt;コミュニティクックブックのダウンロード&lt;/a&gt;&lt;br /&gt;
6. &lt;a href=&quot;#chef-role&quot;&gt;ロールを設定&lt;/a&gt;&lt;br /&gt;
7. &lt;a href=&quot;#chef-environments&quot;&gt;environmentsを設定&lt;/a&gt;&lt;br /&gt;
8. &lt;a href=&quot;#chef-node&quot;&gt;ノードを設定&lt;/a&gt;&lt;br /&gt;
9. &lt;a href=&quot;#chef-vagrant&quot;&gt;仮想マシンの作成&lt;/a&gt;&lt;br /&gt;
10. &lt;a href=&quot;#chef-vagrant-chef&quot;&gt;仮想マシンにChefの適用&lt;/a&gt;&lt;br /&gt;
11. &lt;a href=&quot;#chef-test&quot;&gt;動作確認テスト&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;chef-basic&quot;&gt;1. Chefのあれこれ基本&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;Chefを少し使ったことがある人を前提にあれこれ基本をメモ的に記載します。&lt;/p&gt;&lt;p&gt;&lt;h5&gt;・Chefのリポジトリ、クックブック、レシピの関係&lt;/h5&gt;&lt;b&gt;「リポジトリ(キッチン) &gt; クックブック &gt; レシピ」&lt;/b&gt;の順に階層構造のような関係になっています。&lt;br /&gt;
&lt;b&gt;リポジトリ&lt;/b&gt;があり、&lt;br /&gt;
そこにapacheやrubyなどの&lt;b&gt;クックブック&lt;/b&gt;やリポジトリの属性設定ファイルなどがあって、&lt;br /&gt;
クックブックの中に&lt;b&gt;レシピ&lt;/b&gt;やクックブックの属性設定ファイルなどがあります。&lt;/p&gt;&lt;p&gt;&lt;h5&gt;リポジトリ(キッチン)のファイル説明&lt;/h5&gt;&lt;ul&gt;
  &lt;li&gt;Berksfile ... 他の人が公開しているクックブック（コミュニティクックブック）の依存関係を管理する設定ファイル&lt;/li&gt;
  &lt;li&gt;Vagrantfile ... Vagrantで仮想サーバを起動するためのVagrantの設定ファイル&lt;/li&gt;
  &lt;li&gt;cookbooks ... コミュニティクックブックの配置場所&lt;/li&gt;
  &lt;li&gt;data_bags ... クックブック単位ではなく、リポジトリ全体に設定したい変数をJSONファイルで格納する場所&lt;/li&gt;
  &lt;li&gt;environments ... 開発用・本番用で設定を分けたい場合に各種変数などを格納する場所&lt;/li&gt;
  &lt;li&gt;nodes ... Nodeオブジェクトを記述したJSONファイルの格納する場所。ノードとはChefで管理するサーバーのこと&lt;/li&gt;
  &lt;li&gt;roles ... ロールの設定ファイルを格納する場所。ロールとはWebサーバとDBサーバといったような役割の違うサーバを扱いたい場合に使う&lt;/li&gt;
  &lt;li&gt;site-cookbooks ...自分で作ったクックブックの配置場所&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h5&gt;クックブック&lt;/h5&gt;&lt;ul&gt;
  &lt;li&gt;attributes ... 変数の初期値を定義したファイルを格納する（特定のノードだけ変更したい場合、Nodeオブジェクトで上書きする）&lt;/li&gt;
  &lt;li&gt;definitions ...リソースを自分で拡張したい場合に、拡張定義スクリプトを格納する場所&lt;/li&gt;
  &lt;li&gt;files ... &lt;code&gt;cookbook_file&lt;/code&gt;リソースで扱う静的ファイルを格納する場所&lt;/li&gt;
  &lt;li&gt;recipes ... レシピの置き場所&lt;/li&gt;
  &lt;li&gt;templates ... 設定のテンプレートの置き場所&lt;/li&gt;
  &lt;li&gt;etc ...&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h5&gt;レシピ&lt;/h5&gt;&lt;code&gt;package&lt;/code&gt;や&lt;code&gt;service&lt;/code&gt;リソースを記載し、パッケージのインストールやサービスの起動などの状態を記載&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h5&gt;attributeの優先度&lt;/h5&gt;「クックブック内のattributeファイル &gt; レシピ内で定義されたattribute &gt; environments &gt; roles &gt; nodes」&lt;/p&gt;&lt;p&gt;&lt;h5&gt;Chefの実行順序&lt;/h5&gt;1. &lt;code&gt;chef solo cook [node名]&lt;/code&gt;などで&lt;b&gt;nodeを実行&lt;/b&gt;&lt;br /&gt;
2. nodeのJSONに記載されている環境名でenvironments内の環境設定JSONが呼ばれる&lt;br /&gt;
3. node内の&lt;code&gt;run_list&lt;/code&gt;に記載されている、roleやrecipeが実行される&lt;br /&gt;
4. role内の&lt;code&gt;run_list&lt;/code&gt;に記載されている、recipeが実行される&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;chef-install&quot;&gt;2. Chefのインストール&lt;/h3&gt;bundlerをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# rubyのバージョン
$ ruby -v
ruby 2.2.2p95

# bundlerのインストール
$ gem install bundler --no-ri --no-rdoc&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
source &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;https://rubygems.org&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;chef&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;knife-solo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# ローカルからリモートのchef-soloを実行できるツール&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;berkshelf&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# コミュニティクックブックの依存関係の管理ツール&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ bundle install&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;chef-repository&quot;&gt;3. chefリポジトリを作成&lt;/h3&gt;chef solo用のリポジトリを作成します。&lt;br /&gt;
&lt;code&gt;rails new&lt;/code&gt;のようなものです。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ bundle exec knife solo init .
Creating kitchen...
Creating knife.rb in kitchen...
Creating cupboards...
Setting up Berkshelf...&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;chef-cookbook&quot;&gt;4. クックブックを作成&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;chef-cookbook-time-zone&quot;&gt;4.1. サーバーのタイムゾーンのクックブック&lt;/h3&gt;クックブックのテンプレートを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ bundle exec knife cookbook create time-zone -o site-cookbooks&lt;/pre&gt;&lt;p&gt;タイムゾーンを設定するレシピを記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# site-cookbooks/time-zone/recipes/default.rb&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# タイムゾーン変更&lt;/span&gt;
execute &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;change-server-localtime&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  user &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  command &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;cp -p /usr/share/zoneinfo/UTC /etc/localtime&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  action &lt;span class=&quot;synConstant&quot;&gt;:run&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# clockをUTCに固定&lt;/span&gt;
cookbook_file &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/etc/sysconfig/clock&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  owner &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  group &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  mode &lt;span class=&quot;synConstant&quot;&gt;0755&lt;/span&gt;
  source &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;clock-utc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;レシピ内で使用している静的ファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# site-cookbooks/time-zone/files/default/clock-utc
ZONE=&amp;#34;UTC&amp;#34;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;time-zone&lt;/code&gt;ディレクトリ配下の&lt;code&gt;attributes&lt;/code&gt;や&lt;code&gt;definitions&lt;/code&gt;などの使用していないディレクトリは削除しておきます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;chef-cookbook-user&quot;&gt;4.2. ユーザーのクックブック&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ bundle exec knife cookbook create user -o site-cookbooks&lt;/pre&gt;&lt;p&gt;レシピを作成&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# site-cookbooks/user/recipes/defaut.rb&lt;/span&gt;

group node[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  group_name node[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]
  action     [&lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;]
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

user node[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  comment  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;node[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  group    node[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]
  home     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;node[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
  supports &lt;span class=&quot;synConstant&quot;&gt;:manage_home&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  action   [&lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:manage&lt;/span&gt;]
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;user&lt;/code&gt;ディレクトリ配下の&lt;code&gt;attributes&lt;/code&gt;や&lt;code&gt;definitions&lt;/code&gt;などの使用していないディレクトリは削除しておきます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;chef-cookbook-nginx&quot;&gt;4.3. Nginxの設定ファイルのクックブック&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ bundle exec knife cookbook create nginx-conf -o site-cookbooks&lt;/pre&gt;&lt;p&gt;レシピの作成&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# site-cookbooks/nginx-conf/recipes/default.rb&lt;/span&gt;
template &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;nginx.conf&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  path &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/etc/nginx/nginx.conf&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  source &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;nginx.conf.erb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  owner &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  group &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  mode  &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;0644&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  notifies &lt;span class=&quot;synConstant&quot;&gt;:reload&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;service[nginx]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;nginx.conf&lt;/code&gt;の設定を実施する。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# site-cookbooks/nginx-conf/templates/default/nginx.conf.erb
user nginx;
worker_processes 1;

error_log /var/log/nginx/error.log warn;
pid       /var/run/nginx.pid;

events {
  worker_connections 1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  log_format main &amp;#39;$remote_addr - $remote_user [$time_local] &amp;#34;$request&amp;#34; &amp;#39;
                  &amp;#39;$status $body_bytes_sent &amp;#34;$http_referer&amp;#34; &amp;#39;
                  &amp;#39;&amp;#34;$http_user_agent&amp;#34; &amp;#34;$http_x_forwarded_for&amp;#34;&amp;#39;;
  access_log    /var/log/nginx/access.log main;
  sendfile      on;
  keepalive_timeout 65;

  &amp;lt;% if node[&amp;#39;nginx&amp;#39;][&amp;#39;env&amp;#39;].include?(&amp;#39;ruby&amp;#39;) %&amp;gt;
  upstream unicorn {
    server unix:/tmp/unicorn.sock;
  }
  &amp;lt;% end %&amp;gt;

  server {
    listen    80 default_server;
    server_name _;

    location / {
      root  /usr/share/nginx/html;
      index index.html index.htm;
    }

    error_page 404  /404.html;
    location = /404.html {
      root  /usr/share/nginx/html;
    }

    # redirect server error pages to the static page /50x.html
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
      root /usr/share/nginx/html;
    }

    &amp;lt;% if node[&amp;#39;nginx&amp;#39;][&amp;#39;env&amp;#39;].include?(&amp;#39;ruby&amp;#39;) %&amp;gt;
    location /unicorn {
      rewrite ^/unicorn/(.+) /$1 break;
      proxy_pass http://unicorn/$1;
    }
    &amp;lt;% end %&amp;gt;
  }
}&lt;/pre&gt;&lt;p&gt;&lt;code&gt;nginx-conf&lt;/code&gt;ディレクトリ配下の&lt;code&gt;attributes&lt;/code&gt;や&lt;code&gt;definitions&lt;/code&gt;などの使用していないディレクトリは削除しておきます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;chef-cookbook-ruby&quot;&gt;4.4. Rubyのクックブック&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ bundle exec knife cookbook create ruby-env -o site-cookbooks&lt;/pre&gt;&lt;p&gt;レシピの作成をします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# site-cookbooks/ruby-env/recipes/default.rb

# install openssl-devel and sqlite-devel
%w{openssl-devel sqlite-devel}.each do |pkg|
  package pkg do
    action :install
  end
end

# rbenv
git &amp;#34;/home/#{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]}/.rbenv&amp;#34; do
  repository node[&amp;#39;ruby-env&amp;#39;][&amp;#39;rbenv_url&amp;#39;]
  action :sync
  user  node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]
  group node[&amp;#39;ruby-env&amp;#39;][&amp;#39;group&amp;#39;]
end

template &amp;#34;.bash_profile&amp;#34; do
  source &amp;#34;.bash_profile.erb&amp;#34;
  path   &amp;#34;/home/#{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]}/.bash_profile&amp;#34;
  mode   0655
  owner  node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]
  group  node[&amp;#39;ruby-env&amp;#39;][&amp;#39;group&amp;#39;]
  not_if &amp;#34;grep rbenv ~/.bash_profile&amp;#34;, environment: { :&amp;#39;HOME&amp;#39; =&amp;gt; &amp;#34;/home/#{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]}&amp;#34; }
end

# ruby
directory &amp;#34;/home/#{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]}/.rbenv/plugins&amp;#34; do
  mode   0755
  owner  node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]
  group  node[&amp;#39;ruby-env&amp;#39;][&amp;#39;group&amp;#39;]
  action :create
end

git &amp;#34;/home/#{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]}/.rbenv/plugins/ruby-build&amp;#34; do
  repository node[&amp;#39;ruby-env&amp;#39;][&amp;#39;ruby-build_url&amp;#39;]
  action :sync
  user   node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]
  group  node[&amp;#39;ruby-env&amp;#39;][&amp;#39;group&amp;#39;]
end

# install ruby
execute &amp;#34;rbenv install #{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;version&amp;#39;]}&amp;#34; do
  command &amp;#34;/home/#{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]}/.rbenv/bin/rbenv install #{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;version&amp;#39;]}&amp;#34;
  user   node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]
  group  node[&amp;#39;ruby-env&amp;#39;][&amp;#39;group&amp;#39;]
  environment &amp;#39;HOME&amp;#39; =&amp;gt; &amp;#34;/home/#{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]}&amp;#34;
  not_if { File.exists?(&amp;#34;/home/#{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]}/.rbenv/versions/#{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;version&amp;#39;]}&amp;#34;) }
end

# set rbenv global
execute &amp;#34;rbenv global #{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;version&amp;#39;]}&amp;#34; do
  command &amp;#34;/home/#{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]}/.rbenv/bin/rbenv global #{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;version&amp;#39;]}&amp;#34;
  user   node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]
  group  node[&amp;#39;ruby-env&amp;#39;][&amp;#39;group&amp;#39;]
  environment &amp;#39;HOME&amp;#39; =&amp;gt; &amp;#34;/home/#{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]}&amp;#34;
end

# install rbenv-rehash and bundler gem
%w{rbenv-rehash bundler}.each do |gem_name|
  execute &amp;#34;gem install #{gem_name}&amp;#34; do
    command &amp;#34;/home/#{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]}/.rbenv/shims/gem install #{gem_name}&amp;#34;
    user   node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]
    group  node[&amp;#39;ruby-env&amp;#39;][&amp;#39;group&amp;#39;]
    environment &amp;#39;HOME&amp;#39; =&amp;gt; &amp;#34;/home/#{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]}&amp;#34;
    not_if &amp;#34;/home/#{node[&amp;#39;ruby-env&amp;#39;][&amp;#39;user&amp;#39;]}/.rbenv/shims/gem list | grep #{gem_name}&amp;#34;
  end
end&lt;/pre&gt;&lt;p&gt;テンプレートのファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# site-cookbooks/ruby-env/templates/default/.bash_profile.erb

# Get the aliases and functions
if [ -f ~/.bashrc ]; then
  ~/.bashrc
fi

# User specific environment and startup programs
PATH=$PATH:$HOME/bin
export PATH=&amp;#34;$HOME/.rbenv/bin:$PATH&amp;#34;
eval &amp;#34;$(rbenv init -)&amp;#34;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ruby-env&lt;/code&gt;ディレクトリ配下の&lt;code&gt;attributes&lt;/code&gt;や&lt;code&gt;definitions&lt;/code&gt;などの使用していないディレクトリは削除しておきます。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;chef-community-cookbook&quot;&gt;5. コミュニティクックブックのダウンロード&lt;/h3&gt;&lt;code&gt;Berksfile&lt;/code&gt;にコミュニティクックブックを記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Berksfile&lt;/span&gt;
source &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;https://supermarket.chef.io&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

cookbook &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;selinux&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
cookbook &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
cookbook &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
cookbook &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ruby_build&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
cookbook &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ruby-env&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;./site-cookbooks/ruby-env&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
cookbook &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;nodejs&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
cookbook &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
cookbook &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;postgresql&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
cookbook &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
cookbook &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;imagemagick&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
cookbook &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;td-agent&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;berks&lt;/code&gt;コマンドでBerksfileに記載したコミュニティクックブックをダウンロードします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ bundle exec berks vendor ./cookbooks&lt;/pre&gt;&lt;p&gt;&lt;code&gt;cookbooks&lt;/code&gt;配下にコミュニティクックブックがダウンロードされます。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;chef-role&quot;&gt;6. ロールを設定&lt;/h3&gt;ロールはWebサーバ、DBサーバなどのサーバの役割に応じた単位で作成します。&lt;/p&gt;&lt;p&gt;サーバ共通用ロール(roles/base.json)&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;base&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;chef_type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;role&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;json_class&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Chef::Role&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;recipe[selinux::disabled]&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;recipe[time-zone]&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;recipe[user]&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;recipe[git]&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;recipe[td-agent]&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Webサーバ用ロール(roles/web.json)&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;web&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;chef_type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;role&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;json_class&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Chef::Role&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;default_attributes&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;env&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ruby&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ruby-env&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2.2.2&amp;quot;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;rbenv_url&amp;quot;&lt;/span&gt;:      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;https://github.com/sstephenson/rbenv&amp;quot;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ruby-build_url&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;https://github.com/sstephenson/ruby-build&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;recipe[yum-epel]&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;recipe[nginx]&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;recipe[nginx-conf]&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;recipe[nodejs]&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;recipe[ruby-env]&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;recipe[postgresql]&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;recipe[imagemagick]&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;default_attributes&lt;/code&gt;は、ロールのデフォルト値を設定します。&lt;br /&gt;
environments配下の方が優先度が高いので、開発や本番環境などで設定を変えたいときは、この値を上書きできます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;DBサーバ用ロール(roles/db.json)&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;db&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;chef_type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;role&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;json_class&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Chef::Role&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;recipe[postgresql]&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
キャッシュサーバ用ロール(roles/cache.rb)&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;cache&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;chef_type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;role&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;json_class&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Chef::Role&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;recipe[redis]&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;chef-environments&quot;&gt;7. environmentsを設定&lt;/h3&gt;environmentsを使えば、開発、ステージング、本番環境など環境ごとに変数を設定できる。&lt;/p&gt;&lt;p&gt;ローカル開発環境用の設定(environments/local-development.json)&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;local-development&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;local virtual machine development environment&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;chef_type&amp;quot;&lt;/span&gt;:   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;environment&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;json_class&amp;quot;&lt;/span&gt;:  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Chef::Environment&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;default_attributes&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;vagrant&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ruby-env&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;:    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;vagrant&amp;quot;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;group&amp;quot;&lt;/span&gt;:   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;vagrant&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;override_attributes&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;chef-node&quot;&gt;8. ノードを設定&lt;/h3&gt;ノードはChefではサーバを表し、サーバに適用するレシピやロールを記載します。&lt;/p&gt;&lt;p&gt;ローカル環境のWebサーバ用(nodes/local-development.json)&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;environment&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;local-development&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;role[base]&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;role[web]&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;role[db]&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;role[cache]&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;chef-vagrant&quot;&gt;9. 仮想マシンの作成&lt;/h3&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150719/1437249020&quot; target=&quot;&quot;&gt;Vagrant入門&lt;/a&gt;を参考に、ローカルに仮想マシンを作成します。&lt;br /&gt;
途中の手順で、&lt;code&gt;vagrant ssh-config --host web &gt;&gt; ~/.ssh/config&lt;/code&gt;を&lt;code&gt;vagrant ssh-config --host local-development &gt;&gt; ~/.ssh/config&lt;/code&gt;で実行しておいてください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;chef-vagrant-chef&quot;&gt;10. 仮想マシンにChefの適用&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# リモートサーバー(仮想マシン)にchef-soloのインストール
$ bundle exec knife solo prepare local-development

# リモートサーバーにレシピを適用する
$ bundle exec knife solo cook local-development&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;chef-test&quot;&gt;11. 動作確認テスト&lt;/h3&gt;&lt;code&gt;chef/samples&lt;/code&gt;に動作確認用のrailsアプリ(unicornの設定もあり)を作成していますので、それを使ってRailsの画面が開けるか確認します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;cp -rp samples/sample_rails synced_folder/.
vagrant ssh
&amp;gt; cd synced_folder/sample_rails
&amp;gt; bundle install
&amp;gt; bundle exec rake db:migrate
&amp;gt; bundle exec unicorn -c config/unicorn.rb&lt;/pre&gt;&lt;p&gt;ローカルマシンからブラウザで`&lt;a href=&quot;http://192.168.33.10/unicorn&quot;&gt;http://192.168.33.10/unicorn&lt;/a&gt;`にアクセスすると、Railsの画面が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150720/20150720235203.png&quot; alt=&quot;f:id:nipe880324:20150720235203p:plain&quot; title=&quot;f:id:nipe880324:20150720235203p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考資料&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Chef実践入門&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="インフラ" label="インフラ" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>Vagrant入門。簡単にローカル環境に仮想マシン(VM)を作る</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150719/1437249020"/>
        <id>hatenablog://entry/8454420450102115852</id>
        <published>2015-07-19T04:50:20+09:00</published>
        <updated>2015-07-20T20:19:18+09:00</updated>
        <summary type="html">Vagrantを使うことで本当に簡単に仮想マシン(VM)をローカル環境に作成できます。
主な利用用途としては、開発用マシンをVagrantで作成できるようにしておくことで、同じ構成（OS、ミドルウェア、バージョンなど）の開発マシンを開発メンバーに配布することができます。そのため、環境構築の手間が省け、バージョンが違うなどといった問題も起こりません。
</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150719/20150719044527.png&quot; alt=&quot;f:id:nipe880324:20150719044527p:plain&quot; title=&quot;f:id:nipe880324:20150719044527p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Vagrantを使うことで&lt;b&gt;本当に簡単に仮想マシン(VM)をローカル環境&lt;/b&gt;に作成できます。&lt;/p&gt;&lt;p&gt;主な利用用途としては、開発用マシンをVagrantで作成できるようにしておくことで、同じ構成（OS、ミドルウェア、バージョンなど）の開発マシンを開発メンバーに配布することができます。そのため、&lt;b&gt;環境構築の手間が省け、バージョンが違うなどといった問題も起こりません。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;デメリットとしては、VM上で動かすので動作が遅くなりがちや、ホスト(PC)との連携に工夫が必要といったわずらわしさもあります。&lt;/p&gt;&lt;p&gt;しかし、仮想マシンなのでサーバー環境を作成、削除が簡単にできるので、ローカル環境では行いづらいマシンの環境系のテストが簡単に行えるのも魅力ですのでVagrantは必須の知識だと思います。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#vagrant-install&quot;&gt;VagrantとVirtualBoxのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vagrant-init&quot;&gt;Vagrantfileを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vagrant-box-add&quot;&gt;Vagrantにボックスを追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vagrant-box-list&quot;&gt;ボックス一覧の確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vagrant-setting&quot;&gt;Vagrantfileの設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vagrant-sync-folder&quot;&gt;ホストとVMの共有フォルダ作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vagrant-up&quot;&gt;仮想マシンの起動&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vagrant-ssh&quot;&gt;仮想マシンにログイン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vagrant-ssh-config&quot;&gt;sshコマンドでログイン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vagrant-halt&quot;&gt;仮想マシンの停止&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vagrant-commands&quot;&gt;Vagrantコマンド一覧(よく使うやつ)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;MacOS 10&lt;/li&gt;
&lt;li&gt;Vagrant 1.7.2&lt;/li&gt;
&lt;li&gt;VirtualBox 4.2.38&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;vagrant-install&quot;&gt;1. VagrantとVirtualBoxのインストール&lt;/h3&gt;以下のサイトからダウンロードか、brewコマンドでインストールします。&lt;/p&gt;&lt;p&gt;サイトからダウンロードしてくる場合&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot; target=&quot;_blank&quot;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot;&gt;VitualBox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;brewコマンドの場合(brewがインストールされている必要がある)&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ brew tap caskroom/cask
$ brew install brew-cask
$ brew cask install virtualbox
$ brew cask install vagrant&lt;/pre&gt;&lt;p&gt;VitualBoxは仮想マシンを管理できるソフトです。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;vagrant-init&quot;&gt;2. Vagrantfileを作成&lt;/h3&gt;Vagrantを使っていくホームディレクトリ(project)を作成し、Vagrantの設定ファイル(Vagrantfile)を作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ mkdir project &amp;amp;&amp;amp; cd project
$ vagrant init&lt;/pre&gt;&lt;p&gt;Vagrantfileはデフォルトで多くの設定がコメントアウトされています。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;vagrant-box-add&quot;&gt;3. Vagrantにボックスを追加&lt;/h3&gt;CentOS 6.6 x64 のボックスを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ vagrant box add chef/centos-6.6

# 次のような質問がでてくるので、virtualboxの1を選びます
1) virtualbox
3) vmware_desktop

Enter your choice: 1&lt;/pre&gt;&lt;p&gt;Vagrantでは簡単にOSを作成できるようにOSのベースイメージ（&lt;b&gt;ボックス&lt;/b&gt;と呼ばれる）が用意されています。&lt;br /&gt;
&lt;a href=&quot;https://atlas.hashicorp.com/boxes/search&quot;&gt;Discover Vagrant Boxes | Atlas by HashiCorp&lt;/a&gt;に様々なボックスが公開されています。&lt;br /&gt;
&lt;code&gt;chef/centos-6.6&lt;/code&gt;もここから探したもので、CentOS 6.6 x64 のボックスです。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;vagrant-box-list&quot;&gt;4. ボックス一覧の確認&lt;/h3&gt;ボックスが追加されているか確認します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ vagrant box list
chef/centos-6.6 (virtualbox, 1.0.0)&lt;/pre&gt;&lt;p&gt;ちなみに、&lt;code&gt;vagrant box list [ボックス名(chef/centos-6.6 など)]&lt;/code&gt;でボックスを削除できます。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;vagrant-setting&quot;&gt;5. Vagrantfileの設定&lt;/h3&gt;インストールしたボックスを使うように設定します。また、超基本的な設定をします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Vagrantfile&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Vagrant&lt;/span&gt;.configure(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;config&lt;/span&gt;|
  &lt;span class=&quot;synComment&quot;&gt;# ボックス名を設定。設定したボックスのOSがインストールされる&lt;/span&gt;
  config.vm.box = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;chef/centos-6.6&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# ホスト(PC)からVMにアクセスできるプライベートIPを設定&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# VM上でアプリを作ったときに、PCのブラウザからこのIPアドレス(192.168.33.10)を使ってアクセスできる&lt;/span&gt;
  config.vm.network &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;private_network&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;ip&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;192.168.33.10&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 共有フォルダの設定（PCとVMでファイルを共有できる)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ホストのsync_folderとVMの/home/vagrant/sync_folderをNFSで共有する&lt;/span&gt;
  config.vm.synced_folder &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;./sync_folder&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/home/vagrant/sync_folder&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;nfs&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;もし設定を変更した場合、&lt;code&gt;vagrant reload&lt;/code&gt;を行うことで反映できます。&lt;br /&gt;
設定は他にもでき、詳細は&lt;a href=&quot;https://docs.vagrantup.com/v2/&quot; target=&quot;_blank&quot;&gt;Vagrant公式ドキュメント&lt;/a&gt;を見てください&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;vagrant-sync-folder&quot;&gt;6. ホストとVMの共有フォルダ作成&lt;/h3&gt;&lt;code&gt;vm.synced_folder&lt;/code&gt;で設定した&lt;code&gt;sync_folder&lt;/code&gt;をホスト(PC)側に作成しておきます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ mkdir sync_folder&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;vagrant-up&quot;&gt;7. 仮想マシンの起動&lt;/h3&gt;仮想マシンの作成、起動、ボックス（OS）のインストールを行います。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ vagrant up&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Vagrantfile&lt;/code&gt;の設定内容が読み込まれて、VirtualBoxに仮想マシンが作成され、その上にボックスのOS(CentOS 6.4)がインストールされます。&lt;br /&gt;
ちなみに、&lt;code&gt;vagrant destroy&lt;/code&gt;で作成したVMを削除することができます。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;vagrant-ssh&quot;&gt;8. 仮想マシンにログイン&lt;/h3&gt;作成したOS(CentOS 6.4)にログインします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ vagrant ssh

[vagrant@localhost ~]$ ls
sync_folder  # 共有フォルダが表示されている
[vagrant@localhost ~]$ exit
logout&lt;/pre&gt;&lt;p&gt;ユーザーは&lt;code&gt;Vagrant&lt;/code&gt;でログインし、ホームフォルダは&lt;code&gt;/home/vagrant&lt;/code&gt;です。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;vagrant-ssh-config&quot;&gt;9. sshでログインする&lt;/h3&gt;&lt;code&gt;vagrant ssh-config&lt;/code&gt;コマンドによりsshでVagrantで作成した仮想マシンにログインできるようになります。sshでログインしたいときのために設定しておきます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ touch ~/.ssh/config
$ vagrant ssh-config --host web &amp;gt;&amp;gt; ~/.ssh/config

# ssh webでログインできるようになる
$ ssh web
[vagrant@localhost ~]$ &lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;vagrant-halt&quot;&gt;10. 仮想マシンの停止&lt;/h3&gt;最後にVagrantのVMを使わないときはCPUやメモリの消費を抑えるために留めておきます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;vagrant halt&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;vagrant-commands&quot;&gt;11. Vagrantコマンド一覧(よく使うやつ)&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vagrant up ... VMの作成/起動&lt;/li&gt;
&lt;li&gt;vagrant suspend ... VMの一時停止&lt;/li&gt;
&lt;li&gt;vagrant halt ... VMの電源OFF&lt;/li&gt;
&lt;li&gt;vagrant ssh ... VMにログイン&lt;/li&gt;
&lt;li&gt;vagrant reload ... VMの設定変更(Vagrantfileを変更したときに呼ぶ)&lt;/li&gt;
&lt;li&gt;vagrant destroy ... VMの削除&lt;/li&gt;
&lt;li&gt;vagrant list-commands ... コマンド一覧を表示&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.vagrantup.com/v2/&quot;&gt;Vagrant Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="インフラ" label="インフラ" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>いまさらながらRails4.1から導入されたEnumが便利なのでまとめてみた</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150710/1436461745"/>
        <id>hatenablog://entry/8454420450100885818</id>
        <published>2015-07-10T02:09:05+09:00</published>
        <updated>2015-07-10T02:11:12+09:00</updated>
        <summary type="html">Rails4.1から導入されたEnumの挙動について忘れることがあるので簡単にまとめました。
enumの定義、enumを定義したことにより使える便利なメソッドなどをまとめました。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150710/20150710020807.jpg&quot; alt=&quot;f:id:nipe880324:20150710020807j:plain:w360&quot; title=&quot;f:id:nipe880324:20150710020807j:plain:w360&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:360px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;&lt;a href=&quot;https://www.flickr.com/photos/21561428@N03/&quot;&gt;las - initially (Lori Semprevio) | Flickr - Photo Sharing!&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Rails4.1から導入されたEnumの挙動について忘れることがあるので簡単にまとめました。&lt;br /&gt;
enumの定義、enumを定義したことにより使える便利なメソッドなどをまとめました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#ar-enum-define&quot;&gt;enumのスキーマ定義&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ar-enum-method&quot;&gt;enumで使えるメソッド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ar-enum-search&quot;&gt;enumの値を検索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ar-enum-notice&quot;&gt;enumの注意点&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.3&lt;/li&gt;
&lt;li&gt;Ruby 2.2.2&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;h3 id=&quot;ar-enum-define&quot;&gt;enumの定義&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;次のように、&lt;code&gt;enum&lt;/code&gt;、属性名、属性の値（ハッシュ）で指定することでEnumを定義することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# enumの定義（キーと数字のハッシュを渡す。数字がDBカラムに設定される）&lt;/span&gt;
  enum &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;draft&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;published&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
DBカラムのデフォルト値をenumの初期値と合わせておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateArticles&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.integer &lt;span class=&quot;synConstant&quot;&gt;:status&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;null&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;

      t.timestamps &lt;span class=&quot;synConstant&quot;&gt;null&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    add_index &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:status&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;ar-enum-method&quot;&gt;enumで使えるメソッド&lt;/h3&gt;enumで定義したハッシュの&lt;code&gt;キー名+?&lt;/code&gt;でそのキーの値が設定されているかどうかを返します。&lt;br /&gt;
また、&lt;code&gt;キー名+!&lt;/code&gt;で値を設定し、DBに保存します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; #&amp;lt;Article id: nil, status: 0, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

article.status &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;draft&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# statusがdraftか確認&lt;/span&gt;
article.draft? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# statusがpublishedか確認&lt;/span&gt;
article.published? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# statusをpublishedに設定&lt;/span&gt;
article.published!
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; INSERT INTO &amp;quot;articles&amp;quot; (&amp;quot;status&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;updated_at&amp;quot;) VALUES (?, ?, ?)  [[&amp;quot;status&amp;quot;, 1], [&amp;quot;created_at&amp;quot;, &amp;quot;2015-07-09 ...&amp;quot;], [&amp;quot;updated_at&amp;quot;, &amp;quot;2015-07-09 ...&amp;quot;]]&lt;/span&gt;

article.status &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;published&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
enumで指定した属性名の複数形のメソッドを呼び出すと、enumで指定したハッシュを取得できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# enumの属性名の複数形でハッシュを取得できる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.statuses &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; {&amp;quot;draft&amp;quot;=&amp;gt;0, &amp;quot;published&amp;quot;=&amp;gt;1}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ハッシュとしてアクセスできる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.statuses[&lt;span class=&quot;synConstant&quot;&gt;:draft&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 0&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
enumで定義したハッシュの値以外を設定しようとするとexceptionが発生します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# キー値で設定できる&lt;/span&gt;
article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;)
article.published? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# バリューでも設定できる&lt;/span&gt;
article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.statuses[&lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;])
article.published? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ハッシュで定義されていない値を設定しようとするとエラーが発生します&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;90&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; ArgumentError: &#39;90&#39; is not a valid status&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:hoge&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; ArgumentError: &#39;hoge&#39; is not a valid status&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;ar-enum-search&quot;&gt;Enumの値を検索&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;enumのキーをスコープとして使うことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.published.where(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at &amp;gt; ?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,  &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;.days.ago)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; SELECT &amp;quot;articles&amp;quot;.* FROM &amp;quot;articles&amp;quot; WHERE &amp;quot;articles&amp;quot;.&amp;quot;status&amp;quot; = ? AND (created_at &amp;gt; &#39;2015-07-06 ...&#39;)  [[&amp;quot;status&amp;quot;, 1]]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# また、複数のキーを指定することもできますが、ANDなので検索結果は必ず0になってしまいます&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.draft.published
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; SELECT &amp;quot;articles&amp;quot;.* FROM &amp;quot;articles&amp;quot; WHERE &amp;quot;articles&amp;quot;.&amp;quot;status&amp;quot; = ? AND &amp;quot;articles&amp;quot;.&amp;quot;status&amp;quot; = ?  [[&amp;quot;status&amp;quot;, 0], [&amp;quot;status&amp;quot;, 1]]&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; #&amp;lt;ActiveRecord::Relation []&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
検索するときは次のようにもできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.where(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;status &amp;lt;&amp;gt; ?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.statuses[&lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;])
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; SELECT &amp;quot;articles&amp;quot;.* FROM &amp;quot;articles&amp;quot; WHERE (status &amp;lt;&amp;gt; 1)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;ar-enum-notice&quot;&gt;Enumの注意点&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;enumを次のように配列でも定義できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  enum &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:draft&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;]
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;その場合、DBの値は、配列の添え字と同じ値になります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.create
article.status &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; draft&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# DB値は 0&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そのため、値の追加、削除をしたときに、配列の追加場所を気にしないと、DBの値とenumのカラムの意味が異なり、バグが発生してしまいます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# judgedを追加。judgedの値は配列の添え字の1になるので、&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# publishedだった記事がjudgedとして判断されてしまう&lt;/span&gt;
  enum &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:draft&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:judged&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;]
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.statuses[&lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;])
article.status     &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;published&amp;quot; (statusが1として登録される)&lt;/span&gt;
article.published? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# enumの定義を更新する(judgedが1になる)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 先ほど登録したArticleのstatusを確認するとjudged(1)になる&lt;/span&gt;
article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.last
article.status  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;judged&amp;quot;&lt;/span&gt;
article.judged? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/blob/master/activerecord/lib/active_record/enum.rb&quot;&gt;rails/enum.rb at master &amp;middot; rails/rails &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sugamasao.hatenablog.com/entry/2014/03/26/110759&quot;&gt;Rails 4.1&amp;#x306E;enum&amp;#x306E;&amp;#x6319;&amp;#x52D5; - &amp;#x3059;&amp;#x304C;&amp;#x30D6;&amp;#x30ED;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;</content>
        
        
        <category term="Rails初級" label="Rails初級" />
        
        <category term="Rails Model" label="Rails Model" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>RailsでRoarを使ってAPIサーバーとAPIクライアントを作る</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150708/1436284476"/>
        <id>hatenablog://entry/8454420450100658763</id>
        <published>2015-07-08T00:54:36+09:00</published>
        <updated>2015-07-08T00:58:22+09:00</updated>
        <summary type="html">RoarはRepresenterを使ってRESTなAPIをパース、レンダーすることができるgemです。
つまり、Roarを使うことで、RailsでJSONを返すAPIサーバーを作成したり、逆に、APIサーバーにアクセスするAPIクライアントをRubyで作れます。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150708/20150708005750.jpg&quot; alt=&quot;f:id:nipe880324:20150708005750j:plain:w420&quot; title=&quot;f:id:nipe880324:20150708005750j:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;&lt;a href=&quot;https://www.flickr.com/photos/130732751@N03/&quot;&gt;samuelrodgers752 | Flickr - Photo Sharing!&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/apotonick/roar&quot; target=&quot;_blank&quot;&gt;Roar&lt;/a&gt;はRepresenterを使ってRESTなAPIをパース、レンダーすることができるgemです。&lt;br /&gt;
つまり、Roarを使うことで、RailsでJSONを返すAPIサーバーを作成したり、逆に、APIサーバーにアクセスするAPIクライアントをRubyで作れます。&lt;/p&gt;&lt;p&gt;下記に記載しましたが、有名なgemに比べて、メリットとしては、Rubyでサーバーとクライアントを作る場合、同じような箇所を幾分か共有できる点です。&lt;br /&gt;
デメリットとしては、個人的にパースやレンダー時にエラーが発生してもデバッグしづらく対処しづらいことです。&lt;/p&gt;&lt;p&gt;サーバー側でAPIを作る場合、「&lt;a href=&quot;https://www.ruby-toolbox.com/categories/API_Builders&quot; target=&quot;_blank&quot;&gt;Ruby Toolbox - API Builders&lt;/a&gt;」によると、jbuilderやGrape、Rablなどが人気のようです。&lt;br /&gt;
APIにアクセスするクライアントを作る場合、「&lt;a href=&quot;https://www.ruby-toolbox.com/categories/http_clients&quot; target=&quot;_blank&quot;&gt;Ruby Toolbox - HTTP Clients&lt;/a&gt;」によるとRest-ClientやFaradayなどが人気です。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    &lt;p&gt;&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-usage&quot;&gt;1. Roarの簡単な使い方&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-install&quot;&gt;1.1. Railsにインストール&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-define-representer&quot;&gt;1.2. Representerの定義&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-render&quot;&gt;1.3. レンダー(JSON, Hash, XML)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-parse&quot;&gt;1.4. パース(JSON, Hash, XML)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-decorator&quot;&gt;1.5. Decoratorの定義と使い方&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-corrabolation&quot;&gt;2. Roarでクライアントとサーバーの連携&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-abstract&quot;&gt;2.1. 概要&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-show&quot;&gt;2.2. showアクション(単一アイテムの取得)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-index&quot;&gt;2.3. indexアクション(複数アイテムの取得)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-cud&quot;&gt;2.4. create, update, destroyアクション(アイテムの作成、更新、削除)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-cud&quot;&gt;2.5. 多対多関連のCUD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.3&lt;/li&gt;
&lt;li&gt;Ruby 2.2.0&lt;/li&gt;
&lt;li&gt;Roar 1.0.1&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;roar-usage&quot;&gt;1. Roarの簡単な使い方&lt;/h3&gt;&lt;h3 id=&quot;roar-install&quot;&gt;1.1. Railsにインストール&lt;/h3&gt;&lt;code&gt;Gemfile&lt;/code&gt;に追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;roar-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt;を実施すれば完了です。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;roar-define-representer&quot;&gt;1.2. Representerの定義&lt;/h3&gt;&lt;code&gt;rails g representer&lt;/code&gt;コマンドでRepresenterを作ることができます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g representer Tweet id content
      create  app/representers/tweet_representer.rb&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;app/representers&lt;/code&gt;配下にRpresenterが作成されます。&lt;br /&gt;
&lt;code&gt;property&lt;/code&gt;でRepresenterでレンダーやパースする値を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/representers/user_representer.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;

  property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
  property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Representerの定義では、他にも、パースやレンダー時に値を変換したり、パースやレンダーをスキップしたりといろいろとカスタマイズができるので、&lt;br /&gt;
困ったら以下のREADMEを読むと良いと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apotonick/roar&quot; target=&quot;_blank&quot;&gt;roar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apotonick/representable&quot; target=&quot;_blank&quot;&gt;representable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apotonick/roar-rails&quot; target=&quot;_blank&quot;&gt;roar-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-render&quot;&gt;1.3. レンダー(JSON, Hash, XML)&lt;/h3&gt;定義したRepresenterを&lt;code&gt;extend&lt;/code&gt;すし、&lt;code&gt;to_json&lt;/code&gt;、&lt;code&gt;to_hash&lt;/code&gt;メソッドを呼ぶことで、JSONやHashを出力することができます。&lt;br /&gt;
&lt;code&gt;TweetRepresenter&lt;/code&gt;で&lt;code&gt;id&lt;/code&gt;と&lt;code&gt;content&lt;/code&gt;を定義しているのでその2つしか出力されません。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;; &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
tweet.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)

tweet.to_json
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&amp;quot;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;content\&amp;quot;:\&amp;quot;Hoge\&amp;quot;}&amp;quot;&lt;/span&gt;

tweet.to_hash
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;id&amp;quot;=&amp;gt;1, &amp;quot;content&amp;quot;=&amp;gt;&amp;quot;Hoge&amp;quot;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、RailsでJSONを返したい場合は、次のようにします。&lt;br /&gt;
&lt;code&gt;render json:&lt;/code&gt;は引数に渡したオブジェクトの&lt;code&gt;to_json&lt;/code&gt;メソッドを呼び出した結果を返します。&lt;br /&gt;
そのため、Representerで定義した&lt;code&gt;id&lt;/code&gt;と&lt;code&gt;content&lt;/code&gt;のみが返されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/tweets_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;TweetsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  skip_before_action &lt;span class=&quot;synConstant&quot;&gt;:verify_authenticity_token&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
    tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;]).extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
    render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: tweet
    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&amp;quot;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;content\&amp;quot;:\&amp;quot;Hoge\&amp;quot;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
XML形式で出力したい場合は、Representerに&lt;code&gt;Roar::XML&lt;/code&gt;をincludeし、&lt;code&gt;to_xml&lt;/code&gt;メソッドを呼び出します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;; &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;XML&lt;/span&gt;

  property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
  property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.last
tweet.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
tweet.to_xml
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;&amp;lt;tweet&amp;gt;\n  &amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;\n  &amp;lt;content&amp;gt;Hoge&amp;lt;/content&amp;gt;\n&amp;lt;/tweet&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-parse&quot;&gt;1.4. パース(JSON, Hash, XML)&lt;/h3&gt;定義したRepresenterを&lt;code&gt;extend&lt;/code&gt;すし、&lt;code&gt;to_json&lt;/code&gt;、&lt;code&gt;to_hash&lt;/code&gt;メソッドを呼ぶことで、JSONやHashを出力することができます。&lt;br /&gt;
&lt;code&gt;TweetRepresenter&lt;/code&gt;で&lt;code&gt;id&lt;/code&gt;と&lt;code&gt;content&lt;/code&gt;を定義しているのでその2つしか出力されません。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;; &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
tweet.from_json(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;content\&amp;quot;:\&amp;quot;Hoge\&amp;quot;}&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Tweet id: 1, content: &amp;quot;Hoge&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
tweet.from_hash({ &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; })
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Tweet id: 1, content: &amp;quot;Hoge&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# from_hashはHashのキーがシンボルの場合うまく認識してくれません。&lt;/span&gt;
tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
tweet.from_hash({ &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; })
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Tweet id: nil, content: nil, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# with_indifferent_accessを使いましょう&lt;/span&gt;
tweet.from_hash({ &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }.with_indifferent_access)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Tweet id: 1, content: &amp;quot;Hoge&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、RailsでJSONやHashを受け取って、オブジェクトを作成したい場合は、&lt;code&gt;from_json&lt;/code&gt;や&lt;code&gt;from_hash&lt;/code&gt;を使います。&lt;br /&gt;
Representerで定義した&lt;code&gt;id&lt;/code&gt;と&lt;code&gt;content&lt;/code&gt;のみが取得してオブジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/tweets_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;TweetsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  skip_before_action &lt;span class=&quot;synConstant&quot;&gt;:verify_authenticity_token&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
    tweet.from_hash(params[&lt;span class=&quot;synConstant&quot;&gt;:tweet&lt;/span&gt;])      &lt;span class=&quot;synComment&quot;&gt;# httpリクエストの場合&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# tweet.from_json(request.body.read) # jsonリクエストの場合&lt;/span&gt;

    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; tweet.save
      render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: tweet, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:created&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: tweet.errors.full_messages, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:unprocessable_entity&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
XMLをパースしたい場合も、レンダーと同じようにRepresenterに&lt;code&gt;Roar::XML&lt;/code&gt;をincludeし、&lt;code&gt;from_xml&lt;/code&gt;を呼び出します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;; &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;XML&lt;/span&gt;

  property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
  property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

xml =&amp;lt;&amp;lt;&lt;span class=&quot;synSpecial&quot;&gt;XML&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;tweet&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  &amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  &amp;lt;content&amp;gt;Hoge&amp;lt;/content&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;/tweet&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;XML&lt;/span&gt;

tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new
tweet.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
tweet.from_xml xml
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Tweet id: 1, content: &amp;quot;Hoge&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-decorator&quot;&gt;1.5. Decoratorの定義と使い方&lt;/h3&gt;パフォーマンスやオブジェクト汚染のため&lt;code&gt;extend&lt;/code&gt;が嫌いな人のために、デコレーターで実行することもできます。&lt;br /&gt;
次のように&lt;code&gt;Roar::Decorator&lt;/code&gt;を継承することでデコレーターを定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/representers/tweet_representer.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Hypermedia&lt;/span&gt;

  property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
  property &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# Decorator内の represented はデコレートするモデルを表します。&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
作成したデコレーターでラップします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/tweets_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;TweetsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  skip_before_action &lt;span class=&quot;synConstant&quot;&gt;:verify_authenticity_token&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
    tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
    decorator = &lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;.new(tweet)
    render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: decorator
    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&amp;quot;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;content\&amp;quot;:\&amp;quot;Hoge\&amp;quot;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;roar-corrabolation&quot;&gt;2. Roarでクライアントとサーバーの連携&lt;/h3&gt;&lt;h3 id=&quot;roar-abstract&quot;&gt;2.1. 概要&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;Roarでサーバー側のRailsアプリ(Tweet)とクライアント側のRailsアプリ(Blog)を連携するようにします。&lt;br /&gt;
サンプルは&lt;a href=&quot;https://github.com/nipe0324/rails_samples/tree/master/roar_test&quot; target=&quot;_blank&quot;&gt;roar_test - GitHub&lt;/a&gt;にあります。&lt;/p&gt;&lt;p&gt;シナリオとしては、Tweetアプリ(サーバー側)を既に運用しており、新しいBlogアプリ(クライアント側)を立ち上げようと考えていて、Tweetアプリにデータを公開したいというという感じをイメージして作りました。&lt;br /&gt;
ER図は次の通りで、クライアント側は&lt;code&gt;artciles&lt;/code&gt;しかないが、&lt;code&gt;artcile&lt;/code&gt;を投稿した時に、合わせてTag付きでTweetも投稿できるみたいなことをしています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150708/20150708005219.png&quot; alt=&quot;f:id:nipe880324:20150708005219p:plain:w420&quot; title=&quot;f:id:nipe880324:20150708005219p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;詳細はGitHubを参照してみればいいので、RoarでCRUDをしながら連携する方法の抜粋（かなり雑です）を記載しました。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;roar-show&quot;&gt;2.2. showアクション(単一アイテムの取得)&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;クライアントの詳細画面で、articleとtweetを表示します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150708/20150708005205.png&quot; alt=&quot;f:id:nipe880324:20150708005205p:plain:w420&quot; title=&quot;f:id:nipe880324:20150708005205p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;クライアントのコントローラーは次の通りです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/artcles_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ローカル(クライアント)DBから取得&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

  &lt;span class=&quot;synComment&quot;&gt;# Roarでサーバー側からデータを取得&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build.show(&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.remote_tweet_id)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Roarの定義とクライアントのコードです。&lt;br /&gt;
&lt;code&gt;Roar::Client&lt;/code&gt;をincludeすることで、get, post, put, deleteメソッドがincludeされます。&lt;br /&gt;
&lt;code&gt;build&lt;/code&gt;メソッドでクライアントを作成し、&lt;code&gt;show&lt;/code&gt;メソッドで、サーバー側のRailsにアクセスしています。&lt;br /&gt;
レスポンスは、&lt;code&gt;Reprsenter&lt;/code&gt;と&lt;code&gt;Client&lt;/code&gt;で定義されている、id, content, tagsをパースし、OpenStructの値として代入します。&lt;br /&gt;
このとき、&lt;code&gt;as&lt;/code&gt;オプションを使うことで、Tweet.id を Article.remote_tweet_id に変換しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/representer/json/tweet.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;OpenStruct&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      collection_representer &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;

      property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;

      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# only client side&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# ServerからClientへ受け取ったときの変換処理&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:remote_tweet_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;as&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;,    &lt;span class=&quot;synComment&quot;&gt;# Tweet.id =&amp;gt; Article.remote_tweet_id に変換&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;skip_render&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# Clientの作成メソッド(Singular用)&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;build&lt;/span&gt;
        ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;)
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# APIのURL&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;api_url&lt;/span&gt;
        &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;http://localhost:3001/api/tweets&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# リモートのTweetsController#showにアクセス&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;(id)
        get(&lt;span class=&quot;synConstant&quot;&gt;uri&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.api_url&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;id&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;as&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
サーバー側では、単純にServerをextendしているだけです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/tweets_controller.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
  render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.extend(::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;)
    &lt;span class=&quot;synComment&quot;&gt;# {&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   &amp;quot;id&amp;quot;: 1,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   &amp;quot;content&amp;quot;: &amp;quot;tweet 1&amp;quot;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   &amp;quot;tags&amp;quot;: [&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#     { &amp;quot;id&amp;quot;: 1000, &amp;quot;name&amp;quot;: &amp;quot;tag 1&amp;quot; },&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#     { &amp;quot;id&amp;quot;: 1001, &amp;quot;name&amp;quot;: &amp;quot;tag 2&amp;quot; }&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   ]&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# }&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
サーバー側のRepresenterです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;OpenStruct&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      collection_representer &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;

      property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;

      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;

      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;,
                        &lt;span class=&quot;synConstant&quot;&gt;parse_strategy&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:find_or_instantiate&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-index&quot;&gt;2.3. indexアクション(複数アイテムの取得)&lt;/h3&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;コレクションの取得の場合、コレクション用のクライアントを作成し、一覧を取得します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/articls_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@articles&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.all
  &lt;span class=&quot;synComment&quot;&gt;# コレクション用のクライアントを作成し、allメソッドで一覧を取得&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweets&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build_collection.all
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;コレクションを取得するには、配列をextendします。また、&lt;code&gt;Representer.for_collection&lt;/code&gt;をextendする必要が有ります。&lt;br /&gt;
&lt;code&gt;all&lt;/code&gt;メソッドは、サーバー側のTweetsController#indexアクションにアクセスします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/representers/json/tweet.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;OpenStruct&lt;/span&gt;
    ...

    &lt;span class=&quot;synComment&quot;&gt;# only client side&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
      ...

      &lt;span class=&quot;synComment&quot;&gt;# Clientの作成メソッド(Collection用)&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;build_collection&lt;/span&gt;
        [].extend(::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;).extend(::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;.for_collection)
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# リモートのTweetsController#indexにアクセス&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;all&lt;/span&gt;
        get(&lt;span class=&quot;synConstant&quot;&gt;uri&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.api_url, &lt;span class=&quot;synConstant&quot;&gt;as&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
サーバーのコントローラーでも&lt;code&gt;for_collection&lt;/code&gt;を使って、コレクションを返すようにしています。&lt;br /&gt;
&gt;|ruby&lt;br /&gt;
def index&lt;br /&gt;
  @tweets = Tweet.all&lt;br /&gt;
  render json: @tweets.extend(::Json::Tweet::Server.for_collection)&lt;br /&gt;
    # [&lt;br /&gt;
    #   {&lt;br /&gt;
    #     &quot;id&quot;: 1,&lt;br /&gt;
    #     &quot;content&quot;: &quot;tweet 1&quot;,&lt;br /&gt;
    #     &quot;tags&quot;: [&lt;br /&gt;
    #       { &quot;id&quot;: 1000, &quot;name&quot;: &quot;tag 1&quot; },&lt;br /&gt;
    #       { &quot;id&quot;: 1001, &quot;name&quot;: &quot;tag 2&quot; }&lt;br /&gt;
    #     ]&lt;br /&gt;
    #   },&lt;br /&gt;
    #   {&lt;br /&gt;
    #     &quot;id&quot;: 2,&lt;br /&gt;
    #     &quot;content&quot;: &quot;tweet 2&quot;,&lt;br /&gt;
    #     &quot;tags&quot;: []&lt;br /&gt;
    #   }&lt;br /&gt;
    # ]&lt;br /&gt;
end&lt;br /&gt;
|&lt;/p&gt;

&lt;/div&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-cud&quot;&gt;2.4. create, update, destroyアクション(アイテムの作成、更新、削除)&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;コレクションを作成し、作成、更新、削除を行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/articles_controller.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# POST /articles&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(article_params)

  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build.from_hash(params[&lt;span class=&quot;synConstant&quot;&gt;:article&lt;/span&gt;])
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.create
  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.remote_tweet_id = &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.remote_tweet_id

  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.save
    redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Article was successfully created.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
    render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# PATCH/PUT /articles/1&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;update&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build.from_hash(params[&lt;span class=&quot;synConstant&quot;&gt;:article&lt;/span&gt;])
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.update(&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.remote_tweet_id)

  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.update(article_params)
    redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Article was successfully updated.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
    render &lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DELETE /articles/1&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;destroy&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.destroy(&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.remote_tweet_id)

  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.destroy
  redirect_to articles_url, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Article was successfully destroyed.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-cud&quot;&gt;2.5. 多対多関連のCUD&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;TweetとTagは多対多関係です。&lt;/p&gt;&lt;p&gt;まず、クライアントサイドでは次のようにして、リクエストを送ります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 画面から次のようなパラメータがフォームから送られてきます。&lt;/span&gt;
{
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;✓&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;authenticity_token&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;xxx&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; {
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;article 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;client article&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; [{ &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;new tag&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }]
  },
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Update Article&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
}

&lt;span class=&quot;synComment&quot;&gt;# コントローラーで画面のフォーム情報をfrom_hashでパースして取得します&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# createメソッドでリクエストを送ります。&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
  ...
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build.from_hash(params[&lt;span class=&quot;synConstant&quot;&gt;:article&lt;/span&gt;])
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.create
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# from_hashのパース時に取得されるデータは次のように定義しています。&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;OpenStruct&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      collection_representer &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;

      property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;

      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# ClientからServerへのリクエストを送るときの変換処理&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;as&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;,  &lt;span class=&quot;synComment&quot;&gt;# Article.title =&amp;gt; Tag.content 用にキー名を変換&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;render_filter&lt;/span&gt;: -&amp;gt; (value, _doc, _args) { value.to_s[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;] + &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; } &lt;span class=&quot;synComment&quot;&gt;# Twitter用に文字列を短くする&lt;/span&gt;
      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;OpenStruct&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      collection_representer &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;

      property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# only client side&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;サーバーサイドでは次の通りです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# POSTされるjsonデータは次のようになりmす&lt;/span&gt;
{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;client art...&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;[{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}, {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}, {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;new tag&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}] }

&lt;span class=&quot;synComment&quot;&gt;# controllerで取得し、from_jsonでパースし、値を設定し保存&lt;/span&gt;
tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;).from_json(request.body.read)
tweet.save

&lt;span class=&quot;synComment&quot;&gt;# パースの内容はRepresenterで定義&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# parse_strategy: :find_or_instantiate はidが既にあればそのインスタンスを返し、&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# idがなければ新しいインスタンスを作成する&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;

  collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;,
                    &lt;span class=&quot;synConstant&quot;&gt;parse_strategy&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:find_or_instantiate&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;
</content>
        
        
        <category term="Rails中級" label="Rails中級" />
        
        <category term="API" label="API" />
        
        <category term="Rails Model" label="Rails Model" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>フォーム画面でページから離れるときにJavascript(JS)の警告を出す</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150607/1433652441"/>
        <id>hatenablog://entry/8454420450096771313</id>
        <published>2015-06-07T13:47:21+09:00</published>
        <updated>2015-06-08T00:09:53+09:00</updated>
        <summary type="html">上記のように、フォーム画面でページから離れるときにJavascript(JS)の警告を出す方法を説明します。実際の動作は次のリンクから確認できます。 ページを離れる時に警告を出す - jsfiddle</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150607/20150607133236.jpg&quot; alt=&quot;f:id:nipe880324:20150607133236j:plain&quot; title=&quot;f:id:nipe880324:20150607133236j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;上記のように、フォーム画面でページから離れるときにJavascript(JS)の警告を出す方法を説明します。&lt;/p&gt;&lt;p&gt;実際の動作は次のリンクから確認できます。&lt;br /&gt;
&lt;a href=&quot;https://jsfiddle.net/nipe0324/h0gutn6k/11/embedded/result/&quot; target=&quot;_blank&quot;&gt;ページを離れる時に警告を出す - jsfiddle&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;jQuery 2.1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;JSの内容&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;beforeunload&lt;/code&gt;イベントを使うことでこの動作を再現します。&lt;br /&gt;
&lt;code&gt;beforeunload&lt;/code&gt;は、ウインドウ(window)、ドキュメント(document)がアンロードされる前に発火するイベントです。&lt;br /&gt;
（あまりテストを行っていないのでバグがあるかもしれません。）&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&amp;lt;script type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&amp;gt;


$(&lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;).ready(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;synComment&quot;&gt;// 値が変更されたとき(input要素、select要素が変更された場合)に&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// ブラウザの戻るや更新ボタン、タブを閉じるときに&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 警告をだすようにする&lt;/span&gt;
  $(&lt;span class=&quot;synConstant&quot;&gt;&#39;input, textarea, select&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;keyup change&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    $(&lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;beforeunload&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;このページを離れると、入力したデータが削除されます。本当に移動しますか。&amp;quot;&lt;/span&gt;;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

  &lt;span class=&quot;synComment&quot;&gt;// 戻るリンクや送信ボタンなどの通常の方法で画面遷移した場合は、&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 通常通りアラートは表示されずに遷移する&lt;/span&gt;
  $(&lt;span class=&quot;synConstant&quot;&gt;&#39;a, input[type=submit]&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(e) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    $(&lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;).off(&lt;span class=&quot;synConstant&quot;&gt;&#39;beforeunload&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;HTML&lt;/h3&gt;
    &lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;フォーム画面&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;入力値が変更された時にブラウザの戻るや更新ボタン、タブを閉じるなどしたときにJavascriptのアラートを出す。&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;送信ボタンや戻るボタンの遷移時にはアラートを出さない。&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;値を変更して、リロード(F5)、ブラウザの戻るボタンなどを押してみてください&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt;|html|
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Value1&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Value2&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Value3&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; チェックボックス
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;commit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;送信&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synUnderlined&quot;&gt;戻る&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.koikikukan.com/archives/2013/03/11-005555.php&quot;&gt;&amp;#x30DA;&amp;#x30FC;&amp;#x30B8;&amp;#x3092;&amp;#x79FB;&amp;#x52D5;&amp;#xFF08;&amp;#x96E2;&amp;#x8131;&amp;#xFF09;&amp;#x3059;&amp;#x308B;&amp;#x3068;&amp;#x304D;&amp;#x306B;jQuery&amp;#x3067;&amp;#x8B66;&amp;#x544A;&amp;#x3092;&amp;#x51FA;&amp;#x3059;&amp;#x65B9;&amp;#x6CD5;: &amp;#x5C0F;&amp;#x7C8B;&amp;#x7A7A;&amp;#x9593;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload&quot;&gt;beforeunload - Event reference | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="Javascript" label="Javascript" />
        
        <category term="Rails初級" label="Rails初級" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
    <entry>
        <title>Postgresqlのデータ型一覧とRailsのマイグレーションの指定方法</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150607/1433606267"/>
        <id>hatenablog://entry/8454420450096729801</id>
        <published>2015-06-07T00:57:47+09:00</published>
        <updated>2015-06-07T01:06:04+09:00</updated>
        <summary type="html">Postgresqlの各データ型とRailsのマイグレーションでの指定方法をまとめました。数値データ型、通貨型、文字型、日付/時刻データ型、論理値データ型についてまとめました。</summary>
        <content type="html">&lt;p&gt;Postgresqlの各データ型とRailsのマイグレーションでの指定方法をまとめました。&lt;br /&gt;
次の目次にある、データ型についてまとめました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#postgresql-migration-int&quot;&gt;数値データ型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#postgresql-migration-money&quot;&gt;通貨型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#postgresql-migration-str&quot;&gt;文字型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#postgresql-migration-date&quot;&gt;日付/時刻データ型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#postgresql-migration-bool&quot;&gt;論理値データ型&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.2.0&lt;/li&gt;
&lt;li&gt;Rails 4.2.1&lt;/li&gt;
&lt;li&gt;Postgresql 9.4.1&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;postgresql-migration-int&quot;&gt;数値データ型&lt;/h3&gt;数値データ型には2、4、8バイト整数と、4、8バイト浮動小数点、精度設定が可能な数があります。&lt;/p&gt;&lt;p&gt;&lt;table border=&quot;1&quot; class=&quot;CALSTABLE&quot;&gt;
  &lt;colgroup&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;/colgroup&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;型名&lt;/th&gt;&lt;th&gt;格納サイズ&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;th&gt;範囲&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;smallint&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;2バイト&lt;/td&gt;&lt;td&gt;狭範囲の整数&lt;/td&gt;&lt;td&gt;-32768から+32767&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;integer&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;4バイト&lt;/td&gt;&lt;td&gt;典型的に使用する整数&lt;/td&gt;&lt;td&gt;-2147483648から+2147483647&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;bigint&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;8バイト&lt;/td&gt;&lt;td&gt;広範囲整数&lt;/td&gt;&lt;td&gt;-9223372036854775808から+9223372036854775807&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;decimal&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;可変長&lt;/td&gt;&lt;td&gt;ユーザ指定精度、正確、通貨などに使用&lt;/td&gt;&lt;td&gt;小数点前までは131072桁、小数点以降は16383桁&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;numeric&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;可変長&lt;/td&gt;&lt;td&gt;decimalと同じ&lt;/td&gt;&lt;td&gt;小数点前までは131072桁、小数点以降は16383桁&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;real&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;4バイト&lt;/td&gt;&lt;td&gt;可変精度、不正確&lt;/td&gt;&lt;td&gt;6桁精度&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;double precision&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;8バイト&lt;/td&gt;&lt;td&gt;可変精度、不正確&lt;/td&gt;&lt;td&gt;15桁精度&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;smallserial&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;2バイト&lt;/td&gt;&lt;td&gt;狭範囲自動整数&lt;/td&gt;&lt;td&gt;1から32767&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;serial&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;4バイト&lt;/td&gt;&lt;td&gt;自動増分整数&lt;/td&gt;&lt;td&gt;1から2147483647&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;bigserial&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;8バイト&lt;/td&gt;&lt;td&gt;広範囲自動増分整数&lt;/td&gt;&lt;td&gt;1から9223372036854775807&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# マイグレーションファイル&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateHoges&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:hoges&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.integer &lt;span class=&quot;synConstant&quot;&gt;:int2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# smallint型&lt;/span&gt;
      t.integer &lt;span class=&quot;synConstant&quot;&gt;:int4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# integer型&lt;/span&gt;
      t.integer &lt;span class=&quot;synConstant&quot;&gt;:int&lt;/span&gt;            &lt;span class=&quot;synComment&quot;&gt;# integer型&lt;/span&gt;
      t.integer &lt;span class=&quot;synConstant&quot;&gt;:int8&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# bigint型&lt;/span&gt;

      t.decimal &lt;span class=&quot;synConstant&quot;&gt;:decimal&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;precision&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;scale&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# decimal/numeric(10,2)型&lt;/span&gt;

      t.float &lt;span class=&quot;synConstant&quot;&gt;:real&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# real型&lt;/span&gt;
      t.float &lt;span class=&quot;synConstant&quot;&gt;:double_precision&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# double precision型&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;参考：&lt;a href=&quot;https://www.postgresql.jp/document/9.4/html/datatype-numeric.html#DATATYPE-INT&quot; target=&quot;_blank&quot;&gt;数値データ型の詳細な説明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;postgresql-migration-money&quot;&gt;通貨型&lt;/h3&gt;money型は貨幣金額を固定精度の小数点で格納します。&lt;br /&gt;
範囲は小数点2桁を想定しています。出力形式は通常は&quot;典型的な&quot;通貨書式となりますが、ロケールによって異なります。&lt;/p&gt;&lt;p&gt;&lt;table border=&quot;1&quot; class=&quot;CALSTABLE&quot;&gt;
  &lt;colgroup&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;/colgroup&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;型名&lt;/th&gt;&lt;th&gt;格納サイズ&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;th&gt;範囲&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;money&lt;/td&gt;&lt;td&gt;8バイト&lt;/td&gt;&lt;td&gt;貨幣金額&lt;/td&gt;&lt;td&gt;-92233720368547758.08 から +92233720368547758.07&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# マイグレーションファイル&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateHoges&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:hoges&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.money &lt;span class=&quot;synConstant&quot;&gt;:money&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# money型&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;参考：&lt;a href=&quot;https://www.postgresql.jp/document/9.4/html/datatype-money.html&quot; target=&quot;_blank&quot;&gt;通貨型の詳細な説明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;postgresql-migration-str&quot;&gt;文字型&lt;/h3&gt;&lt;table border=&quot;1&quot; class=&quot;CALSTABLE&quot;&gt;
  &lt;colgroup&gt;&lt;col&gt;&lt;col&gt;&lt;/colgroup&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;型名&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;character varying(&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;n&lt;/i&gt;&lt;/tt&gt;)&lt;/tt&gt;、&lt;tt class=&quot;TYPE&quot;&gt;varchar(&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;n&lt;/i&gt;&lt;/tt&gt;)&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;上限付き可変長&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;character(&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;n&lt;/i&gt;&lt;/tt&gt;)&lt;/tt&gt;、&lt;tt class=&quot;TYPE&quot;&gt;char(&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;n&lt;/i&gt;&lt;/tt&gt;)&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;空白で埋められた固定長&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;text&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;制限なし可変長&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# マイグレーションファイル&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateHoges&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:hoges&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.string &lt;span class=&quot;synConstant&quot;&gt;:str&lt;/span&gt;                &lt;span class=&quot;synComment&quot;&gt;# character varying型&lt;/span&gt;
      t.string &lt;span class=&quot;synConstant&quot;&gt;:str128&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;128&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# character varying(128)型&lt;/span&gt;
      t.text   &lt;span class=&quot;synConstant&quot;&gt;:text&lt;/span&gt;               &lt;span class=&quot;synComment&quot;&gt;# text型&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;参考：&lt;a href=&quot;https://www.postgresql.jp/document/9.4/html/datatype-character.html&quot; target=&quot;_blank&quot;&gt;日付/時刻データ型の詳細な説明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;postgresql-migration-date&quot;&gt;日付/時刻データ型&lt;/h3&gt;&lt;table border=&quot;1&quot; class=&quot;CALSTABLE&quot;&gt;
  &lt;colgroup&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;/colgroup&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;型名&lt;/th&gt;&lt;th&gt;格納サイズ&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;th&gt;最遠の過去&lt;/th&gt;&lt;th&gt;最遠の未来&lt;/th&gt;&lt;th&gt;精度&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;timestamp [ (&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;p&lt;/i&gt;&lt;/tt&gt;) ] [ without time zone ]&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;8 バイト&lt;/td&gt;&lt;td&gt;日付と時刻両方（時間帯なし）&lt;/td&gt;&lt;td&gt;4713 BC&lt;/td&gt;&lt;td&gt;294276 AD&lt;/td&gt;&lt;td&gt;1μ秒、14桁&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;timestamp [ (&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;p&lt;/i&gt;&lt;/tt&gt;) ] with time zone&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;8バイト&lt;/td&gt;&lt;td&gt;日付と時刻両方、時間帯付き&lt;/td&gt;&lt;td&gt;4713 BC&lt;/td&gt;&lt;td&gt;294276 AD&lt;/td&gt;&lt;td&gt;1μ秒、14桁&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;date&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;4バイト&lt;/td&gt;&lt;td&gt;日付（時刻なし）&lt;/td&gt;&lt;td&gt;4713 BC&lt;/td&gt;&lt;td&gt;5874897 AD&lt;/td&gt;&lt;td&gt;1日&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;time [ (&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;p&lt;/i&gt;&lt;/tt&gt;) ] [ without time zone ]&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;8バイト&lt;/td&gt;&lt;td&gt;時刻（日付なし）&lt;/td&gt;&lt;td&gt;00:00:00&lt;/td&gt;&lt;td&gt;24:00:00&lt;/td&gt;&lt;td&gt;1μ秒、14桁&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;time [ (&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;p&lt;/i&gt;&lt;/tt&gt;) ] with time zone&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;12バイト&lt;/td&gt;&lt;td&gt;その日の時刻のみ、時間帯付き&lt;/td&gt;&lt;td&gt;00:00:00+1459&lt;/td&gt;&lt;td&gt;24:00:00-1459&lt;/td&gt;&lt;td&gt;1μ秒、14桁&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;interval [ &lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;fields&lt;/i&gt;&lt;/tt&gt; ] [ (&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;p&lt;/i&gt;&lt;/tt&gt;) ]&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;16バイト&lt;/td&gt;&lt;td&gt;時間間隔&lt;/td&gt;&lt;td&gt;-178000000年&lt;/td&gt;&lt;td&gt;178000000年&lt;/td&gt;&lt;td&gt;1μ秒、14桁&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# マイグレーションファイル&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateHoges&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:hoges&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.datetime  &lt;span class=&quot;synConstant&quot;&gt;:datetime&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# timestamp without time zone型&lt;/span&gt;
      t.timestamp &lt;span class=&quot;synConstant&quot;&gt;:timestamp&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# timestamp without time zone型&lt;/span&gt;
      t.timestamp &lt;span class=&quot;synConstant&quot;&gt;:timestamp&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# timestamp without time zone型&lt;/span&gt;
      t.time      &lt;span class=&quot;synConstant&quot;&gt;:time&lt;/span&gt;      &lt;span class=&quot;synComment&quot;&gt;# date型&lt;/span&gt;
      t.date      &lt;span class=&quot;synConstant&quot;&gt;:date&lt;/span&gt;      &lt;span class=&quot;synComment&quot;&gt;# time without time zone型&lt;/span&gt;
      t.column    &lt;span class=&quot;synConstant&quot;&gt;:duration&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:interval&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# interval型&lt;/span&gt;
      t.column &lt;span class=&quot;synConstant&quot;&gt;:timestamp_with_tz&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;timestamp with time zone&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      t.column &lt;span class=&quot;synConstant&quot;&gt;:time_with_tz&lt;/span&gt;,      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;time with time zone&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;参考：&lt;a href=&quot;https://www.postgresql.jp/document/9.4/html/datatype-datetime.html&quot; target=&quot;_blank&quot;&gt;日付/時刻データ型の詳細な説明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;postgresql-migration-bool&quot;&gt;論理値データ型&lt;/h3&gt;boolean型はいくつかの状態を取ることができます。 &quot;真&quot;もしくは&quot;偽&quot;、そして第3の状態はSQLではNULL値で表現される&quot;不明&quot;の状態です。&lt;/p&gt;&lt;p&gt;&lt;table border=&quot;1&quot; class=&quot;CALSTABLE&quot;&gt;
  &lt;colgroup&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;/colgroup&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;名前&lt;/th&gt;&lt;th&gt;格納サイズ&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;boolean&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;1バイト&lt;/td&gt;&lt;td&gt;真または偽の状態&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# マイグレーションファイル&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateHoges&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:hoges&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.boolean   &lt;span class=&quot;synConstant&quot;&gt;:bool&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# boolean型&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;参考：&lt;a href=&quot;https://www.postgresql.jp/document/9.4/html/datatype-boolean.html&quot; target=&quot;_blank&quot;&gt;論理値データ型の詳細な説明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;他にもバイナリ型やJSON型などのデータ型もあるので気にになる方は、参考のURLを一度読んでみてください。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.postgresql.jp/document/9.4/html/datatype.html&quot;&gt;https://www.postgresql.jp/document/9.4/html/datatype.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="Rails Migration" label="Rails Migration" />
        
        <category term="Rails中級" label="Rails中級" />
        
        <category term="DB" label="DB" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>RailsでActiveRecord/Arelを使って複雑なSELECT文を実行する方法</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150428/1430154446"/>
        <id>hatenablog://entry/8454420450092867365</id>
        <published>2015-04-28T02:07:26+09:00</published>
        <updated>2015-04-28T02:07:26+09:00</updated>
        <summary type="html">Rails(ActiveRecord/Arel)で複雑なSELECT文を実行する方法をまとめました。
メリット、デメリットや使いどころなどまとめ途中なのであしからずお願いします。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150428/20150428020246.jpg&quot; alt=&quot;f:id:nipe880324:20150428020246j:plain&quot; title=&quot;f:id:nipe880324:20150428020246j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Rails(ActiveRecord/Arel)で複雑なSELECT文を実行する方法をまとめました。&lt;br /&gt;
メリット、デメリットや使いどころなどまとめ途中なのであしからずお願いします。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.2.0&lt;/li&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;Arel  6.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#complex-sql-conclusion&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#complex-sql-preparation&quot;&gt;ER図&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#complex-sql-active-record&quot;&gt;Active Record&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#complex-sql-arel&quot;&gt;Arel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#complex-sql-raw-sql&quot;&gt;生SQL&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;complex-sql-conclusion&quot;&gt;1. まとめ&lt;/h3&gt;まず、個人的な意見として、それぞれの方法のメリット・デメリットをまとめました。&lt;/p&gt;&lt;p&gt;&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;&lt;th&gt;メリット&lt;/th&gt;&lt;th&gt;デメリット&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ActiveRecord&lt;/td&gt;
      &lt;td&gt;&lt;br /&gt;
      　・1, 2テーブル内での検索なら簡単に処理をかけれる&lt;br /&gt;
      　・返り値がActiveRecord::Relationやモデルのインスタンスなので扱いやすい&lt;br /&gt;
      &lt;/td&gt;
      &lt;td&gt;&lt;br /&gt;
      　・複数のテーブルにまたがる検索で、検索条件、他テーブルのカラム値の扱いがしずらい&lt;br /&gt;
      　・CASE WHENやカラムなど行いづらい&lt;br /&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Arel&lt;/td&gt;
      &lt;td&gt;文字列でなくメソッドで検索文を記載できる（個人的にあまりメリットが見えていない）&lt;/td&gt;
      &lt;td&gt;RailsのプライベートAPIなので使うべきではない。&lt;a href=&quot;https://github.com/rails/rails/issues/16978&quot; target=&quot;_blank&quot;&gt;参考&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;生SQL&lt;/td&gt;
      &lt;td&gt;複雑なSQLをかける&lt;/td&gt;
      &lt;td&gt;返り値がHashなのでモデルのメソッドが使いずらい&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;メインでよく行う処理では比較的簡単なSQL（ActiveRecordで十分足りる）で処理をおこなえ、レポート集計などは複雑なSQL（生のSQL）でもしょうがないと思います。&lt;br /&gt;
こういう状態が、保守性、パフォーマンス、メンテナンス性などに優れた良いDB設計ができているということだと個人的に思います。&lt;br /&gt;
つまり、メイン処理のSQLが複雑になってしまうということは、どこかでDB設計のミスを犯していたり、パフォーマンスのために正規化を崩しすぎてしまったのではと思います。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;complex-sql-preparation&quot;&gt;2. ER図&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;ER図&lt;/h3&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150428/20150428015849.jpg&quot; alt=&quot;f:id:nipe880324:20150428015849j:plain&quot; title=&quot;f:id:nipe880324:20150428015849j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;DBスキーマとモデルの作成&lt;/h3&gt;
    &lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g model User username email password
bin/rails g model Order order_no:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; user_id:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
bin/rails g model LineItem quantity:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; book_id:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
bin/rails g model Book isbn name name_kana price:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
bin/rails g model Category
bin/rake db:migrate
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;モデルの定義&lt;/h3&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:orders&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:line_items&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;total_price&lt;/span&gt;
    line_items.map(&amp;amp;&lt;span class=&quot;synConstant&quot;&gt;:total_price&lt;/span&gt;).sum
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;LineItem&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:order&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:book&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;total_price&lt;/span&gt;
    book.price * quantity
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Book&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:line_items&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:books&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;complex-sql-active-record&quot;&gt;3. Active Record&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;簡単にテーブルからデータを取得でき、また、オブジェクトとして取得できるので、データを扱いやすいです。&lt;br /&gt;
しかし、複雑なSQLを実行する場合は、ActiveRecordにより作成されるSQLを確認しないと、パフォーマンスが悪いSQLになっている可能性もあるので注意が必要です。&lt;/p&gt;&lt;p&gt;&lt;code&gt;joins&lt;/code&gt;メソッドを使うことで次のように&lt;code&gt;INNER JOIN&lt;/code&gt;をして、複数のテーブルに対して&lt;code&gt;WHERE句&lt;/code&gt;を実施することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;users = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.joins(&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;book&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; }}).where(&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }, &lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;IT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; })

&lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.* &lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;book_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;IT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;includes&lt;/code&gt;メソッドを使うことで次のように&lt;code&gt;LEFT OUTTER JOIN&lt;/code&gt;をして、複数のテーブルに対して&lt;code&gt;WHERE句&lt;/code&gt;を実施することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;users = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.includes(&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;book&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; }}).where(&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }, &lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;IT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; })

&lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r0, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r1, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r2, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r3, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r4, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r5, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t1_r0, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;order_no&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t1_r1, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t1_r2, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t1_r3, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t1_r4, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r0, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r1, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;book_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r2, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r3, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r4, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r5, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r0, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r1, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r2, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r3, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r4, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r5, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r6, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r7, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t4_r0, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t4_r1, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t4_r2, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t4_r3
&lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;book_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;IT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;また、オブジェクトとして帰ってくるので、その後に処理を行いやすいです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.includes(&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;book&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; }}).where(&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }).first
user.orders.count
&lt;/pre&gt;&lt;p&gt;扱いづらいが、&lt;code&gt;select&lt;/code&gt;メソッドにより他テーブルの値を取得し、アクセスできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.select(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users.*, orders.order_no AS order_no&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).joins(&lt;span class=&quot;synConstant&quot;&gt;:orders&lt;/span&gt;).find(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; SELECT  users.*, orders.order_no AS order_no FROM &amp;quot;users&amp;quot; INNER JOIN &amp;quot;orders&amp;quot; ON &amp;quot;orders&amp;quot;.&amp;quot;user_id&amp;quot; = &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot; WHERE &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot; = ? LIMIT 1  [[&amp;quot;id&amp;quot;, 1]]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# selectで指定した値を取得できます&lt;/span&gt;
user.attributes
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; {&amp;quot;id&amp;quot;=&amp;gt;1, &amp;quot;username&amp;quot;=&amp;gt;&amp;quot;test&amp;quot;, &amp;quot;email&amp;quot;=&amp;gt;&amp;quot;hoge@example.com&amp;quot;, &amp;quot;password&amp;quot;=&amp;gt;nil, &amp;quot;created_at&amp;quot;=&amp;gt;Mon, 27 Apr 2015 15:49:16 UTC +00:00, &amp;quot;updated_at&amp;quot;=&amp;gt;Mon, 27 Apr 2015 15:49:16 UTC +00:00, &amp;quot;order_no&amp;quot;=&amp;gt;1}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# もちろんアクセスもできます&lt;/span&gt;
user.order_no &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 1&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;complex-sql-arel&quot;&gt;4. Arel&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/rails/arel&quot; target=&quot;_blank&quot;&gt;Arel - GitHub公式&lt;/a&gt;によると、複雑なSQLクエリの生成を簡単にするらしいです。（個人的にあまりメリットが見えていません）&lt;br /&gt;
また、一説によると、RailsのプライベートAPIなので使うべきではないらしいです。&lt;a href=&quot;https://github.com/rails/rails/issues/16978&quot; target=&quot;_blank&quot;&gt;参考&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;users  = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.arel_table
orders = &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.arel_table
sql    = users.join(orders, &lt;span class=&quot;synType&quot;&gt;Arel&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Nodes&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;OuterJoin&lt;/span&gt;).on(users[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;].eq(orders[&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;])).where(orders[&lt;span class=&quot;synConstant&quot;&gt;:order_no&lt;/span&gt;].eq(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)).to_sql
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;SELECT FROM \&amp;quot;users\&amp;quot; LEFT OUTER JOIN \&amp;quot;orders\&amp;quot; ON \&amp;quot;users\&amp;quot;.\&amp;quot;id\&amp;quot; = \&amp;quot;orders\&amp;quot;.\&amp;quot;user_id\&amp;quot; WHERE \&amp;quot;orders\&amp;quot;.\&amp;quot;order_no\&amp;quot; = 1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;complex-sql-raw-sql&quot;&gt;5. 生SQL&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;副問い合わせ、CASE WHENなど複雑なSQLを記載でき、基本的にはSQLの知識はあると思うので学習コストは少ないと思います。&lt;br /&gt;
しかし、返り値がHashなのでモデルのメソッドが使いずらく、また、SQLサーバーに依存したコードになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 実行したいSQLをヒアドキュメトで記載する&lt;/span&gt;
query = &amp;lt;&amp;lt;-&lt;span class=&quot;synSpecial&quot;&gt;SQL&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  SELECT users.*&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  FROM &amp;quot;users&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  LEFT OUTER JOIN &amp;quot;orders&amp;quot; ON &amp;quot;orders&amp;quot;.&amp;quot;user_id&amp;quot; = &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  LEFT OUTER JOIN &amp;quot;line_items&amp;quot; ON &amp;quot;line_items&amp;quot;.&amp;quot;order_id&amp;quot; = &amp;quot;orders&amp;quot;.&amp;quot;id&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  LEFT OUTER JOIN &amp;quot;books&amp;quot; ON &amp;quot;books&amp;quot;.&amp;quot;id&amp;quot; = &amp;quot;line_items&amp;quot;.&amp;quot;book_id&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  LEFT OUTER JOIN &amp;quot;categories&amp;quot; ON &amp;quot;categories&amp;quot;.&amp;quot;id&amp;quot; = &amp;quot;books&amp;quot;.&amp;quot;category_id&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  WHERE &amp;quot;users&amp;quot;.&amp;quot;username&amp;quot; = &#39;test&#39;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;SQL&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# SQLを実行する&lt;/span&gt;
hash = &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;.connection.select_all(query)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; #&amp;lt;ActiveRecord::Result:0x007f9ab9869c90 @columns=[&amp;quot;id&amp;quot;, &amp;quot;username&amp;quot;, &amp;quot;email&amp;quot;, &amp;quot;password&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;updated_at&amp;quot;], @rows=[[1, &amp;quot;test&amp;quot;, &amp;quot;hoge@example.com&amp;quot;, nil, &amp;quot;2015-04-27 15:49:16.971518&amp;quot;, &amp;quot;2015-04-27 15:49:16.971518&amp;quot;]], @hash_rows=nil, @column_types={}&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 表形式で取得できる&lt;/span&gt;
hash.columns
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;quot;id&amp;quot;, &amp;quot;username&amp;quot;, &amp;quot;email&amp;quot;, &amp;quot;password&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;updated_at&amp;quot;]&lt;/span&gt;
hash.rows
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [[1, &amp;quot;test&amp;quot;, &amp;quot;hoge@example.com&amp;quot;, nil, &amp;quot;2015-04-27 15:49:16.971518&amp;quot;, &amp;quot;2015-04-27 15:49:16.971518&amp;quot;]]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rigelgroupllc.com/blog/2014/09/14/working-with-complex-sql-statements/&quot;&gt;Working with complex SQL statements in Rails and ActiveRecord - Rigel Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19175084/activerecord-query-through-multiple-joins&quot;&gt;ruby on rails 4 - ActiveRecord query through multiple joins - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="Rails中級" label="Rails中級" />
        
        <category term="Rails Model" label="Rails Model" />
        
        <category term="SQL" label="SQL" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>RubyでSeleniumを使ってサクッとスタンドアローンなブラウザテストを作成する</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150420/1429462755"/>
        <id>hatenablog://entry/8454420450092035540</id>
        <published>2015-04-20T01:59:15+09:00</published>
        <updated>2015-04-30T15:53:52+09:00</updated>
        <summary type="html">RubyでSeleniumを使ってスタンドアローンなブラウザテストをする方法を説明します。テスティングフレームワークにはRSpec、SeleniumにアクセスするためにCapybaraをつかうことで簡単にテストがかけます。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150420/20150420015630.jpg&quot; alt=&quot;f:id:nipe880324:20150420015630j:plain&quot; title=&quot;f:id:nipe880324:20150420015630j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/simon__syon/&quot;&gt;Flickr: Simon &amp;amp; His Camera&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;RubyでSeleniumを使ってスタンドアローンなブラウザテストをする方法を説明します。&lt;br /&gt;
テスティングフレームワークにはRSpec、SeleniumにアクセスするためにCapybaraをつかうことで簡単にテストがかけます。&lt;/p&gt;&lt;p&gt;メリットとして、スタンドアローンなので、ブラウザでテスト対象のページが開ければ、他の要素のサーバーのプログラミング言語やサーバーの配置場所など制約がなくテストを作成できます。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#selenium-standalone-test-install-gem&quot;&gt;必要なgemをインストールする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#selenium-standalone-test-install-browser&quot;&gt;ブラウザをインストールする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#selenium-standalone-test-write-test-code&quot;&gt;テストコードを記載する&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作環境&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Mac OSX 10 Yosemite&lt;/li&gt;
&lt;li&gt;Ruby 2.2.0&lt;/li&gt;
&lt;li&gt;selenium-webdriver 2.45&lt;/li&gt;
&lt;li&gt;chromedriver 2.15&lt;/li&gt;
&lt;li&gt;rspec 3.2.0&lt;/li&gt;
&lt;li&gt;capybara 2.4.4&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;selenium-standalone-test-install-gem&quot;&gt;1. 必要なgemをインストールする&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;まず、Gemfileを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
source &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;https://rubygems.org&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;selenium-webdriver&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-byebug&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;selenium-standalone-test-install-browser&quot;&gt;2. ブラウザをインストールする&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;今回の環境は、Macで実施しているので、Safariはデフォルトで入っています。&lt;br /&gt;
FirefoxやChromeでテストをしたい場合は、次の手順を実施する必要があります。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;Chrome&lt;/h5&gt;
    
&lt;ol&gt;
&lt;li&gt;WebからChromeをインストールします。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://chromedriver.storage.googleapis.com/index.html&quot; target=&quot;_blank&quot;&gt;chromedriver&lt;/a&gt;をダウンロード（一番新しいバージョンを選択）し、PATHに通る場所(&lt;code&gt;/usr/bin&lt;/code&gt;など)に配置する&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;Firefox&lt;/h5&gt;
    
&lt;ol&gt;
&lt;li&gt;Firefoxをインストールする&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;selenium-standalone-test-write-test-code&quot;&gt;3. テストコードを記載する&lt;/h3&gt;RSpecでテストコードを書きます。メインは、ブラウザの操作用のDSLのCapybaraで記載します。&lt;br /&gt;
参考：&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150103/1420280252&quot;&gt;RSpec3 / Capybara / Capybara-Webkit &amp;#x30C1;&amp;#x30FC;&amp;#x30C8;&amp;#x30B7;&amp;#x30FC;&amp;#x30C8; - Rails Webook&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# github_spec.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;selenium-webdriver&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# RSpecにCapybaraのDSLを設定&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;config&lt;/span&gt;|
  config.include &lt;span class=&quot;synType&quot;&gt;Capybara&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Capybaraにseleniumを使うように設定&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Capybara&lt;/span&gt;.default_driver = &lt;span class=&quot;synConstant&quot;&gt;:selenium&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Capybara&lt;/span&gt;.app_host = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;https://github.com/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;


describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;GitHub&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;

  before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    visit &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;トップページが表示されること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    expect(page).to have_content(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Build software better, together.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ログイン画面が表示できること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    click_link &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Sign in&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    expect(current_path).to eq &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/login&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ログインできること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    click_link &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Sign in&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# テキストフィールドに入力し、ボタンをクリック(id, name, value属性などを指定できる)&lt;/span&gt;
    fill_in &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;login_field&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;GitHubのユーザ名&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
    fill_in &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,    &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;GitHubのパスワード&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
    click_button &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Sign in&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

    expect(current_path).to eq &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
テストを実行します。すると、firefoxが開きテストが実行されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;rpsec github_spec.rb
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
もしテストがうまくいかない場合は、うまく行かない箇所の周辺で&lt;code&gt;binding.pry&lt;/code&gt;を記載することでデバッグができるので、周辺のコードを実行してみて想定通りの動作になっているか確認するとよいと思います。&lt;/p&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/selenium/wiki/RubyBindings&quot;&gt;RubyBindings - selenium - Ruby bindings - Browser automation framework - Google Project Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://selenium.googlecode.com/git/docs/api/rb/index.html&quot;&gt;File: README &amp;mdash; Documentation by YARD 0.8.7.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/kenrett/7553278&quot;&gt;Selenium Cheat Sheet - Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kitak.hatenablog.jp/entry/2013/10/08/214241&quot;&gt;Selenium WebDriver(&amp;#x30EA;&amp;#x30E2;&amp;#x30FC;&amp;#x30C8;&amp;#x30B5;&amp;#x30FC;&amp;#x30D0;&amp;#x30FC;)+Capybara&amp;#x3092;&amp;#x8A66;&amp;#x3057;&amp;#x3066;&amp;#x307F;&amp;#x305F;&amp;#x3002; - &amp;#x304D;&amp;#x305F;&amp;#x3051;&amp;#x30FC;&amp;#x306E;&amp;#x671D;&amp;#x306F;&amp;#x65E9;&amp;#x3044;&amp;#x30D6;&amp;#x30ED;&amp;#x30B0;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="テスト" label="テスト" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>RailsでDraperを使ってプレゼンテーション層（デコレーター）を実装する</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150415/1429031791"/>
        <id>hatenablog://entry/8454420450091528638</id>
        <published>2015-04-15T02:16:31+09:00</published>
        <updated>2015-04-15T02:29:38+09:00</updated>
        <summary type="html">DraperはRailsのプレゼンテーション層の役割を担うgemです。プレゼンテーション層の必要性、実装方法について説明します。Draperはデコレーター（他にはプレゼンター、ビューモデルなどと呼ばれます）であり、ビューとモデルの中間に位置し、モデルやビューに実装されやすい表示ロジック/フォーマットといったプレゼンテーション層の責務を引き受けることで可読性、保守性を向上させることができます。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150415/20150415020650.jpg&quot; alt=&quot;f:id:nipe880324:20150415020650j:plain&quot; title=&quot;f:id:nipe880324:20150415020650j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/herry/&quot;&gt;Flickr: HerryLawford&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/drapergem/draper&quot;&gt;Draper&lt;/a&gt;はRailsのプレゼンテーション層の役割を担うgemです。&lt;br /&gt;
この記事では、Draperを通し、プレゼンテーション層の必要性や使い方を説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby   2.2.1&lt;/li&gt;
&lt;li&gt;Rails  4.2.0&lt;/li&gt;
&lt;li&gt;Draper 1.4.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;0.   &lt;a href=&quot;#draper-why&quot;&gt;プレゼンテーション層の必要性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.   &lt;a href=&quot;#draper-installation&quot;&gt;Draperのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.   &lt;a href=&quot;#draper-basic-usage&quot;&gt;Draperの簡単な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.   &lt;a href=&quot;#draper-instanate&quot;&gt;デコレーターインスタンスの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.1. &lt;a href=&quot;#draper-single-obj&quot;&gt;単独のオブジェクトのデコレーター&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.2. &lt;a href=&quot;#draper-individual-collection&quot;&gt;コレクションの個々のオブジェクトのデコレーター&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.3. &lt;a href=&quot;#draper-collection&quot;&gt;コレクション自身のデコレーター&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.4. &lt;a href=&quot;#draper-related-object&quot;&gt;関連するオブジェクトのデコレーター&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.   &lt;a href=&quot;#draper-create-class&quot;&gt;デコレータークラスの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.1. &lt;a href=&quot;#draper-access-helper&quot;&gt;デコレーター内でヘルパーメソッドへのアクセス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.2. &lt;a href=&quot;#draper-access-model&quot;&gt;デコレーター内でモデルオブジェクトへアクセス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.3. &lt;a href=&quot;#draper-render-html&quot;&gt;デコレーターでHTMLをレンダリングする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.4. &lt;a href=&quot;#draper-delegate&quot;&gt;デコレーターのデリゲート（委託）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-why&quot;&gt;0. プレゼンテーション層の必要性&lt;/h3&gt;Draperはデコレーター（他にはプレゼンター、ビューモデルなどと呼ばれます）であり、ビューとモデルの中間に位置し、モデルやビューに実装されやすい表示ロジック/フォーマットといったプレゼンテーション層の責務を引き受けることで可読性、保守性を向上させることができます。&lt;/p&gt;&lt;p&gt;ビューにif文が多くて見ずらい、モデルに表示用のロジックが多くなってしまった、ビューのロジックをヘルパーに書いているがヘルパーの名前空間の衝突が怖い(※1)などの場合にDraperを導入するとよいと思います。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※1 Railsのヘルパーはグローバルな名前空間にメソッドが定義されるので、異なるヘルパーモジュールに同じメソッド名のメソッドを定義すると名前が衝突します&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;ビューにif文が多くて見ずらい&lt;/h5&gt;
    &lt;p&gt;ビューからロジックをなくしたい。HTML構造が複雑になり、ビューファイルが見ずらくなる。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# Draper導入前
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Twitter:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% if @user.twitter_name.present? %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @user.twitter_name, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;http://twitter.com/#{@user.twitter_name}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% else %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;None given&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

# Draper導入後
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Twitter:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @user.twitter&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;ヘルパーの名前空間の衝突&lt;/h5&gt;
    &lt;p&gt;別々のヘルパーでfooメソッドという同じメソッド名のメソッドを定義したので衝突してしまって、思うようにメソッドが動かない。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;foo&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ApplicationHelper#foo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;BooksHelper&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;foo&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;BooksHelper#foo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ApplicationHelper#fooが上書きされてしまう??&lt;/span&gt;
foo &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &#39;BooksHelper#foo&#39; &lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;モデルに表示用のロジックが多い&lt;/h5&gt;
    &lt;p&gt;モデルはドメインロジックを記載するべきであり、メソッドが多くやすいので、UIの細かなフォーマットなどはあまり書きたくない。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Draper導入前&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;SomeModel&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;posted_at&lt;/span&gt;
    created_at.strftime(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;%Y/%m/%d&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Draper導入後&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;SomeModel&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# posted_atメソッドはデコレータークラスに移動&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-installation&quot;&gt;1. Draperのインストール方法&lt;/h3&gt;&lt;code&gt;Gemfile&lt;/code&gt;にDraperを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;draper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;~&amp;gt; 1.3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
バンドラーを実行して、Draperをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-basic-usage&quot;&gt;2. Draperの簡単な使い方&lt;/h3&gt;まず、Scaffoldで作成します。&lt;br /&gt;
Draperを入れたので、デコレーターも作成されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g scaffold Article title body:text
      ...
      invoke    decorator
      create      app/decorators/article_decorator.rb
&lt;/pre&gt;&lt;p&gt;※&lt;code&gt;rails g resource&lt;/code&gt;や&lt;code&gt;rails g decorator&lt;/code&gt;というジェネレーターを実行した場合もデコレーターが作成されます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;デコレーターにプレゼンテーション層のメソッドを定義します。&lt;br /&gt;
イメージとしては、ビューやモデルに書くべきではなく、ヘルパーに書くようなメソッドです。例えば、日付のフォーマット、条件分岐でビューの表示が少し変わるなどです。&lt;br /&gt;
今回は、日付をフォーマットして、spanタグ付きで表示する&lt;code&gt;posted_at&lt;/code&gt;メソッドを追加しました。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/decorators/article_decorator.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  delegate_all

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;posted_at&lt;/span&gt;
    h.content_tag &lt;span class=&quot;synConstant&quot;&gt;:span&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      model.created_at.strftime(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;%Y/%m/%d %H:%m&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;デコレーターはモデルオブジェクトを保持しています。&lt;br /&gt;
そして、&lt;code&gt;delegate_all&lt;/code&gt;と記載することで、デコレーター内に定義されていないメソッドが呼び出されたい場合、デコレーターが保持しているモデルオブジェクトにメソッド呼び出しを委譲します。&lt;br /&gt;
そのため、基本的にデコレーターを導入しても、モデルの処理が行われるので従来通り動きます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;次に、コントローラー内で作成したデコレーターを使いようにします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コレクションの個々のオブジェクトをデコレートするには&lt;code&gt;decorate_collection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;単独のオブジェクトをデコレートするには&lt;code&gt;decorate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/articles_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticlesController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  before_action &lt;span class=&quot;synConstant&quot;&gt;:set_article&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;only&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:update&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;]

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@articles&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt;.decorate_collection(&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.all)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  ...

  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_article&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt;.decorate(&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;]))
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これで、Articleオブジェクトを保持した、Articleデコレーターインスタンスが作成されました。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;最後に、ビューからデコレーターのメソッドを呼び出します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/articles/index.html.erb --&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @articles.each do |article| %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; article.title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; article.body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- デコレーターのメソッド呼び出し --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; article.posted_at&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Show&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, article %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Edit&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_article_path(article) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Destroy&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, article, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :delete, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: { confirm: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Are you sure?&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; } %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;title&lt;/code&gt;や&lt;code&gt;body&lt;/code&gt;は、デコレーターの&lt;code&gt;delegate_all&lt;/code&gt;でモデルに委譲させるのでモデルのメソッドが呼び出されます。&lt;br /&gt;
&lt;code&gt;posted_at&lt;/code&gt;は、デコレーターで定義したメソッドが呼び出されます。&lt;/p&gt;&lt;p&gt;画面は次のようになります。（Posted atの値のスタイリングをしています）&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150415/20150415021453.jpg&quot; alt=&quot;f:id:nipe880324:20150415021453j:plain:w480&quot; title=&quot;f:id:nipe880324:20150415021453j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;このようにして、Draperを使うことができます。&lt;br /&gt;
モデルとビューの間にデコレーターを導入することで、モデル内のビジネスロジックと関係ないメソッドを減らせ、ビューから条件分岐を減らせ、ヘルパーメソッドのメソッド名の衝突問題を防ぐことができるようになります。&lt;br /&gt;
アプリの規模が大きくなってきてこのようなことに困った場合は、導入をお勧めします。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-instanate&quot;&gt;3. デコレーターインスタンスの作成&lt;/h3&gt;&lt;h3 id=&quot;draper-single-obj&quot;&gt;3.1. 単独のオブジェクトのデコレーター&lt;/h3&gt;単独のオブジェクトの場合、次のように&lt;code&gt;decorate&lt;/code&gt;メソッドやデコレーターの&lt;code&gt;new&lt;/code&gt;メソッドを使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# decorateメソッドを使うと、モデルからデコレーターを推測して作成されます&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Articleの場合、ArticleDecoratorが使われる。&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;]).decorate


&lt;span class=&quot;synComment&quot;&gt;# デコレーターを指定したい場合は、デコーレータを作成します&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@widget&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ProductDecorator&lt;/span&gt;.new(&lt;span class=&quot;synType&quot;&gt;Widget&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;]))
&lt;span class=&quot;synComment&quot;&gt;# 以下も同じ&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@widget&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ProductDecorator&lt;/span&gt;.decorate(&lt;span class=&quot;synType&quot;&gt;Widget&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;]))
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、次のように&lt;code&gt;decorates_finders&lt;/code&gt;メソッドをデコレーターに定義すれば、ActiveRecordのように&lt;code&gt;find&lt;/code&gt;メソッドがつかえるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/decorators/articl_decorator.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  decorates_finders
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# コントローラーなど&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-individual-collection&quot;&gt;3.2. コレクションの個々のオブジェクトのデコレーター&lt;/h3&gt;コレクションの場合、次のように&lt;code&gt;decorate_collection&lt;/code&gt;メソッドを使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;@articles&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt;.decorate_collection(&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.all)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-collection&quot;&gt;3.3. コレクション自身のデコレーター&lt;/h3&gt;コレクション自身をデコレートしたい場合は、&lt;code&gt;Draper::CollectionDecorator&lt;/code&gt;のサブクラスのデコレータークラスを定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/decorators/articles_decorator.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticlesDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;CollectionDecorator&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;page_number&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;42&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# コントローラーなど&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@articles&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ArticlesDecorator&lt;/span&gt;.new(&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.all)
&lt;span class=&quot;synComment&quot;&gt;# もしくは、&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@articles&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ArticlesDecorator&lt;/span&gt;.decorate(&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.all)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-related-object&quot;&gt;3.4. 関連するオブジェクトのデコレーター&lt;/h3&gt;&lt;code&gt;decorates_association&lt;/code&gt;を使うことで、関連するオブジェクトのデコレーターを使うように宣言できます。&lt;br /&gt;
次の場合、authorモデルに対応するAuthorDecoratorを使うことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/decorators/article_decorator.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  decorates_association &lt;span class=&quot;synConstant&quot;&gt;:author&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# app/decorators/author_decorator.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AuthorDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;hoge&lt;/span&gt;
    model.name + &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hogehoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# ビューでAuthorDecoratorのメソッドを呼び出す&lt;/span&gt;
article.author.hoge
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-create-class&quot;&gt;4. デコレータークラスの作成&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;draper-access-helper&quot;&gt;4.1. デコレーター内でヘルパーメソッドへのアクセス&lt;/h3&gt;デコレーターからヘルパーメソッドを使うには、&lt;code&gt;h&lt;/code&gt;メソッドを使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;emphatic&lt;/span&gt;
    h.content_tag(&lt;span class=&quot;synConstant&quot;&gt;:strong&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Awesome&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;strong&amp;gt;Awesome&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-access-model&quot;&gt;4.2. デコレーター内でモデルオブジェクトへアクセス&lt;/h3&gt;デコレーター内でデコレーターが保持しているモデルオブジェクトにアクセスするにはモデルには、&lt;code&gt;object&lt;/code&gt;（もしくは、エイリアスの&lt;code&gt;model&lt;/code&gt;）を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;published_at&lt;/span&gt;
    object.published_at.strftime(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;%A, %B %e&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-render-html&quot;&gt;4.3. デコレーターでHTMLをレンダリングする&lt;/h3&gt;条件分岐をビューからデコレーターに移す場合、HTMLの断片が入ってしまうことがあります。&lt;br /&gt;
デコレーター内に直でHTMLコードを記載するとHTMLコードの断片が散らばり可読性や保守性が下がるので、次のようにするといいかもしれません。&lt;/p&gt;&lt;p&gt;HTMLのレンダリングが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1行程度なら&lt;code&gt;content_tag&lt;/code&gt;ヘルパーメソッドを使う&lt;/li&gt;
&lt;li&gt;複数行の場合は&lt;code&gt;render&lt;/code&gt;メソッドを使って部分テンプレートを表示する&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  delegate_all

  &lt;span class=&quot;synComment&quot;&gt;# 1行程度なので、content_tagメソッドを使う&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;emphatic&lt;/span&gt;
    h.content_tag(&lt;span class=&quot;synConstant&quot;&gt;:strong&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Awesome&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;strong&amp;gt;Awesome&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 複数行のため、部分テンプレートを呼び出す&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;sub_view&lt;/span&gt;
    h.render &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sub_view&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;: model.title
    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; articles/sub_view.html.erb　を表示する&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-delegate&quot;&gt;4.4. デコレーターのデリゲート（委託）&lt;/h3&gt;デコレーターオブジェクトへのメソッド呼び出しを、モデルにデリゲート（委託）することができます。&lt;br /&gt;
&lt;code&gt;delegate_all&lt;/code&gt;で全てのメソッドを委託、&lt;code&gt;delegate&lt;/code&gt;で指定したメソッドを委託するように宣言できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# デコレーター&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 全てのメソッド呼び出しにおいて、デコレーターで定義していないメソッドは、モデルオブジェクトへ委譲される&lt;/span&gt;
  delegate_all

  &lt;span class=&quot;synComment&quot;&gt;# 特定のメソッドのみ委譲する（toオプションを指定しないとデフォルトでobjectに委譲する）&lt;/span&gt;
  delegate &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:body&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 特定のメソッドを指定したオブジェクトに委譲する&lt;/span&gt;
  delegate &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;to&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:author&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;prefix&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# 使い方（ビューなど）&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt;.decorate(&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;]))
&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.title  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; articleのtitle&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.body   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; articleのbody&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.author_name   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; articleの author.name&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/drapergem/draper&quot;&gt;https://github.com/drapergem/draper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://morizyun.github.io/blog/draper-ruby-gem-code-clear/&quot;&gt;http://morizyun.github.io/blog/draper-ruby-gem-code-clear/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/286-draper&quot;&gt;http://railscasts.com/episodes/286-draper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="設計" label="設計" />
        
        <category term="リファクタリング" label="リファクタリング" />
        
        <category term="Rails View" label="Rails View" />
        
        <category term="Rails中級" label="Rails中級" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>たった10分でGoogle AdSenseの広告収入を2倍にした方法</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150401/1427898898"/>
        <id>hatenablog://entry/8454420450089991700</id>
        <published>2015-04-01T23:34:58+09:00</published>
        <updated>2015-04-01T23:36:02+09:00</updated>
        <summary type="html">たった10分で簡単に広告収入を2倍にすることができました。
対象者として、ブログなどで少し広告収入が稼げたらいいな、まとめサイトなど広告収入がメインの収益などといった方を対象としています。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150331/20150331232109.jpg&quot; alt=&quot;f:id:nipe880324:20150331232109j:plain&quot; title=&quot;f:id:nipe880324:20150331232109j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/68751915@N05/&quot;&gt;Flickr: 401(K) 2013&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;件名の通り、「&lt;b&gt;簡単に広告収入を2倍&lt;/b&gt;」にできました。&lt;/p&gt;&lt;p&gt;対象者として、ブログなどで少し広告収入が稼げたらいいな、まとめサイトなど広告収入がメインの収益などといった方を対象としています。&lt;/p&gt;&lt;p&gt;当たり前ですが、ECサイトでは商品購入、自社サイトでは商品問い合わせや企業への採用応募など&lt;b&gt;サイトの目的が特定の行動への誘導&lt;/b&gt;の場合は、広告収入の向上に注力してしまうと、本来の目的が満たされなくなってしまうので注意してください。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#adsense-2x-conclusion&quot;&gt;結論&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#adsense-2x-episode&quot;&gt;実例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#adsense-2x-why&quot;&gt;なぜ、広告収入が2倍になるのか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#adsense-2x-more&quot;&gt;より広告収入を増やすには&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;adsense-2x-conclusion&quot;&gt;1. 結論&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;結論から言うと、「&lt;b&gt;Google Adsenseの広告サイズと配置、配色を変えるだけ&lt;/b&gt;」です。&lt;/p&gt;&lt;p&gt;そのため、残念ながら広告サイズと配置、配色が既に最適化されている場合は効果は見込めません。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;adsense-2x-episode&quot;&gt;実例&lt;/h3&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;変更前&lt;/h4&gt;
    &lt;p&gt;方針:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;個人の感覚で押してくれそうなところにレイアウトに合わせたサイズで配置する作戦&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;具体例:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デザインに合わせる形で下記のように広告を配置していた。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  - ヘッダーの下 920 x 90&lt;br /&gt;
  - サイドバー 200 x 200&lt;br /&gt;
  - ページの読み終わり 768 x 90&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;変更後&lt;/h4&gt;
    &lt;p&gt;方針:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Googleの推奨を準拠しながら、適宜実験を行う作戦&lt;/li&gt;
&lt;li&gt;Googleの推奨は統計的に成果が出ている方法であるので、効率的だと思う。&lt;/li&gt;
&lt;li&gt;しかし、各サイト毎で最適解はことなるので、それをベースに実験を行い検証する。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;具体例:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;広告サイズと配置をGoogle推奨にする&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  - ヘッダーの下 768 x 90&lt;br /&gt;
  - サイドバー 120 x 600&lt;br /&gt;
  - ページの読み終わり 768 x 90&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;配色と枠線をサイトの背景色と同じにする。また、リンク色はサイトのリンク色（Webでは青が基本）と同じにする。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Google AdSenseの配置&lt;iframe width=&quot;420&quot; height=&quot;315&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; src=&quot;https://youtube.googleapis.com/v/G8lpZFJTpWk&amp;amp;source=uds&quot;&gt;&lt;/iframe&gt;&lt;br&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=G8lpZFJTpWk&quot;&gt;AdSense Tips: Consider Your Content When ...&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;結果&lt;/h4&gt;
    &lt;p&gt;広告収益は2倍になりました。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150401/20150401233412.jpg&quot; alt=&quot;f:id:nipe880324:20150401233412j:plain:w480&quot; title=&quot;f:id:nipe880324:20150401233412j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;PV数の伸びを計算にいれても、クリック率が2倍になったため、トータルとしての広告収入が増えました。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;adsense-2x-why&quot;&gt;なぜ、広告収入が2倍になるのか&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;広告収入がなぜ2倍になったのかを説明します。&lt;/p&gt;&lt;p&gt;まず、広告収入は次の等式が成り立ちます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;広告収入 = 広告クリック率 x 1クリック当たりの広告収入(CPC) x 広告表示回数(=PV数)&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
各項目は掛け算なので、どれか一つの項目を2倍にすることで、広告収入が2倍になります。&lt;br /&gt;
そして、今回は「Google Adsenseの広告サイズと配置、配色を変える」ことにより、広告クリック率を2倍にあげました。(※1)&lt;br /&gt;
&lt;i&gt;※1 サイトの現状、レイアウト、内容により効果は異なると考えられます。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;広告クリック率は、1%程度までならいけるらしいです。&lt;br /&gt;
今回は &lt;b&gt;0.13%から0.27% (約2倍) &lt;/b&gt;になったため、最終的な広告収入も2倍になりました。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;では、なぜ、広告クリック率が上がったか説明します。&lt;br /&gt;
一部仮説もあるので間違いがある可能性があります。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;広告サイズの最適化により、有用な広告を表示できるようになる。&lt;/h4&gt;
    &lt;p&gt;　広告を出す側も、複数の広告サイズに合わせて広告を作るのは大変です。そのため、多くの広告主がいる広告サイズというのは決まっています。&lt;br /&gt;
　それが、768 x 90 であったり、120 x 600 であったりするのです。広告主が多くいることにより、サイトに訪問した多様なユーザに興味のある広告をクリックさせることができ、ユーザの広告クリック率を向上させることができるようになります。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;広告を見える場所に大きく表示することで、広告に興味を持ちやすくなる。&lt;/h4&gt;
    &lt;p&gt;　広告をファーストビュー（サイトを開いたときに見える場所）に配置することで、広告が目に入るので、意識するようになります。&lt;br /&gt;
　もし、その広告に興味のある内容が表示されている場合、思わずクリックしてしまうと想定されます。&lt;br /&gt;
　しかし、内容ありきなので、広告を表示しすぎて、UUやPVの低下などが起こるほどのやりすぎには注意してください。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;配色と枠線を同じ色にすることで、広告臭を下げられる。&lt;/h4&gt;
    &lt;p&gt;　Googleの統計的な経験則的に広告収入が最大15%向上するらしい。&lt;br /&gt;
　これは、広告臭がなくなることで、ユーザがサイトのコンテンツとしてクリックしてくれやすくなるのかなと思います。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;adsense-2x-more&quot;&gt;より広告収入を増やすには&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;最後に「より広告収入を増やす方法」を説明します。&lt;br /&gt;
先ほどの広告収入の等式を再び見てみます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;広告収入 = 広告クリック率 x 1クリック当たりの広告収入(CPC) x 広告表示回数(=PV数)&lt;/pre&gt;&lt;p&gt;それぞれ、細かく考えていきます。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;広告クリック率&lt;/h4&gt;
    &lt;p&gt;広告クリック率はある程度サイトの属性やユーザー層などに応じて上限が決まっているので配置や色、サイズを調整しながら、0.4〜1%を目指していけばよいと思います。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;1クリックあたりの広告収入(CPC)&lt;/h4&gt;
    &lt;p&gt;確かではないですが、「CPCの高い広告」と「クリックした後のユーザの行動」が重要らしいです。&lt;/p&gt;&lt;p&gt;・「CPCの高い広告」というのは、例えば、株式やカードローンの広告の1クリックは数千円の収益になり、あまりな広告の1クリックは数10円程度という広告自体の価値があります。&lt;br /&gt;
　つまり、「CPCが高い広告」をたくさん表示できるようにすればよいことになり、そのためには、「CPCが高い広告」に興味があるユーザーを集めれるサイトを作ることで、広告エリアに「CPCが高い広告」が表示されやすくなります。&lt;/p&gt;&lt;p&gt;「CPCが高い広告」を調べるには、Google キーワードプランナーである程度確認することができぽいです。&lt;br /&gt;
（CPCが高い広告のためにサイトを運営しているわけではないので、私は意識していないので詳しくはわかりません）&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;・「クリックした後のユーザの行動」というのは、多分ですが、Googleはユーザーが広告をクリックした後に、実際に購入をした、問い合わせをしたといった広告主の収益につながる行動を起こしたかどうかも確認しているらしいです。&lt;br /&gt;
　ユーザーが広告主の収益につながる行動をした場合はCPCが上がります。逆に、収益につながらない行動（ただアクセスするだけですぐに離脱するなど）の場合はCPCが下がるようです。&lt;br /&gt;
　&lt;br /&gt;
この情報は確かではないですが、ユーザーに間違いを誘発させるように広告を押させたりして広告クリック率を上げたとしても、ユーザーは広告主の収益につながる行動をしないので、CPCが下がり、広告収入はクリック率の上昇に比べて増えないと考えられます。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;広告表示回数（PV数）&lt;/h4&gt;
    &lt;p&gt;PV数を上げることがサイト全体で見た場合に、伸びしろがあり、資産として積み上がっていくのでやりがいもある箇所です。&lt;br /&gt;
PVを上げるにはどうすればよいかというと「良質な記事を書き続ける」につきると思います。&lt;/p&gt;&lt;p&gt;とある調査で、ブログを1年書き続ける人は50%、ブログを2年書き続ける人は20%、ブログを3年書き続ける人は10%程度しかいないようです。&lt;br /&gt;
つまり、記事を書き続けているだけで競合が減っていき、記事が増えていくので多くのユーザーの目に止まりやすくなります。&lt;br /&gt;
そして、数年の経験で、記事を書く技術や、あるテーマへの知識レベルも高くなるので、より良い記事を書くことができます。&lt;/p&gt;&lt;p&gt;そのため、いかに続けるかが重要です。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;基本はこれとして、次のようなテクニックを使うことでより、さらなるPV数の向上を測れると思います。&lt;br /&gt;
・大量アクセスがあるキーワードや競合が少ないキーワードの選定する&lt;br /&gt;
・そのキーワードに適した記事を書く（キーワードはニーズが隠れているので、読者を想定して、いかにニーズを満たせるか考える）&lt;br /&gt;
・それらをGoogle Analyticsなどで分析しながら改善していく&lt;br /&gt;
ということを続けていくことで、PV数は着実に上がると考えています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nusacm.org/blog-of-adsense-revenue&quot;&gt;&amp;#x30D6;&amp;#x30ED;&amp;#x30AC;&amp;#x30FC;&amp;#x5FC5;&amp;#x8AAD;&amp;#xFF01;&amp;#x30D6;&amp;#x30ED;&amp;#x30B0;&amp;#x306E;&amp;#x30A2;&amp;#x30C9;&amp;#x30BB;&amp;#x30F3;&amp;#x30B9;&amp;#x53CE;&amp;#x5165;&amp;#x3092;&amp;#x30A2;&amp;#x30C3;&amp;#x30D7;&amp;#x3059;&amp;#x308B;&amp;#x65B9;&amp;#x6CD5;&amp;#xFF18;&amp;#x9078;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kanemotilevel.com/add/kizi289.html&quot;&gt;&amp;#x30A2;&amp;#x30C9;&amp;#x30BB;&amp;#x30F3;&amp;#x30B9;&amp;#x3067;&amp;#x6708;&amp;#xFF15;&amp;#x4E07;&amp;#x7A3C;&amp;#x3050;&amp;#x305F;&amp;#x3081;&amp;#x306E;&amp;#xFF11;&amp;#xFF15;&amp;#x306E;&amp;#x30CE;&amp;#x30A6;&amp;#x30CF;&amp;#x30A6;-&amp;#x30D6;&amp;#x30ED;&amp;#x30B0;&amp;#xFF0B;GoogleAdsense&amp;#x3067;&amp;#x304A;&amp;#x91D1;&amp;#x3092;&amp;#x7A3C;&amp;#x3050;&amp;#x65B9;&amp;#x6CD5;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://afi8.com/2011/06/27/3180/&quot;&gt;&amp;#x30B5;&amp;#x30A4;&amp;#x30C8;&amp;#x3054;&amp;#x3068;&amp;#x306B;&amp;#x7570;&amp;#x306A;&amp;#x308B;AdSense&amp;#x306E;&amp;#x30AF;&amp;#x30EA;&amp;#x30C3;&amp;#x30AF;&amp;#x7387;(CTR)&amp;#x3084;CPC | &amp;#x30A2;&amp;#x30D5;&amp;#x30A3;&amp;#x30EA;&amp;#x30A8;&amp;#x30A4;&amp;#x30C8;&amp;#x91CE;&amp;#x90CE;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://laugh-raku.com/archives/4326&quot;&gt;Adsense&amp;#x5148;&amp;#x751F;&amp;#x3059;&amp;#x3052;&amp;#x30FC;&amp;#x30C3;&amp;#xFF01;&amp;#xFF01;&amp;#x30AF;&amp;#x30EA;&amp;#x30C3;&amp;#x30AF;&amp;#x7387;&amp;#x3068;&amp;#x53CE;&amp;#x76CA;&amp;#x304C;1.88&amp;#x500D;&amp;#x306B;&amp;#x306A;&amp;#x308B;Adsense&amp;#x5E83;&amp;#x544A;&amp;#x4F4D;&amp;#x7F6E; | &amp;#x3089;&amp;#x3075;&amp;#x3089;&amp;#x304F;^^ ~&amp;#x30D6;&amp;#x30ED;&amp;#x30B0;&amp;#x3067;&amp;#x98EF;&amp;#x3092;&amp;#x98DF;&amp;#x3046;~&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wp-d.org/2013/02/05/2428/&quot;&gt;Google AdSense&amp;#x3060;&amp;#x3051;&amp;#x3067;&amp;#x5BB6;&amp;#x65CF;&amp;#x3092;&amp;#x990A;&amp;#x3063;&amp;#x3066;&amp;#x304D;&amp;#x305F;&amp;#x50D5;&amp;#x304C;&amp;#x3001;&amp;#x4ECA;&amp;#x307E;&amp;#x3067;&amp;#x3084;&amp;#x3063;&amp;#x3066;&amp;#x304D;&amp;#x305F;&amp;#x30D6;&amp;#x30ED;&amp;#x30B0;&amp;#x904B;&amp;#x55B6;&amp;#x8853;&amp;#x3092;&amp;#x30AC;&amp;#x30C1;&amp;#x3067;&amp;#x89E3;&amp;#x8AAC;&amp;#x3059;&amp;#x308B;&amp;#x3088; | WP-D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://support.google.com/adsense/answer/48182?hl=ja&quot;&gt;AdSense &amp;#x30D7;&amp;#x30ED;&amp;#x30B0;&amp;#x30E9;&amp;#x30E0; &amp;#x30DD;&amp;#x30EA;&amp;#x30B7;&amp;#x30FC; - AdSense &amp;#x30D8;&amp;#x30EB;&amp;#x30D7;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="ABテスト" label="ABテスト" />
        
        <category term="Google AdSense" label="Google AdSense" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>jQueryによるDOM操作をまとめてみた</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150331/1427809820"/>
        <id>hatenablog://entry/8454420450087766426</id>
        <published>2015-03-31T22:50:20+09:00</published>
        <updated>2015-03-31T22:56:25+09:00</updated>
        <summary type="html">jQueryを使うことでブラウザ間の違いを吸収しながらも、簡易にDOM操作のJavaScriptコードを記載することができます。よく使われるjQueryのDOM操作のメソッドをまとめました。
</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150311/20150311124141.jpg&quot; alt=&quot;f:id:nipe880324:20150311124141j:plain&quot; title=&quot;f:id:nipe880324:20150311124141j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/alcaide/&quot;&gt;Flickr: J. A. Alcaide&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;jQueryを使うことでブラウザ間の違いを吸収しながらも、簡易にDOM操作のJavaScriptコードを記載することができます。&lt;br /&gt;
よく使われるjQueryのDOM操作のメソッドをまとめました。&lt;/p&gt;&lt;p&gt;また、jQuery1.x系とjQuery 2.x系の選択基準として、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.x系は IE8 以前をサポートするレガシーブラウザ向けのバージョン&lt;/li&gt;
&lt;li&gt;2.x系は IE8 以前のサポートは捨てて、高速に安定して動作させることを目指したバージョン&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;ですので、適切なjQueryのバージョンを選んでください。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-ready&quot;&gt;jQueryの初期化処理の記述場所&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-append&quot;&gt;子要素の追加(append, appendTo, prepend, prependTo)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-after&quot;&gt;要素の挿入(after, insertAfter, before, insertBefore)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-replace&quot;&gt;要素の置換(replaceWith, replaceAll)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-remove&quot;&gt;要素の削除(remove, empty)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-attr&quot;&gt;属性の追加/設定/削除(attr, removeAttr)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-text-html&quot;&gt;要素のコンテンツの取得/設定(text, html)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-css&quot;&gt;CSSスタイルの操作(css, addClass, removeClass, toggleClass)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-hide-show&quot;&gt;表示/非表示(hide, show, toggle)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-form&quot;&gt;フォームの入力項目の値の取得/設定(val)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;jquery-dom-ready&quot;&gt;1. jQueryの初期化処理の記述場所&lt;/h3&gt;HTMLのロードが完了してからイベントハンドラの登録などの処理を行うようにしたいので、&lt;br /&gt;
jQueryの&lt;code&gt;ready&lt;/code&gt;メソッド内で処理を記述します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$(&lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;).ready(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// イベントハンドラの登録などのコード&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-append&quot;&gt;2. 子要素の追加(append, appendTo, prepend, prependTo)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$li = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;li&amp;gt;&#39;&lt;/span&gt;).text(&lt;span class=&quot;synConstant&quot;&gt;&#39;これは子要素のli要素&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// ulの子要素の末尾にliを追加&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;ul&#39;&lt;/span&gt;).append($li);
$li.appendTo($(&lt;span class=&quot;synConstant&quot;&gt;&#39;ul&#39;&lt;/span&gt;));

&lt;span class=&quot;synComment&quot;&gt;// ulの子要素の先頭にliを追加&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;ul&#39;&lt;/span&gt;).prepend($li);
$li.prependTo($(&lt;span class=&quot;synConstant&quot;&gt;&#39;ul&#39;&lt;/span&gt;));
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-after&quot;&gt;3. 要素の挿入(after, insertAfter, before, insertBefore)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$newLi = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;li&amp;gt;&#39;&lt;/span&gt;).text(&lt;span class=&quot;synConstant&quot;&gt;&#39;これは挿入するli要素&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// li要素の直後に新たなli要素を挿入&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;li&#39;&lt;/span&gt;).after($newLi);
$newLi.insertAfter($(&lt;span class=&quot;synConstant&quot;&gt;&#39;li&#39;&lt;/span&gt;));

&lt;span class=&quot;synComment&quot;&gt;// li要素の直前に新たなli要素を挿入&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;li&#39;&lt;/span&gt;).before($newLi);
$newLi.insertBefore($(&lt;span class=&quot;synConstant&quot;&gt;&#39;li&#39;&lt;/span&gt;));
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-replace&quot;&gt;4. 要素の置換(replaceWith, replaceAll)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// div要素を置換&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;).replaceWith($(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;).text(&lt;span class=&quot;synConstant&quot;&gt;&#39;要素を置換&#39;&lt;/span&gt;));

&lt;span class=&quot;synComment&quot;&gt;// 上記のコードと同じ&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;div要素を置換&amp;gt;&amp;lt;/div&amp;gt;&#39;&lt;/span&gt;).replaceAll($(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;));
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-remove&quot;&gt;5. 要素の削除(remove, empty)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// すべてのdiv要素を削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;).remove();

&lt;span class=&quot;synComment&quot;&gt;// すべてのli要素のうちclass属性がoddのものを削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;).remove(&lt;span class=&quot;synConstant&quot;&gt;&#39;.odd&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// div要素の子要素をすべて削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;).empty();
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-attr&quot;&gt;6. 属性の追加/設定/削除(attr, removeAttr)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// a要素のhref属性を取得&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; url = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;a&#39;&lt;/span&gt;).attr(&lt;span class=&quot;synConstant&quot;&gt;&#39;href&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// a要素のhref属性を設定&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;a&#39;&lt;/span&gt;).attr(&lt;span class=&quot;synConstant&quot;&gt;&#39;href&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;http://www.new.co.jp&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// 複数の属性をまとめて設定&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;a&#39;&lt;/span&gt;).attr(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  title: &lt;span class=&quot;synConstant&quot;&gt;&#39;Google&#39;&lt;/span&gt;,
  href: &lt;span class=&quot;synConstant&quot;&gt;&#39;http://www.new.co.jp&#39;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// a要素のhref属性を削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;a&#39;&lt;/span&gt;).removeAttr(&lt;span class=&quot;synConstant&quot;&gt;&#39;href&#39;&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-text-html&quot;&gt;7. 要素のコンテンツの取得/設定(text, html)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// h1要素内のテキストの設定と取得&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).text(&lt;span class=&quot;synConstant&quot;&gt;&#39;Hello, world&#39;&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; text = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).text(); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;Hello, world&#39;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;// h1要素内のHTMLの設定と取得&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).html(&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;a href=&amp;quot;http://sample.co.jp&amp;quot;&amp;gt;Hello, world&amp;lt;/a&amp;gt;&#39;&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; html = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).html(); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &amp;lt;a href=&amp;quot;http://sample.co.jp&amp;quot;&amp;gt;Hello, world&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-css&quot;&gt;8. CSSスタイルの操作(css, addClass, removeClass, toggleClass)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// スタイルの設定と取得&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// JSとCSSが密結合してしまうので、下記のaddClass/removeClassを使う方がよい&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).css(&lt;span class=&quot;synConstant&quot;&gt;&#39;color&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;red&#39;&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; color = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).css(&lt;span class=&quot;synConstant&quot;&gt;&#39;color&#39;&lt;/span&gt;); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; rgb(255, 0, 0)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// class属性にtitleクラスを追加&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).addClass(&lt;span class=&quot;synConstant&quot;&gt;&#39;title&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// class属性にtitleクラスを削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).removeClass(&lt;span class=&quot;synConstant&quot;&gt;&#39;title&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// class属性にtitleクラスの追加/削除を切り替える&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).toggleClass(&lt;span class=&quot;synConstant&quot;&gt;&#39;title&#39;&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-hide-show&quot;&gt;9. 表示/非表示(hide, show, toggle)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// id属性がcontentsの要素を非表示にする&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#contents&#39;&lt;/span&gt;).hide();

&lt;span class=&quot;synComment&quot;&gt;// id属性がcontentsの要素を表示にする&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#contents&#39;&lt;/span&gt;).show();

&lt;span class=&quot;synComment&quot;&gt;// id属性がcontentsの要素を表示/非表示を切り替える&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#contents&#39;&lt;/span&gt;).toggle();
&lt;/pre&gt;&lt;p&gt;※あまり大きい範囲にhide()やshow()をやるとパフォーマンスが悪くなる場合があるらしい。エッジケースのためにjQueryが特別な処理をやっていてそれがネックになるらしい&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-form&quot;&gt;10. フォームの入力項目の値の取得/設定(val)&lt;/h3&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;テキストフィールドの値の取得と設定&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#email&#39;&lt;/span&gt;).val(&lt;span class=&quot;synConstant&quot;&gt;&#39;satoshi@email.com&#39;&lt;/span&gt;); &lt;span class=&quot;synComment&quot;&gt;// 値の設定&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; email = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;#email&#39;&lt;/span&gt;).val();        &lt;span class=&quot;synComment&quot;&gt;// 値の取得(&#39;satoshi@email.com&#39;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;チェックされているラジオボタンの取得&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;man&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;man&amp;quot;&lt;/span&gt;&amp;gt;男性&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;woman&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;woman&amp;quot;&lt;/span&gt;&amp;gt;女性&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;other&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;other&amp;quot;&lt;/span&gt;&amp;gt;その他&amp;lt;/label&amp;gt;


&lt;span class=&quot;synComment&quot;&gt;// チェックされていないラジオボタンの取得&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; checkedValue = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;input[name=gender]:checked&#39;&lt;/span&gt;).val();
&lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; undefine (チェックされていない場合)&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &amp;quot;1&amp;quot;      (男性がチェックされている場合)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;チェックされているチェックボックスの取得&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hobby&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sport&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sport&amp;quot;&lt;/span&gt;&amp;gt;スポーツ&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hobby&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;travel&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;travel&amp;quot;&lt;/span&gt;&amp;gt;旅行&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hobby&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;reading&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;reading&amp;quot;&lt;/span&gt;&amp;gt;読書&amp;lt;/label&amp;gt;


&lt;span class=&quot;synComment&quot;&gt;// チェックされているチェックボックスの取得&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; checkedValues = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;input[name=hobby]:checked&#39;&lt;/span&gt;).map(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(_, element) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; element.value; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; []         (チェックされていない場合)&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;] (スポーツと旅行が選択されている場合)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;独習JavaScript 第2版&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="Javascript" label="Javascript" />
        
        <category term="jQuery" label="jQuery" />
        
        <category term="まとめ" label="まとめ" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>jQueryの疎結合なイベント処理</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150326/1427379215"/>
        <id>hatenablog://entry/8454420450087768800</id>
        <published>2015-03-26T23:13:35+09:00</published>
        <updated>2015-03-26T23:13:35+09:00</updated>
        <summary type="html">jQueryを使ってイベント処理の登録と削除方法、登録できるイベントの一覧を説明します。
また、JavaScriptはイベントを通してHTMLと結びついているので、イベントハンドラのコーディングと修正に多くの時間を使います。
そのため、イベントハンドラとアプリケーションロジックを分離することで、疎結合にする考え方も説明します。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150311/20150311131822.jpg&quot; alt=&quot;f:id:nipe880324:20150311131822j:plain&quot; title=&quot;f:id:nipe880324:20150311131822j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/mandj98/&quot;&gt;Flickr: James Marvin Phelps&amp;#39; Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;jQueryを使ってイベント処理の登録と削除方法、登録できるイベントの一覧を説明します。&lt;br /&gt;
また、JavaScriptはイベントを通してHTMLと結びついているので、イベントハンドラのコーディングと修正に多くの時間を使います。&lt;br /&gt;
そのため、イベントハンドラとアプリケーションロジックを分離することで、疎結合にする考え方も説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-event-on&quot;&gt;イベントハンドラの登録(on)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-event-off&quot;&gt;イベントハンドラの削除(off)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-event-list&quot;&gt;イベント一覧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-event-good-design&quot;&gt;イベントハンドラとアプリケーションロジックを分離する&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;jquery-event-on&quot;&gt;1. イベントハンドラの登録(on)&lt;/h3&gt;&lt;code&gt;on&lt;/code&gt;メソッドを使うことでイベントハンドラを登録することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// クリックのイベントハンドラを登録&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#confirm&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;confirm&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&#39;送信しますか？&#39;&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// 第二引数にセレクタを指定することで、現在の要素だけでなく、今後動的に追加された要素にもイベントハンドラを登録する&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#confirm&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;input[type=submit]&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;jquery-event-off&quot;&gt;2. イベントハンドラの削除(off)&lt;/h3&gt;逆に&lt;code&gt;off&lt;/code&gt;メソッドを使うことで、登録してあるイベントハンドラを削除できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// すべてのイベントハンドラを削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#confirm&#39;&lt;/span&gt;).off();

&lt;span class=&quot;synComment&quot;&gt;// clickのイベントハンドラを削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#confirm&#39;&lt;/span&gt;).off(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// body要素ないのすべての送信ボタン(input[type=submit])からclickのイベントハンドラを削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;body&#39;&lt;/span&gt;).off(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;input[type=submit]&#39;&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;jquery-event-list&quot;&gt;3. イベント一覧&lt;/h3&gt;利用可能なイベントをまとめました。&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;名前 &lt;/th&gt; &lt;th&gt;発生タイミング&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;blur &lt;/td&gt; &lt;td&gt;要素からフォーカスが外れた&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;change &lt;/td&gt; &lt;td&gt;要素の値が変化した&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;click&lt;/td&gt; &lt;td&gt;要素がクリックされた&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dblclick &lt;/td&gt; &lt;td&gt;要素がダブルクリックされた&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;error&lt;/td&gt; &lt;td&gt;画像の読み込みに失敗した&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;focus&lt;/td&gt; &lt;td&gt;要素にフォーカスが移動した&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;focusin&lt;/td&gt; &lt;td&gt;要素にフォーカスが移動した&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;focusout&lt;/td&gt; &lt;td&gt;要素からフォーカスが外れた&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;keydown&lt;/td&gt; &lt;td&gt;キーが押された&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;keypress &lt;/td&gt; &lt;td&gt;キーが押されている&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;keyup&lt;/td&gt; &lt;td&gt;キーを離した&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;load &lt;/td&gt; &lt;td&gt;ページ（要素）がロードされた&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mousedown&lt;/td&gt; &lt;td&gt;マウスのボタンが押された&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mouseenter &lt;/td&gt; &lt;td&gt;マウス・ポインタが要素に乗った&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mouseleave &lt;/td&gt; &lt;td&gt;マウス・ポインタが要素から離れた&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mousemove&lt;/td&gt; &lt;td&gt;マウス・ポインタが要素の中で移動&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mouseout &lt;/td&gt; &lt;td&gt;マウス・ポインタが要素から離れた&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mouseover&lt;/td&gt; &lt;td&gt;マウス・ポインタが要素に乗った&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mouseup&lt;/td&gt; &lt;td&gt;マウスのボタンを離した&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;resize &lt;/td&gt; &lt;td&gt;ウィンドウをリサイズ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;scroll &lt;/td&gt; &lt;td&gt;スクロールした&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;select &lt;/td&gt; &lt;td&gt;テキストボックス／テキストエリアのテキストを選択した&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;submit &lt;/td&gt; &lt;td&gt;フォームをサブミットした&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;unload &lt;/td&gt; &lt;td&gt;ページをアンロード&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-event-good-design&quot;&gt;4. イベントハンドラとアプリケーションロジックを分離する&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;イベントハンドラとアプリケーションロジックが結合している悪いコードです。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Bad&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; handleClick(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; popup = &lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;synConstant&quot;&gt;&#39;popup&#39;&lt;/span&gt;);
  popup.style.left = &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientX + &lt;span class=&quot;synConstant&quot;&gt;&#39;px&#39;&lt;/span&gt;;
  popup.style.&lt;span class=&quot;synStatement&quot;&gt;top&lt;/span&gt;  = &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientY + &lt;span class=&quot;synConstant&quot;&gt;&#39;px&#39;&lt;/span&gt;;
  popup.className  = &lt;span class=&quot;synConstant&quot;&gt;&#39;reveal&#39;&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#element&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;, handleClick());
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
まずは、「イベントハンドラとアプリケーションロジックを切り分ける」ことを行います。&lt;br /&gt;
&lt;code&gt;showPopup&lt;/code&gt;メソッドを新たに作り、イベントハンドラからアプリケーションロジックを切り分けます。&lt;br /&gt;
こうすることで、アプリケーションロジック(shosPopup)を複数の地点から呼び出すことができるようになる。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MyApp = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;

  handleClick: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// showPopupにアプリケーションロジックを分離する&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.showPopup(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

  &lt;span class=&quot;synComment&quot;&gt;// showPopupにアプリケーションロジックを分離する&lt;/span&gt;
  showPopup: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; popup = &lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;synConstant&quot;&gt;&#39;popup&#39;&lt;/span&gt;);
    popup.style.left = &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientX + &lt;span class=&quot;synConstant&quot;&gt;&#39;px&#39;&lt;/span&gt;;
    popup.style.&lt;span class=&quot;synStatement&quot;&gt;top&lt;/span&gt;  = &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientY + &lt;span class=&quot;synConstant&quot;&gt;&#39;px&#39;&lt;/span&gt;;
    popup.className  = &lt;span class=&quot;synConstant&quot;&gt;&#39;reveal&#39;&lt;/span&gt;;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;

$(&lt;span class=&quot;synConstant&quot;&gt;&#39;element&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  MyApp.handleClick(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、「イベントオブジェクト(event)を引き回さない」ようにします。&lt;br /&gt;
イベントハンドラで引き渡されるイベントオブジェクト(event)は多くの情報を持っています。&lt;br /&gt;
便利なのですが、eventを関数の引数として引き回すと、関数で必要な情報がわかりづらいのでコードの可読性が下がってしまいます。&lt;br /&gt;
そのため、必要な値だけを渡すようにします。&lt;/p&gt;&lt;p&gt;&lt;code&gt;showPopup&lt;/code&gt;メソッドは、eventオブジェクトのX, Y座標のみしか使わないので、&lt;code&gt;handleClick&lt;/code&gt;メソッドからは、その2つのみを引数で渡すようにします。&lt;br /&gt;
こうすることで、&lt;code&gt;showPopup&lt;/code&gt;に必要な値が明確になるので、より他のメソッドから呼びやすくなり、テストもしやすくなります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; MyApp = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;

  handleClick: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// X, Y座標のみを渡す&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.showPopup(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientX, &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientY);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,

  showPopup: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(x, y) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; popup = &lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;synConstant&quot;&gt;&#39;popup&#39;&lt;/span&gt;);
    popup.style.left = x + &lt;span class=&quot;synConstant&quot;&gt;&#39;px&#39;&lt;/span&gt;;
    popup.style.&lt;span class=&quot;synStatement&quot;&gt;top&lt;/span&gt;  = y + &lt;span class=&quot;synConstant&quot;&gt;&#39;px&#39;&lt;/span&gt;;
    popup.className  = &lt;span class=&quot;synConstant&quot;&gt;&#39;reveal&#39;&lt;/span&gt;;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;

$(&lt;span class=&quot;synConstant&quot;&gt;&#39;element&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  MyApp.handleClick(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
さらに、jQueryのバブリング(伝播)のキャンセル処理を追加する場合は次のようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;handleClick: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// DOM Level 2イベントのサポートが前提&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.preventDefault();  &lt;span class=&quot;synComment&quot;&gt;// その要素のイベントをキャンセル&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.stopPropagation(); &lt;span class=&quot;synComment&quot;&gt;// 親要素への伝播をキャンセル&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;// アプリケーションロジックの実行&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.showPopup(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientX, &lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;.clientY);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;バブリングの参考URL: &lt;a href=&quot;http://blog.neo.jp/dnblog/index.php?module=Blog&amp;action=Entry&amp;blog=pg&amp;entry=3107&amp;rand=ef81c&quot;&gt;&amp;#x3075;&amp;#x3058;&amp;#x3053;&amp;#x306E;&amp;#x30D7;&amp;#x30ED;&amp;#x30B0;&amp;#x30E9;&amp;#x30DF;&amp;#x30F3;&amp;#x30B0;&amp;#x596E;&amp;#x95D8;&amp;#x8A18;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;独習JavaScript 第2版&lt;/li&gt;
&lt;li&gt;メンテナブルJavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="Javascript" label="Javascript" />
        
        <category term="jQuery" label="jQuery" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>jQueryによるAjax処理</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150325/1427291741"/>
        <id>hatenablog://entry/8454420450087769920</id>
        <published>2015-03-25T22:55:41+09:00</published>
        <updated>2015-04-14T00:49:20+09:00</updated>
        <summary type="html">jQueryの$.getメソッドと$.postメソッドの使い方を説明します。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150311/20150311133550.jpg&quot; alt=&quot;f:id:nipe880324:20150311133550j:plain&quot; title=&quot;f:id:nipe880324:20150311133550j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/josemanuelerre/&quot;&gt;Flickr: josemanuelerre&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;$.get&lt;/li&gt;
&lt;li&gt;$.post&lt;/li&gt;
&lt;li&gt;$.load&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;1. $.get&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;$.get&lt;/code&gt;メソッドで、Ajaxで&#39;/data.json&#39;にGETリクエストを行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$.get(&lt;span class=&quot;synConstant&quot;&gt;&#39;/data.json&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(data) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 成功時に行われる処理&lt;/span&gt;
  console.log(&lt;span class=&quot;synConstant&quot;&gt;&#39;callback&#39;&lt;/span&gt; + data);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;)
.fail(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(data) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 失敗時に行われる処理&lt;/span&gt;
  console.log(&lt;span class=&quot;synConstant&quot;&gt;&#39;Failed&#39;&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;2. $.post&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;$.post&lt;/code&gt;メソッドで、Ajaxで&#39;/post.php&#39;にPOSTリクエストを行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$.post(&lt;span class=&quot;synConstant&quot;&gt;&#39;/post.php&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 第二引数は、POSTするパラメータ&lt;/span&gt;
  title: &lt;span class=&quot;synConstant&quot;&gt;&#39;Post Title&#39;&lt;/span&gt;,
  body:  &lt;span class=&quot;synConstant&quot;&gt;&#39;Post Content&#39;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(data) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 成功時に行われる処理&lt;/span&gt;
  console.log(&lt;span class=&quot;synConstant&quot;&gt;&#39;callback&#39;&lt;/span&gt; + data);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;)
.fail(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(data) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 失敗時に行われる処理&lt;/span&gt;
  console.log(&lt;span class=&quot;synConstant&quot;&gt;&#39;Failed&#39;&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;3. $.load&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;$.load&lt;/code&gt;はHTMLを読み込み、DOMに挿入します。&lt;br /&gt;
なんど&lt;code&gt;load()&lt;/code&gt;を実行しても&lt;code&gt;append()&lt;/code&gt;のように要素は追加されません。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$(&lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;).ready(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;// イベント処理の登録&lt;/span&gt;
  $(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#todo-list&amp;quot;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    loadTodos( $(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;) );
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

  &lt;span class=&quot;synComment&quot;&gt;// 指定したエレメントにTodoをロードする&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 第一引数 : HTMLを読み込むURL&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 第二引数 : パラメータ。指定するとPOSTメソッドになる。&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 　　　　　GETでパラメータを渡したい場合はURLにクエリストリング(?id=xxx&amp;amp;q=yyy)で指定する(省略化)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 第三引数：通信完了後に実行されるコールバック&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; loadTodos = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; (element) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    element.load(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/todos/index.html&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;// 通信完了時のコールバック関数&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;

&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Ajax時にURLが変わらないので、ブラウザの戻るや進むボタンが使いづらいという問題があります。&lt;br /&gt;
それを解決する方法として、&lt;a href=&quot;http://falsandtru.github.io/jquery-pjax/&quot;&gt;PJAX&lt;/a&gt;という解決策があります。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;独習JavaScript 第2版&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.jquery.com/&quot;&gt;jQuery API Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="Javascript" label="Javascript" />
        
        <category term="jQuery" label="jQuery" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>JavaScriptで設定データをコードと分離する</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150317/1426599220"/>
        <id>hatenablog://entry/8454420450087906919</id>
        <published>2015-03-17T22:33:40+09:00</published>
        <updated>2015-03-19T22:47:46+09:00</updated>
        <summary type="html">良い設計のアプリケーションは、「生きた設定データ」をソースコードのメイン部分と分離し、設定データの変更を容易にし、意図しないバグを含まないようにします。「URL」、「UIに表示される文字列」、「繰り返される一意の値」、「設定(ページごとの項目など)」、「変更されるかもしれない値」といった値が変わるかもしれない設定データをソースコードと分離します。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150312/20150312210900.jpg&quot; alt=&quot;f:id:nipe880324:20150312210900j:plain&quot; title=&quot;f:id:nipe880324:20150312210900j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/7422037@N06/&quot;&gt;Flickr: BlueisCoool&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;良い設計のアプリケーションは、「生きた設定データ」をソースコードのメイン部分と分離し、設定データの変更を容易にし、意図しないバグを含まないようにします。&lt;/p&gt;&lt;p&gt;「URL」、「UIに表示される文字列」、「繰り返される一意の値」、「設定(ページごとの項目など)」、「変更されるかもしれない値」といった&lt;b&gt;値が変わるかもしれない設定データ&lt;/b&gt;をソースコードと分離します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;コード内に設定データが含まれています。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Bad&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; validate(value) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!value) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Invalid value&amp;quot;&lt;/span&gt;);                &lt;span class=&quot;synComment&quot;&gt;// 設定データ(メッセージ)&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;location&lt;/span&gt;.href = &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/errors/invalid.php&amp;quot;&lt;/span&gt;; &lt;span class=&quot;synComment&quot;&gt;// 設定データ(URL)&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; tobbleSelected(element) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (hasClass(element, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;selected&amp;quot;&lt;/span&gt;)) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;// 設定データ(class属性)&lt;/span&gt;
    removeClass(element, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;selected&amp;quot;&lt;/span&gt;);   &lt;span class=&quot;synComment&quot;&gt;// 設定データ(class属性)&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    addClass(element, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;selected&amp;quot;&lt;/span&gt;);      &lt;span class=&quot;synComment&quot;&gt;// 設定データ(class属性)&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;コードから設定データを分離します。&lt;br /&gt;
こうすることで、複数の箇所に同じデータが使われている場合、変更し忘れがなくなります。また、テスト用や開発用など設定データを環境に応じて簡単に変更できるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Good&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; config = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  MSG_INVALID_VALUE: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Invalid value&amp;quot;&lt;/span&gt;,
  URL_INVALID:       &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/errors/invalid.php&amp;quot;&lt;/span&gt;,
  CSS_SELECTED:      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;selected&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;

&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; validate(value) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!value) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;alert&lt;/span&gt;(config.MSG_INVALID_VALUE);
    &lt;span class=&quot;synStatement&quot;&gt;location&lt;/span&gt;.href = config.URL_INVALID;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; tobbleSelected(element) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (hasClass(element, config.CSS_SELECTED)) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    removeClass(element, config.CSS_SELECTED);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    addClass(element, config.CSS_SELECTED);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;メンテナブルJavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="Javascript" label="Javascript" />
        
        <category term="設計" label="設計" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>無料枠内でのHerokuの準備とデプロイ（Mac 10 + Rails 4.2 + MySQL 5.6）</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150314/1426332751"/>
        <id>hatenablog://entry/8454420450088022039</id>
        <published>2015-03-14T20:32:31+09:00</published>
        <updated>2015-07-29T00:33:50+09:00</updated>
        <summary type="html">Herokuで無料枠内で使うための準備とデプロイの流れについて簡単にまとめました。
Mac + Ruby 2.2.1 + Rails 4.2 + MySQL 5.6でやりました。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150314/20150314010758.jpg&quot; alt=&quot;f:id:nipe880324:20150314010758j:plain&quot; title=&quot;f:id:nipe880324:20150314010758j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;無料枠内でのHerokuの使うための準備とデプロイの流れについて簡単にまとめました。&lt;br /&gt;
環境は次の通りです。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Mac OS X 10 Yosemite&lt;/li&gt;
&lt;li&gt;Ruby 2.2.1&lt;/li&gt;
&lt;li&gt;Rails 4.2&lt;/li&gt;
&lt;li&gt;MySQL 5.6&lt;/li&gt;
&lt;li&gt;heroku-toolbelt 3.40.6&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#heroku-preparation&quot;&gt;Herokuの準備&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heroku-deploy&quot;&gt;Herokuへデプロイ&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;heroku-preparation&quot;&gt;1. Herokuの準備&lt;/h3&gt;Herokuアカウントを作成する&lt;br /&gt;
&lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku | Cloud Application Platform&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Heroku Toolbeltをインストール&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ brew install heroku-toolbelt&lt;/pre&gt;&lt;p&gt;Herokuにローカルの公開鍵(~/.ssh/id_ras.pub)を登録&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ heroku keys:add&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;heroku-deploy&quot;&gt;2. Herokuへデプロイ&lt;/h3&gt;既にRailsのアプリがあることが前提です。&lt;br /&gt;
また、&lt;code&gt;database.yml&lt;/code&gt;を下記のようにしておくことで、環境変数で値を設定できる世にしておきます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# config/database.yml

production:
  adapter:  mysql2   # postgresの場合はadapterをpostgresql
  encoding: utf8
  database: &amp;lt;%= ENV[&amp;#39;DB_NAME&amp;#39;] %&amp;gt;
  username: &amp;lt;%= ENV[&amp;#39;DB_USERNAME&amp;#39;] %&amp;gt;
  password: &amp;lt;%= ENV[&amp;#39;DB_PASSWORD&amp;#39;] %&amp;gt;
  host:     &amp;lt;%= ENV[&amp;#39;DB_HOSTNAME&amp;#39;] %&amp;gt;
  port:     &amp;lt;%= ENV[&amp;#39;DB_PORT&amp;#39;] %&amp;gt;&lt;/pre&gt;&lt;p&gt;Herokuにコマンドライン上でログイン&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ heroku login&lt;/pre&gt;&lt;p&gt;Herokuアプリを作成&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ cd my-project/
$ heroku apps:create [app_name]
# ※ app_nameは小文字で始まり、小文字、数字、-のみしかつかえません&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Herokuのリモートリポジトリを確認&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ git remote -v
heroku https://git.heroku.com/mysterious-crag-1792.git (fetch)
heroku  https://git.heroku.com/mysterious-crag-1792.git (push)
origin  git@github.com:nipe0324/trough.git (fetch)
origin  git@github.com:nipe0324/trough.git (push)&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Herokuのリモートリポジトリが適切でない場合は、下記コマンドで設定&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ heroku git:remote -a [APP_NAME]&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
無料のDB(※)を追加する&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# MySQLの場合
$ heroku addons:create cleardb:ignite

# PostgreSQLの場合
$ heroku addons:create heroku-postgresql&lt;/pre&gt;&lt;p&gt;&lt;i&gt;※ 無料ですが、クレジットカードの登録が必要です。また、5MB以上で自動でデータが消える？らしいです。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;HerokuのアプリにDB情報の環境変数を設定する&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# 設定を確認する
$ heroku config
# DB接続の書式 mysql://[username]:[password]@[hostname]/[db_name]?reconnect=true

# 環境変数を設定する
$ heroku config:add DB_NAME=&amp;#34;[db_name]&amp;#34;
$ heroku config:add DB_USERNAME=&amp;#34;[username]&amp;#34;
$ heroku config:add DB_PASSWORD=&amp;#34;[password]&amp;#34;
$ heroku config:add DB_HOSTNAME=&amp;#34;[hostname]&amp;#34;
$ heroku config:add DB_PORT=&amp;#34;3306&amp;#34;
# postgresの場合DB_PORTは5432

# 設定できたことを確認する
$ heroku config&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ローカルリポジトリをHeorkuへプッシュ（デプロイ）&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ git push heroku master&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Heroku上でコマンドの実行(Railsの場合は以下の通り)&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ heroku run rake db:migrate

# 必要ならシードデータもいれておく
$ heroku run rake db:seed&lt;/pre&gt;&lt;p&gt;デプロイしたアプリをブラウザで開く&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ heroku open&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
デプロイしたアプリのログ確認&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ heroku logs&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;</content>
        
        
        <category term="インフラ" label="インフラ" />
        
        <category term="Heroku" label="Heroku" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>Javascriptのthisの参照先をまとめてみた</title>
        <link href="http://ruby-rails.hatenadiary.com/entry/20150313/1426238835"/>
        <id>hatenablog://entry/8454420450087759232</id>
        <published>2015-03-13T18:27:15+09:00</published>
        <updated>2015-03-13T18:29:12+09:00</updated>
        <summary type="html">JavaScriptのthisは属しているオブジェクトによって参照先が変わります。
コンストラクタ内、オブジェクト内、イベントハンドラ内などのthisの参照先をまとめました。</summary>
        <content type="html">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150311/20150311110349.jpg&quot; alt=&quot;f:id:nipe880324:20150311110349j:plain&quot; title=&quot;f:id:nipe880324:20150311110349j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/bcnbits/with/5385288212/&quot;&gt;Flickr: MorBCN&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;JavaScriptの&lt;code&gt;this&lt;/code&gt;は属しているオブジェクトによって参照先が変わります。&lt;br /&gt;
コンストラクタ内、オブジェクト内、イベントハンドラ内などの&lt;code&gt;this&lt;/code&gt;の参照先をまとめました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-this-constructor&quot;&gt;コンストラクタ内のthis: 生成するオブジェクトへの参照&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-this-object&quot;&gt;オブジェクトのメソッド: 呼び出しオブジェクトへの参照&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-this-event&quot;&gt;イベントハンドラ内のthis: イベントの呼び出し元の要素への参照&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-this-global&quot;&gt;グローバルなスコープや関数内でのthis: グローバルオブジェクト(windowかglobal)を参照&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;javascript-this-constructor&quot;&gt;1. コンストラクタ内のthis: 生成するオブジェクトへの参照&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// thisは生成するオブジェクト(Personインスタンス)への参照&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;javascript-this-object&quot;&gt;2. オブジェクトのメソッド: 呼び出しオブジェクトへの参照&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  value: &lt;span class=&quot;synConstant&quot;&gt;&#39;objのvalueプロパティ&#39;&lt;/span&gt;,

  getValue: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// thisは、objオブジェクトへの参照&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.value;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;

console.log(obj.getValue()); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;objのvalueプロパティ&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;javascript-this-event&quot;&gt;3. イベントハンドラ内のthis: イベントの呼び出し元の要素への参照&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;my-button&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;クリックするとボタンが無効になります&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.onload = &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; button = &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.getElementById&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&#39;my-button&#39;&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;    button.addEventListener&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;// thisは、input要素への参照&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.value    = &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;クリックされました&#39;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.disabled = &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;javascript-this-global&quot;&gt;4. グローバルなスコープや関数内でのthis: グローバルオブジェクト(windowかglobal)を参照&lt;/h3&gt;ブラウザの場合は&lt;code&gt;window&lt;/code&gt;, Node.jsの場合&lt;code&gt;global&lt;/code&gt;というグローバルオブジェクトを参照します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; val = &lt;span class=&quot;synConstant&quot;&gt;&#39;global&#39;&lt;/span&gt;;

&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; func() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.val;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

console.log( val );        &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;global&#39;&lt;/span&gt;
console.log( &lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;.val ); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;global&#39;&lt;/span&gt;
console.log( &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.val );   &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;global&#39;&lt;/span&gt;
console.log( func() );     &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;global&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;独習JavaScript 第2版&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/vvakame/items/74005adacc0e8e2a3cab&quot;&gt;JavaScript&amp;#x306E;this&amp;#x306E;&amp;#x899A;&amp;#x3048;&amp;#x65B9; - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content>
        
        
        <category term="Javascript" label="Javascript" />
        
        <category term="まとめ" label="まとめ" />
        

        <author>
            <name>nipe880324</name>
        </author>
    </entry>
    
  
</feed>
