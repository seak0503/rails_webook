<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>まとめ - Rails Webook</title>
    <link>http://ruby-rails.hatenadiary.com/category/%E3%81%BE%E3%81%A8%E3%82%81</link>
    <description>自社のECを開発している会社で働いています。Rails情報やサービスを成長させる方法を書いていきます</description>
    <lastBuildDate>Fri, 18 Dec 2015 02:44:31 +0900</lastBuildDate>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <generator>Hatena::Blog</generator>
    
      
      
        <item>
          <title>jQueryによるDOM操作をまとめてみた</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150331/1427809820</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150311/20150311124141.jpg&quot; alt=&quot;f:id:nipe880324:20150311124141j:plain&quot; title=&quot;f:id:nipe880324:20150311124141j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/alcaide/&quot;&gt;Flickr: J. A. Alcaide&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;jQueryを使うことでブラウザ間の違いを吸収しながらも、簡易にDOM操作のJavaScriptコードを記載することができます。&lt;br /&gt;
よく使われるjQueryのDOM操作のメソッドをまとめました。&lt;/p&gt;&lt;p&gt;また、jQuery1.x系とjQuery 2.x系の選択基準として、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.x系は IE8 以前をサポートするレガシーブラウザ向けのバージョン&lt;/li&gt;
&lt;li&gt;2.x系は IE8 以前のサポートは捨てて、高速に安定して動作させることを目指したバージョン&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;ですので、適切なjQueryのバージョンを選んでください。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-ready&quot;&gt;jQueryの初期化処理の記述場所&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-append&quot;&gt;子要素の追加(append, appendTo, prepend, prependTo)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-after&quot;&gt;要素の挿入(after, insertAfter, before, insertBefore)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-replace&quot;&gt;要素の置換(replaceWith, replaceAll)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-remove&quot;&gt;要素の削除(remove, empty)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-attr&quot;&gt;属性の追加/設定/削除(attr, removeAttr)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-text-html&quot;&gt;要素のコンテンツの取得/設定(text, html)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-css&quot;&gt;CSSスタイルの操作(css, addClass, removeClass, toggleClass)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-hide-show&quot;&gt;表示/非表示(hide, show, toggle)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-dom-form&quot;&gt;フォームの入力項目の値の取得/設定(val)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;jquery-dom-ready&quot;&gt;1. jQueryの初期化処理の記述場所&lt;/h3&gt;HTMLのロードが完了してからイベントハンドラの登録などの処理を行うようにしたいので、&lt;br /&gt;
jQueryの&lt;code&gt;ready&lt;/code&gt;メソッド内で処理を記述します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$(&lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;).ready(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// イベントハンドラの登録などのコード&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-append&quot;&gt;2. 子要素の追加(append, appendTo, prepend, prependTo)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$li = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;li&amp;gt;&#39;&lt;/span&gt;).text(&lt;span class=&quot;synConstant&quot;&gt;&#39;これは子要素のli要素&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// ulの子要素の末尾にliを追加&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;ul&#39;&lt;/span&gt;).append($li);
$li.appendTo($(&lt;span class=&quot;synConstant&quot;&gt;&#39;ul&#39;&lt;/span&gt;));

&lt;span class=&quot;synComment&quot;&gt;// ulの子要素の先頭にliを追加&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;ul&#39;&lt;/span&gt;).prepend($li);
$li.prependTo($(&lt;span class=&quot;synConstant&quot;&gt;&#39;ul&#39;&lt;/span&gt;));
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-after&quot;&gt;3. 要素の挿入(after, insertAfter, before, insertBefore)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$newLi = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;li&amp;gt;&#39;&lt;/span&gt;).text(&lt;span class=&quot;synConstant&quot;&gt;&#39;これは挿入するli要素&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// li要素の直後に新たなli要素を挿入&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;li&#39;&lt;/span&gt;).after($newLi);
$newLi.insertAfter($(&lt;span class=&quot;synConstant&quot;&gt;&#39;li&#39;&lt;/span&gt;));

&lt;span class=&quot;synComment&quot;&gt;// li要素の直前に新たなli要素を挿入&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;li&#39;&lt;/span&gt;).before($newLi);
$newLi.insertBefore($(&lt;span class=&quot;synConstant&quot;&gt;&#39;li&#39;&lt;/span&gt;));
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-replace&quot;&gt;4. 要素の置換(replaceWith, replaceAll)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// div要素を置換&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;).replaceWith($(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;).text(&lt;span class=&quot;synConstant&quot;&gt;&#39;要素を置換&#39;&lt;/span&gt;));

&lt;span class=&quot;synComment&quot;&gt;// 上記のコードと同じ&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;div要素を置換&amp;gt;&amp;lt;/div&amp;gt;&#39;&lt;/span&gt;).replaceAll($(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;));
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-remove&quot;&gt;5. 要素の削除(remove, empty)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// すべてのdiv要素を削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;).remove();

&lt;span class=&quot;synComment&quot;&gt;// すべてのli要素のうちclass属性がoddのものを削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;).remove(&lt;span class=&quot;synConstant&quot;&gt;&#39;.odd&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// div要素の子要素をすべて削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;div&#39;&lt;/span&gt;).empty();
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-attr&quot;&gt;6. 属性の追加/設定/削除(attr, removeAttr)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// a要素のhref属性を取得&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; url = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;a&#39;&lt;/span&gt;).attr(&lt;span class=&quot;synConstant&quot;&gt;&#39;href&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// a要素のhref属性を設定&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;a&#39;&lt;/span&gt;).attr(&lt;span class=&quot;synConstant&quot;&gt;&#39;href&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;http://www.new.co.jp&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// 複数の属性をまとめて設定&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;a&#39;&lt;/span&gt;).attr(&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  title: &lt;span class=&quot;synConstant&quot;&gt;&#39;Google&#39;&lt;/span&gt;,
  href: &lt;span class=&quot;synConstant&quot;&gt;&#39;http://www.new.co.jp&#39;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// a要素のhref属性を削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;a&#39;&lt;/span&gt;).removeAttr(&lt;span class=&quot;synConstant&quot;&gt;&#39;href&#39;&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-text-html&quot;&gt;7. 要素のコンテンツの取得/設定(text, html)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// h1要素内のテキストの設定と取得&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).text(&lt;span class=&quot;synConstant&quot;&gt;&#39;Hello, world&#39;&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; text = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).text(); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;Hello, world&#39;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;// h1要素内のHTMLの設定と取得&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).html(&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;a href=&amp;quot;http://sample.co.jp&amp;quot;&amp;gt;Hello, world&amp;lt;/a&amp;gt;&#39;&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; html = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).html(); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &amp;lt;a href=&amp;quot;http://sample.co.jp&amp;quot;&amp;gt;Hello, world&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-css&quot;&gt;8. CSSスタイルの操作(css, addClass, removeClass, toggleClass)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// スタイルの設定と取得&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// JSとCSSが密結合してしまうので、下記のaddClass/removeClassを使う方がよい&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).css(&lt;span class=&quot;synConstant&quot;&gt;&#39;color&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;red&#39;&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; color = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).css(&lt;span class=&quot;synConstant&quot;&gt;&#39;color&#39;&lt;/span&gt;); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; rgb(255, 0, 0)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// class属性にtitleクラスを追加&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).addClass(&lt;span class=&quot;synConstant&quot;&gt;&#39;title&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// class属性にtitleクラスを削除&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).removeClass(&lt;span class=&quot;synConstant&quot;&gt;&#39;title&#39;&lt;/span&gt;);

&lt;span class=&quot;synComment&quot;&gt;// class属性にtitleクラスの追加/削除を切り替える&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;h1&#39;&lt;/span&gt;).toggleClass(&lt;span class=&quot;synConstant&quot;&gt;&#39;title&#39;&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-hide-show&quot;&gt;9. 表示/非表示(hide, show, toggle)&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// id属性がcontentsの要素を非表示にする&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#contents&#39;&lt;/span&gt;).hide();

&lt;span class=&quot;synComment&quot;&gt;// id属性がcontentsの要素を表示にする&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#contents&#39;&lt;/span&gt;).show();

&lt;span class=&quot;synComment&quot;&gt;// id属性がcontentsの要素を表示/非表示を切り替える&lt;/span&gt;
$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#contents&#39;&lt;/span&gt;).toggle();
&lt;/pre&gt;&lt;p&gt;※あまり大きい範囲にhide()やshow()をやるとパフォーマンスが悪くなる場合があるらしい。エッジケースのためにjQueryが特別な処理をやっていてそれがネックになるらしい&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jquery-dom-form&quot;&gt;10. フォームの入力項目の値の取得/設定(val)&lt;/h3&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;テキストフィールドの値の取得と設定&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$(&lt;span class=&quot;synConstant&quot;&gt;&#39;#email&#39;&lt;/span&gt;).val(&lt;span class=&quot;synConstant&quot;&gt;&#39;satoshi@email.com&#39;&lt;/span&gt;); &lt;span class=&quot;synComment&quot;&gt;// 値の設定&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; email = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;#email&#39;&lt;/span&gt;).val();        &lt;span class=&quot;synComment&quot;&gt;// 値の取得(&#39;satoshi@email.com&#39;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;チェックされているラジオボタンの取得&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;man&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;man&amp;quot;&lt;/span&gt;&amp;gt;男性&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;woman&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;woman&amp;quot;&lt;/span&gt;&amp;gt;女性&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;other&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;other&amp;quot;&lt;/span&gt;&amp;gt;その他&amp;lt;/label&amp;gt;


&lt;span class=&quot;synComment&quot;&gt;// チェックされていないラジオボタンの取得&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; checkedValue = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;input[name=gender]:checked&#39;&lt;/span&gt;).val();
&lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; undefine (チェックされていない場合)&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &amp;quot;1&amp;quot;      (男性がチェックされている場合)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;チェックされているチェックボックスの取得&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hobby&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sport&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sport&amp;quot;&lt;/span&gt;&amp;gt;スポーツ&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hobby&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;travel&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;travel&amp;quot;&lt;/span&gt;&amp;gt;旅行&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hobby&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;reading&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;reading&amp;quot;&lt;/span&gt;&amp;gt;読書&amp;lt;/label&amp;gt;


&lt;span class=&quot;synComment&quot;&gt;// チェックされているチェックボックスの取得&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; checkedValues = $(&lt;span class=&quot;synConstant&quot;&gt;&#39;input[name=hobby]:checked&#39;&lt;/span&gt;).map(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(_, element) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; element.value; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; []         (チェックされていない場合)&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;] (スポーツと旅行が選択されている場合)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;独習JavaScript 第2版&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 31 Mar 2015 22:50:20 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450087766426</guid>
          
            <category>Javascript</category>
          
            <category>jQuery</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>Javascriptのthisの参照先をまとめてみた</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150313/1426238835</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150311/20150311110349.jpg&quot; alt=&quot;f:id:nipe880324:20150311110349j:plain&quot; title=&quot;f:id:nipe880324:20150311110349j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/bcnbits/with/5385288212/&quot;&gt;Flickr: MorBCN&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;JavaScriptの&lt;code&gt;this&lt;/code&gt;は属しているオブジェクトによって参照先が変わります。&lt;br /&gt;
コンストラクタ内、オブジェクト内、イベントハンドラ内などの&lt;code&gt;this&lt;/code&gt;の参照先をまとめました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-this-constructor&quot;&gt;コンストラクタ内のthis: 生成するオブジェクトへの参照&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-this-object&quot;&gt;オブジェクトのメソッド: 呼び出しオブジェクトへの参照&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-this-event&quot;&gt;イベントハンドラ内のthis: イベントの呼び出し元の要素への参照&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-this-global&quot;&gt;グローバルなスコープや関数内でのthis: グローバルオブジェクト(windowかglobal)を参照&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;javascript-this-constructor&quot;&gt;1. コンストラクタ内のthis: 生成するオブジェクトへの参照&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// thisは生成するオブジェクト(Personインスタンス)への参照&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;javascript-this-object&quot;&gt;2. オブジェクトのメソッド: 呼び出しオブジェクトへの参照&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  value: &lt;span class=&quot;synConstant&quot;&gt;&#39;objのvalueプロパティ&#39;&lt;/span&gt;,

  getValue: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// thisは、objオブジェクトへの参照&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.value;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;

console.log(obj.getValue()); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;objのvalueプロパティ&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;javascript-this-event&quot;&gt;3. イベントハンドラ内のthis: イベントの呼び出し元の要素への参照&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;my-button&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;クリックするとボタンが無効になります&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.onload = &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; button = &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.getElementById&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&#39;my-button&#39;&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;    button.addEventListener&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;// thisは、input要素への参照&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.value    = &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;クリックされました&#39;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.disabled = &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;javascript-this-global&quot;&gt;4. グローバルなスコープや関数内でのthis: グローバルオブジェクト(windowかglobal)を参照&lt;/h3&gt;ブラウザの場合は&lt;code&gt;window&lt;/code&gt;, Node.jsの場合&lt;code&gt;global&lt;/code&gt;というグローバルオブジェクトを参照します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; val = &lt;span class=&quot;synConstant&quot;&gt;&#39;global&#39;&lt;/span&gt;;

&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; func() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.val;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

console.log( val );        &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;global&#39;&lt;/span&gt;
console.log( &lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;.val ); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;global&#39;&lt;/span&gt;
console.log( &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.val );   &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;global&#39;&lt;/span&gt;
console.log( func() );     &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;global&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;独習JavaScript 第2版&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/vvakame/items/74005adacc0e8e2a3cab&quot;&gt;JavaScript&amp;#x306E;this&amp;#x306E;&amp;#x899A;&amp;#x3048;&amp;#x65B9; - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Fri, 13 Mar 2015 18:27:15 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450087759232</guid>
          
            <category>Javascript</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>JavaScriptの少し独特なオブジェクト指向についてまとめてみた</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150311/1426062668</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150311/20150311105033.jpg&quot; alt=&quot;f:id:nipe880324:20150311105033j:plain&quot; title=&quot;f:id:nipe880324:20150311105033j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/slworking/&quot;&gt;Flickr: slworking2&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;既にJavaやPHPなどオブジェクト指向言語を生業としてやっているが、その感覚でJavaScriptを少し扱っているて、いまいちJavaScript分からないという方を対象に、それらのプログラム言語とは違う、「&lt;b&gt;少し独特なJavaScriptのオブジェクト指向&lt;/b&gt;」について説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-create-object&quot;&gt;オブジェクトの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-define-property&quot;&gt;プロパティの定義と代入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-delete-property&quot;&gt;プロパティの削除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-accessor-property&quot;&gt;アクセサプロパティ（getter / setter)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-define-class&quot;&gt;クラス定義&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-constructer-arguments&quot;&gt;コンストラクタ引数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-define-instance-method&quot;&gt;インスタンスメソッドの定義&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-define-class-property&quot;&gt;クラスプロパティとクラスメソッドの定義&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-inheritance-class&quot;&gt;クラスの継承&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-oop-inheritance-property&quot;&gt;クラスプロパティとクラスメソッドの継承&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;javascript-oop-create-object&quot;&gt;1. オブジェクトの作成&lt;/h3&gt;大かっこ(&lt;code&gt;{}&lt;/code&gt;)でObjectクラスを作成することができます。&lt;br /&gt;
また、&lt;code&gt;new&lt;/code&gt;演算子で特定のオブジェクトを作成することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// 作成方法1({}でObjectインスタンスを作成する)&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt;;

&lt;span class=&quot;synComment&quot;&gt;// 作成方法2(new演算子でインスタンスを作成する)&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Objcet();    &lt;span class=&quot;synComment&quot;&gt;// Objcetインスタンス&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; person = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Person(); &lt;span class=&quot;synComment&quot;&gt;// Personインスタンス&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-define-property&quot;&gt;2. プロパティの定義と代入&lt;/h3&gt;オブジェクトにプロパティに値を設定すると、プロパティ定義と値の設定ができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt;;

&lt;span class=&quot;synComment&quot;&gt;// プロパティが定義されていないとundefinedが返される&lt;/span&gt;
console.log(obj.prop); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; undefined&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// プロパティに値を設定することで、プロパティ定義も一緒に行える&lt;/span&gt;
obj.prop = 1;
console.log(obj.prop); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 1&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;オブジェクトの作成時に、プロパティを定義、設定することもできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// プロパティを定義、設定することができる&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; obj2 = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  prop:  1,
  prop2: &lt;span class=&quot;synConstant&quot;&gt;&#39;foo&#39;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;

console.log(obj2.prop);  &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 1&lt;/span&gt;
console.log(obj2.prop2); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;foo&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-delete-property&quot;&gt;3. プロパティの削除&lt;/h3&gt;&lt;code&gt;delete&lt;/code&gt;演算子によって、プロパティを削除することができます。&lt;br /&gt;
削除後にプロパティにアクセスすると、プロパティが定義されていないと同じように&lt;code&gt;undefined&lt;/code&gt;を返します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt;;
obj.prop = 1;

&lt;span class=&quot;synComment&quot;&gt;// プロパティの作成&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;delete&lt;/span&gt; obj.prop;

&lt;span class=&quot;synComment&quot;&gt;// プロパティを参照すると、undefinedを返す&lt;/span&gt;
console.log(obj.prop); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; undefined&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;プロパティにイコールで&lt;code&gt;undefined&lt;/code&gt;を設定することで、プロパティの削除をしないでください。&lt;br /&gt;
その場合、forループを使用してプロパティを一覧すると、&lt;code&gt;undefined&lt;/code&gt;を設定したプロパティも参照されてしまいます。&lt;br /&gt;
そのため、プロパティの削除は、&lt;code&gt;delete&lt;/code&gt;演算子を使ってください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-accessor-property&quot;&gt;4. アクセサプロパティ（getter / setter)&lt;/h3&gt;&lt;code&gt;get&lt;/code&gt;と&lt;code&gt;set&lt;/code&gt;を使うことでアクセサプロパティを定義することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; circle = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  redius : 1,    &lt;span class=&quot;synComment&quot;&gt;// 半径&lt;/span&gt;
  get diameter()      &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.radius * 2; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;synComment&quot;&gt;// 直径は半径から算出&lt;/span&gt;
  set diameter(value) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.radius = value / 2; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// 直径から半径を算出&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;

circle.diameter = 5;          &lt;span class=&quot;synComment&quot;&gt;// set diameter が呼ばれる&lt;/span&gt;
console.log(circle.radius);   &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 2.5&lt;/span&gt;
console.log(circle.diameter); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 5 (get diameterが呼ばれる)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-define-class&quot;&gt;5. クラス定義&lt;/h3&gt;JavaScriptのクラス定義は、コンストラクタ内でプロパティを定義することで行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Personクラス（コンストラクタ）の定義&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// Personインスタンスの作成&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;synConstant&quot;&gt;&#39;サトシ&#39;&lt;/span&gt;, 28);
console.log(satoshi.name); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;サトシ&#39;&lt;/span&gt;
console.log(satoshi.age);  &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 28&lt;/span&gt;
console.log(satoshi &lt;span class=&quot;synStatement&quot;&gt;instanceof&lt;/span&gt; Person) &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; true (satoshiはPersonクラスのインスタンス)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-constructer-arguments&quot;&gt;6. コンストラクタ引数&lt;/h3&gt;JavaScriptでは、関数呼び出し時に引数が省略できます。コンストラクタも関数であるため、コンストラクタ引数も省略できます。&lt;br /&gt;
つまり、引数が省略されてコンストラクタが呼び出されてインスタンスが作成されると、プロパティが未定義(&lt;code&gt;undefined&lt;/code&gt;)のままになってしまい、予期せぬエラーが発生する可能性がでてきてしまいます。&lt;/p&gt;&lt;p&gt;そのため、対処法として、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プロパティを特定の値で初期化する&lt;/li&gt;
&lt;li&gt;エラーを発生させプログラムを中断する&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;という方法が考えられます。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;プロパティを特定の値で初期化する&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 特定の値で初期化する&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name || &lt;span class=&quot;synConstant&quot;&gt;&#39;No name&#39;&lt;/span&gt;;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age  || 20;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// コンストラクタ引数を指定しないと「特定の値」で初期化される&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Person();
console.log(satoshi.name); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;No name&#39;&lt;/span&gt;
console.log(satoshi.age);  &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 20&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// コンストラクタ引数を渡すと「渡した値」で初期化される&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;synConstant&quot;&gt;&#39;サトシ&#39;&lt;/span&gt;, 28);
console.log(satoshi.name); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;サトシ&#39;&lt;/span&gt;
console.log(satoshi.age);  &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 28&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;エラーを発生させプログラムを中断する&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 引数をチェックする&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (name == &lt;span class=&quot;synStatement&quot;&gt;undefined&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Error(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;引数&#39;name&#39;を指定してください。&amp;quot;&lt;/span&gt;); &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (age == &lt;span class=&quot;synStatement&quot;&gt;undefined&lt;/span&gt;)  &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Error(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;引数&#39;age&#39;を指定してください。&amp;quot;&lt;/span&gt;); &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// コンストラクタ引数を指定しないとエラーが発生する&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Person(); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; Error: 引数&#39;name&#39;を指定してください。&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-define-instance-method&quot;&gt;7. インスタンスメソッドの定義&lt;/h3&gt;JavaScriptでオブジェクトにメソッドを定義する方法には次の2つがあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt;をプロパティに代入する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prototype&lt;/code&gt;という特殊なオブジェクトを利用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;code&gt;function&lt;/code&gt;をプロパティに代入する&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age;

  &lt;span class=&quot;synComment&quot;&gt;// functionをプロパティに代入する&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.greet = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    console.log(&lt;span class=&quot;synConstant&quot;&gt;&#39;Hello, &#39;&lt;/span&gt; + &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;synConstant&quot;&gt;&#39;サトシ&#39;&lt;/span&gt;, 20);

&lt;span class=&quot;synComment&quot;&gt;// メソッドとして呼ぶことができる&lt;/span&gt;
satoshi.greet(); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;Hello, サトシ&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;この方法の問題点は、&lt;code&gt;new Person(...)&lt;/code&gt;でインスタンスを作るたびに、&lt;code&gt;greet()&lt;/code&gt;メソッドもその数だけ作成されてしまいます。そのため、インスタンスを作るたびにメモリを無駄に消費してしまいます。&lt;br /&gt;
この解決方として、次の「&lt;code&gt;prototype&lt;/code&gt;という特殊なオブジェクトを利用する」方法があります。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;code&gt;prototype&lt;/code&gt;という特殊なオブジェクトを利用する&lt;/h4&gt;
    &lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// すべてのクラスが持つ特別なprototypeオブジェクトにメソッドを代入する&lt;/span&gt;
Person.prototype.greet = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  console.log(&lt;span class=&quot;synConstant&quot;&gt;&#39;Hello, &#39;&lt;/span&gt; + &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;synConstant&quot;&gt;&#39;サトシ&#39;&lt;/span&gt;, 20);

&lt;span class=&quot;synComment&quot;&gt;// メソッドとして呼ぶことができる&lt;/span&gt;
satoshi.greet(); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;Hello, サトシ&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
こうすることで、すべてのPersonインスタンスは、&lt;code&gt;Person.prototype.greet()&lt;/code&gt;を参照するので、インスタンスを作成するたびに無駄なメモリ消費をしなくなります。&lt;/p&gt;&lt;p&gt;JavaScriptの処理の内部処理の順序は、&lt;code&gt;greet()&lt;/code&gt;メソッドが呼ばれると、まずPersonインスタンス内に定義されたプロパティを検索し、見つからないので&lt;code&gt;Person.prototype&lt;/code&gt;内を検索し、見つかったのでその&lt;code&gt;greet()&lt;/code&gt;メソッドを実行しています。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-define-class-property&quot;&gt;8. クラスプロパティとクラスメソッドの定義&lt;/h3&gt;JavaScriptのクラスメソッドは、クラスプロパティの定義と同じように定義できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// クラスプロパティ（定数）の定義&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// 何歳以下をyoung(若い)とするかを保持する定数&lt;/span&gt;
Person.YOUNG_LIMIT_AGE = 20;

&lt;span class=&quot;synComment&quot;&gt;// クラスメソッドを定義&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// youngの場合 true, そうでない場合 false を返す&lt;/span&gt;
Person.isYoung = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (age &amp;lt;= Person.YOUNG_LIMIT_AGE) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// クラスプロパティを呼び出す&lt;/span&gt;
console.log(Person.YOUNG_LIMIT_AGE); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 20&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// クラスメソッドを呼び出す&lt;/span&gt;
console.log(Person.isYoung(10)); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; true&lt;/span&gt;
console.log(Person.isYoung(30)); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;定数は慣例で大文字で定義していますが、Rubyのように変更不可能になるという言語仕様はありません。&lt;br /&gt;
あくまで大文字にすることで定数として変更してはいけないという慣例があるだけで、変更は可能です。（変更しないでください！）&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-inheritance-class&quot;&gt;9. クラスの継承&lt;/h3&gt;JavaScriptでは、継承のための構文は用意されていません。次のような方法で継承を行います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プロパティの継承は、&lt;code&gt;apply&lt;/code&gt;メソッドを呼び出す&lt;/li&gt;
&lt;li&gt;メソッドの継承は、&lt;code&gt;prototype&lt;/code&gt;オブジェクトを利用する&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;JavaScriptでのクラス継承はなかなか複雑なので、小規模の場合は、継承を使わないようにし、大規模の場合は、ライブラリなどを使い継承を行う方が良いらしいです。&lt;/p&gt;&lt;p&gt;&lt;i&gt;Webや本では細かな違いがいろいろあり、下記の継承のコードは妥当でない可能性があります。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;プロパティの継承は、&lt;code&gt;apply&lt;/code&gt;メソッドを呼び出す&lt;/h4&gt;
    &lt;p&gt;サブクラスのコンストラクタ内でスーパークラスの&lt;code&gt;apply&lt;/code&gt;メソッドを呼ぶことで、スーパークラスのプロパティをサブクラスに引き継ぎます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Personクラス&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// Personを継承したEmployeeクラス&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Employee = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age, jobTitle) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.jobTitle = jobTitle;

  &lt;span class=&quot;synComment&quot;&gt;// スーパークラス(Person)のコンストラクタを呼び出す&lt;/span&gt;
  Person.apply(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;name, age&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Employee(&lt;span class=&quot;synConstant&quot;&gt;&#39;サトシ&#39;&lt;/span&gt;, 28, &lt;span class=&quot;synConstant&quot;&gt;&#39;QA&#39;&lt;/span&gt;);
console.log(satoshi.name);     &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;サトシ&#39;&lt;/span&gt;
console.log(satoshi.age);      &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 28&lt;/span&gt;
console.log(satoshi.jobTitle); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;QA&#39;&lt;/span&gt;
console.log(satoshi &lt;span class=&quot;synStatement&quot;&gt;instanceof&lt;/span&gt; Employee); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;メソッドの継承は、&lt;code&gt;prototype&lt;/code&gt;オブジェクトを利用する&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;prototype&lt;/code&gt;オブジェクトのプロトタイプチェーンの仕組みを利用して継承を行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// Personクラスを定義&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name = name;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.age  = age;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// Person#greet()メソッドを定義&lt;/span&gt;
Person.prototype.greet = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  console.log(&lt;span class=&quot;synConstant&quot;&gt;&#39;Hello, &#39;&lt;/span&gt; + &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.name);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// Personを継承したEmployeeクラスを定義&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; Employee = &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(name, age, jobTitle) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;.jobTitle = jobTitle;

  &lt;span class=&quot;synComment&quot;&gt;// Personのプロパティを継承&lt;/span&gt;
  Person.apply(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;name, age&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// プロトタイプチェーンにPersonインスタンスを設定することで、&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// Employeeインスタンスのメソッド呼び出しでは、Person.prototypeのメソッド内にメソッドがあるか検索されます。&lt;/span&gt;
Employee.prototype = &lt;span class=&quot;synType&quot;&gt;Object&lt;/span&gt;.create(Person.prototype);

&lt;span class=&quot;synComment&quot;&gt;// 一行上のコードでconstructorプロパティがPersonになってしまうので、Employeeをセットします。&lt;/span&gt;
Employee.prototype.constructor = Employee;

&lt;span class=&quot;synIdentifier&quot;&gt;var&lt;/span&gt; satoshi = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Employee(&lt;span class=&quot;synConstant&quot;&gt;&#39;サトシ&#39;&lt;/span&gt;, 28, &lt;span class=&quot;synConstant&quot;&gt;&#39;QA&#39;&lt;/span&gt;);
satoshi.greet();                  &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; &#39;Hello, サトシ&#39;&lt;/span&gt;
console.log(satoshi.constructor); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; Employeeのコンストラクタ( function(name, age, jobTitle) { ... } )&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;javascript-oop-inheritance-property&quot;&gt;10. クラスプロパティとクラスメソッドの継承&lt;/h3&gt;JavaScriptではクラスプロパティやクラスメソッドの継承は一般的には行われません。&lt;br /&gt;
これは、JavaScriptではスーパークラスのクラスプロパティやクラスメソッドをサブクラスで利用するためには、それらのプロパティ定義をサブクラスにもコピーしなければならないので、コードが重複してしまうのでよくないためです。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;独習JavaScript&lt;/li&gt;
&lt;li&gt;メンテナブルJavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 11 Mar 2015 17:31:08 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450087758457</guid>
          
            <category>Javascript</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsのi18nの基本的な使い方まとめ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150226/1424937175</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226164508.jpg&quot; alt=&quot;f:id:nipe880324:20150226164508j:plain:w480&quot; title=&quot;f:id:nipe880324:20150226164508j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/m-i-k-e/&quot;&gt;Michael Kappel | Flickr - Photo Sharing!&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;での国際化（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/i18n&quot;&gt;i18n&lt;/a&gt;: Internationalization）の方法をまとめています。&lt;br /&gt;
デフォルトのlocale設定、基本的な翻訳の流れ、翻訳ファイルの作成、localeを動的に変更する方法を説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;  2.2.0&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.0&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/i18n&quot;&gt;i18n&lt;/a&gt; 0.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;1. &lt;a href=&quot;#i18n-default_locale_and_read_traslation_files&quot;&gt;デフォルトのlocaleの設定と翻訳ファイルの読み込み&lt;/a&gt;&lt;/h4&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;2. &lt;a href=&quot;#i18n-basic_usage&quot;&gt;i18nの翻訳の基本&lt;/a&gt;&lt;/h4&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;3. &lt;a href=&quot;#i18n-create_translation_files&quot;&gt;翻訳ファイルの作成&lt;/a&gt;&lt;/h4&gt;
    &lt;p&gt;3.1.  &lt;a href=&quot;#i18n-directory&quot;&gt;翻訳ファイルのディレクトリ構成&lt;/a&gt;&lt;br /&gt;
3.2.  &lt;a href=&quot;#i18n-template_translation_files&quot;&gt;各言語の基本的な翻訳テンプレートファイル&lt;/a&gt;&lt;br /&gt;
3.3.  &lt;a href=&quot;#i18n-lazy_lookup&quot;&gt;遅延参照（lazy lookup）&lt;/a&gt;&lt;br /&gt;
3.4.  &lt;a href=&quot;#i18n-interpolation&quot;&gt;式展開&lt;/a&gt;&lt;br /&gt;
3.5.  &lt;a href=&quot;#i18n-use_htmol&quot;&gt;翻訳ファイル内でのHTMLの使用&lt;/a&gt;&lt;br /&gt;
3.6.  &lt;a href=&quot;#i18n-translate_active_record&quot;&gt;ActiveRecordの翻訳&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4. &lt;a href=&quot;#i18n-locale_from_url&quot;&gt;URLによるlocaleの設定方法&lt;/a&gt;&lt;/h4&gt;
    &lt;p&gt;4.1.  &lt;a href=&quot;#i18n-locale_from_subdomain&quot;&gt;サブドメイン名からlocaleを設定&lt;/a&gt;&lt;br /&gt;
4.2.  &lt;a href=&quot;#i18n-locale_from_subdirectory&quot;&gt;URLのサブディレクトリからlocaleを取得&lt;/a&gt;&lt;br /&gt;
4.3.  &lt;a href=&quot;#i18n-locale_from_url_parameter&quot;&gt;URLパラメータからlocaleを取得&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-default_locale_and_read_traslation_files&quot;&gt;1. デフォルトのlocaleの設定と翻訳ファイルの読み込み&lt;/h3&gt;デフォルトのlocaleは暗黙的に&lt;code&gt;:en&lt;/code&gt;です。他のlocaleを設定したい場合は、明示的に指定する必要があります。&lt;br /&gt;
また、翻訳ファイルは&lt;code&gt;config/locales/*.rb,yml&lt;/code&gt;に配置し、自動的にロードされるようになっています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;デフォルトのlocaleの設定や翻訳ファイルのディレクトリの追加をしたい場合、&lt;code&gt;application.rb&lt;/code&gt;を修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/application.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# デフォルトのlocaleを日本語(:ja)にする&lt;/span&gt;
config.i18n.default_locale = &lt;span class=&quot;synConstant&quot;&gt;:ja&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 翻訳ファイルのディレクトを追加する場合は、次の行のコメントを外しパスを追加してください。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# config.i18n.load_path += Dir[Rails.root.join(&#39;my&#39;, &#39;locales&#39;, &#39;*.{rb,yml}&#39;).to_s]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
設定できるlocaleは次の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で確認できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.available_locales
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [:en, :&amp;quot;de-AT&amp;quot;, :&amp;quot;de-CH&amp;quot;, :de, :&amp;quot;en-au-ocker&amp;quot;, :&amp;quot;en-AU&amp;quot;, :&amp;quot;en-BORK&amp;quot;, :&amp;quot;en-CA&amp;quot;, :&amp;quot;en-GB&amp;quot;, ...]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;I18n.load_path&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で現在ロードしている翻訳ファイルの一覧を表示することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.load_path
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#[&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/2.2.0/gems/activesupport-4.2.0/lib/active_support/locale/en.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/activemodel-4.2.0/lib/active_model/locale/en.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/activerecord-4.2.0/lib/active_record/locale/en.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/actionview-4.2.0/lib/action_view/locale/en.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/faker-1.4.3/lib/locales/de-AT.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/faker-1.4.3/lib/locales/de-CH.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/faker-1.4.3/lib/locales/de.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/faker-1.4.3/lib/locales/en-au-ocker.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/faker-1.4.3/lib/locales/en-AU.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/faker-1.4.3/lib/locales/en-BORK.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  ...&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-basic_usage&quot;&gt;2. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/i18n&quot;&gt;i18n&lt;/a&gt;の翻訳の基本&lt;/h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/i18n&quot;&gt;i18n&lt;/a&gt;は、現在のlocaleに応じて、読み込んだ翻訳ファイルから適切な翻訳文を取得し、表示します。&lt;/p&gt;&lt;p&gt;翻訳ファイルは次のようになっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/locales/ja.yml&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;こんにちは&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;formats&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&#39;%Y/%m/%d %H:%M:%S&#39;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# config/locales/es.yml&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hola mundo&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;formats&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&#39;%A, %d de %B de %Y %H:%M:%S %z&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
変換には「翻訳(translate)を行う&lt;code&gt;t&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;」と「DateやTimeをlocalizeする&lt;code&gt;l&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;」を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails c

&lt;span class=&quot;synComment&quot;&gt;# localeを日本語(:ja)に設定し、翻訳した文字を表示する&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale = &lt;span class=&quot;synConstant&quot;&gt;:ja&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.t &lt;span class=&quot;synConstant&quot;&gt;:hello&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;こんにちは&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.l &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;2015/02/24 14:53:03&amp;quot;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# localeをスペイン語(:es)に設定し、翻訳した文字を表示する&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale = &lt;span class=&quot;synConstant&quot;&gt;:es&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.t &lt;span class=&quot;synConstant&quot;&gt;:hello&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;hola mundo&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.l &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;martes, 24 de febrero de 2015 14:57:17 +0900&amp;quot;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# localeを指定して、設定されていない文字を表示できる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; :es&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.t &lt;span class=&quot;synConstant&quot;&gt;:hello&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;locale&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:ja&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;こんにちは&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-create_translation_files&quot;&gt;3. 翻訳ファイルの作成&lt;/h3&gt;&lt;h3 id=&quot;i18n-directory&quot;&gt;3.1. 翻訳ファイルのディレクトリ構成&lt;/h3&gt;１つの翻訳に管理するのが難しくなってしまうので、プロジェクト規模に応じて、次のように&lt;code&gt;config/locales/&lt;/code&gt;配下のディレクトリ構成を行うとよいです。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;config/locales/
├─ defaults
│  ├─ ja.rb
│  └─ en.rb
├── models
│   └─ product
│      ├─ ja.rb
│      └─ en.rb
└─ views
   ├─ defaults
   │  ├─ ja.rb
   │  └─ en.rb
   ├─ products
   │  ├─ ja.rb
   │  └─ en.rb
   └─ navigation
      ├─ ja.rb
      └─ en.rb&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;i18n-template_translation_files&quot;&gt;3.2. 各言語の基本的な翻訳テンプレートファイル&lt;/h3&gt;各言語の基本的な翻訳ファイルは「&lt;a href=&quot;https://github.com/svenfuchs/rails-i18n/tree/master/rails/locale&quot;&gt;https://github.com/svenfuchs/rails-i18n/tree/master/rails/locale&lt;/a&gt;」から取得できます。&lt;br /&gt;
日付、時刻、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt;のバリデーションエラー文言、数字などの基本的な翻訳が記載されていまので、上記でいう、&lt;code&gt;config/locales/defaults/&lt;/code&gt;配下に配置するようなファイルを取得できます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-lazy_lookup&quot;&gt;3.3. 遅延参照（lazy lookup）&lt;/h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のビューファイルのディレクトリ構造と翻訳ファイルの階層構造を合わせることで、ビューに長ったらしくを書かなくてもよくなります。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;projects&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt; # app/views/projectsを表す&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt; # app/views/projects/index.html.erb&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;プロジェクト一覧&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;deadlines&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt; # app/views/_deadlines.html.erb&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;due_date&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;期限&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/projects/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- t &#39;projects.index.title&#39; を t &#39;.title&#39; と短くかける --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; t&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;.title&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;  # =&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;プロジェクト一覧&amp;quot;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/projects/_deadlines.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- t &#39;projects.deadlines.due_date&#39; を t &#39;.due_date&#39; と短くかける --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; t&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;.due_date&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;  # =&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;期限&amp;quot;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;i18n-interpolation&quot;&gt;3.4. 式展開&lt;/h3&gt;翻訳文内で式展開を行うことができます。&lt;/p&gt;&lt;p&gt;翻訳ファイル内で&lt;code&gt;%{}&lt;/code&gt;で変数名を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&#39;こんにちは %{name}&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、&lt;code&gt;t&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;でKey-Valueで変数に値を設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; t&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :hello, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;太郎&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt; # =&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;こんにちは 太郎&amp;quot;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;i18n-use_htmol&quot;&gt;3.5. 翻訳ファイル内でのHTMLの使用&lt;/h3&gt;翻訳ファイル内でHTMLを使用するには、キーに「&lt;code&gt;_html&lt;/code&gt;で終わる」か「&lt;code&gt;html&lt;/code&gt;というキー名」の場合、HTMLはエスケープされません。そのため、記載したHTMLが解釈されて表示されます。&lt;/p&gt;&lt;p&gt;翻訳ファイル内で&lt;code&gt;_html&lt;/code&gt;で終わるキー名にします。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;hello_html&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;b&amp;gt;こんにちは %{name}&amp;lt;/b&amp;gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、&lt;code&gt;t&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で表示します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; t&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :hello_html, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;太郎&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt; #=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; 太字になった「こんにち　太郎」が表示される
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次のように&lt;code&gt;hello_html&lt;/code&gt;の値にHTMLセーフでない文字を入力するとそれが表示されてしまうので注意してください。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;hello_html&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&#39;こんにちは %{name} &amp;lt;script&amp;gt;alert(&amp;quot;alertが表示される&amp;quot;);&amp;lt;/script&amp;gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
逆に、式展開の&lt;code&gt;%{}&lt;/code&gt;のHTMLはエスケープされます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; t&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :hello_html, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;script&amp;gt;alert(&amp;quot;太郎&amp;quot;);&amp;lt;/script&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt; #=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;こんにちは &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;太郎&amp;quot;&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&amp;quot;と表示される
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;i18n-translate_active_record&quot;&gt;3.6. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt;/ActiveModelの翻訳&lt;/h3&gt;&lt;code&gt;activerecord/activemodel.models&lt;/code&gt;と&lt;code&gt;activerecord/activemodel.attributes&lt;/code&gt;を使うことで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt;の翻訳を行えます。&lt;/p&gt;&lt;p&gt;次の翻訳ファイルは、&lt;code&gt;Product&lt;/code&gt;モデルの翻訳例です。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;activerecord&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;&amp;amp;activerecord&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;商品&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;search_form&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;検索フォーム&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;商品名&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;値段&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;released_on&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;発売日&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;search_form&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;検索フィールド&amp;quot;&lt;/span&gt;

 &lt;span class=&quot;synComment&quot;&gt; # activemodelの翻訳もactiverecordに記載している&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;activemodel&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;lt;&amp;lt;:&lt;/span&gt; activerecord
&lt;/pre&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/YAML&quot;&gt;YAML&lt;/a&gt;を開いて適切な設定になっているか確認できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;YAML&lt;/span&gt;.load_file(&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.root.join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;config/locales/ja.yml&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
モジュールなどで階層構造の翻訳ファイルを書くときには、`/`で区切って階層構造を表します。&lt;br /&gt;
次のようなモジュールが入れ子の構造の場合、&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Forms&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ProductForm&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;attributesの下位階層でモジュールを/で区切って表す(`forms/product_form`)&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;activemodel&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;forms/product_form&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;synConstant&quot;&gt;&#39;商品名&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;次のようにして、ビューファイル内で利用します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- tメソッドでアクセスできます --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; t&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;activerecord.models.product&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;          #=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;商品&amp;quot;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; t&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;activerecord.attributes.product.name&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt; #=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;商品名&amp;quot;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 次のようにしてもアクセスできます --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; Product.model_name.human&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;                 #=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;商品&amp;quot;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; Product.human_attribute_name(&#39;name&#39;)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;     #=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;商品名&amp;quot;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; Forms::ProductForm.human_attribute_name(&#39;name&#39;)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;     #=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;商品名&amp;quot;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-locale_from_url&quot;&gt;4. URLによるlocaleの設定方法&lt;/h3&gt;他言語のサイト（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のlocaleのサイト）を作成するには、「URLからlocaleを取得する方法」が推奨です。&lt;br /&gt;
「URLからlocaleを取得する方法」は次のとおりです。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226164143.jpg&quot; alt=&quot;f:id:nipe880324:20150226164143j:plain:w560&quot; title=&quot;f:id:nipe880324:20150226164143j:plain:w560&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:560px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;詳細は、&lt;a href=&quot;https://support.google.com/webmasters/answer/182192?hl=ja&quot;&gt;&amp;#x591A;&amp;#x5730;&amp;#x57DF;&amp;#x3001;&amp;#x591A;&amp;#x8A00;&amp;#x8A9E;&amp;#x306E;&amp;#x30B5;&amp;#x30A4;&amp;#x30C8; - Search Console &amp;#x30D8;&amp;#x30EB;&amp;#x30D7;&lt;/a&gt;を参照してください。&lt;br /&gt;
他地域、他言語のサイトを作成するときに、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SEO&quot;&gt;SEO&lt;/a&gt;的にどうすれば良いかといったヒントが書かれています。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-locale_from_subdomain&quot;&gt;4.1. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B5%A5%D6%A5%C9%A5%E1%A5%A4%A5%F3&quot;&gt;サブドメイン&lt;/a&gt;名からlocaleを設定&lt;/h3&gt;次のように&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B5%A5%D6%A5%C9%A5%E1%A5%A4%A5%F3&quot;&gt;サブドメイン&lt;/a&gt;名からlocaleを設定するようにしてみます。&lt;br /&gt;
&lt;a href=&quot;https://support.google.com/webmasters/answer/182192?hl=ja&quot; target=&quot;_blank&quot;&gt;Googleの他地域、他言語のサイト&lt;/a&gt;では「gTLD を使用した&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B5%A5%D6%A5%C9%A5%E1%A5%A4%A5%F3&quot;&gt;サブドメイン&lt;/a&gt;」に対応します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;example.com      &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; デフォルトのlocale&lt;/span&gt;
ja.example.com   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 日本のlocale&lt;/span&gt;
en.example.com   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 英語のlocale&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
まず、&lt;code&gt;applicaiton_controller.rb&lt;/code&gt;にlocaleを設定する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を追記します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/application_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActionController&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  before_action &lt;span class=&quot;synConstant&quot;&gt;:set_locale&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_locale&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale = extract_locale_from_tld || &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.default_locale
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# サブドメインからlocaleを取得する&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 有効なlocaleが見つからない場合は、nilを返す&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;extract_locale_from_tld&lt;/span&gt;
    parsed_locale = request.subdomains.first
    &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.available_locales.map(&amp;amp;&lt;span class=&quot;synConstant&quot;&gt;:to_s&lt;/span&gt;).include?(parsed_locale) ? parsed_locale : &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;application.html.erb&lt;/code&gt;などのビューファイルで次のように言語を変更するリンクを追加することで、言語を変更できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to_if&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; request.subdomains.first != &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;ja&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;日本語&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;,   &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;http://ja.example.com:3000#{request.path}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;%&amp;gt;&lt;/span&gt; |
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to_if&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; request.subdomains.first != &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;English&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;http://en.example.com:3000#{request.path}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;URL部分は簡易的に直書きをしていますが、設定ファイルからの値を取得することをお勧めします。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;code&gt;http://ja.example.com:3000/...&lt;/code&gt;にアクセスすると、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のlocaleは、ja(日本語)になるので、日本語で画面に表示されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226163943.jpg&quot; alt=&quot;f:id:nipe880324:20150226163943j:plain:w320&quot; title=&quot;f:id:nipe880324:20150226163943j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://en.example.com:3000/...&lt;/code&gt;にアクセスすると、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のlocaleは、en(英語)になるので、英語で画面に表示されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226164013.jpg&quot; alt=&quot;f:id:nipe880324:20150226164013j:plain:w320&quot; title=&quot;f:id:nipe880324:20150226164013j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-locale_from_subdirectory&quot;&gt;4.2. URLのサブディレクトリからlocaleを取得&lt;/h3&gt;&lt;a href=&quot;https://support.google.com/webmasters/answer/182192?hl=ja&quot; target=&quot;_blank&quot;&gt;Googleの他地域、他言語のサイト&lt;/a&gt;では「gTLD を使用したサブディレクトリ」に対応します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;次のようにサブディレクトリ名からlocaleを設定するようにしてみます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;example.com/     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; デフォルトのlocale&lt;/span&gt;
example.com/ja/  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 日本のlocale&lt;/span&gt;
example.com/en/  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 英語のlocale&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
まず、ルートに&lt;code&gt;scoope&lt;/code&gt;で&lt;code&gt;:locale&lt;/code&gt;を追加します。かっこがあることで、存在しない場合は、デフォルトのlocaleが使われます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
scope &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;(:locale)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  resources &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
URLの&lt;code&gt;locale&lt;/code&gt;は、&lt;code&gt;parmas[:locale]&lt;/code&gt;で取得できるので次のようにします。&lt;br /&gt;
また、&lt;code&gt;default_url_options&lt;/code&gt;をオーバーライドすることで、すべてのリンクに現在のlocaleを設定することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/application_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActionController&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...
  before_action &lt;span class=&quot;synConstant&quot;&gt;:set_locale&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_locale&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale = params[&lt;span class=&quot;synConstant&quot;&gt;:locale&lt;/span&gt;] || &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.default_locale
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;default_url_options&lt;/span&gt;(options = {})
    { &lt;span class=&quot;synConstant&quot;&gt;locale&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale }.merge options
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;application.html.erb&lt;/code&gt;などのビューファイルで次のように言語を変更するリンクを追加することで、言語を変更できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to_if&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; params[:locale].present?, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;日本語&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;,  url_for(controller: controller.controller_name, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: controller.action_name, locale: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt; |
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to_if&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; params[:locale] != &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;,  &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;English&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;,  url_for(controller: controller.controller_name, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: controller.action_name, locale: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
URLに&lt;code&gt;locale&lt;/code&gt;がない場合は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のlocaleは、デフォルトのlocaleの日本語なので、日本語で表示されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226164033.jpg&quot; alt=&quot;f:id:nipe880324:20150226164033j:plain:w320&quot; title=&quot;f:id:nipe880324:20150226164033j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;「English」リンクを押すことで、URLに&lt;code&gt;en&lt;/code&gt;が追加され、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のlocaleが英語になるので、英語表示になります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226164041.jpg&quot; alt=&quot;f:id:nipe880324:20150226164041j:plain:w320&quot; title=&quot;f:id:nipe880324:20150226164041j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-locale_from_url_parameter&quot;&gt;4.3. URLパラメータからlocaleを取得&lt;/h3&gt;次のようにURLパタメータにlocaleを設定することでlocaleを設定するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;example.com           &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; デフォルトのlocale&lt;/span&gt;
example.com?locale=ja &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 日本語(ja)のlocale&lt;/span&gt;
example.com?locale=es &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; スペイン語(es)のlocale&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://support.google.com/webmasters/answer/182192?hl=ja&quot; target=&quot;_blank&quot;&gt;Googleの他地域、他言語のサイト&lt;/a&gt;によると、非推奨の方法です。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;まず、&lt;code&gt;applicaiton_controller.rb&lt;/code&gt;にlocaleを設定する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を追記します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/application_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActionController&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  before_action &lt;span class=&quot;synConstant&quot;&gt;:set_locale&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_locale&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale = params[&lt;span class=&quot;synConstant&quot;&gt;:locale&lt;/span&gt;] || &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.default_locale
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# link_toなどのすべてのURLにlocaleパラメータを設定するようにする&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;default_url_options&lt;/span&gt;(options = {})
    { &lt;span class=&quot;synConstant&quot;&gt;locale&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale }.merge options
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;application.html.erb&lt;/code&gt;などのビューファイルで次のように言語を変更するリンクを追加することで、言語を変更できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to_if&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; params[:locale].present?, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;日本語&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#{request.path}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt; |
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to_if&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; params[:locale] != &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;English&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#{request.path}?locale=en&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
URLに&lt;code&gt;locale&lt;/code&gt;がない場合は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のlocaleは、デフォルトのlocaleの日本語なので、日本語で表示されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226164100.jpg&quot; alt=&quot;f:id:nipe880324:20150226164100j:plain:w320&quot; title=&quot;f:id:nipe880324:20150226164100j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;「English」リンクを押すことで、&lt;code&gt;locale=en&lt;/code&gt;がURLに追加され、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のlocaleが英語になるので、英語表示になります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226164106.jpg&quot; alt=&quot;f:id:nipe880324:20150226164106j:plain:w320&quot; title=&quot;f:id:nipe880324:20150226164106j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/i18n.html&quot;&gt;Rails Internationalization (I18n) API &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://morizyun.github.io/blog/i18n-english-rails-ruby-many-languages/&quot;&gt;Rails&amp;#x306E;&amp;#x591A;&amp;#x8A00;&amp;#x8A9E;&amp;#x5316;&amp;#x5BFE;&amp;#x5FDC; i18n&amp;#x306E;&amp;#x3084;&amp;#x308A;&amp;#x65B9;&amp;#x3092;&amp;#x6574;&amp;#x7406;&amp;#x3057;&amp;#x3066;&amp;#x307F;&amp;#x305F;&amp;#xFF01;&amp;#x3010;&amp;#x56FD;&amp;#x969B;&amp;#x5316;/&amp;#x82F1;&amp;#x8A9E;&amp;#x5316;&amp;#x3011; - &amp;#x9152;&amp;#x3068;&amp;#x6CEA;&amp;#x3068;Ruby&amp;#x3068;Rails&amp;#x3068;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 26 Feb 2015 16:52:55 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450085563841</guid>
          
            <category>Rails初級</category>
          
            <category>i18n</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>rails new時にアプリケーションテンプレートを使って簡単に初期設定をする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150208/1423391199</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150208/20150208191123.jpg&quot; alt=&quot;f:id:nipe880324:20150208191123j:plain:w480&quot; title=&quot;f:id:nipe880324:20150208191123j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/ny156uk/&quot;&gt;Flickr: ny156uk&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;前回の「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150204/1423055537&quot; target=&quot;_blank&quot;&gt;rails newしたときの開発を効率化するためにまず行いたい6つの設定まとめ&lt;/a&gt;」の記事を&lt;br /&gt;
Railsの機能の「アプリケーションテンプレート」を使って、簡単に設定できるようにしました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;対象バージョン&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.*&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;1. テンプレートの適用したRailsプロジェクトの作成&lt;/h3&gt;
    &lt;p&gt;まず、テンプレートファイルをGitHubから取得します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ git clone git@github.com:yanagi0324/rails-template.git
&lt;/pre&gt;&lt;p&gt;取得したテンプレートファイルを使って、Railsプロジェクトを新規に作成します。&lt;br /&gt;
&lt;i&gt;&lt;code&gt;-m&lt;/code&gt;オプションでテンプレートファイルを指定します。&lt;/i&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ rails new &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;your_app_name&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-m&lt;/span&gt; ./rails-template/template.rb
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;2. テンプレートの設定内容の修正&lt;/h3&gt;
    &lt;p&gt;テンプレートファイルの中身は次のようになっています。&lt;br /&gt;
&lt;a href=&quot;https://github.com/yanagi0324/rails-template/blob/master/template.rb&quot;&gt;rails-template/template.rb at master &amp;middot; nipe0324/rails-template &amp;middot; GitHub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;入れたいgemやいらない設定などを修正することで設定することができます。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/rails_application_templates.html&quot;&gt;Rails Application Templates &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nanapi.co.jp/blog/2015/01/27/rails-template/&quot;&gt;Rails Template&amp;#x3067;&amp;#x30D7;&amp;#x30ED;&amp;#x30B8;&amp;#x30A7;&amp;#x30AF;&amp;#x30C8;&amp;#x4F5C;&amp;#x6210;&amp;#x3092;&amp;#x697D;&amp;#x306B;&amp;#x3057;&amp;#x3088;&amp;#x3046; | nanapi TechBlog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sun, 08 Feb 2015 19:26:39 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450082854701</guid>
          
            <category>Rails中級</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>rails newしたときの開発を効率化するためにまず行いたい6つの設定まとめ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150204/1423055537</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150107/20150107013920.jpg&quot; alt=&quot;f:id:nipe880324:20150107013920j:plain:w620&quot; title=&quot;f:id:nipe880324:20150107013920j:plain:w620&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:620px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;よくRailsプロジェクトを作るので、Railsプロジェクトを作った後に最初にやっておきたい設定をまとめました。&lt;br /&gt;
主に、開発を効率化させるためにやることをまとめてますので、ざざっと眺めて取り入れそうな知識があったら開発効率を上げれるかもしれません。&lt;/p&gt;&lt;p&gt;&lt;i&gt;また、nanapiさんの次の記事もとても参考になります。&lt;a href=&quot;http://nanapi.co.jp/blog/2015/01/27/rails-template/&quot; target=&quot;_blank&quot;&gt;Rails Templateでプロジェクト作成を楽にしよう&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;mac os X 10&lt;/li&gt;
&lt;li&gt;rails 4.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;1. &lt;a href=&quot;#first-settings-create&quot;&gt;Railsプロジェクトの作成&lt;/a&gt;&lt;/h4&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;2. &lt;a href=&quot;#first-settings-git&quot;&gt;Gitにプロジェクトを登録&lt;/a&gt;&lt;/h4&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;3. &lt;a href=&quot;#first-settings-gems&quot;&gt;開発を効率化させるGemをがっつり導入&lt;/a&gt;&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;3.1. &lt;a href=&quot;#first-settings-install&quot;&gt;gemのインストール&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;3.2. &lt;a href=&quot;#first-settings-jquery&quot;&gt;jquery-turbolinksの設定&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;3.3. &lt;a href=&quot;#first-settings-efficiency&quot;&gt;開発を効率化する関連gemの設定&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;3.4. &lt;a href=&quot;#first-settings-maintainability&quot;&gt;保守性を上げる&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;3.5. &lt;a href=&quot;#first-settings-format&quot;&gt;表示整形関連(ログなど見やすくなる)&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;3.6. &lt;a href=&quot;#first-settings-test&quot;&gt;テスト関連&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4. &lt;a href=&quot;#first-settings-i18n&quot;&gt;言語設定&lt;/a&gt;&lt;/h4&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;5. &lt;a href=&quot;#first-settings-timezone&quot;&gt;タイムゾーン&lt;/a&gt;&lt;/h4&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;6. &lt;a href=&quot;#first-settings-after&quot;&gt;準備をしたその後&lt;/a&gt;&lt;/h4&gt;
    &lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;first-settings-create&quot;&gt;1. Railsプロジェクトの作成&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;rails new first_settings_test

&lt;span class=&quot;synComment&quot;&gt;# RSpecを使う場合は、-T で test ディレクトリを作成しないようにする&lt;/span&gt;
rails new first_settings_test &lt;span class=&quot;synSpecial&quot;&gt;-T&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 既にプロジェクトを作っている場合は、testディレクトリをがっつり削除&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-rf&lt;/span&gt; first_settings_test/&lt;span class=&quot;synStatement&quot;&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;first-settings-git&quot;&gt;2. Gitにプロジェクトを登録&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;git init
git add .
git ci &lt;span class=&quot;synSpecial&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;initial commit&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;first-settings-gems&quot;&gt;3. 開発を効率化させるGemをがっつり導入&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;好きなgemだけ選んでインストールする方法でもよいと思います。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;first-settings-install&quot;&gt;3.1. gemのインストール&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;に記載し、gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# jqueryのイベントがturbolinkのせいで発火しなくなる問題を解消するgem&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;jquery-turbolinks&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 開発を効率化する関連&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;guard-livereload&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# ソースを修正するとブラウザが自動でロードされ、画面を作るときに便利&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails-erd&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;                        &lt;span class=&quot;synComment&quot;&gt;# rake-erdコマンドでActiveRecordからER図を作成できる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spring-commands-rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;            &lt;span class=&quot;synComment&quot;&gt;# bin/rspecコマンドを使えるようにし、rspecの起動を早めれる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;                           &lt;span class=&quot;synComment&quot;&gt;# n+1問題を発見&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 保守性を上げる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rubocop&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;          &lt;span class=&quot;synComment&quot;&gt;# コーディング規約の自動チェック&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# pry関連(デバッグなど便利)&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# rails cの対話式コンソールがirbの代わりにリッチなpryになる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-doc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;      &lt;span class=&quot;synComment&quot;&gt;# pry中に show-source [method名] でソース内を読める&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-byebug&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# binding.pryをソースに記載すると、ブレイクポイントとなりデバッグが可能になる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-stack_explorer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# pry中にスタックを上がったり下がったり行き来できる&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 表示整形関連(ログなど見やすくなる)&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hirb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;         &lt;span class=&quot;synComment&quot;&gt;# モデルの出力結果を表形式で表示する&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hirb-unicode&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# hirbの日本語などマルチバイト文字の出力時の出力結果がすれる問題に対応&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails-flog&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;flog&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# HashとSQLのログを見やすく整形&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;better_errors&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;     &lt;span class=&quot;synComment&quot;&gt;# 開発中のエラー画面をリッチにする&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;binding_of_caller&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 開発中のエラー画面にさらに変数の値を表示する&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;awesome_print&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;     &lt;span class=&quot;synComment&quot;&gt;# Rubyオブジェクトに色をつけて表示して見やすくなる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;quiet_assets&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;      &lt;span class=&quot;synComment&quot;&gt;# ログのassetsを表示しないようにし、ログを見やすくしてくれる&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# テスト関連&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rspec-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;        &lt;span class=&quot;synComment&quot;&gt;# rspec本体&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;shoulda-matchers&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# モデルのテストを簡易にかけるmatcherが使える&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;factory_girl_rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# テストデータ作成&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;           &lt;span class=&quot;synComment&quot;&gt;# エンドツーエンドテスト&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara-webkit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# エンドツーエンドテスト(javascript含む)&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;launchy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;            &lt;span class=&quot;synComment&quot;&gt;# capybaraのsave_and_open_pageメソッドの実行時に画面を開いてくれる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;database_cleaner&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# エンドツーエンドテスト時のDBをクリーンにする&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test-queue&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;         &lt;span class=&quot;synComment&quot;&gt;# テストを並列で実行する&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;faker&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;              &lt;span class=&quot;synComment&quot;&gt;# 本物っぽいテストデータの作成&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;faker-japanese&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;     &lt;span class=&quot;synComment&quot;&gt;# 本物っぽいテストデータの作成（日本語対応）&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;capybara-webkitがインストールできないというエラーが出た場合は、コメントアウトするか次のコマンドをMacの場合は、実行してください&lt;/i&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ brew update
$ brew &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt; qt4
&lt;span class=&quot;synComment&quot;&gt;# コンソールを開き直す&lt;/span&gt;
$ which qmake
/usr/&lt;span class=&quot;synStatement&quot;&gt;local&lt;/span&gt;/bin/qmake  &lt;span class=&quot;synComment&quot;&gt;# 何か出力されればインストールされていること&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;first-settings-jquery&quot;&gt;3.2. jquery-turbolinksの設定&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;jquery-turbolinks&lt;/code&gt;を有効にします。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/applicaiton.js&lt;/span&gt;
...

&lt;span class=&quot;synComment&quot;&gt;//= require jquery&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require jquery.turbolinks  // 追加&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require jquery_ujs&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;first-settings-efficiency&quot;&gt;3.3. 開発を効率化する関連gemの設定&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;guard-livereload&lt;/code&gt;のGuardfileを作成する&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; guard init livereload

&lt;span class=&quot;synComment&quot;&gt;# 次のコマンドでGuardをバックグラウンドで動かし、連携できます。&lt;/span&gt;
bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; guard
&lt;/pre&gt;&lt;p&gt;Guardの詳細な使い方は、 「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141016/1413389293&quot; target=&quot;_blank&quot;&gt;guard-livereloadを使ってRailsでブラウザのオートリロードをさせる&lt;/a&gt;」を参照ください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;RSpecにSpringを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/spring &lt;span class=&quot;synStatement&quot;&gt;stop&lt;/span&gt;
spring binstub &lt;span class=&quot;synSpecial&quot;&gt;--all&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# これで次のコマンドを実行できるようになり、rspecの起動が速くなる&lt;/span&gt;
bin/rspec
&lt;/pre&gt;&lt;p&gt;Springについて詳細を知りたい場合は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141026/1414289421&quot; target=&quot;_blank&quot;&gt;Springを使ってrailsのコマンド実行を早くする&lt;/a&gt;」を参照ください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;code&gt;bullet&lt;/code&gt;を有効にします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/environments/development.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  ...

  config.after_initialize &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Bullet&lt;/span&gt;.enable  = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# bullet を有効にする&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# 以下はN+1問題を発見した時のユーザーへの通知方法&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Bullet&lt;/span&gt;.alert   = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;        &lt;span class=&quot;synComment&quot;&gt;# ブラウザのJavaScriptアラート&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Bullet&lt;/span&gt;.bullet_logger = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# Rails.root/log/bullet.log&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Bullet&lt;/span&gt;.console = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;        &lt;span class=&quot;synComment&quot;&gt;# ブラウザの console.log の出力先&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Bullet.growl   = true      # Growl&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Bullet.xmpp = { :account  =&amp;gt; &#39;bullets_account@jabber.org&#39;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#                 :password =&amp;gt; &#39;bullets_password_for_jabber&#39;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#                 :receiver =&amp;gt; &#39;your_account@jabber.org&#39;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#                 :show_online_status =&amp;gt; true }&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Bullet.rails_logger = true # Railsのログ&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Bullet.bugsnag      = true # 総合デバッガツールbugsnag&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Bullet.airbrake     = true # Airbrake&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Bullet&lt;/span&gt;.raise        = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# Exceptionを発生させる&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Bullet&lt;/span&gt;.add_footer   = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# 画面の下部に表示(ajax時など非同期の場合は表示されない)&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# include paths with any of these substrings in the stack trace,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# even if they are not in your main app&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Bullet.stacktrace_includes = [ &#39;your_gem&#39;, &#39;your_middleware&#39; ]&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bulletのより詳細な使い方は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141109/1415522242&quot; target=&quot;_blank&quot;&gt;bulletでN+1問題を発見する&lt;/a&gt;」を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;first-settings-maintainability&quot;&gt;3.4. 保守性を上げる&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;次の&lt;code&gt;rubocop&lt;/code&gt;を実行するコマンドで、ソースコードがコーディング規約に準拠しているか確認できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; rubocop
&lt;/pre&gt;&lt;p&gt;デフォルトのコーディング規約については、「&lt;a href=&quot;https://github.com/fortissimo1997/ruby-style-guide/blob/japanese/README.ja.md&quot; target=&quot;_blank&quot;&gt;rubocopのコーディング規約 - GitHub&lt;/a&gt;」を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;first-settings-format&quot;&gt;3.5. 表示整形関連(ログなど見やすくなる)&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Hirb&lt;/code&gt;と&lt;code&gt;Awesome Print&lt;/code&gt;の設定ファイルを記載します。&lt;br /&gt;
Railsプロジェクトのルート配下に&lt;code&gt;.pryrc&lt;/code&gt;を作成し、次の内容をコピーします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# .pryrc&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# For hirb&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hirb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;LoadError&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Missing goodies, bummer&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;defined?&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Hirb&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Slightly dirty hack to fully support in-session Hirb.disable/enable toggling&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;Hirb&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;View&lt;/span&gt;.instance_eval &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;enable_output_method&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@output_method&lt;/span&gt; = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@old_print&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Pry&lt;/span&gt;.config.print
      &lt;span class=&quot;synType&quot;&gt;Pry&lt;/span&gt;.config.print = &lt;span class=&quot;synStatement&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |*&lt;span class=&quot;synIdentifier&quot;&gt;args&lt;/span&gt;|
        &lt;span class=&quot;synType&quot;&gt;Hirb&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;View&lt;/span&gt;.view_or_page_output(args[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]) || &lt;span class=&quot;synIdentifier&quot;&gt;@old_print&lt;/span&gt;.call(*args)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;disable_output_method&lt;/span&gt;
      &lt;span class=&quot;synType&quot;&gt;Pry&lt;/span&gt;.config.print = &lt;span class=&quot;synIdentifier&quot;&gt;@old_print&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@output_method&lt;/span&gt; = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synType&quot;&gt;Hirb&lt;/span&gt;.enable
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# For awesome_print&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;awesome_print&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;AwesomePrint&lt;/span&gt;.pry!
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;first-settings-test&quot;&gt;3.6. テスト関連&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;RSpecの設定ファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;rails g rspec:&lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、RSpecの設定ファイルを修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/rails_helper.rb&lt;/span&gt;

...

&lt;span class=&quot;synComment&quot;&gt;# Add additional requires below this line. Rails is not loaded until this point!&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;### 追加箇所 ###&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Capybara&lt;/span&gt;.javascript_driver = &lt;span class=&quot;synConstant&quot;&gt;:webkit&lt;/span&gt;

...

&lt;span class=&quot;synComment&quot;&gt;### コメントアウトする ###&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Dir&lt;/span&gt;[&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.root.join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/support/**/*.rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)].each { |&lt;span class=&quot;synIdentifier&quot;&gt;f&lt;/span&gt;| &lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; f }

...

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;config&lt;/span&gt;|
  ...

  &lt;span class=&quot;synComment&quot;&gt;# If you&#39;re not using ActiveRecord, or you&#39;d prefer not to run each of your&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# examples within a transaction, remove the following line or assign false&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# instead of true.&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;### 修正箇所 true から falseにする ###&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# config.use_transactional_fixtures = true&lt;/span&gt;
  config.use_transactional_fixtures = &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;### 追加箇所 開始 ###&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# suite: RSpecコマンドでテストを実行する単位&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# all:  各テストファイル(xxx_spec.rb)単位&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# each: 各テストケース(it)単位&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:suite&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean_with &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# テスト開始時にDBをクリーンにする&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# js以外のテスト時は通常のtransactionでデータを削除する&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.strategy = &lt;span class=&quot;synConstant&quot;&gt;:transaction&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# jsのテスト時はtruncationで削除する&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;js&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.strategy = &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.start
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.after(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.after(&lt;span class=&quot;synConstant&quot;&gt;:all&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean_with &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# all時にDBをクリーンにする&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;### 追加箇所 終了 ###&lt;/span&gt;
  ...
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;FactoryGirl&lt;/code&gt;のシンタックスを省略できるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/support/factory_girl.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;config&lt;/span&gt;|
  config.include &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Syntax&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Methods&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;test-queue&lt;/code&gt;で並列でテストを実行するための設定をします。&lt;br /&gt;
まず、&lt;code&gt;bin/rspec-queue&lt;/code&gt;という名前の実行ファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] ||= &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.expand_path(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;../../config/environment&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;__FILE__&lt;/span&gt;)

&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test_queue&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test_queue/runner/rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# テストランナー&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Reference: https://github.com/tmm1/test-queue&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;MyAppRSpecRunner&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;TestQueue&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Runner&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# def prepare(concurrency)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;after_fork&lt;/span&gt;(num)
    &lt;span class=&quot;synComment&quot;&gt;# ワーカー別のデータベースを準備する。&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;.update(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TEST_ENV_NUMBER&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; num &amp;gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; ? num.to_s : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;.configurations[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;][&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TEST_ENV_NUMBER&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]
    &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tasks&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DatabaseTasks&lt;/span&gt;.create_current
    &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;.establish_connection(&lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt;)

    &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.load_tasks
    &lt;span class=&quot;synType&quot;&gt;Rake&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Task&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;db:reset&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].invoke
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# def around_filter(suite)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   $stats.timing(&amp;quot;test.#{suite}.runtime&amp;quot;) do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#     yield&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   end&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;MyAppRSpecRunner&lt;/span&gt;.new.execute
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
実行権限をつけます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;744&lt;/span&gt; bin/rspec-queue
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
並列実行時のデータベース番号をつけます。&lt;br /&gt;
他にも並列テスト時に分ける必要があるものは&lt;code&gt;ENV[&#39;TEST_ENV_NUMBER&#39;]&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/database.yml&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;lt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;*default&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; db/test.sqlite3&amp;lt;%= ENV[&#39;TEST_ENV_NUMBER&#39;] %&amp;gt;
&lt;/pre&gt;&lt;p&gt;次のコマンドで並列テストが実行できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;bin/rspec-queue spec
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;(TODO) コードカバレッジ計測。ある程度以下になったら通知し、テストを作る。100%にすることよりも、一定水準(80%など)以上あることを確認することが大切。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;first-settings-i18n&quot;&gt;4. 言語設定&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;application.rb&lt;/code&gt;で言語設定をを記載するとRailsのデフォルトの言語を設定できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/application.rb&lt;/span&gt;
...

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;FirstSettingsTest&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt;
    ...

    &lt;span class=&quot;synComment&quot;&gt;# The default locale is :en and all translations from config/locales/*.rb,yml are auto loaded.&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# config.i18n.load_path += Dir[Rails.root.join(&#39;my&#39;, &#39;locales&#39;, &#39;*.{rb,yml}&#39;).to_s]&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# config.i18n.default_locale = :de&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;### 追加箇所 ###&lt;/span&gt;
    config.i18n.default_locale = &lt;span class=&quot;synConstant&quot;&gt;:ja&lt;/span&gt;

    ...
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
基本的な値を日本語化するには、&lt;code&gt;config/locales&lt;/code&gt;配下にリンク先の「&lt;a href=&quot;https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ja.yml&quot; target=&quot;_blank&quot;&gt;ja.yml&lt;/a&gt;」の内容をコピーして配置します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;また、自分で定義したActiveRecordのモデルの日本語化は次のような形式で記載し、&lt;code&gt;config/locales&lt;/code&gt;配下に配置します。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/locales/ar_ja.yml&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;activerecord&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; 商品

    &lt;span class=&quot;synIdentifier&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;        商品名
        &lt;span class=&quot;synIdentifier&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; 商品説明
        &lt;span class=&quot;synIdentifier&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;       値段
        &lt;span class=&quot;synIdentifier&quot;&gt;released_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; 販売日

   &lt;span class=&quot;synComment&quot;&gt; # エイリアス&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synType&quot;&gt;*product&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;first-settings-timezone&quot;&gt;5. タイムゾーン&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;application.rb&lt;/code&gt;にタイムゾーンを記載するとRails全体のタイムゾーンを設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/application.rb&lt;/span&gt;
...

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;FirstSettingsTest&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt;
    ...

    &lt;span class=&quot;synComment&quot;&gt;# Set Time.zone default to the specified zone and make Active Record auto-convert to this zone.&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Run &amp;quot;rake -D time&amp;quot; for a list of tasks for finding time zone names. Default is UTC.&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# config.time_zone = &#39;Central Time (US &amp;amp; Canada)&#39;&lt;/span&gt;
    
    &lt;span class=&quot;synComment&quot;&gt;### 追加箇所 ###&lt;/span&gt;
    config.time_zone = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Tokyo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

    ...
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;「ユーザー単位でタイムゾーンを設定したい」、「タイムゾーンの一覧を知りたい」場合などは、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141217/1418817120&quot; target=&quot;_blank&quot;&gt;Railsのタイムゾーンや時刻処理のまとめ&lt;/a&gt;」を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;first-settings-after&quot;&gt;6. 準備をしたその後&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;Railsで開発をしていくにあたりに一通りの設定ができました。この後は、自分が作りたいように作っていってください。&lt;br /&gt;
その前に、「認証機能」、「検索機能」、「デザイン」などよく必要になる機能へのリンクを貼っておきますので、必要なら参照して導入してみると良いかもしれません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;認証機能 =&gt; &lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140801/1406907000&quot; target=&quot;_blank&quot;&gt;ログイン認証Gemのdevise導入方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;検索機能 =&gt; &lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141008/1412774436&quot; target=&quot;_blank&quot;&gt;Ransackで便利な検索機能を作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;デザイン =&gt; &lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140801/1406818800&quot; target=&quot;_blank&quot;&gt;Twitter Bootstrapの導入方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 04 Feb 2015 22:12:17 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450079297252</guid>
          
            <category>Rails中級</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsのビューヘルパー(View Helper)のまとめ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150113/1421149061</link>
          <description>&lt;p&gt;&lt;a href=&quot;https://farm2.staticflickr.com/1005/1425536855_d705f747f8_b.jpg&quot; title=&quot;Columbus Flickr Meet Group Photo&quot;&gt;&lt;img alt=&quot;Columbus Flickr Meet Group Photo&quot; class=&quot;http-image&quot; src=&quot;https://farm2.staticflickr.com/1005/1425536855_d705f747f8_b.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/fensterbme/1425536855/in/photolist-4GjFfV-o8sHC9-a9MFqY-eo2tW8-eo2nBV-7eCWtP-3aYfrD-fQLPNz-6Lof3x-dkuUeM-52MkHD-6TjTGD-p8Hi6u-4vzm4e-9Tqmhn-5iT1Ch-bGDA3F-8nhsjA-dqSdfA-5dTjjS-ohvPL-62p3Xn-oaQ9Y4-aHY6ZB-3iXbZj-oFqJYW-4rFX1-5d918i-bB1wTW-o2FLCg-7tvtzy-4qTqmm-4nj2u6-gW5TTo-8ucrbd-ffNHdp-dpv9hC-9a4xLx-4mxMUW-ieBgZL-nadtga-6hpuGV-3RFkS-dLeXTM-oM5hzK-5U2YhL-aDCc3Z-eTiq5S-8EQy76-7FCaAs&quot;&gt;Columbus Flickr Meet Group Photo | Flickr - Photo Sharing!&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Railsのよく忘れるプルダウン(select), チェックボックス(check_box), ラジオボタン(radio_button)などビューヘルパーをまとめました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ビューでの表示形式の変換ヘルパーは、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140802/1406969793&quot;&gt;Rails&amp;#x306E;&amp;#x30C6;&amp;#x30AD;&amp;#x30B9;&amp;#x30C8;&amp;#x3001;&amp;#x6570;&amp;#x5024;&amp;#x3001;&amp;#x65E5;&amp;#x4ED8;/&amp;#x65E5;&amp;#x6642;&amp;#x95A2;&amp;#x9023;&amp;#x306E;&amp;#x30D5;&amp;#x30A9;&amp;#x30FC;&amp;#x30DE;&amp;#x30C3;&amp;#x30C8;&amp;#x30D8;&amp;#x30EB;&amp;#x30D1;&amp;#x30FC; - Rails Webook&lt;/a&gt;」を参照してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    &lt;p&gt; 1. &lt;a href=&quot;#view-helpers-link_to&quot;&gt;リンク - &lt;code&gt;link_to&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 2. &lt;a href=&quot;#view-helpers-image_tag&quot;&gt;画像 - &lt;code&gt;image_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 3. &lt;a href=&quot;#view-helpers-form&quot;&gt;フォーム - &lt;code&gt;form_for / form_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 4. &lt;a href=&quot;#view-helpers-fileds_for&quot;&gt;関連モデルのフォームを作成 - &lt;code&gt;fields_for&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 5. &lt;a href=&quot;#view-helpers-label&quot;&gt;ラベル - &lt;code&gt;label / label_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 6. &lt;a href=&quot;#view-helpers-text&quot;&gt;テキストフィールド - &lt;code&gt;text_field / test_field_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 7. &lt;a href=&quot;#view-helpers-datetime&quot;&gt;日付/時刻の入力フィールド - &lt;code&gt;date_field / time_field / datetime_field&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 8. &lt;a href=&quot;#view-helpers-datetime-select&quot;&gt;日付/時刻の選択フィールド - &lt;code&gt;date_select / time_select / datetime_select&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 9. &lt;a href=&quot;#view-helpers-file&quot;&gt;ファイルアップロードフィールド - &lt;code&gt;file_field / file_field_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
10. &lt;a href=&quot;#view-helpers-text_area&quot;&gt;テキストエリア - &lt;code&gt;text_area / text_area_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
11. &lt;a href=&quot;#view-helpers-select&quot;&gt;プルダウン/セレクトボックス - &lt;code&gt;select / select_tag / collection_select&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
12. &lt;a href=&quot;#view-helpers-check_box&quot;&gt;チェックボックス - &lt;code&gt;check_box / check_box_tag / collection_check_boxes&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
13. &lt;a href=&quot;#view-helpers-radio_button&quot;&gt;ラジオボタン - &lt;code&gt;radio_button, radio_button_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
14. &lt;a href=&quot;#view-helpers-hidden&quot;&gt;hiddenフィールド - &lt;code&gt;hidden_field / hidden_field_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
15. &lt;a href=&quot;#view-helpers-submit&quot;&gt;サブミットボタン - &lt;code&gt;submit / submit_tag&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-link_to&quot;&gt; 1. リンク - &lt;code&gt;link_to&lt;/code&gt;&lt;/h3&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;基本的な使い方&lt;/h4&gt;
    &lt;p&gt;リンク(aタグ）を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;link_to(name = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, options = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, html_options = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, &amp;amp;block)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;optionsに指定できるオプション&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt; ... &lt;code&gt;:get&lt;/code&gt;, &lt;code&gt;:post&lt;/code&gt;, &lt;code&gt;:patch&lt;/code&gt;, &lt;code&gt;:delete&lt;/code&gt; を指定することで、リンクのGET, POSTなどのHTTPメソッドを定義できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remote: true&lt;/code&gt; ... Ajaxリクエストをサーバーに送る（デフォルト値：false）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data: { confirm: &#39;削除しますか？&#39; }&lt;/code&gt; ... &quot;削除しますか？&quot;という表示される確認ダイアログを表示する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data: { disable_with: &#39;更新中...&#39; }&lt;/code&gt; ... ボタンを押した後に、ボタンを押せなくし、&quot;更新中...&quot;とボタンに表示する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;link_to の良くある使い方&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# HTML属性を指定する&lt;/span&gt;
link_to &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;プロフィール&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, profile_path(&lt;span class=&quot;synIdentifier&quot;&gt;@profile&lt;/span&gt;), &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;btn btn-large&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;@profile&lt;/span&gt;.id&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;a class=&amp;quot;btn btn-large&amp;quot; href=&amp;quot;/profiles/1&amp;quot; id=&amp;quot;profile1&amp;quot;&amp;gt;プロフィール&amp;lt;/a&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# クエリストリング(?=xxx)を追加する&lt;/span&gt;
link_to &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;プロフィール&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, profile_path(&lt;span class=&quot;synIdentifier&quot;&gt;@profile&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;q&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;a href=&amp;quot;/profiles/1?q=list&amp;quot;&amp;gt;プロフィール&amp;lt;/a&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# CSV, JSONなどリンクのフォーマットを指定する。&lt;/span&gt;
link_to &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;プロフィール&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, profile_path(&lt;span class=&quot;synIdentifier&quot;&gt;@profile&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;a href=&amp;quot;/profiles/1.csv&amp;quot;&amp;gt;プロフィール&amp;lt;/a&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# ブロックで特定要素を囲む&lt;/span&gt;
link_to &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;プロフィール&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;@profile&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &amp;lt;strong&amp;gt;&amp;lt;%= &lt;span class=&quot;synIdentifier&quot;&gt;@profile&lt;/span&gt;.name %&amp;gt;&amp;lt;/strong&amp;gt;さんのプロフィール
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;a href=&amp;quot;/profiles/1&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;鈴木&amp;lt;/strong&amp;gt;さんのプロフィール&amp;lt;/a&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# 条件によりリンクの表示有無を変える&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 管理者の場合、リンクを表示する。&lt;/span&gt;
link_to_if(current_user.admin?, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;管理者用リンク&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, admin_path)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-image_tag&quot;&gt; 2. 画像 - &lt;code&gt;image_tag&lt;/code&gt;&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;基本的な使い方&lt;/h4&gt;
    &lt;p&gt;画像（&lt;code&gt;img&lt;/code&gt;タグ）を表示するために使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;image_tag(source, options={})
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;オプション&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt; ... 絶対パスと相対パスのどちらでも指定可能。また、ファイルだけ指定した場合、assets/imagesフォルダからのパスとなる。&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;例: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; image_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;picture.png&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
#=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/images/picture.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Picture&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alt&lt;/code&gt; ... imgタグのalt属性（目の不自由な方のためなどの画像の代替文字列）を指定する。指定しない場合は、拡張子無しのファイル名が自動で設定される。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt; ... &quot;{幅}x{高さ}&quot; か &quot;{数}&quot; のどちらかで指定する。&quot;30x50&quot;の場合、width=&quot;30&quot; height=&quot;50&quot;となる。&quot;30&quot;の場合、width=&quot;30&quot; height=&quot;30&quot;になる。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;その他、HTMLのclassやid属性も追加することが可能&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;例: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; image_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;picture.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;main_img&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;iamge_tag のサンプル&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;image_tag(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;picture&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;img alt=&amp;quot;Picture&amp;quot; src=&amp;quot;/images/picture&amp;quot; /&amp;gt;&lt;/span&gt;

image_tag(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;picture.png&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;img alt=&amp;quot;Picture&amp;quot; src=&amp;quot;/images/picture.png&amp;quot; /&amp;gt;&lt;/span&gt;

image_tag(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;picture.png&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;50x40&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;alt&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Home Image&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;img src=&amp;quot;/images/picture.png&amp;quot; width=&amp;quot;50&amp;quot; height=&amp;quot;40&amp;quot; alt=&amp;quot;Home Image&amp;quot; /&amp;gt;&lt;/span&gt;

image_tag(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/gallery/picture.png&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;img src=&amp;quot;/gallery/picture.png&amp;quot; width=&amp;quot;200&amp;quot; height=&amp;quot;200&amp;quot; alt=&amp;quot;Picture&amp;quot; /&amp;gt;&lt;/span&gt;

image_tag(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;picture.png&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;menu_img&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;img alt=&amp;quot;Picture&amp;quot; class=&amp;quot;main_img&amp;quot; src=&amp;quot;/images/picture.png&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-form&quot;&gt; 3. フォーム - &lt;code&gt;form_for / form_tag&lt;/code&gt;&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;基本的な使い方(form_for と form_tag の使い分け方)&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;form_for&lt;/code&gt;は、&lt;b&gt;モデルの作成や更新などモデルに紐付いたフォームを作成するため&lt;/b&gt;に使います。モデルに紐付いているので、バリデーションエラー時にエラーメッセージとエラー箇所を表示することなどができます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;form_tag&lt;/code&gt;は、&lt;b&gt;検索やレポート出力などモデルに紐付かないフォームを作成するため&lt;/b&gt;に使います。モデルに紐付かないので、基本的にはバリデーションはできません。メソッドは&lt;code&gt;label_tag&lt;/code&gt;など&lt;code&gt;xxx_tag&lt;/code&gt;メソッドを使います。&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;form_for(record, options = {} &amp;amp;block)
form_tag(url_for_options = {}&amp;lt; options = {}, &amp;amp;block)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;オプション&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt; ... submitするURL。&lt;code&gt;form_for&lt;/code&gt;の場合、モデルから自動的にURLが生成されるため必ずしも必要ではない。&lt;code&gt;form_tag&lt;/code&gt;の場合、必ず必要。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt; ... &lt;code&gt;:get&lt;/code&gt;, &lt;code&gt;:post&lt;/code&gt;, &lt;code&gt;:patch&lt;/code&gt;, &lt;code&gt;:delete&lt;/code&gt; を指定することで、フォームのGET, POSTなどのHTTPメソッドを定義できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remote&lt;/code&gt; ... &lt;code&gt;true&lt;/code&gt;を設定するとAjaxのsubmitになる。（デフォルト: false）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;html&lt;/code&gt; ... formタグのHTML属性を指定する&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= form_for &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;remote&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:html&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synConstant&quot;&gt;:class&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;form-horizontal&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:role&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; } &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;f&lt;/span&gt;| %&amp;gt;
  &lt;span class=&quot;synComment&quot;&gt;# userの属性を指定&lt;/span&gt;
  &amp;lt;%= f.text_field &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt; %&amp;gt;
  &amp;lt;%= f.number_field &lt;span class=&quot;synConstant&quot;&gt;:age&lt;/span&gt; %&amp;gt;
  ...
  &amp;lt;%= f.submit %&amp;gt;
&amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt; %&amp;gt;


&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb の resources が次のように入れ子の場合、&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  resources :users do&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#    resources :comments&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  end&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# form_forにモデルを配列で指定する&lt;/span&gt;
&amp;lt;%= form_for [&lt;span class=&quot;synIdentifier&quot;&gt;@usre&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;@comments&lt;/span&gt;] &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;f&lt;/span&gt;| %&amp;gt;
  &amp;lt;!-- commentの属性を指定 --&amp;gt;
  &amp;lt;%= f.text_field &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt; %&amp;gt;
  ...
&amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt; %&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-fileds_for&quot;&gt; 4. 関連モデルのフォームを作成 - &lt;code&gt;fields_for&lt;/code&gt;&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;has_one&lt;/code&gt;や&lt;code&gt;has_many&lt;/code&gt;で関連づいたモデルも同時に作成/更新できるフォームを作成します。&lt;br /&gt;
次のようにモデルごとにフォームを入れ子にします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @user do |f| %&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.fields_for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :address do |address_fields| %&amp;gt;&lt;/span&gt;
    Street  : &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; address_fields.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :street %&amp;gt;&lt;/span&gt;
    Zip code: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; address_fields.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :zip_code %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
関連モデルの作成/更新をするには、ビューだけでなくモデルやコントローラーにも実装が必要です。一般的に&lt;code&gt;fields_for&lt;/code&gt;と一緒に&lt;code&gt;accepts_nested_attributes_for&lt;/code&gt;を使います。&lt;br /&gt;
関連モデルも一度に作成/更新するフォームを作りたい場合は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141208/1418018874&quot;&gt;Rails&amp;#x3067;accepts_nested_attributes_for&amp;#x3068;fields_for&amp;#x3092;&amp;#x4F7F;&amp;#x3063;&amp;#x3066;has_many&amp;#x95A2;&amp;#x9023;&amp;#x306E;&amp;#x5B50;&amp;#x30EC;&amp;#x30B3;&amp;#x30FC;&amp;#x30C9;&amp;#x3092;&amp;#x4F5C;&amp;#x6210;/&amp;#x66F4;&amp;#x65B0;&amp;#x3059;&amp;#x308B;&amp;#x30D5;&amp;#x30A9;&amp;#x30FC;&amp;#x30E0;&amp;#x3092;&amp;#x4F5C;&amp;#x6210; - Rails Webook&lt;/a&gt;」を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-label&quot;&gt; 5. ラベル - &lt;code&gt;label / label_tag&lt;/code&gt;&lt;/h3&gt;ラベル（&lt;code&gt;label&lt;/code&gt;要素）を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.label(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;名前&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;label for=&amp;quot;user_name&amp;quot;&amp;gt;名前&amp;lt;/label&amp;gt;&lt;/span&gt;


&amp;lt;%= label_tag(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;名前&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;label for=&amp;quot;user&amp;quot;&amp;gt;名前&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-text&quot;&gt; 6. テキストフィールド - &lt;code&gt;text_field / test_field_tag&lt;/code&gt;&lt;/h3&gt;テキストフィールド（&lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt;要素）を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 編集時にはvalueにはモデルのname属性の値が入る&lt;/span&gt;
&amp;lt;%= f.text_field &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user[name]&amp;quot; id=&amp;quot;user_name&amp;quot;&amp;gt;&lt;/span&gt;


&amp;lt;%= text_field_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user[name]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;値&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user[name]&amp;quot; id=&amp;quot;user_name&amp;quot; value=&amp;quot;値&amp;quot;&amp;gt;&lt;/span&gt;
&amp;lt;%= f.text_field(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;名前&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) %&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;code&gt;text_field&lt;/code&gt;のオプション&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:disabled&lt;/code&gt; ... &lt;code&gt;true&lt;/code&gt;を設定すると入力不可にできる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:size&lt;/code&gt; ... 指定した数の文字数分だけ表示できる幅に広がる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:maxlength&lt;/code&gt; ... ユーザが入力可能な最大文字数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:placeholder&lt;/code&gt; ... プレイスホルダーを設定する。&lt;/li&gt;
&lt;li&gt;その他、どんなHTML属性をも設定できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;その他のテキストフィールド&lt;/h4&gt;
    &lt;p&gt;テキストフィールドと同じように、次のようなフィールドも作成できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メールアドレスフィールド(&lt;code&gt;type=&quot;email&quot;&lt;/code&gt;) &lt;code&gt;email_field / email_field_tag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;パスワードフィールド(&lt;code&gt;type=&quot;password&lt;/code&gt;) &lt;code&gt;password_field / password_field_tag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;検索フィールド(&lt;code&gt;type=&quot;search&quot;&lt;/code&gt;) &lt;code&gt;search_field / search_field_tag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;数値フィールド(&lt;code&gt;type=&quot;number&quot;&lt;/code&gt;) &lt;code&gt;number_field / number_field_tag&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;view-helpers-datetime&quot;&gt; 7. 日付/時刻の入力フィールド - &lt;code&gt;date_field / time_field / datetime_field&lt;/code&gt;&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;日付フィールド(&lt;code&gt;type=&quot;date&lt;/code&gt;)&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;date_field / date_field_tag&lt;/code&gt;で作成できます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140026.jpg&quot; alt=&quot;f:id:nipe880324:20150110140026j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140026j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;時刻フィールド(&lt;code&gt;type=&quot;time&lt;/code&gt;)&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;time_field / time_field &lt;/code&gt;で作成できます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140044.jpg&quot; alt=&quot;f:id:nipe880324:20150110140044j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140044j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;日付時刻フィールド(&lt;code&gt;input type=&quot;datetime&quot;&lt;/code&gt;)&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;datetime_field / datetime_field_tag&lt;/code&gt;で作成できます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140057.jpg&quot; alt=&quot;f:id:nipe880324:20150110140057j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140057j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-datetime- 8. select&quot;&gt;日付/時刻の選択フィールド - &lt;code&gt;date_select / time_select / datetime_select&lt;/code&gt;&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;日付選択フィールド - &lt;code&gt;time_select&lt;/code&gt;&lt;/h4&gt;
    &lt;p&gt;日付のセレクトフィールドが作成します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140321.jpg&quot; alt=&quot;f:id:nipe880324:20150110140321j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140321j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.time_select &lt;span class=&quot;synConstant&quot;&gt;:activated_at&lt;/span&gt; %&amp;gt;

&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_1i&amp;quot; name=&amp;quot;user[activated_at(1i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2010&amp;quot;&amp;gt;2010&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2011&amp;quot;&amp;gt;2011&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   ... 年&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2020&amp;quot;&amp;gt;2020&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_2i&amp;quot; name=&amp;quot;user[activated_at(2i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;1&amp;quot; selected=&amp;quot;selected&amp;quot;&amp;gt;January&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;Feburary&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   ... 月&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;12&amp;quot;&amp;gt;December&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_3i&amp;quot; name=&amp;quot;user[activated_at(3i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;1&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;2&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   ... 日&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;31&amp;quot;&amp;gt;31&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# paramsの値&lt;/span&gt;
{
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; {
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ユーザー名&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(1i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(2i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(3i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    },
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;様々なオプションがあるので&lt;a href=&quot;http://api.rubyonrails.org/&quot; target=&quot;_blank&quot;&gt;Rails API&lt;/a&gt;を参照してください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;時刻選択フィールド - &lt;code&gt;time_select&lt;/code&gt;&lt;/h4&gt;
    &lt;p&gt;時刻のセレクトフィールドが作成されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140357.jpg&quot; alt=&quot;f:id:nipe880324:20150110140357j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140357j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.time_select &lt;span class=&quot;synConstant&quot;&gt;:activated_at&lt;/span&gt; %&amp;gt;

&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;hidden&amp;quot; id=&amp;quot;user_activated_at_1i&amp;quot; name=&amp;quot;user[activated_at(1i)]&amp;quot; value=&amp;quot;2015&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;hidden&amp;quot; id=&amp;quot;user_activated_at_2i&amp;quot; name=&amp;quot;user[activated_at(2i)]&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;hidden&amp;quot; id=&amp;quot;user_activated_at_3i&amp;quot; name=&amp;quot;user[activated_at(3i)]&amp;quot; value=&amp;quot;8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_4i&amp;quot; name=&amp;quot;user[activated_at(4i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;00&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;01&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   ... 時&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;24&amp;quot;&amp;gt;24&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  : &lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_5i&amp;quot; name=&amp;quot;user[activated_at(5i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;00&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;01&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   ... 分&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;59&amp;quot;&amp;gt;59&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# デフォルトだとparamsに年月日も送られます。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 未入力でも、勝手にデータが作成される可能性があります。&lt;/span&gt;
{
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ユーザー名&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(1i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(2i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(3i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(4i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(5i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  },
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
上記で記載しましたが、場合によって、&lt;code&gt;include_blank: true&lt;/code&gt;と&lt;code&gt;ignore_date: true&lt;/code&gt;を指定することで、未入力の場合に年月日が送られないようにできます。&lt;br /&gt;
そうすることで、モデル側の&lt;code&gt;presence&lt;/code&gt;などのバリデーションを上手く機能させることができるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.time_select &lt;span class=&quot;synConstant&quot;&gt;:activated_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;include_blank&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;ignore_date&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; %&amp;gt;

&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 年月日のhiddenフィールドが作成されない&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_4i&amp;quot; name=&amp;quot;user[activated_at(4i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;00&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;01&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   ... 時&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;24&amp;quot;&amp;gt;24&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  : &lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_5i&amp;quot; name=&amp;quot;user[activated_at(5i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;00&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;01&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   ... 分&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;59&amp;quot;&amp;gt;59&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 年月日がparamsになくなる&lt;/span&gt;
{
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; {
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;値&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(4i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(5i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  },
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;他にも秒数を表示など様々なオプションがあるので&lt;a href=&quot;http://api.rubyonrails.org/&quot; target=&quot;_blank&quot;&gt;Rails API&lt;/a&gt;を参照してください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;日付時刻選択フィールド - &lt;code&gt;datetime_select&lt;/code&gt;&lt;/h4&gt;
    &lt;p&gt;日付と時刻のセレクトフィールドが作成されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110141729.jpg&quot; alt=&quot;f:id:nipe880324:20150110141729j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110141729j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.datetime_select &lt;span class=&quot;synConstant&quot;&gt;:activated_at&lt;/span&gt; %&amp;gt;

&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_1i&amp;quot; name=&amp;quot;user[activated_at(1i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2015&amp;quot; selected=&amp;quot;selected&amp;quot;&amp;gt;2015&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2016&amp;quot;&amp;gt;2016&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     ... 年&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_2i&amp;quot; name=&amp;quot;user[activated_at(2i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;1&amp;quot; selected=&amp;quot;selected&amp;quot;&amp;gt;January&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;February&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     ... 月&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;12&amp;quot;&amp;gt;December&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_3i&amp;quot; name=&amp;quot;user[activated_at(3i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;1&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;2&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     ... 日&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;31&amp;quot;&amp;gt;31&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  —&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_4i&amp;quot; name=&amp;quot;user[activated_at(4i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;00&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;01&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     ... 時&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;23&amp;quot;&amp;gt;23&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  :&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;lt;select id=&amp;quot;user_activated_at_5i&amp;quot; name=&amp;quot;user[activated_at(5i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;00&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;01&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     ... 分&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;59&amp;quot;&amp;gt;59&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# paramsは年月日と時刻が送られれます。&lt;/span&gt;
{
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; {
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ユーザー名&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(1i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(2i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(3i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(4i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(5i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  },
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-file&quot;&gt; 9. ファイルアップロードフィールド - &lt;code&gt;file_field / file_field_tag&lt;/code&gt;&lt;/h3&gt;ファイルをアップロードするための&lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt;要素を作成します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140555.jpg&quot; alt=&quot;f:id:nipe880324:20150110140555j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140555j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.file_field(&lt;span class=&quot;synConstant&quot;&gt;:iamge&lt;/span&gt;) %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;user[image]&amp;quot; id=&amp;quot;user_image&amp;quot;&amp;gt;&lt;/span&gt;


&amp;lt;%= file_field_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user[image]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;user[image]&amp;quot; id=&amp;quot;user_image&amp;quot;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# form_for の場合は必要ないが、form_tagの場合、form_tag に multipart: true オプションが必要。&lt;/span&gt;
&amp;lt;%= form_tag &lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;: upload_users_path, &lt;span class=&quot;synConstant&quot;&gt;multipart&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;f&lt;/span&gt;| %&amp;gt;
  &amp;lt;%= f.file_field(&lt;span class=&quot;synConstant&quot;&gt;:iamge&lt;/span&gt;) %&amp;gt;
&amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt; %&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-text_area&quot;&gt;10. テキストエリア - &lt;code&gt;text_area / text_area_tag&lt;/code&gt;&lt;/h3&gt;テキストエリアを作成します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110141743.jpg&quot; alt=&quot;f:id:nipe880324:20150110141743j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110141743j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.text_area &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;user[image]&amp;quot; id=&amp;quot;user_image&amp;quot;&amp;gt;&lt;/span&gt;


&amp;lt;%= text_area_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user[name]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;値&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;textarea name=&amp;quot;user[name]&amp;quot; id=&amp;quot;user_name&amp;quot;&amp;gt;値&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;オプション&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;:size - A string specifying the dimensions (columns by rows) of the textarea (e.g., “25x10”).&lt;/li&gt;
&lt;li&gt;:rows - Specify the number of rows in the textarea&lt;/li&gt;
&lt;li&gt;:cols - Specify the number of columns in the textarea&lt;/li&gt;
&lt;li&gt;:disabled - If set to true, the user will not be able to use this input.&lt;/li&gt;
&lt;li&gt;:escape - By default, the contents of the text input are HTML escaped. If you need unescaped contents, set this to false.&lt;/li&gt;
&lt;li&gt;Any other key creates standard HTML attributes for the tag.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-select&quot;&gt;11. プルダウン/セレクトボックス - &lt;code&gt;select / select_tag / collection_select&lt;/code&gt;&lt;/h3&gt;プルダウンである&lt;code&gt;select&lt;/code&gt;要素が作成されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110141809.jpg&quot; alt=&quot;f:id:nipe880324:20150110141809j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110141809j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# どのメソッド結果は同じです&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 「属性名」、「配列データ」,「Option要素のvalueに設定するカラム名」, 「Option要素に表示するカラム名」の順で指定します。&lt;/span&gt;
&amp;lt;%= f.select &lt;span class=&quot;synConstant&quot;&gt;:prefecture_id&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Prefecture&lt;/span&gt;.all.map { |&lt;span class=&quot;synIdentifier&quot;&gt;p&lt;/span&gt;| [p.name, p.id] } %&amp;gt;
&amp;lt;%= select_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;address[prefeture_id]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, options_from_collection_for_select(&lt;span class=&quot;synType&quot;&gt;Prefecture&lt;/span&gt;.all, &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;) %&amp;gt;
&amp;lt;%= f.collection_select &lt;span class=&quot;synConstant&quot;&gt;:prefecture_id&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Prefecture&lt;/span&gt;.all, &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select name=&amp;quot;address[prefecture_id]&amp;quot; id=&amp;quot;address_prefecture_id&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;東京都&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;神奈川県&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;3&amp;quot;&amp;gt;埼玉県&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;オプション&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;:multiple - If set to true the selection will allow multiple choices.&lt;/li&gt;
&lt;li&gt;:disabled - If set to true, the user will not be able to use this input.&lt;/li&gt;
&lt;li&gt;:include_blank - If set to true, an empty option will be created. If set to a string, the string will be used as the option&#39;s content and the value will be empty.&lt;/li&gt;
&lt;li&gt;:prompt - Create a prompt option with blank value and the text asking user to select something.&lt;/li&gt;
&lt;li&gt;:selected - Provide a default selected value. It should be of the exact type as the provided options.&lt;/li&gt;
&lt;li&gt;Any other key creates standard HTML attributes for the tag.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
また、&lt;a href=&quot;https://select2.github.io/&quot; target=&quot;_blank&quot;&gt;select2&lt;/a&gt;という検索可能なプルダウンを作成するjQueryプラグインもあります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110141855.jpg&quot; alt=&quot;f:id:nipe880324:20150110141855j:plain:w220&quot; title=&quot;f:id:nipe880324:20150110141855j:plain:w220&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:220px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Railsへの導入方法は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141112/1415804076&quot; target=&quot;_blank&quot;&gt;Railsで検索可能なセレクトボックスのselect2を使う方法&lt;/a&gt;]」を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-check_box&quot;&gt;12. チェックボックス - &lt;code&gt;check_box / check_box_tag / collection_check_boxes&lt;/code&gt;&lt;/h3&gt;チェックボックスが作成されます。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;単一のチェックボックスの作成&lt;/h4&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140828.jpg&quot; alt=&quot;f:id:nipe880324:20150110140828j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140828j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# チェックボックスを1つ作成する&lt;/span&gt;
&amp;lt;%= f.check_box &lt;span class=&quot;synConstant&quot;&gt;:discontinued&lt;/span&gt; %&amp;gt; &amp;lt;%= f.label &lt;span class=&quot;synConstant&quot;&gt;:discontinued&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;販売停止&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input name=&amp;quot;product[discontinued]&amp;quot; type=&amp;quot;hidden&amp;quot; value=&amp;quot;0&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;checkbox&amp;quot; value=&amp;quot;1&amp;quot; name=&amp;quot;product[discontinued]&amp;quot; id=&amp;quot;product_discontinued&amp;quot;&amp;gt; &amp;lt;label for=&amp;quot;user_discontinued&amp;quot;&amp;gt;販売停止&amp;lt;/label&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# チェックボックスを1つ作成する&lt;/span&gt;
&amp;lt;%= check_box_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[discontinued]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt; &amp;lt;%= label_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[discontinued]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;販売停止&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;product[discontinued]&amp;quot; id=&amp;quot;product_discontinued&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt; &amp;lt;label for=&amp;quot;product_discontinued&amp;quot;&amp;gt;販売停止&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;複数のチェックボックスの作成&lt;/h4&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140843.jpg&quot; alt=&quot;f:id:nipe880324:20150110140843j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140843j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;ProductとCategoryが「N対N関係」である前提でビューを記載しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;% &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.all.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;category&lt;/span&gt;| %&amp;gt;
  &amp;lt;%= check_box_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[category_ids][]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, category.id, &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.categories.include?(category), &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_category_ids_&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;category.id&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; %&amp;gt;
  &amp;lt;%= label_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[category_ids][&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;category.id&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, category.name %&amp;gt;
&amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt; %&amp;gt;

&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;product[category_ids][]&amp;quot; id=&amp;quot;product_category_ids_1&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;label for=&amp;quot;product_category_ids_1&amp;quot;&amp;gt;カテゴリ1&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;product[category_ids][]&amp;quot; id=&amp;quot;product_category_ids_2&amp;quot; value=&amp;quot;2&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;label for=&amp;quot;product_category_ids_2&amp;quot;&amp;gt;カテゴリ2&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;product[category_ids][]&amp;quot; id=&amp;quot;product_category_ids_3&amp;quot; value=&amp;quot;3&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;label for=&amp;quot;product_category_ids_3&amp;quot;&amp;gt;カテゴリ3&amp;lt;/label&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# paramsは次のようになります。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# チェック0個の場合&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;}
&lt;span class=&quot;synComment&quot;&gt;# チェック1個以上&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, category_ids&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;=&amp;gt;[&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;]}&lt;/span&gt;


&lt;span class=&quot;synConstant&quot;&gt;# コントローラーのStrongParameters部分では、category_ids =&amp;gt; [] と記載し配列を許可するようにします。&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;def product_params&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  params.require(:product).permit(:name, :category_ids =&amp;gt; [])&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synConstant&quot;&gt;# 「多対多関係」をモデルで定義しておくとProductのcateogyr_ids属性に配列でカテゴリIDを設定することでhas_manyメソッドのおかげで複数のINERT文が走ります。&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;Parameters: {product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Aaa&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_ids&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]}, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create Product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}
&lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; Load (&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;.3ms)  &lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.* &lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; IN (&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;)
&lt;span class=&quot;synStatement&quot;&gt;begin&lt;/span&gt; transaction
  &lt;span class=&quot;synComment&quot;&gt;# Prodctに1レコード追加される&lt;/span&gt;
  SQL (&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;.4ms)  &lt;span class=&quot;synType&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) VALUES (&lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?)&lt;/span&gt;  [[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Aaa&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015-01-10 03:51:29.408266&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015-01-10 03:51:29.408266&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]]
  &lt;span class=&quot;synComment&quot;&gt;# ProductとCategoryの中間テーブルが2列追加されている&lt;/span&gt;
  SQL (&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;.2ms)  &lt;span class=&quot;synType&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) VALUES (&lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?)&lt;/span&gt;  [[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015-01-10 03:51:29.410606&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015-01-10 03:51:29.410606&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]]
  SQL (&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;.1ms)  &lt;span class=&quot;synType&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) VALUES (&lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?)&lt;/span&gt;  [[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015-01-10 03:51:29.414744&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015-01-10 03:51:29.414744&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]]
commit transaction
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
同じく「多対多関連」が前提で、次のような記載方法もあります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.collection_check_boxes &lt;span class=&quot;synConstant&quot;&gt;:category_ids&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.all, &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt; %&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-radio_button&quot;&gt;13. ラジオボタン - &lt;code&gt;radio_button, radio_button_tag&lt;/code&gt;&lt;/h3&gt;ラジオボタンを作成します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140911.jpg&quot; alt=&quot;f:id:nipe880324:20150110140911j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140911j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.label &lt;span class=&quot;synConstant&quot;&gt;:rate&lt;/span&gt; %&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;%= f.radio_button &lt;span class=&quot;synConstant&quot;&gt;:rate&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; %&amp;gt; &amp;lt;%= f.label &lt;span class=&quot;synConstant&quot;&gt;:rate_1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; %&amp;gt;
&amp;lt;%= f.radio_button &lt;span class=&quot;synConstant&quot;&gt;:rate&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; %&amp;gt; &amp;lt;%= f.label &lt;span class=&quot;synConstant&quot;&gt;:rate_2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; %&amp;gt;
&amp;lt;%= f.radio_button &lt;span class=&quot;synConstant&quot;&gt;:rate&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; %&amp;gt; &amp;lt;%= f.label &lt;span class=&quot;synConstant&quot;&gt;:rate_3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; %&amp;gt;
&amp;lt;%= f.radio_button &lt;span class=&quot;synConstant&quot;&gt;:rate&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt; %&amp;gt; &amp;lt;%= f.label &lt;span class=&quot;synConstant&quot;&gt;:rate_4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt; %&amp;gt;
&amp;lt;%= f.radio_button &lt;span class=&quot;synConstant&quot;&gt;:rate&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt; %&amp;gt; &amp;lt;%= f.label &lt;span class=&quot;synConstant&quot;&gt;:rate_5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;synType&quot;&gt;Rate&lt;/span&gt;&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[rate]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt; &amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[rate]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt; &amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[rate]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt; &amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[rate]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_4&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt; &amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_4&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[rate]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_5&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt; &amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_5&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;&amp;lt;/label&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
セレクトボックスのように一度にモデルの配列を返すことで、ラジオボックスを作成することも可能です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.collection_radio_buttons &lt;span class=&quot;synConstant&quot;&gt;:maker_id&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Maker&lt;/span&gt;.all, &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;radio&amp;quot; value=&amp;quot;1&amp;quot; name=&amp;quot;product[maker_id]&amp;quot; id=&amp;quot;product_maker_id_1&amp;quot;&amp;gt;&amp;lt;label for=&amp;quot;product_maker_id_1&amp;quot;&amp;gt;カテゴリ1# &amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;radio&amp;quot; value=&amp;quot;2&amp;quot; name=&amp;quot;product[maker_id]&amp;quot; id=&amp;quot;product_maker_id_2&amp;quot;&amp;gt;&amp;lt;label for=&amp;quot;product_maker_id_2&amp;quot;&amp;gt;カテゴリ2# &amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;radio&amp;quot; value=&amp;quot;3&amp;quot; name=&amp;quot;product[maker_id]&amp;quot; id=&amp;quot;product_maker_id_3&amp;quot;&amp;gt;&amp;lt;label for=&amp;quot;product_maker_id_3&amp;quot;&amp;gt;カテゴリ3# &amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-hidden&quot;&gt;14. hiddenフィールド - &lt;code&gt;hidden_field / hidden_field_tag&lt;/code&gt;&lt;/h3&gt;隠し入力フィールド（画面に表示されない）を作成できます。&lt;br /&gt;
&lt;i&gt;ユーザーからhiddenフィールドの値を見ることができるので、ユーザーに見られて困る秘密情報は載せないようにする必要があります。&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.hidden_field &lt;span class=&quot;synConstant&quot;&gt;:lock_version&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;product[lock_version]&amp;quot; id=&amp;quot;product_lock_version&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt;&lt;/span&gt;


&amp;lt;%= hidden_field_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[lock_version]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.lock_version %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;product[lock_version]&amp;quot; id=&amp;quot;product_lock_version&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;view-helpers-submit&quot;&gt;15. サブミットボタン - &lt;code&gt;submit / submit_tag&lt;/code&gt;&lt;/h3&gt;サブミットボタンを作成します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110141646.jpg&quot; alt=&quot;f:id:nipe880324:20150110141646j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110141646j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.submit &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;submit&amp;quot; name=&amp;quot;commit&amp;quot; value=&amp;quot;登録&amp;quot;&amp;gt;&lt;/span&gt;

&amp;lt;%= submit_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;検索&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt;
 &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;submit&amp;quot; name=&amp;quot;commit&amp;quot; value=&amp;quot;検索&amp;quot;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
１つのフォームに複数のサブミットボタンを追加して処理を分けたい場合は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141225/1419515057&quot; target=&quot;_blank&quot;&gt;Railsで１フォームに複数のサブミット(Submit)ボタンを配置するTips&lt;a/&gt;」を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot;&gt;Ruby on Rails API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 13 Jan 2015 20:37:41 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450079810257</guid>
          
            <category>Rails初級</category>
          
            <category>Rails View</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsでのログ/ロガーまとめ（ログ出力、ログレベル、ロガー作成、ログフォーマット）</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150110/1420863998</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110132541.jpg&quot; alt=&quot;f:id:nipe880324:20150110132541j:plain:w520&quot; title=&quot;f:id:nipe880324:20150110132541j:plain:w520&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:520px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/humboldtstate/&quot;&gt;Flickr: Humboldt State University&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Railsでログ出力を行う、ログレベルを設定する、新たにロガーを作成する、ログのフォーマットを設定する方法などRailsのログに関することをまとめました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#log-output&quot;&gt;1. ログを出力する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#log-setting-level&quot;&gt;2. ログレベルを設定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#log-creating-logger&quot;&gt;3. 新たにロガーを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#log-format&quot;&gt;4. ログのフォーマットを設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;log-output&quot;&gt;1. ログを出力する&lt;/h3&gt;&lt;code&gt;logger&lt;/code&gt;を使うことでコントローラー、モデル、ビューなどからロガーで設定されたログ出力先にログを出力することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;logger.debug &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ログ出力先にDebugレベルで情報を出力する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次の5つのメソッドが用意されており、それぞれログレベルに出力有無が変わります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;logger.fatal &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;致命的なエラー情報&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
logger.error &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;エラー情報&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
logger.warn  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;警告情報&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
logger.info  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;お知らせ情報&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
logger.debug &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;デバッグ情報&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;log-setting-level&quot;&gt;2. ログレベルを設定する&lt;/h3&gt;まず、ログレベルの使い分けは次のようになっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;fatal  &lt;span class=&quot;synComment&quot;&gt;# プログラムがクラッシュしたなどエラーハンドリングできないエラー&lt;/span&gt;
error  &lt;span class=&quot;synComment&quot;&gt;# エラーハンドリングできるエラー&lt;/span&gt;
warn   &lt;span class=&quot;synComment&quot;&gt;# 警告&lt;/span&gt;
info   &lt;span class=&quot;synComment&quot;&gt;# システム操作に対する一般的な役に立つ情報&lt;/span&gt;
debug  &lt;span class=&quot;synComment&quot;&gt;# 開発者向けの詳細な情報&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Railsでログレベルを設定するには、&lt;code&gt;config/development.rb&lt;/code&gt;、&lt;code&gt;config/test.rb&lt;/code&gt;、&lt;code&gt;config/production.rb&lt;/code&gt;内で次のように記載します。&lt;br /&gt;
設定したログレベルより低い(fatal &gt; error &gt; warn &gt; info &gt; debug)ログは出力されなくなります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# :fatal, :error, :warn, :info, :debugが設定可能&lt;/span&gt;
config.log_level = &lt;span class=&quot;synConstant&quot;&gt;:warn&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# logger.info と logger.debugの内容は出力されない&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
もしくは、上記のinitializers以外でログレベルを変更したい場合は次のようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.logger.level = &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# :debug&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 4 :fatal, 3 :error, 2 :warn, 1 :info, 0 :debug&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
各環境ごとのデフォルトのログレベルは次のとおりです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;development &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; debug&lt;/span&gt;
test        &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; debug&lt;/span&gt;
production  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; info&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;log-creating-logger&quot;&gt;3. 新たにロガーを作成する&lt;/h3&gt;Railsでロガーを作成するには、&lt;code&gt;config/development.rb&lt;/code&gt;、&lt;code&gt;config/test.rb&lt;/code&gt;、&lt;code&gt;config/production.rb&lt;/code&gt;内で次のように記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# log/developmetn.logに出力するロガーを作成。週ごとにログファイルがローテートされる&lt;/span&gt;
config.logger = &lt;span class=&quot;synType&quot;&gt;Logger&lt;/span&gt;.new(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;log/development.log&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;weekly&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# log/developmetn_special.logに出力する２つ目のロガーを作成。日ごとにログファイルがローテートされる&lt;/span&gt;
config.special_logger = &lt;span class=&quot;synType&quot;&gt;Logger&lt;/span&gt;.new(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;log/development_special.log&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;daily&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
コントローラー、モデル、ビューなどで上記で作成したログを使うことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;logger.debug &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;log/development.logに出力します&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 新たに定義したロガーは次のような指定をしないといけない&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.config.special_logger.debug &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;log/development_special.logに出力される&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;log-format&quot;&gt;4. ログのフォーマットを設定する&lt;/h3&gt;Railsでロガーを作成するには、&lt;code&gt;config/development.rb&lt;/code&gt;、&lt;code&gt;config/test.rb&lt;/code&gt;、&lt;code&gt;config/production.rb&lt;/code&gt;内で&lt;code&gt;formatter&lt;/code&gt;を設定します。&lt;/p&gt;&lt;p&gt;デフォルトのフォーマッターは次のように設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;config.logger.formatter = ::&lt;span class=&quot;synType&quot;&gt;Logger&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Formatter&lt;/span&gt;.new

&lt;span class=&quot;synComment&quot;&gt;# ログ内容です。&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I&lt;/span&gt;, [&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;-18T22:&lt;span class=&quot;synConstant&quot;&gt;50&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;46.439420&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;#42595]  INFO -- : Started GET &amp;quot;/users&amp;quot; for 127.0.0.1 at 2014-12-18 22:50:46 +0900&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I&lt;/span&gt;, [&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;-18T22:&lt;span class=&quot;synConstant&quot;&gt;50&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;46.585090&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;#42595]  INFO -- : Processing by UsersController#index as HTML&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、自分でログフォーマットをカスタマイズすることができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;config.logger.formatter = &lt;span class=&quot;synStatement&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;severity&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;datetime&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;progname&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;msg&lt;/span&gt;|
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;severity&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;datetime&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;progname&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; : &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;msg&lt;span class=&quot;synSpecial&quot;&gt;}\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ログ内容です。&lt;/span&gt;
[&lt;span class=&quot;synType&quot;&gt;INFO&lt;/span&gt;]&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;22&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;48&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;40&lt;/span&gt; +0900:  : &lt;span class=&quot;synType&quot;&gt;Started&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;0.1&lt;/span&gt; at &lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;22&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;48&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;40&lt;/span&gt; +0900
[&lt;span class=&quot;synType&quot;&gt;INFO&lt;/span&gt;]&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;22&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;48&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;40&lt;/span&gt; +0900:  : &lt;span class=&quot;synType&quot;&gt;Processing&lt;/span&gt; by &lt;span class=&quot;synType&quot;&gt;UsersController&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#index as HTML&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruby-doc.org/stdlib-2.1.0/libdoc/logger/rdoc/Logger.html&quot;&gt;Class: Logger (Ruby 2.1.0)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/debugging_rails_applications.html#the-logger&quot;&gt;Debugging Rails Applications &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sat, 10 Jan 2015 13:26:38 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450077440779</guid>
          
            <category>Rails初級</category>
          
            <category>運用</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsのRSpecテストを速くする方法まとめ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150106/1420545920</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150106/20150106210347.jpg&quot; alt=&quot;f:id:nipe880324:20150106210347j:plain:w480&quot; title=&quot;f:id:nipe880324:20150106210347j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/huddleston/&quot;&gt;Flickr: chief_huddleston&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Railsの規模が大きくなると自動テストの実行時間もだんだんと長くなっていきます。素早く開発していくにはテストの実行時間を短くすることが大切です。&lt;br /&gt;
RSpecのテストを速くする方法をまとめましたので参考にしてください。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;rspec-rails 3.1.0&lt;/li&gt;
&lt;li&gt;test-queue 0.2.9&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;1.   &lt;a href=&quot;#fast-test-profile&quot;&gt;RSpecのパフォーマンス測定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.   &lt;a href=&quot;#fast-test-test-queue&quot;&gt;test-queueで並列でテストを実行する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.   &lt;a href=&quot;#fast-test-rspec-guard&quot;&gt;rspec-guardを使って更新したファイルを自動的にテストする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.   &lt;a href=&quot;#fast-test-spring&quot;&gt;Springを使ってテストのロード時間を短くする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5.   &lt;a href=&quot;#fast-test-log-level&quot;&gt;ログレベルを変える&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;6.   &lt;a href=&quot;#fast-test-deffered-gc&quot;&gt;GCを実行を抑える&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;7.   &lt;a href=&quot;#fast-test-refactorings&quot;&gt;RSpecファイルのリファクタリングをする&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;7.1. &lt;a href=&quot;#fast-test-reduce-it&quot;&gt;&lt;code&gt;it&lt;/code&gt;を少なくする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;7.2. &lt;a href=&quot;#fast-test-create-to-build_stubbed&quot;&gt;&lt;code&gt;create&lt;/code&gt;よりも&lt;code&gt;build_stubbed&lt;/code&gt;を使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;8. &lt;a href=&quot;#fast-test-ideas&quot;&gt;WIP その他のアイデア&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;fast-test-profile&quot;&gt;1. RSpecのパフォーマンス測定&lt;/h3&gt;まず、RSpecの「&lt;b&gt;テスト実行の総実行時間&lt;/b&gt;」と「&lt;b&gt;どのテストが遅いテストか&lt;/b&gt;」を把握する必要があります。&lt;br /&gt;
&lt;code&gt;rspec&lt;/code&gt;コマンドに&lt;code&gt;-p&lt;/code&gt;オプションを使うことで、遅いテストサンプルとグループが10件(デフォルト)表示されます。&lt;/p&gt;&lt;p&gt;テストの総実行時間は、&lt;code&gt;Finished in XXX seconds&lt;/code&gt;に記載されています。&lt;br /&gt;
また、&lt;code&gt;Top 10 slowest examples&lt;/code&gt;に遅いテストサンプル、&lt;code&gt;Top 10 slowest example groups&lt;/code&gt;が遅いテストサンプルグループが遅い順に記載されます。&lt;br /&gt;
これらの、遅いテストケースを解消することを重点的にやることにより、テスト総実行時間が大幅に短くなりやすいです。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ rspce &lt;span class=&quot;synSpecial&quot;&gt;-p&lt;/span&gt;

...

Finished &lt;span class=&quot;synError&quot;&gt;in&lt;/span&gt; 0.67808 seconds &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;files took 2.55 seconds to load&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;

Top &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt; slowest examples &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;0.27127 seconds, 40.0% of total &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;:
  UsersController routing routes to &lt;span class=&quot;synComment&quot;&gt;#show&lt;/span&gt;
    0.05689 seconds ./spec/routing/users_routing_spec.rb:&lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt;
  orders/edit renders the edit order form

...

Top &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt; slowest example groups:
orders/edit
  0.05224 seconds average &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;0.05224 seconds / &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; example&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; ./spec/views/orders/edit.html.erb_spec.rb:&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;
products/edit
  0.02615 seconds average &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;0.02615 seconds / &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; example&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; ./spec/views/products/edit.html.erb_spec.rb:&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;

...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;--pforile&lt;/code&gt;オプションの使い方&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;-p, &lt;span class=&quot;synSpecial&quot;&gt;--[no-]profile&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;COUNT&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;       サンプルをプロファイルし、最も遅いサンプルを表示する（デフォルト：&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;件）
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;fast-test-test-queue&quot;&gt;2. test-queueで並列でテストを実行する&lt;/h3&gt;&lt;code&gt;test-queue&lt;/code&gt;というgemを入れることで、１マシン上でCPUのコア数分だけRSpecテストを並列実行できます。&lt;br /&gt;
もし、8コアある場合は、理論的には8分かかっていたものは1分で実行できるようになります。（並列テストの準備やローダー実行などがあるので実際の値はもう少しかかります）&lt;/p&gt;&lt;p&gt;では、&lt;code&gt;test-queue&lt;/code&gt;をRailsプロジェクトに導入していきます。&lt;br /&gt;
まず、Gemfileに追記します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test-queue&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;bin/rspec-queue&lt;/code&gt;という実行ファイルを作成します。&lt;br /&gt;
内容は次の通りです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] ||= &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.expand_path(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;../../config/environment&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;__FILE__&lt;/span&gt;)

&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test_queue&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test_queue/runner/rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# テストランナー&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Reference: https://github.com/tmm1/test-queue&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;MyAppRSpecRunner&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;TestQueue&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Runner&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# def prepare(concurrency)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;after_fork&lt;/span&gt;(num)
    &lt;span class=&quot;synComment&quot;&gt;# ワーカー別のデータベースを準備する。&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;.update(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TEST_ENV_NUMBER&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; num &amp;gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; ? num.to_s : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;.configurations[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;][&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TEST_ENV_NUMBER&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]
    &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tasks&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DatabaseTasks&lt;/span&gt;.create_current
    &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;.establish_connection(&lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt;)

    &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.load_tasks
    &lt;span class=&quot;synType&quot;&gt;Rake&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Task&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;db:reset&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].invoke
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# def around_filter(suite)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   $stats.timing(&amp;quot;test.#{suite}.runtime&amp;quot;) do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#     yield&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   end&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;MyAppRSpecRunner&lt;/span&gt;.new.execute
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;test-queue&lt;/code&gt;では、ワーカー毎にデータベースを必要とするため、データベース名に番号をつけます。&lt;br /&gt;
他にも、ファイル作成などテスト環境を分ける必要があるものは&lt;code&gt;ENV[&#39;TEST_ENV_NUMBER&#39;]&lt;/code&gt;をつけます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;config/database.yml

test:
  &amp;lt;&amp;lt;: *default
  &lt;span class=&quot;synConstant&quot;&gt;database&lt;/span&gt;: db/test.sqlite3&amp;lt;%= &lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TEST_ENV_NUMBER&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;] %&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;bin/rspec-queue&lt;/code&gt;に実行権限をつけます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;+x&lt;/span&gt; bin/rspec-queue
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;bin/rspec-queue&lt;/code&gt;を実行します。すると、コア数分だけ並列にテストが行われます。&lt;br /&gt;
テスト実行後に、&lt;code&gt;.test_queue_stats&lt;/code&gt;というファイルが作成されますが、これは、テストの実行時間を保存しており、次回&lt;code&gt;rspec-queue&lt;/code&gt;を実行するときに、各ワーカーでテスト実行時間を標準化させるために使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ bin/rspec-queue spec

Starting &lt;span class=&quot;synStatement&quot;&gt;test&lt;/span&gt;-queue master &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/tmp/test_queue_97612_70155795430020.sock&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;==&amp;gt;&lt;/span&gt; Summary &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; workers in 1.5298s&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;                          &lt;span class=&quot;synConstant&quot;&gt;21&lt;/span&gt; examples, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; failures, &lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt; pending         &lt;span class=&quot;synConstant&quot;&gt;9&lt;/span&gt; suites &lt;span class=&quot;synError&quot;&gt;in&lt;/span&gt; 1.4998s      &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;pid &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;98021&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;                          &lt;span class=&quot;synConstant&quot;&gt;32&lt;/span&gt; examples, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; failures, &lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt; pending         &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt; suites &lt;span class=&quot;synError&quot;&gt;in&lt;/span&gt; 1.5024s      &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;pid &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;98019&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;                                      &lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt; examples, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; failures         &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt; suites &lt;span class=&quot;synError&quot;&gt;in&lt;/span&gt; 1.5059s      &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;pid &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;98020&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;                          &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; examples, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; failures, &lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt; pending         &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt; suites &lt;span class=&quot;synError&quot;&gt;in&lt;/span&gt; 1.5247s      &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;pid &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;98022&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;fast-test-rspec-guard&quot;&gt;3. rspec-guardを使って更新したファイルを自動的にテストする&lt;/h3&gt;毎回少しのファイルを変更するたびに全件テストを実行していたらバカになりません。（そんな人はいないと思いますが）&lt;br /&gt;
少なくとも次のように、ファイル単位やサンプル単位で実行していると思います。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# ファイル単位でrspecを実行する&lt;/span&gt;
$ bin/rspec spec/features/users_spec.rb

&lt;span class=&quot;synComment&quot;&gt;# 行指定(120行目)にマッチしたrspecのテストを実行する&lt;/span&gt;
$ bin/rspec spec/features/users_spec.rb:&lt;span class=&quot;synConstant&quot;&gt;120&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これを、ファイルを変更するたびに、何度もコマンドを実行するのはめんどくさいので、&lt;code&gt;rspec-guard&lt;/code&gt;を使うことで自動的にテストをするようにできます。&lt;br /&gt;
副次的な効果として、ファイルを保存するたびに、&lt;code&gt;rspec-guard&lt;/code&gt;により細かくテストをしてくれるので、どこでテストがこけたかがすぐに分かるのでどのコードがいけないのかすぐにわかります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rspec-guardの導入方法や使い方については、&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141021/1413819783&quot; target=&quot;_blank&quot;&gt;コチラ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;fast-test-spring&quot;&gt;4. Springを使ってテストのロード時間を短くする&lt;/h3&gt;Railsが大規模になるほど、依存ライブラリやファイル数が増えるのでrspecコマンド実行時のロード時間が長くなる。&lt;br /&gt;
プリローダーのSpringを使うことで、ロード時間を短くすることができます。&lt;br /&gt;
10秒が3秒ぐらいになるなどそこまで効果はないですが、何回もコマンドを実行すると思えば、チリも積もれば山となるということで入れておくのをお勧めします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Springの導入方法、RSpecコマンド + Springを使う方法については、&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141026/1414289421&quot; target=&quot;_blank&quot;&gt;コチラ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;fast-test-log-level&quot;&gt;5. ログレベルを変える&lt;/h3&gt;&lt;code&gt;development&lt;/code&gt;環境と&lt;code&gt;test&lt;/code&gt;環境では、デフォルトのログレベルが&lt;code&gt;:debug&lt;/code&gt;になっています。&lt;br /&gt;
&lt;code&gt;test&lt;/code&gt;環境では、ログを確認するケースは少ないので、ログレベルを&lt;code&gt;:error&lt;/code&gt;に設定し、I/O出力を減らします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/environments/test.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Setting of a Log Level&lt;/span&gt;
config.log_level = &lt;span class=&quot;synConstant&quot;&gt;:error&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;fast-test-deffered-gc&quot;&gt;6. GCを実行を抑える&lt;/h3&gt;RSpec実行中のGCの実行を抑えることで、テスト時間を早くさせるハックです。&lt;br /&gt;
Rubyのバージョンも上がり、GCの性能が良くなってきたので、むしろ遅くなる可能性もありますのでご注意ください。&lt;/p&gt;&lt;p&gt;GCを実行するクラスのファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/supports/deferred_garbage_collection.rb&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# http://ariejan.net/2011/09/24/rspec-speed-up-by-tweaking-ruby-garbage-collection&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Usage:&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# DEFER_GC=10 rspec spec/&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# DEFER_GC=10 cucumber features/&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# put it to spec/support/deferred_garbage_collection_all_in_one.rb&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#        or feature/support/hooks.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;DeferredGarbageCollection&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;DEFERRED_GC_THRESHOLD&lt;/span&gt; = (&lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;DEFER_GC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;] || &lt;span class=&quot;synConstant&quot;&gt;-1&lt;/span&gt;).to_f

  &lt;span class=&quot;synIdentifier&quot;&gt;@last_gc_run&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;start&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;GC&lt;/span&gt;.disable &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;DEFERRED_GC_THRESHOLD&lt;/span&gt; &amp;gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;reconsider&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;DEFERRED_GC_THRESHOLD&lt;/span&gt; &amp;gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now - &lt;span class=&quot;synIdentifier&quot;&gt;@last_gc_run&lt;/span&gt; &amp;gt;= &lt;span class=&quot;synType&quot;&gt;DEFERRED_GC_THRESHOLD&lt;/span&gt;
      &lt;span class=&quot;synType&quot;&gt;GC&lt;/span&gt;.enable
      &lt;span class=&quot;synType&quot;&gt;GC&lt;/span&gt;.start
      &lt;span class=&quot;synType&quot;&gt;GC&lt;/span&gt;.disable
      &lt;span class=&quot;synIdentifier&quot;&gt;@last_gc_run&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、specの設定ファイルに下記を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/rails_helper.rb&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;config&lt;/span&gt;|
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:all&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DeferredGarbageCollection&lt;/span&gt;.start
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.after(&lt;span class=&quot;synConstant&quot;&gt;:all&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DeferredGarbageCollection&lt;/span&gt;.reconsider
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;fast-test-refactorings&quot;&gt;7. RSpecファイルのリファクタリングをする&lt;/h3&gt;&lt;h4 id=&quot;fast-test-reduce-it&quot;&gt;7.1. &lt;code&gt;it&lt;/code&gt;を少なくする&lt;/h4&gt;テストの基本として、1テストあたりで確認することは1つという考えがあります。こうすることで、失敗したテストから、ソースコードの悪い箇所を特定しやすいためです。&lt;br /&gt;
しかし、1テスト(&lt;code&gt;it&lt;/code&gt;)を多くすると、テスト実行時間という観点からはテストの前準備処理が何度も実行されるので、テストの実行時間が長くなります。&lt;br /&gt;
そのため、「テストの可読性/保守性」と「テストの実行時間」というトレードオフをうまく考えながら&lt;code&gt;it&lt;/code&gt;をまとめていく必要があります。&lt;/p&gt;&lt;p&gt;個人的な考えとしては次のようなように考えています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;モデルやコントローラーの単体テストでは、前準備の処理も軽く、ここの事象を確認するので&lt;code&gt;it&lt;/code&gt;は細くて良い&lt;/li&gt;
&lt;li&gt;Featuresなどのエンドツーエンドテストでは、前準備の処理も時間がかかるので、可読性と保守性を損ねない程度に&lt;code&gt;it&lt;/code&gt;をまとめる&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;次は、&lt;code&gt;it&lt;/code&gt;をまとめる前後のサンプルのRSpecのテストコードです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 商品管理のFeatures 修正前&lt;/span&gt;
describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品管理&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品を登録する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      visit products_path
      click_link &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;新規商品を登録&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;新規商品登録画面が表示されること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      within(&lt;span class=&quot;synConstant&quot;&gt;:h1&lt;/span&gt;) { expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;新規商品登録&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;有効な商品情報を入力した場合&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# itのたびにこのbeforeブロックが繰り返される&lt;/span&gt;
      before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        fill_in &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品名&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;パソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
        fill_in &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;値段&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100_000&lt;/span&gt;
        click_button &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品詳細画面が表示されること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        within(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) { expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品詳細&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録した商品情報が表示されること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        within(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
          expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;パソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
          expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;100,000&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録した商品情報がDBに登録されていること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        result = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.last
        expect(result.name).to  have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;パソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
        expect(result.price).to have_content &lt;span class=&quot;synConstant&quot;&gt;100_000&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;無効な商品情報を入力した場合&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# Do something ...&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
極力可能なものは&lt;code&gt;it&lt;/code&gt;をまとめます。見易さという点では修正前の方がよいですが、テスト実行時間は減ります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 商品管理のFeatures 修正後&lt;/span&gt;
describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品管理&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:feature&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品を登録する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      visit products_path
      click_link &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;新規商品を登録&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;新規商品登録画面が表示されること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      within(&lt;span class=&quot;synConstant&quot;&gt;:h1&lt;/span&gt;) { expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;新規商品登録&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;有効な商品情報を入力した場合&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# itの数が3から1に減ったので、このbeforeブロックの実行回数も3から1へ減る&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# すなわち、テスト実行時間も減る&lt;/span&gt;
      before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        fill_in &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品名&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;パソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
        fill_in &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;値段&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100_000&lt;/span&gt;
        click_button &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録した商品情報が登録されること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;synComment&quot;&gt;# 商品詳細画面が表示されること&lt;/span&gt;
        within(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) { expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品詳細&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }

        &lt;span class=&quot;synComment&quot;&gt;# 登録した商品情報が表示されること&lt;/span&gt;
        within(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
          expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;パソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
          expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;100,000&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;synComment&quot;&gt;# 登録した商品情報がDBに登録されていること&lt;/span&gt;
        result = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.last
        expect(result.name).to  have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;パソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
        expect(result.price).to have_content &lt;span class=&quot;synConstant&quot;&gt;100_000&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;無効な商品情報を入力した場合&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# Do something ...&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;fast-test-create-to-build_stubbed&quot;&gt;7.2. &lt;code&gt;create&lt;/code&gt;よりも&lt;code&gt;build_stubbed&lt;/code&gt;を使う&lt;/h4&gt;テスト実行時間の大部分を占めているものの１つにデータをDBに登録するという処理があります。&lt;br /&gt;
これは、ディスクへのI/O書き込みが発生するので、メモリに比べて遅くなるのはいたしかたありません。&lt;/p&gt;&lt;p&gt;そのため、主にモデルのテストで、&lt;code&gt;FactoryGirl&lt;/code&gt;の&lt;code&gt;create&lt;/code&gt;でデータを作成するよりも、&lt;code&gt;build_stubbed&lt;/code&gt;でスタブを作成してテストを実行させることにより、DBへの書き込みを少なくさせてテストを早くするという方法です。&lt;/p&gt;&lt;p&gt;&lt;code&gt;let&lt;/code&gt;内で&lt;code&gt;create&lt;/code&gt;メソッドを使ってテストデータを毎回作成しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 注文明細(line_item)のモデルSpecファイル 修正前&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synType&quot;&gt;LineItem&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:model&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#total_price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    let(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;)   { create(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;)}
    let(&lt;span class=&quot;synConstant&quot;&gt;:line_item&lt;/span&gt;) { create(&lt;span class=&quot;synConstant&quot;&gt;:line_item&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;product&lt;/span&gt;: product, &lt;span class=&quot;synConstant&quot;&gt;quantity&lt;/span&gt;: quantity) }

    subject { line_item.total_price }

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;quantity = 0&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      let(&lt;span class=&quot;synConstant&quot;&gt;:quantity&lt;/span&gt;) { &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; }
      it { is_expected.to eq &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;quantity = 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      let(&lt;span class=&quot;synConstant&quot;&gt;:quantity&lt;/span&gt;) { &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; }
      it { is_expected.to eq &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;quantity = 2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      let(&lt;span class=&quot;synConstant&quot;&gt;:quantity&lt;/span&gt;) { &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; }
      it { is_expected.to eq &lt;span class=&quot;synConstant&quot;&gt;200&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
変更は簡単で&lt;code&gt;build_stubbed&lt;/code&gt;に変更するだけです。&lt;br /&gt;
DBにデータを書き込まないので、DBからSELECTでデータを取得する処理では使えません。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 注文明細(line_item)のモデルSpecファイル 修正後&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synType&quot;&gt;LineItem&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:model&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#total_price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    let(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;)   { build_stubbed(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;)}
    let(&lt;span class=&quot;synConstant&quot;&gt;:line_item&lt;/span&gt;) { build_stubbed(&lt;span class=&quot;synConstant&quot;&gt;:line_item&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;product&lt;/span&gt;: product, &lt;span class=&quot;synConstant&quot;&gt;quantity&lt;/span&gt;: quantity) }

    ...

  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;fast-test-ideas&quot;&gt;WIP その他のアイデア&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SOA的な感じでシステムを分けてテストを少なくさせる&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wayneye.com/Blog/12-Tips-To-Boost-RSpec-And-Cucumber&quot;&gt;12 tips to boost RSpect and Cucumber - Wayne&amp;#39;s Geek Life&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 06 Jan 2015 21:05:20 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450077080960</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Test</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>RSpec3 / Capybara / Capybara-Webkit チートシート</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150103/1420280252</link>
          <description>&lt;p&gt;Railsの有名なテストフレームワークのRSpec、エンドツーエンドテスト用のフレームワークのCapybara、エンドツーエンドテストのJavascript(Ajaxなど)部分のテスト用のCapybara-webkitのチートシートです。&lt;br /&gt;
基本的な使い方を知っていることを前提に、Railsでの使い方をまとめました。&lt;/p&gt;&lt;p&gt;その他参考になるサイトです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150101/1420093487&quot; target=&quot;_blank&quot;&gt;RSpec/Capybaraの導入方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150102/1420174315&quot; target=&quot;_blank&quot;&gt;FactoryGrilのチートシート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails           4.1.7&lt;/li&gt;
&lt;li&gt;rspec-rails     3.1.0&lt;/li&gt;
&lt;li&gt;capybara        2.4.1&lt;/li&gt;
&lt;li&gt;capybara-webkit 1.3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-cheat-matcher&quot;&gt;RSpec Matcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-cheat-original&quot;&gt;独自RSpec Matcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-cheat-mock&quot;&gt;RSpec Mock(モック/スタブ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-cheat-shoulda-macher&quot;&gt;Shoulda-Macher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-cheat-capybara&quot;&gt;Capybara&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-cheat-capybara-webkit&quot;&gt;JSのテスト(with Capybara-WebKit)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rspec-cheat-matcher&quot;&gt;RSpec Matcher&lt;/h3&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;値が等しい(eq, not_to eq)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(actual).to     eq expected
expect(actual).not_to eq not_expected
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;同じオブジェクト(be)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(actual).to be expected

&lt;span class=&quot;synComment&quot;&gt;# それぞれString型のインスタンスが作成されるため同じオブジェクトではない&lt;/span&gt;
expect(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).to be &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; Failure/Error&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;比較(&gt;, &gt;=, &lt;=, &lt;, be_within)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(actual).to be &amp;gt;  expected
expect(actual).to be &amp;gt;= expected
expect(actual).to be &amp;lt;= expected
expect(actual).to be &amp;lt;  expected
expect(actual).to be_within(delta).of(expected)

&lt;span class=&quot;synComment&quot;&gt;# 例：1.05は1から0.1以内の範囲&lt;/span&gt;
expect(&lt;span class=&quot;synConstant&quot;&gt;1.05&lt;/span&gt;).to be_within(&lt;span class=&quot;synConstant&quot;&gt;0.1&lt;/span&gt;).of(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;正規表現(match)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(actual).to match(&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;インスタンスのクラスやタイプタイプ&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# あるクラスのインスタンスか確認する&lt;/span&gt;
expect(actual).to be_an_instance_of(expected)

&lt;span class=&quot;synComment&quot;&gt;# 例：&amp;quot;str&amp;quot;はStringクラスのインスタンス&lt;/span&gt;
expect(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).to be_an_instance_of &lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# あるクラス階層(継承関係もたどる)のインスタンスか確認する&lt;/span&gt;
expect(actual).to be_a  expected
expect(actual).to be_an expected        &lt;span class=&quot;synComment&quot;&gt;# be_a のエイリアス&lt;/span&gt;
expect(actual).to be_a_kind_of expected &lt;span class=&quot;synComment&quot;&gt;# be_a の別のエイリアス&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 例： 1.11は継承関係も含むObjectクラスのインスタンス&lt;/span&gt;
expect(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1.11&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).to be_an &lt;span class=&quot;synType&quot;&gt;Object&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;真偽値、nil&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(actual).to be &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
expect(actual).to be &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
expect(actual).to be_nil
expect(actual).to_not be_nil
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;例外(Exception)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect { 処理 }.to raise_error
expect { 処理 }.to raise_error &lt;span class=&quot;synType&quot;&gt;ErrorClass&lt;/span&gt;
expect { 処理 }.to raise_error &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
expect { 処理 }.to raise_error(&lt;span class=&quot;synType&quot;&gt;ErrorClass&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 例：ActiveRecord::RecordNotFound例外が発生することを確認&lt;/span&gt;
expect { &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.find(&lt;span class=&quot;synConstant&quot;&gt;-1&lt;/span&gt;) }.to raise_error &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RecordNotFound&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;predicateマッチャ&lt;/h4&gt;
    &lt;p&gt;アプリ内の&lt;code&gt;xxx?&lt;/code&gt;メソッドをRSpec内で&lt;code&gt;be_xxx&lt;/code&gt;Macherとして記載ができる。（例：&lt;code&gt;include?&lt;/code&gt; =&gt; &lt;code&gt;be_include&lt;/code&gt;）&lt;br /&gt;
また、同様に&lt;code&gt;has_xxx?&lt;/code&gt;メソッドを&lt;code&gt;have_xxx&lt;/code&gt;として記載ができる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(actual).to be_xxx
expect(actual).to have_xxx(&lt;span class=&quot;synConstant&quot;&gt;:arg&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;範囲(ruby &gt;= 1.9の場合)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;).to cover(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
expect(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;).not_to cover(&lt;span class=&quot;synConstant&quot;&gt;-1&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;数の変化(change, by, from, to)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 商品の総数が1増加することを確認&lt;/span&gt;
expect {
  &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.create &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyProduct&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
}.to change { &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.count }.by(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 商品の総数が1増加することを確認&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.create &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyProduct&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
expect {
  &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.first.destroy
}.to change { &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.count }.by(&lt;span class=&quot;synConstant&quot;&gt;-1&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 商品の総数が1から3個へなったことを確認&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.create &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyProduct&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
expect {
  &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;.times { product.create &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyProduct&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
}.to change { &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.count }.from(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;).to(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;配列、文字列に含む&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 含む&lt;/span&gt;
expect(actual).to &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt;(expected)

&lt;span class=&quot;synComment&quot;&gt;# 開始する、終了する&lt;/span&gt;
expect(actual).to start_with(expected)
expect(actual).to end_with(expected)

&lt;span class=&quot;synComment&quot;&gt;# 配列がマッチするか確認する&lt;/span&gt;
expect(actual).to match_array(expected_array) &lt;span class=&quot;synComment&quot;&gt;# 上記と同様&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 例&lt;/span&gt;
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;)
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to start_with(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to start_with(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;)
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to end_with(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to end_with(&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
expect({&lt;span class=&quot;synConstant&quot;&gt;:a&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;}).to &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;:a&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
expect(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;this string&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).to &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt;(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;is str&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
expect(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;this string&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).to start_with(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
expect(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;this string&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).to end_with(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ring&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to contain_exactly(&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to match_array([&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;])
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-cheat-original&quot;&gt;独自RSpec Matcher&lt;/h3&gt;&lt;code&gt;RSpec::Matchers.define&lt;/code&gt;で定義します。定義場所は、&lt;code&gt;spec/support&lt;/code&gt;配下に個別の名前をつけて作成すると良いでしょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# spec/support/have_flash_message.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Matchers&lt;/span&gt;.define &lt;span class=&quot;synConstant&quot;&gt;:have_flash_message&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;message&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;type&lt;/span&gt;|
  match &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;page&lt;/span&gt;|
    expect(page).to have_selector(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;div.alert.alert-&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;type&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: message)
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 利用&lt;/span&gt;
expect(page).to have_flash_message &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;更新に失敗しました&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;danger&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
CanCanCanのAbilityの状況を確認するリッチなカスタムマッチャ&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Examples&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# @user.should have_ability(:create, for: Post.new)&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# @user.should have_ability([:create, :read], for: Post.new)&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# @user.should have_ability(&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   {create: true, read: false, update: false, destroy: true}, for: Post.new)&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Matchers&lt;/span&gt;.define &lt;span class=&quot;synConstant&quot;&gt;:have_ability&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;ability_hash&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;options&lt;/span&gt; = {}|
  match &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;user&lt;/span&gt;|
    ability = &lt;span class=&quot;synType&quot;&gt;Ability&lt;/span&gt;.new(user)
    target = options[&lt;span class=&quot;synConstant&quot;&gt;:for&lt;/span&gt;]
    &lt;span class=&quot;synIdentifier&quot;&gt;@ability_result&lt;/span&gt; = {}
    ability_hash = { ability_hash =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; ability_hash.is_a? &lt;span class=&quot;synType&quot;&gt;Symbol&lt;/span&gt;
    ability_hash = ability_hash.reduce({}) { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;e&lt;/span&gt;| a.merge(e =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;) } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt;
      ability_hash.is_a? &lt;span class=&quot;synType&quot;&gt;Array&lt;/span&gt;
    ability_hash.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;action&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;_true_or_false&lt;/span&gt;|
      &lt;span class=&quot;synIdentifier&quot;&gt;@ability_result&lt;/span&gt;[action] = ability.can?(action, target)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    ability_hash == &lt;span class=&quot;synIdentifier&quot;&gt;@ability_result&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  failure_message &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;user&lt;/span&gt;|
    ability_hash, options = expected
    ability_hash = { ability_hash =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; ability_hash.is_a? &lt;span class=&quot;synType&quot;&gt;Symbol&lt;/span&gt;
    ability_hash = ability_hash.reduce({}) { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;e&lt;/span&gt;| a.merge(e =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;) } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt;
      ability_hash.is_a? &lt;span class=&quot;synType&quot;&gt;Array&lt;/span&gt;
    target = options[&lt;span class=&quot;synConstant&quot;&gt;:for&lt;/span&gt;]
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;expected User:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;user&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; to have ability:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;ability_hash&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; for &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;target&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; \
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;but actual result is &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;@ability_result&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# clean up output of RSpec Documentation format&lt;/span&gt;
  description &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; ability_hash.length == &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;have ability &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;expected.to_s.match(&lt;span class=&quot;synSpecial&quot;&gt;/(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;[^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;]*)/&lt;/span&gt;)[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; \
      &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;expected.to_s.match(&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;([^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;]*)/&lt;/span&gt;)[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;have abilities &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;expected.to_s.match(&lt;span class=&quot;synSpecial&quot;&gt;/\[(\[[^\]]*\])&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;)[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; \
      &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;expected.to_s.match(&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;([^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;]*)/&lt;/span&gt;)[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-cheat-mock&quot;&gt;RSpec Mock(モック/スタブ)&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;モック/スタブの基本&lt;/h4&gt;
    &lt;p&gt;RSpecでは、&lt;code&gt;allow&lt;/code&gt;、&lt;code&gt;receive&lt;/code&gt;、&lt;code&gt;and_return&lt;/code&gt;を使うことで、モックのクラスメソッドやインスタンスメソッドを作成できる。&lt;br /&gt;
&lt;b&gt;モック化するメソッドは、空メソッドでも良いので&lt;code&gt;def&lt;/code&gt;で定義しておく必要がある。&lt;/b&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# インスタンスメソッド(product.name)のリターン値を&amp;quot;Mock Name&amp;quot;と定義している&lt;/span&gt;
product = build(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;)
allow(product).to receive(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;).and_return(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Mock Name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
puts product.name &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;Mock Name&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# and_returnではなく、ブロックでも同様&lt;/span&gt;
allow(product).to receive(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;) { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Mock Name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }


&lt;span class=&quot;synComment&quot;&gt;# クラスメソッド(Product.count)のリターン値を 5 と定義している&lt;/span&gt;
allow(&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;).to receive(&lt;span class=&quot;synConstant&quot;&gt;:count&lt;/span&gt;).and_return(&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;)
puts &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 5&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;連続的なリターン値&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;and_return&lt;/code&gt;に複数値を渡すと、呼び出すたびに値を変更することができる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;allow(&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;).to receive(&lt;span class=&quot;synConstant&quot;&gt;:increment&lt;/span&gt;).and_return(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
puts &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.increment &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
puts &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.increment &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
puts &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.increment &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
puts &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.increment &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
puts &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.increment &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;例外を返す&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;allow(double).to receive(&lt;span class=&quot;synConstant&quot;&gt;:msg&lt;/span&gt;).and_raise(error)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-cheat-shoulda-macher&quot;&gt;Shoulda-Macher&lt;/h3&gt;主にモデルのバリデーションのテストを簡単にかける&lt;br /&gt;
&lt;a href=&quot;http://thoughtbot.github.io/shoulda-matchers/v2.7.0/&quot;&gt;File: README &amp;mdash; Documentation by YARD 0.8.7.3&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-cheat-capybara&quot;&gt;Capybara&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;操作 - 遷移する&lt;/h4&gt;
    &lt;p&gt;URL指定(&quot;/projects&quot;)でも、パス指定(xxx_path)でも指定が可能。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;visit &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/projects&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
visit post_comments_path(post)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;操作 - リンクやボタンを押す&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;click_link   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;お問い合わせ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# リンク(aタグ)を押す。リンクテキストかIDを引数にする&lt;/span&gt;
click_button &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# ボタンを押す。ボタンのvalue値(ボタンの表示文字)を引数にする&lt;/span&gt;
click_on &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;        &lt;span class=&quot;synComment&quot;&gt;# ボタンかリンクを押す&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;操作 - フォーム入力&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# テキストフィールド/テキストエリア入力&lt;/span&gt;
fill_in &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;入力フィールド&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;入力値&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# namd属性、id属性、ラベルで入力フィールドを指定できる&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ラジオボタンを選択&lt;/span&gt;
choose  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ラジオボタン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# namd属性、id属性、ラベルで入力フィールドを指定できる&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# チェックボックスのチェックをつける、チェックを外す&lt;/span&gt;
check   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;チェックボックス&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# namd属性、id属性、ラベルで入力フィールドを指定できる&lt;/span&gt;
uncheck &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;チェックボックスを外す&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ファイルアップロード&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 第一引数は、namd属性、id属性、ラベルで入力フィールドを指定できる&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 第二引数は、ファイルのパスを指定&lt;/span&gt;
attach_file &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ファイル入力&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/path/to/image.jpg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# セレクトボックスの選択&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 第一引数は、セレクトするOption属性の値&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 第二引数のfromオプションは、セレクトボックスのid属性, name属性, ラベルを指定する&lt;/span&gt;
select  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;form&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;select box&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;検証 - 現在のパスを確認&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;current_path&lt;/code&gt;メソッドにより、現在のパスを検証できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(current_path).to eq post_comments_path(post)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;検証 - 画面表示文字の存在を確認&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
expect(page).to have_no_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;検証 - CSS、XPathの存在を確認&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(page).to have_css   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;table tr.foo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
expect(page).to have_xpath &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;//table/tr&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;検証 - 特定の値の表示有無を確認&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;find_link(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).visible?
expect(find(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#navigation&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)).to have_button(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Sign out&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;特定のスコープで操作、検証&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;whithin&lt;/code&gt;により、入力、検証の範囲を指定することができる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# CSS, XPathなどで指定することが可能&lt;/span&gt;
within &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;li#employee&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  fill_in &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:with&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Jimmy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

within &lt;span class=&quot;synConstant&quot;&gt;:xpath&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;//div[contains(., &amp;quot;bar&amp;quot;)]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  ...
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

within &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;リストテキスト&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  ...
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;別のウインドウを操作、検証&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;window_opend_by&lt;/code&gt;と&lt;code&gt;within_window&lt;/code&gt;で別のウインドウの操作、検証を行うことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# いいねボタンを押すと、Facebookのログイン用のウインドウが開かれる&lt;/span&gt;
facebook_window = window_opened_by &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  click_button &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;いいね&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Facebookのログイン用のウインドウで情報を登録してログインしている&lt;/span&gt;
within_window facebook_window &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  find(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#login_email&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).set(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;a@example.com&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
  find(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#login_password&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).set(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;qwerty&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
  click_button &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ログイン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;デバッグ&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;tmp/capybara&lt;/code&gt;配下にスナップショットのHTMLファイルを作成する&lt;br /&gt;
(CSS適用や入力フィールドが入力されていないので注意)&lt;br /&gt;
&lt;a href=&quot;https://github.com/copiousfreetime/launchy&quot; target=&quot;_blank&quot;&gt;launchy&lt;/a&gt;というgemを入れるとテスト実行時に自動的にブラウザで開いてくれる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;save_and_open_page
&lt;/pre&gt;&lt;p&gt;画像ファイルとして画面を表示する(CSSや入力フィールドは入力されている)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;page.save_screenshot &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;screenshot.png&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
HTMLのbody要素の中身を確認する&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;puts page.body     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; HTMLボディの内容 ...&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-cheat-capybara-webkit&quot;&gt;JSのテスト(with Capybara-WebKit)&lt;/h3&gt;Javascriptをテストする場合、&lt;code&gt;js: true&lt;/code&gt;を追加する。&lt;br /&gt;
&lt;code&gt;rails_helper.rb&lt;/code&gt;での、通常時とJS True時のDatabase Cleanerの削除方式が違うので注意が必要。&lt;/p&gt;&lt;p&gt;Driverがサポートしている場合、モーダルを操作できる。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;操作 - JSのalert, confirmダイアログのボタンを押す&lt;/h4&gt;
    &lt;p&gt;CapybaraとCapybara-Webkitを使うことで、Javascriptの&lt;code&gt;alert()&lt;/code&gt;や&lt;code&gt;confirm&lt;/code&gt;で呼ばれたダイアログのボタンを押せます。&lt;br /&gt;
Todo alert画像&lt;/p&gt;&lt;p&gt;注意点として、下記のメソッドは結果に関わらず次へ進んでしまうらしいので、メッセージ取得などの結果を確実に取得したい場合はsleepなどを入れる必要がある&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# OKボタンを押す&lt;/span&gt;
page.driver.browser.accept_js_confirms

&lt;span class=&quot;synComment&quot;&gt;# NOボタンを押す&lt;/span&gt;
page.driver.browser.dismiss_js_confirms

&lt;span class=&quot;synComment&quot;&gt;# メッセージを取得する&lt;/span&gt;
page.driver.browser.alert_messages
page.driver.browser.confirm_messages
page.driver.browser.console_messages
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;エラー(404, 500など)のテスト&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;rescue_from&lt;/code&gt;でエラーを定義した時に、404や500エラーを意図的に発生させたいことがあると思います。&lt;br /&gt;
RSpecやCapybaraの機能を使うこと簡単にテストすることができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;### アプリケーションコード ###&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActionController&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  protect_from_forgery &lt;span class=&quot;synConstant&quot;&gt;:with&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:exception&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 例外ハンドル&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# NOTICE: rescue_from は下から評価される&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.env.development?
    rescue_from &lt;span class=&quot;synType&quot;&gt;Exception&lt;/span&gt;,                        &lt;span class=&quot;synConstant&quot;&gt;:with&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:render_500&lt;/span&gt;
    rescue_from &lt;span class=&quot;synType&quot;&gt;ActionController&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RoutingError&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;:with&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:render_404&lt;/span&gt;
    rescue_from &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RecordNotFound&lt;/span&gt;,     &lt;span class=&quot;synConstant&quot;&gt;:with&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:render_404&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;### テストコード ###&lt;/span&gt;
describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;404エラー&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;RoutingError&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      visit &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/undefined_routing_path&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 存在しないパスにアクセスする&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;404エラーページに遷移すること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      expect(page).to have_content(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;404 File not found&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ステータスコードが404であること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      expect(page.status_code).to eq &lt;span class=&quot;synConstant&quot;&gt;404&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;RecordNotFound&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      visit admin_shop_path(&lt;span class=&quot;synConstant&quot;&gt;1000000&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# 存在しないレコードのIDにアクセスする&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;404エラーページに遷移すること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      expect(page).to have_content(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;404 File not found&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ステータスコードが404であること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      expect(page.status_code).to eq &lt;span class=&quot;synConstant&quot;&gt;404&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;


describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;500エラー&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 一覧画面に遷移したら例外を発生させる&lt;/span&gt;
    expect_any_instance_of(&lt;span class=&quot;synType&quot;&gt;ProductsController&lt;/span&gt;).to receive(&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;).and_throw(&lt;span class=&quot;synType&quot;&gt;Exception&lt;/span&gt;)

    visit products_path
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;500エラーページに遷移すること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;500 Internal Server Error&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ステータスコードが500であること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    expect(page.status_code).to equal(&lt;span class=&quot;synConstant&quot;&gt;500&lt;/span&gt;)
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
          <pubDate>Sat, 03 Jan 2015 19:17:32 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450077047919</guid>
          
            <category>Rails Test</category>
          
            <category>Rails中級</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>RSpec/Capybara/Capybara-Webkitの導入方法</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150101/1420093487</link>
          <description>&lt;p&gt;RSpecの基本について理解している人を対象に、「&lt;b&gt;RSpecのテストに必要なGem、モデル、コントローラー、Feature(Capybare)、JavaScriptなどの基本的なテストの書き方&lt;/b&gt;」についてまとめました。&lt;/p&gt;&lt;p&gt;下記のサイトも参考になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150102/1420174315&quot; target=&quot;_blank&quot;&gt;Factory Girl Rails のチートシート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150103/1420280252&quot; target=&quot;_blank&quot;&gt;RSpec/Capybara/Capybara-Webkit のレシピ集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作環境&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Mac OS X 10&lt;/li&gt;
&lt;li&gt;Ruby 2.1&lt;/li&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;rspec-rails 3.1.0&lt;/li&gt;
&lt;li&gt;shoulda-matchers 2.6.2&lt;/li&gt;
&lt;li&gt;factory_girl_rails 4.4.1&lt;/li&gt;
&lt;li&gt;capybara   2.4.1&lt;/li&gt;
&lt;li&gt;Phantomjs  1.9.8&lt;/li&gt;
&lt;li&gt;poltergeist 1.5.1&lt;/li&gt;
&lt;li&gt;capybara-webkit 1.3.0&lt;/li&gt;
&lt;li&gt;database_cleaner 1.3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-preapre-ut-to-e2e&quot;&gt;UTからE2Eテストのための準備（RSpec, FactoryGirlなど）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-model&quot;&gt;Modelのテスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-controller&quot;&gt;Controllerのテスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-helper&quot;&gt;Helperのテスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-api&quot;&gt;APIのテスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-e2e-features&quot;&gt;E2E(Features)のテスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-prepare-capybara-webkit&quot;&gt;E2Eテスト(JavaScript)のための準備（Capybara-Webkitなど）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-prepare-javascript-poltergist&quot;&gt;E2Eテスト(JavaScript)のための準備（PhantomJS, Poltergistなど）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rspec-preapre-ut-to-e2e&quot;&gt;1. UTからE2Eテストのための準備（RSpec, FactoryGirlなど）&lt;/h3&gt;&lt;code&gt;Gemfile&lt;/code&gt;に以下を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# デバッグに便利なGem&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# rails console(もしくは、rails c)でirbの代わりにpryを使われる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-doc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# methodを表示&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-byebug&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# デバッグを実施(Ruby 2.0以降で動作する)&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-stack_explorer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# スタックをたどれる&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# RSpecの基本的なGem&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rspec-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;shoulda-matchers&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;factory_girl_rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# E2Eテストを実施するために必要&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;rspecの設定ファイルを作成する&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install
rails g rspec:install&lt;/pre&gt;&lt;p&gt;設定ファイルに設定をする(&lt;code&gt;Add&lt;/code&gt;を記載している)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/rails_helper.rb&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# This file is copied to spec/ when you run &#39;rails generate rspec:install&#39;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] ||= &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.expand_path(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;../../config/environment&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;__FILE__&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rspec/rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Add additional requires below this line. Rails is not loaded until this point!&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# Add&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# Add&lt;/span&gt;


&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;config&lt;/span&gt;|
  &lt;span class=&quot;synComment&quot;&gt;# FactoryGirl でレシーバ無しでFactoryGirlのメソッド呼び出しを可能にする&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Ex: FactoryGirl.create(:post) =&amp;gt; create(:post)&lt;/span&gt;
  config.include &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Syntax&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Methods&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# Add&lt;/span&gt;
  ...
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-model&quot;&gt;2. Modelのテスト&lt;/h3&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;基本&lt;/h5&gt;
    
&lt;ul&gt;
&lt;li&gt;ビジネスロジックが集まる箇所なので、基本的にはテストを書く。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attr_accessor&lt;/code&gt;、&lt;code&gt;presence: true&lt;/code&gt;などバグが入る可能性が少ない箇所はテストは書かない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;ModelとFactoryの生成&lt;/h5&gt;
    &lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ rails g rspec:model post
      create  spec/models/post_spec.rb
      invoke  factory_girl
      create    spec/factories/posts.rb&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;モデルのテストの作成&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# テスト対象のモデルファイル&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/models/post.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;uniquness&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;length&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;maximum&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;500&lt;/span&gt; }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# テストファイル&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# spec/models/post_spec.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:model&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#title&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    it { is_expected.to validate_presence_of(&lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;) }
    it { is_expected.to validate_uniqueness_of(&lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;) }
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    it { is_expected.to validate_presence_of(&lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;) }
    it { is_expected.to ensure_length_of(&lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;) }
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;参照：&lt;a href=&quot;http://thoughtbot.github.io/shoulda-matchers/v2.7.0/&quot; target=&quot;_blank&quot;&gt;Shoulda Matcherの公式ドキュメント v2.7.0&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-controller&quot;&gt;3. Controllerのテスト&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;基本&lt;/h5&gt;
    
&lt;ul&gt;
&lt;li&gt;E2E(Features)と重複するので、画面入力で制御されていてその異常パラメーターがこないなどの異常系をテストする&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;コントローラーのテストで検証すること&lt;/h5&gt;
    &lt;p&gt; - レスポンスのステータス&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(response).to be_success
expect(response[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Contetn-Type&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;]).to =~ &lt;span class=&quot;synSpecial&quot;&gt;%r^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;text/html!&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ビューに渡されるインスタンス変数&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(assins(&lt;span class=&quot;synConstant&quot;&gt;:entries&lt;/span&gt;)).to == &lt;span class=&quot;synType&quot;&gt;Entry&lt;/span&gt;.all
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;描画したテンプレート&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(response).to render_template(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
expect(response).to redirect_to(entries_url)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;ModelとFactoryの生成&lt;/h5&gt;
    &lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g rspec:controller post
      create  spec/controllers/post_controller_spec.rb&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;コントローラーのテスト作成&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# テスト対象のコントローラーファイル&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/controllers/posts_controller.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# POST /posts&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# POST /posts.json&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.new(post_params)

  respond_to &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;|
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;.save
      format.html { redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Post was successfully created.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
      format.json { render &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:created&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;location&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      format.html { render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt; }
      format.json { render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;.errors, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:unprocessable_entity&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# テストファイル&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# spec/controllers/posts_controller_spec.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synType&quot;&gt;PostsController&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:controller&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;valid_attributes&lt;/span&gt;
    { &lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;invalid_attributes&lt;/span&gt;
    { &lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; }
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;POST create&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;with valid params&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;creates a new Post&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        expect {
          post &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;, {&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt; =&amp;gt; valid_attributes}
        }.to change(&lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:count&lt;/span&gt;).by(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;assigns a newly created post as @post&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        post &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;, {&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt; =&amp;gt; valid_attributes}
        expect(assigns(&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;)).to be_a(&lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;)
        expect(assigns(&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;)).to be_persisted
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;redirects to the created post&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        post &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;, {&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt; =&amp;gt; valid_attributes}
        expect(response).to redirect_to(&lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.last)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;with invalid params&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;assigns a newly created but unsaved post as @post&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        post &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;, {&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt; =&amp;gt; invalid_attributes}
        expect(assigns(&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;)).to be_a_new(&lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;re-renders the &#39;new&#39; template&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        post &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;, {&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt; =&amp;gt; invalid_attributes}
        expect(response).to render_template(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;参照：&lt;a href=&quot;http://thoughtbot.github.io/shoulda-matchers/v2.7.0/&quot; target=&quot;_blank&quot;&gt;Shoulda Matcherの公式ドキュメント v2.7.0&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-helper&quot;&gt;4. Heloperのテスト&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;基本&lt;/h5&gt;
    
&lt;ul&gt;
&lt;li&gt;ヘルパーはロジックをがっつり記載する箇所なので基本的にテストをする&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;helper_specの生成&lt;/h5&gt;
    &lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g rspec:helper application
      create  spec/helpers/application_helper_spec.rb&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;ヘルパーのテストの作成&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# テスト対象のヘルパーファイル&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;active_if_current&lt;/span&gt;(path)
    &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; current_page?(path)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# テストファイル&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# spec/helpers/application_helper_spec.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:helper&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;active_if_current&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    subject { helper.active_if_current(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/any_path&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) }

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;現在のページが引数のパスと等しい場合&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      it &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        allow(helper).to receive(&lt;span class=&quot;synConstant&quot;&gt;:current_page?&lt;/span&gt;).and_return(&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
        expect(subject).to eq &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;現在のページが引数のパスと等しくない場合&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      it &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        allow(helper).to receive(&lt;span class=&quot;synConstant&quot;&gt;:current_page?&lt;/span&gt;).and_return(&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
        expect(subject).to be_nil
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-api&quot;&gt;5. APIのテスト&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;基本&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;APIのテストには、requestsを使います。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;詳細は次の記事を参照してください。&lt;br /&gt;
&lt;iframe src=&quot;http://ruby-rails.hatenadiary.com/embed/20150108/1420675366&quot; title=&quot;RailsでAPI作成とAPIのテストのまとめ - Rails Webook&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150108/1420675366&quot;&gt;RailsでAPI作成とAPIのテストのまとめ - Rails Webook&lt;/a&gt;&lt;/iframe&gt;&lt;br /&gt;
&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150108/1420675366&quot;&gt;Rails&amp;#x3067;API&amp;#x4F5C;&amp;#x6210;&amp;#x3068;API&amp;#x306E;&amp;#x30C6;&amp;#x30B9;&amp;#x30C8;&amp;#x306E;&amp;#x307E;&amp;#x3068;&amp;#x3081; - Rails Webook&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-e2e-features&quot;&gt;6. E2E(Features)のテスト&lt;/h3&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;基本&lt;/h5&gt;
    
&lt;ul&gt;
&lt;li&gt;E2E(Features)でルート、コントローラー、ビュー、モデルのつながりの１機能のテストをする&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;Feature Specの生成&lt;/h5&gt;
    &lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g rspec:feature post
      create  spec/features/posts_spec.rb&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;Feature Specのテストの作成&lt;/h5&gt;
    &lt;p&gt;テスト対象のファイル(ルート、コントローラー、ビュー、モデルファイル)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config/routes.rb&lt;/li&gt;
&lt;li&gt;app/models/post.rb&lt;/li&gt;
&lt;li&gt;app/controllers/posts_controller.rb (new, createメソッド)&lt;/li&gt;
&lt;li&gt;app/views/posts/new.html.erb&lt;/li&gt;
&lt;li&gt;app/views/posts/show.html.erb&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
テストファイルのサンプルです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/features/post_spec.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:feature&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;新規登録&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      visit posts_path      &lt;span class=&quot;synComment&quot;&gt;# 一覧画面に遷移&lt;/span&gt;
      click_link &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;New Post&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# &amp;quot;New Post&amp;quot;リンクを押す&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;投稿新規作成画面が表示されること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      expect(page.current_path).to eq new_post_path
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;投稿を新規作成できること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# テキストフィールドに値を入力する&lt;/span&gt;
      fill_in &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;タイトル&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      fill_in &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;本文&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      click_button &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create Post&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# 画面に&amp;quot;Post was ...&amp;quot;と表示されていることを確認&lt;/span&gt;
      expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Post was successfully created.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;タイトル&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;本文&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# データベースに登録された内容を確認(必要に応じて確認)&lt;/span&gt;
      post = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.last
      expect(post.title).to eq &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;タイトル&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      expect(post.content).to eq &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;本文&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;CapybaraのDSL：&lt;a href=&quot;https://github.com/jnicklas/capybara#the-dsl&quot; blank=&quot;_blank&quot;&gt;CapybaraのDSL&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-prepare-capybara-webkit&quot;&gt;7. E2Eテスト(JavaScript)のための準備（Capybara-Webkitなど）&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/thoughtbot/capybara-webkit/wiki/Installing-Qt-and-compiling-capybara-webkit&quot;&gt;QTツールのインストール方法&lt;/a&gt;を見て、QTツールをインストールする。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;にJSをテストするためのドライバーの&lt;b&gt;Capybara-Webkit&lt;/b&gt;を追加する。&lt;br /&gt;
ドライバは別プロセスで実行されるので、テスト毎にデータベースを元の状態に戻せないので、元に戻せるようにするために&lt;b&gt;Database Cleaner&lt;/b&gt;も追加する。&lt;br /&gt;
&lt;i&gt;Linuxの場合は、&lt;code&gt;headless&lt;/code&gt;というgemと、&lt;code&gt;xvfb-run&lt;/code&gt;というユーティリティのインストールが必要かもしれない。&lt;br /&gt;
参照: &lt;a href=&quot;https://github.com/thoughtbot/capybara-webkit#ci&quot; target=&quot;_blank&quot;&gt;capybara-webkit on CI&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
group &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# E2Eテスト(JavaScript)を実施するために必要&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara-webkit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;database_cleaner&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、DatabaseCleanerを利用するように設定を行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/rails_helper.rb&lt;/span&gt;

...

&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 追加箇所 JavascriptのDriverをwebkitにする&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Capybara&lt;/span&gt;.javascript_driver = &lt;span class=&quot;synConstant&quot;&gt;:webkit&lt;/span&gt;

...

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;config&lt;/span&gt;|

  &lt;span class=&quot;synComment&quot;&gt;# If you&#39;re not using ActiveRecord, or you&#39;d prefer not to run each of your&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# examples within a transaction, remove the following line or assign false&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# instead of true.&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# config.use_transactional_fixtures = true&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 追加箇所 trueからfalseにする&lt;/span&gt;
  config.use_transactional_fixtures = &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 追加箇所 開始&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# suite: RSpecコマンドでテストを実行する単位&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# all:  各テストファイル(xxx_spec.rb)単位&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# each: 各テストケース(it)単位&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:suite&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean_with &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# テスト開始時にDBをクリーンにする&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# js以外のテスト時は通常のtransactionでデータを削除する&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.strategy = &lt;span class=&quot;synConstant&quot;&gt;:transaction&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# jsのテスト時はtruncationで削除する&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;js&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.strategy = &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.start
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.after(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.after(&lt;span class=&quot;synConstant&quot;&gt;:all&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean_with &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# all時にDBをクリーンにする&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 追加箇所 終了&lt;/span&gt;

  ...
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで、Specファイル内に次ように&lt;code&gt;js: true&lt;/code&gt;と追記すればJavaScriptのテストが可能になります。&lt;br /&gt;
&lt;code&gt;js: true&lt;/code&gt;を渡したブロック内がJavaScript用のドライバを利用してテストされます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;JavaScriptのテスト&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;js&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# JavaScriptがつかわれている箇所のテスト&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

...

it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;JavaScriptのテスト&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;js&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# JavaScriptがつかわれている箇所のテスト&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-prepare-javascript-poltergist&quot;&gt;8. E2Eテスト(JavaScript)のための準備（PhantomJS, Poltergistなど）&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;E2E(JavaScript)でE2Eと一緒に、AjaxなどのJavaScriptのテストを行う&lt;/li&gt;
&lt;li&gt;ドライバーはseleniumなどあるが実行時間がかかり、画面が必要なのでCIなどで実行しにくいので、capybara-webkitかpoltergeistが採用されている&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://phantomjs.org/&quot; target=&quot;_blank&quot;&gt;PhantomJS&lt;/a&gt;をインストールする。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;にJSをテストするためのドライバーの&lt;b&gt;Poltergeist&lt;/b&gt;を追加する。&lt;br /&gt;
ドライバは別プロセスで実行されるので、テスト毎にデータベースを元の状態に戻せないので、元に戻せるようにするために&lt;b&gt;Database Cleaner&lt;/b&gt;も追加する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
group &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# E2Eテスト(JavaScript)を実施するために必要&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;poltergeist&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;database_cleaner&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、DatabaseCleanerを利用するように設定を行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/rails_helper.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# This file is copied to spec/ when you run &#39;rails generate rspec:install&#39;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] ||= &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.expand_path(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;../../config/environment&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;__FILE__&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rspec/rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Add additional requires below this line. Rails is not loaded until this point!&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/poltergeist&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# Add&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;Capybara&lt;/span&gt;.javascript_driver = &lt;span class=&quot;synConstant&quot;&gt;:poltergeist&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# Add&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Requires supporting ruby files with custom matchers and macros, etc, in&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# spec/support/ and its subdirectories. Files matching `spec/**/*_spec.rb` are&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# run as spec files by default. This means that files in spec/support that end&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# in _spec.rb will both be required and run as specs, causing the specs to be&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# run twice. It is recommended that you do not name files matching this glob to&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# end with _spec.rb. You can configure this pattern with the --pattern&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# option on the command line or in ~/.rspec, .rspec or `.rspec-local`.&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# The following line is provided for convenience purposes. It has the downside&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# of increasing the boot-up time by auto-requiring all files in the support&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# directory. Alternatively, in the individual `*_spec.rb` files, manually&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# require only the support files necessary.&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Dir[Rails.root.join(&amp;quot;spec/support/**/*.rb&amp;quot;)].each { |f| require f }&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Checks for pending migrations before tests are run.&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# If you are not using ActiveRecord, you can remove this line.&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;.maintain_test_schema!

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;config&lt;/span&gt;|
  &lt;span class=&quot;synComment&quot;&gt;# FactoryGirl でレシーバ無しでFactoryGirlのメソッド呼び出しを可能にする&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Ex: FactoryGirl.create(:post) =&amp;gt; create(:post)&lt;/span&gt;
  config.include &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Syntax&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Methods&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# Remove this line if you&#39;re not using ActiveRecord or ActiveRecord fixtures&lt;/span&gt;
  config.fixture_path = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.root&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/spec/fixtures&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# If you&#39;re not using ActiveRecord, or you&#39;d prefer not to run each of your&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# examples within a transaction, remove the following line or assign false&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# instead of true.&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# config.use_transactional_fixtures = true&lt;/span&gt;
  config.use_transactional_fixtures = &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# Change&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# Add Begin&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# suite: RSpecコマンドでテストを実行する単位&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# all:  各テストファイル(xxx_spec.rb)単位&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# each: 各テストケース(it)単位&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:suite&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean_with &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# テスト開始時にDBをクリーンにする&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# js以外のテスト時は通常のtransactionでデータを削除する&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.strategy = &lt;span class=&quot;synConstant&quot;&gt;:transaction&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# jsのテスト時はtruncationで削除する&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;js&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.strategy = &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.start
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.after(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.after(&lt;span class=&quot;synConstant&quot;&gt;:all&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean_with &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# all時にDBをクリーンにする&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Add End&lt;/span&gt;

  ...
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rspec/rspec-rails&quot; target=&quot;_blank&quot;&gt;RSpec-RailsのGitHubページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://thoughtbot.github.io/shoulda-matchers/v2.7.0/&quot; target=&quot;_blank&quot;&gt;Shoulda Matcherの公式ドキュメント v2.7.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jnicklas/capybara#the-dsl&quot; target=&quot;_blank&quot;&gt;CapybaraのDSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/teampoltergeist/poltergeist&quot; target=&quot;_blank&quot;&gt;PoltergeistのGitHubページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/capybara-webkit&quot; target=&quot;_blank&quot;&gt;Capybara-WebkitのGitHubページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/teampoltergeist/poltergeist&quot; blank=&quot;_blank&quot;&gt;PoltergeistのGitHubページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 01 Jan 2015 15:24:47 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450078648794</guid>
          
            <category>Rails中級</category>
          
            <category>まとめ</category>
          
            <category>Rails Test</category>
          
        </item>
      
        <item>
          <title>Ruby 2.1 / Rails4.1 の意外に忘れられている便利なメソッド</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150101/1420049679</link>
          <description>&lt;p&gt;Ruby 2.1 / Rails4.1 での意外に忘れらている便利なメソッドを集めました。&lt;/p&gt;&lt;p&gt;RubyやRailsでは有用なメソッドがたくさん実装されており、車輪の再発明にならないように、それらを覚えて適切な箇所で使うだけで生産性はあがります。&lt;/p&gt;&lt;p&gt;&lt;i&gt;（大雑把に書いたので、まだまとまってないので、随時修正します）&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.1.2&lt;/li&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveSupport 4.1.7&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-ruby-basic&quot;&gt;Rubyの基本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;代入、範囲、正規表現、%記法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-meta-programming&quot;&gt;メタプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;文字列からクラスを作成 constantize&lt;br /&gt;
動的にメソッドを定義 class_eval&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-object&quot;&gt;Object&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;nilや空を判定する(present?, blank?)、nilや空以外の値を取得(present)、nilを扱う(try)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-string&quot;&gt;String&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;複数行の文字列(ヒアドキュメント)、文字列を含む(include?, index)、パターンにマッチする(match, =~)&lt;br /&gt;
パターンで置換する(gsub)、文字列で分割し配列にする(split)&lt;br /&gt;
1行ずつ取り出す(each_line)、1文字ずつ取り出す(each_char)、部分文字列を取り出す(slice)&lt;br /&gt;
文字列を削除(delete)、空白を除く(strip)、改行文字除く(chomp)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-array&quot;&gt;Array&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;長さ(length, size), 空かどうか(empty?), 値が含まれるか(include?)&lt;br /&gt;
繰り返し(each, each_with_index, reverse_each)&lt;br /&gt;
連結(+)、追加(&lt;&lt;)&lt;br /&gt;
１要素の検索(find), 複数要素の検索(select, reject), 最大値、最小値(max, min)、各要素を処理(collect, map)&lt;br /&gt;
すべて◯◯か(all?), どれか◯◯か(any?)&lt;br /&gt;
各要素を結合(join)、合計を計算(sum)&lt;br /&gt;
ソート(sort)、重複除去(uniq)、ランダムに要素を取得(sample)&lt;br /&gt;
&lt;a href=&quot;http://ref.xaio.jp/ruby/classes/array&quot;&gt;その他のArrayクラスのメソッド&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-hash&quot;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;要素の取り出しと設定(&lt;span data-unlink&gt;, &lt;/span&gt;=)、キーを配列で取得(keys)、値を配列で取得(values)、値の数(length)&lt;br /&gt;
空かどうか(empty?)、キーが含まれるか(has_key?)、値が含まれるか(has_value?)&lt;br /&gt;
繰り返し(each)、値の取得(select, collect, map)&lt;br /&gt;
ハッシュを統合(merge)、差を取得する(diff)&lt;br /&gt;
&lt;a href=&quot;http://ref.xaio.jp/ruby/classes/hash&quot;&gt;その他のHashクラスのメソッド&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-activerecord&quot;&gt;ActiveRecord&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;指定した要素を配列で取得(pluck)&lt;br /&gt;
変更を確認する(changes, changed?)&lt;br /&gt;
カラム値の存在有無を確認(カラム名+?)&lt;br /&gt;
DBに保存されていないか(new_record?)、DBに保存されているか(persisted?)&lt;br /&gt;
DBに存在しない場合作成(find_or_create_by)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-controller&quot;&gt;コントローラー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;コントローラーのメソッドをビューで使う（helper_method）&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-ruby-basic&quot;&gt;Rubyの基本&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;代入&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 多重代入&lt;/span&gt;
a, b = &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;
a &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
b &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;

a, b = [&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]
a &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
b &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;

a, *b = [&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]
a &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
b &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [2, 3]&lt;/span&gt;

a, b, c = [&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;]
a &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
b &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
c &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; nil&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 入れ替え&lt;/span&gt;
a, b = b, a

&lt;span class=&quot;synComment&quot;&gt;# 自己代入&lt;/span&gt;
a += &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# a = a + 1&lt;/span&gt;
b ||= &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# b = b || 2&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;範囲&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&gt;ruby|&lt;br /&gt;
(1..5).include?(5)  # =&gt; true  (5も含む)&lt;br /&gt;
(1...5).include?(5) # =&gt; false (5は含まない)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;%記法&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Alice Bob Chrlie&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Alice&amp;quot;, &amp;quot;Bob&amp;quot;, &amp;quot;Chrlie&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-ruby-basic&quot;&gt;Rubyの基本&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;文字列からクラスを作成(constantize)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.constantize &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Userクラスが作成される&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.constantize.new
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; #&amp;lt;User id: nil, name: nil, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 応用: URLから動的にモデルのレコードを読み出す&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# URL例(request.path): /events/:id/comments, /articles/:id/comments&lt;/span&gt;
resource, id = request.path.split(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;# resource = events か articles&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@commentable&lt;/span&gt; = resource.singularize.classify.constantize.find(id)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-meta-programming&quot;&gt;メタプログラミング&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メソッドを動的に定義する(class_eval, module_eval)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Cクラスを定義&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;C&lt;/span&gt;; &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# class_evalメソッドで、Cクラスにmメソッドを定義&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;C&lt;/span&gt;.class_eval &lt;span class=&quot;synSpecial&quot;&gt;%Q{&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  def m&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;    puts &amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  end&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# mメソッドを実行&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;C&lt;/span&gt;.new.m
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; hello&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-object&quot;&gt;Object&lt;/h3&gt;nilや空文字など空でないか確認(present?)&lt;br /&gt;
&#39;&#39;, &#39; &#39;, nil, [], {}など空っぽいもの以外の場合、trueを返す&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, [], {}].each { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;| p a.present? }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# ... （全て false)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;nilや空文字など空であるか確認(blank?)&lt;br /&gt;
&#39;&#39;, &#39; &#39;, &quot;&quot;, &quot; &quot;, nil, [], {}などの空ぽいものの場合、trueを返す&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, [], {}].each { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;| p a.blank? }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# ... （全て true)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;nilや空文字など空でない値を取得(present)&lt;br /&gt;
&#39;&#39;, &#39; &#39;, nil, [], {}など空っぽいもの以外の場合、値を返す。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;.presence &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;a&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&#39;&#39;&lt;/span&gt;.presence  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; nil&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;tryメソッド(nilの場合、nilを返す)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;@person&lt;/span&gt; ? &lt;span class=&quot;synIdentifier&quot;&gt;@pserson&lt;/span&gt;.name : &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# をtryで次のように書き換えれる&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@poerson&lt;/span&gt;.try(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 引数やブロックも渡せる&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.try(&lt;span class=&quot;synConstant&quot;&gt;:includes?&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-string&quot;&gt;String&lt;/h3&gt;複数行に渡る文字列(ヒアドキュメント)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;str = &amp;lt;&amp;lt;&lt;span class=&quot;synSpecial&quot;&gt;TEXT&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;1行目&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;2行目&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;3行目&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;TEXT&lt;/span&gt;

str &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;1行目\n2行目\n3行目\n&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
指定した文字列を含んでいるか(include?)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.include?(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.include?(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;zy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
指定した文字列を含んでいれば、その開始位置を整数で返す(index)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcdefg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.index(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcdefg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.index(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;zy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
パターンにマッチする(=~, match)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;html = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
html.match(&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(\w)&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;m&lt;/span&gt;|
  p match[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]
  p match[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;&amp;lt;p&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;p&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
パターンで置換(gsub)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;html = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hello,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\r\n&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 改行コードを&amp;lt;br /&amp;gt;に置き換える&lt;/span&gt;
html.gsub(&lt;span class=&quot;synSpecial&quot;&gt;/(\r\n|\r|\n)/&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;br /&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;hello,&amp;lt;br /&amp;gt;world&amp;lt;br /&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
指定した文字列で分割し、配列にする(split)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Alice,Bob,Charlie&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.split(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Alice&amp;quot;, &amp;quot;Bob&amp;quot;, &amp;quot;Charlie&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
1行ずつ取り出す(each_line)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&amp;quot;&lt;/span&gt;.each_line { |&lt;span class=&quot;synIdentifier&quot;&gt;line&lt;/span&gt;| p line }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;1行目\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;2行目\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;3行目\n&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
1文字ずつ取り出す(each_char)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.each_char { |&lt;span class=&quot;synIdentifier&quot;&gt;ch&lt;/span&gt;| p ch }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;a&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;b&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
部分文字列を取り出す(slice)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcdefg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.slice(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# 2番目から3文字分&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;bcd&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcdefg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.slice(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# 1文字目から3文字目まで&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;bcd&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcdefg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.slice(&lt;span class=&quot;synSpecial&quot;&gt;/\w+/&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# 正規表現&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;abcdefg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
指定した文字列を削除(delete)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.delete(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;abe&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.delete(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;xy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;abcde&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
先頭と末尾の空白を取り除く(strip)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; hi &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; “.strip # =&amp;gt; “hi”&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
文字列の末尾の改行文字を除く(chomp)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\r\n&amp;quot;&lt;/span&gt;.chomp  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; “hi”&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&amp;quot;&lt;/span&gt;.chomp    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;hi&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\r&amp;quot;&lt;/span&gt;.chomp    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;hi&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&amp;quot;&lt;/span&gt;.chomp &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;1行目\n2行目\n3行目&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-array&quot;&gt;Array&lt;/h3&gt;長さ(length, size)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[].length &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 0&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].length &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 3&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].size   &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 3&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
空かどうか(empty?)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[].empty?  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Railsの場合、ActiveSupportで拡張されたblank?の方が都合が良い場合が多い&lt;/span&gt;
[].blank?  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
値が含まれるか(include?)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].include?(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].include?(&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
繰り返し(each, each_with_index, reverse_each)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].each { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;| p a }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].each_with_index { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;i&lt;/span&gt;| p &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;i&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;番目:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;a&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;0番目:1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;1番目:2&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;2番目:3&amp;quot;&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].reverse_each { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;| p a }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
配列の連結(+)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;] + [&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [1, 2, 3, 4, 5, 6]&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;] + []        &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [1, 2, 3]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
要素の追加(&lt;&lt;)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;      &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [1, 2, 3, 4]&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;] &amp;lt;&amp;lt; [&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [1, 2, 3, [4, 5]]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
１要素の検索(find)、複数要素の検索(select, reject),&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;].find { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n % &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;].find { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n % &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; nil (条件に当てはまらないとnilを返す)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# selectはブロック内の条件に当てはまる要素を返す&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;].select { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n % &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; }
=&amp;gt; [&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;]
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;].select { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n % &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt; }
=&amp;gt; [] (条件に当てはまらないと[]を返す)

&lt;span class=&quot;synComment&quot;&gt;# rejectはブロック内の条件に当てはまらない要素を返す&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;].reject { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n % &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; }
=&amp;gt; [&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;]
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
最大値、最小値(max, min)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;].min  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 1&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;].max &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 10&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
各要素を処理する(collect, map)&lt;br /&gt;
collectもmapも別名で同じ処理をする。ブロックに与えた処理を行ったあとに、それらを配列で返す&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;].map { |&lt;span class=&quot;synIdentifier&quot;&gt;str&lt;/span&gt;| str.capitalize } &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Ruby&amp;quot;, &amp;quot;Rails&amp;quot;]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 別の書き方もできる&lt;/span&gt;
[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;].map(&amp;amp;&lt;span class=&quot;synConstant&quot;&gt;:capitalize&lt;/span&gt;)            &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Ruby&amp;quot;, &amp;quot;Rails&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
すべて◯◯か(all?), どれか◯◯か(any?)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;].all?      &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].all?     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].any?     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].any?   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].one?    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].one?     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].none?  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ブロックを渡して条件判定ができる&lt;/span&gt;
[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abc tomato&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;xyz tomato&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;123 tomato&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].all? { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;| a.include?(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tomato&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
各要素を指定した文字列で結合して文字列で返す(join)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ABC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;DEF&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;GHI&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
=&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ABC,DEF,GHI&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
[].join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
=&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
合計を計算(sum)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].sum             &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 6&lt;/span&gt;
[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ghi&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].sum &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;abcdefghi&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ソート(sort)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;].sort &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [1, 2, 3, 8, 9]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
重複する要素を除去する(uniq)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;].uniq &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [3, 1, 2, 4]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ランダムに要素を取得する(sample)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;].sample &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 5&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;].sample &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-hash&quot;&gt;Hash&lt;/h3&gt;要素の取り出しと設定(&lt;span data-unlink&gt;, &lt;/span&gt;=)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;hash = { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;taro&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;chika&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; } }

&lt;span class=&quot;synComment&quot;&gt;# 要素の取り出し&lt;/span&gt;
hash[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;taro&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;20 }&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 要素の設定&lt;/span&gt;
hash[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] = { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tom&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;25&lt;/span&gt; }
hash
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;1&amp;quot;=&amp;gt;{&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;taro&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;20}, &amp;quot;2&amp;quot;=&amp;gt;{&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;chika&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;18}, &amp;quot;3&amp;quot;=&amp;gt;{&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;tom&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;25}}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;キーを配列で取得(keys)、値を配列で取得(values)、値の数(length)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;hash = { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;taro&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;chika&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; } }

hash.keys   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;]&lt;/span&gt;
hash.values &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [{&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;taro&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;20}, {&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;chika&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;18}]&lt;/span&gt;
hash.length &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;空かどうか(empty?)、キーが含まれるか(has_key?)、値が含まれるか(has_value?)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;hash = { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:tom&lt;/span&gt; }
hash.empty?           &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
hash.has_key?(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;)  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
hash.has_value?(&lt;span class=&quot;synConstant&quot;&gt;:tom&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;

hash = {}
hash.empty?           &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
hash.has_key?(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;)  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
hash.has_value?(&lt;span class=&quot;synConstant&quot;&gt;:tom&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
繰り返し(each)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;hash = { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;taro&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;chika&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; } }

hash.each { |&lt;span class=&quot;synIdentifier&quot;&gt;k&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;v&lt;/span&gt;| p &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;k&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;v&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;1:{\&amp;quot;username\&amp;quot;=&amp;gt;\&amp;quot;taro\&amp;quot;, \&amp;quot;age\&amp;quot;=&amp;gt;20}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;2:{\&amp;quot;username\&amp;quot;=&amp;gt;\&amp;quot;chika\&amp;quot;, \&amp;quot;age\&amp;quot;=&amp;gt;18}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;値の取得(select, collect, map)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;select ... ブロックの条件に合致するハッシュを返す&lt;/li&gt;
&lt;li&gt;collect(map) ... 各要素に対して、処理を行った結果を配列で返す&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;hash = { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;taro&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;chika&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; } }

&lt;span class=&quot;synComment&quot;&gt;# ageが20以上のハッシュを取得する&lt;/span&gt;
hash.select { |&lt;span class=&quot;synIdentifier&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;v&lt;/span&gt;| v[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].to_i &amp;gt;= &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;1&amp;quot;=&amp;gt;{&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;taro&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;20}}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ageを配列で取得する&lt;/span&gt;
hash.collect { |&lt;span class=&quot;synIdentifier&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;v&lt;/span&gt;| v[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].to_i }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [20, 18]&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# mapとcollectのエイリアスであるため挙動は同じ&lt;/span&gt;
hash.map { |&lt;span class=&quot;synIdentifier&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;v&lt;/span&gt;| v[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].to_i }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [20, 18]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ハッシュを統合(merge)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;h1 = { &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt; }
h2 = { &lt;span class=&quot;synConstant&quot;&gt;published&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; }
h1.merge(h2) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {:price=&amp;gt;100, :published=&amp;gt;false}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 同じ値の場合は、後のハッシュが優先になる&lt;/span&gt;
h1 = { &lt;span class=&quot;synConstant&quot;&gt;published&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;  }
h2 = { &lt;span class=&quot;synConstant&quot;&gt;published&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; }
h1.merge(h2) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {:published=&amp;gt;false}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-activerecord&quot;&gt;ActiveRecord&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;指定した要素を配列で取得(pluck)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.all.pluck(&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#(0.2ms)  SELECT &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot;, &amp;quot;users&amp;quot;.&amp;quot;name&amp;quot; FROM &amp;quot;users&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [[1, nil], [2, &amp;quot;田中&amp;quot;]]&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;変更を確認する(changes, changed?)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;u = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.first

&lt;span class=&quot;synComment&quot;&gt;# 変更された要素を取得する&lt;/span&gt;
u.changes       &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {}&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# すべての要素が変更されたかbooleanで取得&lt;/span&gt;
u.changed?      &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# nameカラムが変更されたかbooleanで取得&lt;/span&gt;
u.name_changed? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;

u.name = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

u.changes       &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; {&amp;quot;name&amp;quot;=&amp;gt;[nil, &amp;quot;test&amp;quot;]}&lt;/span&gt;
u.changed?      &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
u.name_changed? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;カラムの存在有無を確認する(カラム名+?)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;boolean値のカラム&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;u = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.first

&lt;span class=&quot;synComment&quot;&gt;# nil, &amp;quot;&amp;quot;, {}, [], falseなどの場合、falseを返す&lt;/span&gt;
u.name  = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
u.name  = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
u.name = {}
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
u.name = []
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
u.name = &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

u.name = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;DBに保存されていないか(new_record?)、DBに保存されているか(persisted?)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# DBに保存されていない値&lt;/span&gt;
u = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.new
u.new_record? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
u.persisted?  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DBに保存されている値&lt;/span&gt;
u = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.first
u.new_record? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;
u.persisted?  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;DBに存在しない場合作成(find_or_create_by)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# DBに存在する場合、レコードを取得&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find_or_create_by(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;User id: 1, name: &amp;quot;test&amp;quot;, created_at: &amp;quot;2014-11-29 09:02:15&amp;quot;, updated_at: &amp;quot;2014-11-30 10:49:04&amp;quot;, active: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DBに存在しない場合、レコードを作成&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find_or_create_by(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;u&lt;/span&gt;|
  &lt;span class=&quot;synComment&quot;&gt;# 引数で指定した値は自動的に設定される&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ブロック内でその他の値を設定する&lt;/span&gt;
  u.active = &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;User id: 4, name: &amp;quot;test3&amp;quot;, created_at: &amp;quot;2014-11-30 10:51:45&amp;quot;, updated_at: &amp;quot;2014-11-30 10:51:45&amp;quot;, active: false&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-controller&quot;&gt;コントローラー&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コントローラーのメソッドをビューで使う（helper_method）&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Controller&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# ビューでcurrent_userメソッドが利用できる&lt;/span&gt;
  helper_method &lt;span class=&quot;synConstant&quot;&gt;:current_user&lt;/span&gt;

  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;current_user&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@_current_user&lt;/span&gt; ||= &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find(session[&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;])
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
end

&lt;span class=&quot;synComment&quot;&gt;# View&lt;/span&gt;
ユーザー名: &amp;lt;%= current_user.name %&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot;&gt;Ruby on Rails API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ref.xaio.jp/ruby&quot;&gt;Ruby&amp;#x30EA;&amp;#x30D5;&amp;#x30A1;&amp;#x30EC;&amp;#x30F3;&amp;#x30B9;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 01 Jan 2015 03:14:39 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075660675</guid>
          
            <category>Ruby</category>
          
            <category>Rails中級</category>
          
            <category>まとめ</category>
          
            <category>リファレンス</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsでページネーションを実装するGemのまとめ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141118/1416314608</link>
          <description>&lt;p&gt;Railsでページネーションを実装するGemとして&lt;a href=&quot;https://www.ruby-toolbox.com/categories/pagination&quot; target=&quot;blank&quot;&gt;The Ruby Toolbox - Pagination&lt;/a&gt;で確認すると、有名どころとしては、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kaminari&lt;/li&gt;
&lt;li&gt;Will Paginate&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;です。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;比較&lt;/h3&gt;
    &lt;p&gt;それぞれRails上で使ってみて、比較してみました。&lt;br /&gt;
個人的には、&lt;code&gt;Kaminari&lt;/code&gt;をお勧めします。&lt;br /&gt;
理由としては次の比較表をみれば、一目瞭然ですが、ドキュメントやカスタマイズ性が高いところがあげられます。&lt;/p&gt;&lt;p&gt;&lt;table class=&quot;table table-striped&quot;&gt;
  &lt;tr&gt;
    &lt;th style=&quot;width:80px;&quot;&gt;&lt;/th&gt;&lt;th&gt;kaminari&lt;/th&gt;&lt;th&gt;will_pagineta&lt;/th&gt;&lt;th&gt;所感&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;機能面&lt;/td&gt;
    &lt;td&gt;◎&lt;/td&gt;
    &lt;td&gt;◎&lt;/td&gt;
    &lt;td&gt;どちらのGemも「ページのサマリー」、「ページネーションのリンク」をヘルパーで１行で追加できるので、機能的にはほぼ同じです。&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;国際化対応&lt;/td&gt;
    &lt;td&gt;◯&lt;/td&gt;
    &lt;td&gt;◯&lt;/td&gt;
    &lt;td&gt;i18nはどちらも可能&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ドキュメント&lt;/td&gt;
    &lt;td&gt;◯&lt;/td&gt;
    &lt;td&gt;△&lt;/td&gt;
    &lt;td&gt;GitHubのトップページをみれば一目瞭然！kaminariの方が圧倒的に充実している。&lt;a href=&quot;https://github.com/amatsuda/kaminari&quot; target=&quot;_blank&quot;&gt;kaminri&lt;/a&gt; / &lt;a href=&quot;https://github.com/mislav/will_paginate&quot;&gt;will_pagination&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;カスタマイズ性&lt;/td&gt;
    &lt;td&gt;◎&lt;/td&gt;
    &lt;td&gt;△&lt;/td&gt;
    &lt;td&gt;Bootstrapなどのテーマを適用できること、Viewファイルやページネーションの設定などのカスタマイズ性もあるのはKaminariです。will_paginateはページ辺りの表示件数を変えれるぐらい？&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;ページネーションの使い方&lt;/h3&gt;
    &lt;p&gt;ページネーションの実装方法を下記に記載しましたので、興味ある方は一読ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141113/1415874683&quot; target=&quot;_blank&quot;&gt;kaminariでページネーションを行う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141114/1415967206&quot; target=&quot;_blank&quot;&gt;will_paginateでページネーションを行う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141115/1416021886&quot; target=&quot;_blank&quot;&gt;kaminariとinfinite scrollを使って動的ページロードを行う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Tue, 18 Nov 2014 21:43:28 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450072957192</guid>
          
            <category>まとめ</category>
          
            <category>UI/UX</category>
          
        </item>
      
    
      
      
        <item>
          <title>Ruby/RailsでPDF作成Gemのまとめ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140906/1409995011</link>
          <description>&lt;p&gt;Rubyもしくは、RailsでPDFを作成するGemとして&lt;a href=&quot;https://www.ruby-toolbox.com/categories/pdf_generation&quot; target=&quot;blank&quot;&gt;The Ruby Toolbox - PDF Generation&lt;/a&gt;で確認すると、有名どころとしては、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prawn（プローン）&lt;/li&gt;
&lt;li&gt;PDFKit (+ wkhtmltopdf)&lt;/li&gt;
&lt;li&gt;Wicked PDF (+ wkhtmltopdf)&lt;/li&gt;
&lt;li&gt;ThinReports（Ruty Toolboxにないけど）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;まとめ&lt;/h3&gt;
    &lt;p&gt;それぞれRails上で使ってみて、比較してみました。&lt;table class=&quot;table table-striped&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Gem名&lt;/th&gt;&lt;th&gt;特徴&lt;/th&gt;&lt;th&gt;所感&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Prawn(プローン)&lt;/td&gt;
    &lt;td&gt;コードのみでPDFを作成する。&lt;/td&gt;
    &lt;td&gt;二重線などは少し作り込みが必要。コードでガリガリPDFを作成するので自由度は高いが時間がかかる。&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;PDFKit (+ wkhtmltopdf)&lt;/td&gt;
    &lt;td&gt;HTMLをPDFに変換する。HTMLからPDFへの変換はwkhtmltopdfが行い、&lt;code&gt;PDFKit&lt;/code&gt;はwkhtmltopdfのラッパー。&lt;/td&gt;
    &lt;td&gt;wkhtmltopdfがバグなどがあり角丸がつかないなど現状では完全にHTMLをPDFにできない。しかし、Railsで使う場合HTMLは既にあるはずなので簡単に使える。&lt;/td&gt;
  &lt;/tr&gt;
    &lt;td&gt;Wicked PDF (+ wkhtmltopdf)&lt;/td&gt;
    &lt;td&gt;PDFKitと同様。HTMLをPDFに変換する。HTMLからPDFへの変換はwkhtmltopdfが行い、&lt;code&gt;Wicked PDF&lt;/code&gt;はwkhtmltopdfのラッパー。&lt;/td&gt;
    &lt;td&gt;PDFKitと同様&lt;/td&gt;
  &lt;tr&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ThinReports&lt;/td&gt;
    &lt;td&gt;日本製で&lt;code&gt;ThinReportsEditor&lt;/code&gt;という専用ツールを使って画面操作でPDFを作成し、PDF上の動的データをプログラムしていく。内部的に&lt;code&gt;Prawn&lt;/code&gt;を使っている。&lt;/td&gt;
    &lt;td&gt;画面でPDFを作るので親しみやすい。しかし、操作感があまりよくなく時間がかかることと、ドキュメントやサンプル不足でPDF上の動的データをプログラムしていくことが難しい。&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;結論&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;PDFの品質をあまり気にしない場合は、&lt;code&gt;PDFKit&lt;/code&gt; か &lt;code&gt;Wicked PDF&lt;/code&gt; で手軽に作成&lt;/li&gt;
&lt;li&gt;PDFの品質を気にするならば、&lt;code&gt;Prawn&lt;/code&gt; か &lt;code&gt;ThinReports&lt;/code&gt; で時間がかかりながらも作成&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;使い方&lt;/h3&gt;
    &lt;p&gt;次のような注文表をPDFで作成してみました。興味がある方は確認してみてください。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140906/20140906214909.png&quot; alt=&quot;f:id:nipe880324:20140906214909p:plain:w480&quot; title=&quot;f:id:nipe880324:20140906214909p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140907/1410078997&quot; target=&quot;_blank&quot;&gt;Rails + Prawn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140908/1410176894&quot; target=&quot;_blank&quot;&gt;Rails + PDFKit + wkhtmltopdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140909/1410241835&quot; target=&quot;_blank&quot;&gt;Rails + ThinReports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上、分からない箇所や間違いがあればコメントを下さい。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Sat, 06 Sep 2014 18:16:51 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815732154794</guid>
          
            <category>まとめ</category>
          
            <category>Rails gem</category>
          
            <category>PDF Generation</category>
          
        </item>
      
    
      
      
        <item>
          <title>ソフトウェアエンジニアが読んだ方がよい本メモ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140830/1409361710</link>
          <description>&lt;p&gt;数が多くなってきたので、GMOペパボのブクログというサービスに集約しました。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://booklog.jp/users/nipe0324&quot;&gt;nipe0324&amp;#x306E;&amp;#x672C;&amp;#x68DA; (nipe0324) - &amp;#x30D6;&amp;#x30AF;&amp;#x30ED;&amp;#x30B0;&lt;/a&gt;&lt;/p&gt;
</description>
          <pubDate>Sat, 30 Aug 2014 10:21:50 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815731607378</guid>
          
            <category>まとめ</category>
          
            <category>書籍</category>
          
        </item>
      
    
  </channel>
</rss>
