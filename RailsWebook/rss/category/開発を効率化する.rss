<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>開発を効率化する - Rails Webook</title>
    <link>http://ruby-rails.hatenadiary.com/category/%E9%96%8B%E7%99%BA%E3%82%92%E5%8A%B9%E7%8E%87%E5%8C%96%E3%81%99%E3%82%8B</link>
    <description>自社のECを開発している会社で働いています。Rails情報やサービスを成長させる方法を書いていきます</description>
    <lastBuildDate>Fri, 18 Dec 2015 02:44:31 +0900</lastBuildDate>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <generator>Hatena::Blog</generator>
    
      
      
        <item>
          <title>RailsでRakeタスクの作成</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141117/1416225563</link>
          <description>&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でRakeタスクを作成する手順を説明します。&lt;br /&gt;
開発中に何度も実行するコマンドや操作をRakeタスクにしておくことで開発をスムーズに進められるようになります。&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;には、既に有用なRakeタスクがデフォルトで定義されていますので、&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141116/1416115266&quot; target=&quot;_blank&quot;&gt;Rakeコマンド一覧&lt;/a&gt;を参照して、既に存在していないか、一部として使えそうなタスクはないかと見ることも大切です。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;今回は、次のユーザーモデルのテストデータを作成するタスクを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;User nickname email password&lt;/pre&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;1. Rakeタスクをファイルを作成&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;rails g task [タスク名]&lt;/code&gt;でRakeタスクのファイルを作成します。&lt;br /&gt;
Rakeタスクは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B3%C8%C4%A5%BB%D2&quot;&gt;拡張子&lt;/a&gt;が&lt;code&gt;.rake&lt;/code&gt;である必要があります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g task sample
      create  lib/tasks/sample.rake&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;2. Rakeタスクの実装&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;lib/tasks&lt;/code&gt;配下にファイルが作成されるので、タスクで実行したい処理を実装します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# lib/tasks/sample.rake&lt;/span&gt;

namespace &lt;span class=&quot;synConstant&quot;&gt;:sample&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;           &lt;span class=&quot;synComment&quot;&gt;# ネームスペースを定義 &amp;quot;rake sample: ...&amp;quot;となる&lt;/span&gt;
  desc &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;サンプルデータを作成する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# rake -T のタスク一覧の結果で表示されるタスクの説明文&lt;/span&gt;
  task &lt;span class=&quot;synConstant&quot;&gt;populate&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# タスク名を定義 &amp;quot;rake db:populate&amp;quot;で呼べる&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 100ユーザ作成する&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;.times &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;|
      nickname = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
      email    = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;@example.co.jp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      password = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;nickname&lt;/span&gt;: nickname, &lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;: email, &lt;span class=&quot;synConstant&quot;&gt;password&lt;/span&gt;: password)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;では、Rakeタスクを実行します。(migrationが実行済みであること)&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake sample:populate&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;3. Rakeタスクに引数を渡す&lt;/h3&gt;
    &lt;p&gt;次のように環境引数で渡すのが一般的です。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake sample:populate LIMIT=10&lt;/pre&gt;&lt;p&gt;ここでは、&lt;code&gt;LIMIT&lt;/code&gt;を指定することで作成するUser数を設定できるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# lib/tasks/sample.rake&lt;/span&gt;

namespace &lt;span class=&quot;synConstant&quot;&gt;:sample&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  desc &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;サンプルデータを作成する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; 
  task &lt;span class=&quot;synConstant&quot;&gt;populate&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 環境変数の値を取得。指定がないときはデフォルト値100で設定&lt;/span&gt;
    limit = &lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;LIMIT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;] || &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# limitの数だけUserを作成する&lt;/span&gt;
    limit.times &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;|
      nickname = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
      email    = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;@example.co.jp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      password = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;nickname&lt;/span&gt;: nickname, &lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;: email, &lt;span class=&quot;synConstant&quot;&gt;password&lt;/span&gt;: password)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;え&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/command_line.html#custom-rake-tasks&quot;&gt;The Rails Command Line &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ownway.info/Ruby/rake/arguments&quot;&gt;rake &amp;#x3067;&amp;#x306E;&amp;#x30B3;&amp;#x30DE;&amp;#x30F3;&amp;#x30C9;&amp;#x30E9;&amp;#x30A4;&amp;#x30F3;&amp;#x5F15;&amp;#x6570;&amp;#x306E;&amp;#x6271;&amp;#x3044; - &amp;#x541B;&amp;#x306E;&amp;#x77B3;&amp;#x306F;&amp;#x307E;&amp;#x308B;&amp;#x3067;&amp;#x30EB;&amp;#x30D3;&amp;#x30FC; - Ruby &amp;#x95A2;&amp;#x9023;&amp;#x307E;&amp;#x3068;&amp;#x3081;&amp;#x30B5;&amp;#x30A4;&amp;#x30C8;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Mon, 17 Nov 2014 20:59:23 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450073934357</guid>
          
            <category>Rails入門</category>
          
            <category>Rails初級</category>
          
            <category>開発を効率化する</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rake コマンド一覧</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141116/1416115266</link>
          <description>&lt;p&gt;rakeコマンドをまとめました。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;すべてのRakeコマンドを表示する(※1)&lt;/h3&gt;
    &lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake -T&lt;/pre&gt;&lt;p&gt;&lt;i&gt;※1 Rakeタスクの定義で、&lt;code&gt;description&lt;/code&gt;を書いていないため、厳密には表示されないものもある&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;すべてのRakeコマンド一覧(※1)&lt;/h3&gt;
    &lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake about                              # Railsフレームワークのバージョンを表示する
rake assets:clean[keep]                 # 古いコンパイルされたアセットを削除する
rake assets:clobber                     # コンパイルされたアセットを削除する
rake assets:environment                 # Load asset compile environment
rake assets:precompile                  # config.assets.prefompile内のすべてのアセットをコンパイルする
rake cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)
rake cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)
rake db:create                          # DATABASE_URL か config/database.yml に基づいてRAILS_ENV 用の DBを作成する
rake db:drop                            # DATABASE_URL か config/database.yml に基づいてRAILS_ENV 用の DBを削除する
rake db:fixtures:load                   # 現在の環境のDBに fixtures をロードする
rake db:migrate                         # マイグレートする(オプション: VERSION=x, VERBOSE=false, SCOPE=blog)
rake db:migrate:status                  # マイグレーションの適用状況を確認する
rake db:migrate:reset                   # db:drop, db:create, db:migrate を実行する
rake db:rollback                        # マイグレートをロールバックする(オプション: STEP=n)
rake db:schema:cache:clear              # db/schema_cache.dump をクリアする
rake db:schema:cache:dump               # db/schema_cache.dump を作成する
rake db:schema:dump                     # db/schema.rb を作成する
rake db:schema:load                     # db/schema.rb の内容をDBにロードする
rake db:seed                            # db/seeds.rb からseedデータをロードする
rake db:setup                           # DBを作成、スキーマをロード、seedデータをロードする
rake db:structure:dump                  # db/structure.sql にDB構造をdumpする
rake db:version                         # 現在のスキーマバージョン番号を取得する
rake doc:app                            # doc/app配下にアプリのドキュメントを生成する
rake doc:rails                          # doc/api配下にRailsのドキュメントを生成する
rake doc:guides                         # doc/guids配下にRailsGuidsのドキュメントを生成する
rake log:clear                          # すべての log/配下の *.log をクリアする (LOGS=test,development でログを指定できる)
rake middleware                         # Rack Middlewareのスタックを表示する
rake notes                              # すべてのアノテーション(コード上のOPTIMIZE, FIXME, TODO)を列挙する (notes:optimize, :fixme, :todo で指定可能)
rake notes:custom                       # カスタムアノテーションを列挙する (ANNOTATION=CUSTOM で指定可能)
rake rails:template                     # Applies the template supplied by LOCATION=(/path/to/template) or URL
rake rails:update                       # Update configs and some other initially generated files (or use just update:configs or update:bin)
rake routes                             # すべての定義されたルートを表示する
rake secret                             # セキュアなシークレットキーを生成する (一般的にクッキーセッションのためのシークレットに使われる)
rake stats                              # コードの静的情報(KLOCなど)を報告する
rake test                               # test:units, test:functionals, test:generators, test:integration を実行する
rake test:all                           # Run tests quickly by merging all types and not resetting db
rake test:all:db                        # Run tests quickly, but also reset db
rake time:zones:all                     # すべてのタイムゾーンを表示する(time:zones:us, time:zones:local も指定可能)
rake tmp:clear                          # tmp/配管のsession, cache, socket ファイルをクリアする(tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear　でクリア範囲を狭められる)
rake tmp:create                         # sessions, cache, sockets, pidsのために、tmpディレクトリを作成する&lt;/pre&gt;
&lt;/div&gt;</description>
          <pubDate>Sun, 16 Nov 2014 14:21:06 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450073930565</guid>
          
            <category>Rails初級</category>
          
            <category>開発を効率化する</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsの開発効率をあげる - rails-flogを使ってRailsのdevelopmentログのハッシュとSQLを見やすくする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141031/1414688928</link>
          <description>
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;rails-flog とは&lt;/h3&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/pinzolo/rails-flog&quot; target=&quot;_blank&quot;&gt;rails-flog&lt;/a&gt;とは、Railsの開発環境のログ（development.log）のハッシュとSQLのログをとっても見やすくするgemです。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;rails-flog 導入前&lt;/h5&gt;
    &lt;p&gt;Railsのデフォルトでは、HashやSQLは次のように表示されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 一覧の取得&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; Load (&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;.2ms)  &lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.* &lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

...

&lt;span class=&quot;synComment&quot;&gt;# User作成時のParameters&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Processing&lt;/span&gt; by &lt;span class=&quot;synType&quot;&gt;UsersController&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#create as HTML&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;Parameters&lt;/span&gt;: {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;✓&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;authenticity_token&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;lVCNWWTI6D9tLoegdoodgJyv1brvoC2sS7WuQyFkT3w=&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;lastname&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test@test.com&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;rails-flog 導入後&lt;/h5&gt;
    &lt;p&gt;rails-flogを使うとインデントがつけられ、階層構造がわかりやすく表示されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 一覧の取得&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; Load (&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;.2ms)
&lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; . *
&lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

...
&lt;span class=&quot;synComment&quot;&gt;# User作成時のParameters&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Processing&lt;/span&gt; by &lt;span class=&quot;synType&quot;&gt;UsersController&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#create as HTML&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;Parameters&lt;/span&gt;:
{
                  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;✓&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;authenticity_token&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;lVCNWWTI6D9tLoegdfafdasS7Wuefjlajdfa&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
                  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; {
        &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
         &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;lastname&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test@test.com&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    },
                &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;rails-flog 1.3.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;rails-flogのサポート環境&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby  1.9.3, 2.0.0, 2.1.0&lt;/li&gt;
&lt;li&gt;Rails 3.2.x, 4.0.x, 4.1.x&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#rails-flog-create-rails&quot;&gt;Railsプロジェクトの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-flog-getting-started&quot;&gt;rails-flogのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-flog-disable-templorary&quot;&gt;rails-flogの一時的な無効化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-flog-create-rails&quot;&gt;1. Railsプロジェクトの作成&lt;/h3&gt;まずはRailsプロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new rails-flog_test
cd rails-flog_test&lt;/pre&gt;&lt;p&gt;次にrails-flogの挙動を確認するために、UserをScaffoleで作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g scaffold User firstname:string lastname:string email:string
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-flog-getting-started&quot;&gt;2. rails-flogのインストール方法&lt;/h3&gt;では、rails-flogをインストールします。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;にGemを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails-flog&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;flog&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;これで完了です。&lt;/p&gt;&lt;p&gt;では、&lt;code&gt;rails s&lt;/code&gt;でサーバーを起動してログを見てみましょう。&lt;br /&gt;
SQLがインデントされて分かりやすく表示されています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 一覧の取得&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; Load (&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;.2ms)
&lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; . *
&lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

...
&lt;span class=&quot;synComment&quot;&gt;# User作成時のParameters&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Processing&lt;/span&gt; by &lt;span class=&quot;synType&quot;&gt;UsersController&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#create as HTML&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;Parameters&lt;/span&gt;:
{
                  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;✓&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;authenticity_token&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;lVCNWWTI6D9tLoegdfafdasS7Wuefjlajdfa&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
                  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; {
        &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
         &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;lastname&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test@test.com&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    },
                &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-flog-disable-templorary&quot;&gt;3. rails-flogの一時的な無効化&lt;/h3&gt;Railsプロジェクトのルートの&lt;code&gt;tmp/&lt;/code&gt;配下にファイルを配置するとrails-flogのフォーマットを無効化できます。&lt;/p&gt;&lt;p&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;ファイル名&lt;/th&gt;
    &lt;th&gt;無効化する機能&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;no-flog-sql.txt&lt;/td&gt;
    &lt;td&gt;SQL&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;no-flog-params.txt&lt;/td&gt;
    &lt;td&gt;ハッシュ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;no-flog.txt&lt;/td&gt;
    &lt;td&gt;両方&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pinzolo/rails-flog&quot;&gt;pinzolo/rails-flog &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Fri, 31 Oct 2014 02:08:48 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450070772901</guid>
          
            <category>開発を効率化する</category>
          
            <category>Rails gem</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsの開発効率を上げる - quiet_assetsを使って開発環境のログ(development.log)のログ内容を見やすくする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141029/1414584929</link>
          <description>
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;Quiet Assets とは&lt;/h3&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/evrone/quiet_assets&quot; target=&quot;_blank&quot;&gt;Quiet Assets&lt;/a&gt;とは、Railsの開発環境のログ（ development.log）のアセットパイプラインのログを表示させなくし、ログの内容をすっきり見やすくするためのGemです。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;Quiet Assets 導入前&lt;/h5&gt;
    &lt;p&gt;Railsのデフォルトでは、&lt;code&gt;assets/...&lt;/code&gt;というログが出力され確認したいログが見づらいログ出力になっています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141027/20141027215905.png&quot; alt=&quot;f:id:nipe880324:20141027215905p:plain:w480&quot; title=&quot;f:id:nipe880324:20141027215905p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;Quiet Assets 導入後&lt;/h5&gt;
    &lt;p&gt;動いているの？と間違えるほどすっきりしたログになります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141027/20141027215907.png&quot; alt=&quot;f:id:nipe880324:20141027215907p:plain:w480&quot; title=&quot;f:id:nipe880324:20141027215907p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;quiet_assets 1.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;Quiet Assetsの動作サポート&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 3.1 以上&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#quiet_assets-create-rails&quot;&gt;Railsプロジェクトの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#quiet_assets-getting-started&quot;&gt;Quite Assetsのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#quiet_assets-customize&quot;&gt;Quite Assetsのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;quiet_assets-create-rails&quot;&gt;1. Railsプロジェクトの作成&lt;/h3&gt;まずはRailsプロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new quiet_assets_test
cd quiet_assets_test&lt;/pre&gt;&lt;p&gt;次にQuiet Assetsの挙動を確認するために、UserをScaffoleで作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g scaffold User firstname:string lastname:string email:string
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;quiet_assets-getting-started&quot;&gt;2. Quiet Assetsのインストール方法&lt;/h3&gt;では、Quiet Assetsをインストールします。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;にGemを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;quiet_assets&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;これで完了です。&lt;br /&gt;
では、&lt;code&gt;rails s&lt;/code&gt;でサーバーを起動してログを見てみましょう。&lt;br /&gt;
&lt;code&gt;assets/...&lt;/code&gt;というログがなく、すっきりしたログになりましたね。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141027/20141027215907.png&quot; alt=&quot;f:id:nipe880324:20141027215907p:plain:w480&quot; title=&quot;f:id:nipe880324:20141027215907p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;quiet_assets-customize&quot;&gt;2. Quite Assetsのカスタマイズ&lt;/h3&gt;もし一時的に、&lt;code&gt;assets&lt;/code&gt;のログを出力したい場合は、&lt;code&gt;config/application.rb&lt;/code&gt;に下記を追記します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/application.rb file:&lt;/span&gt;

config.quiet_assets = &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/evrone/quiet_assets&quot;&gt;evrone/quiet_assets &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 29 Oct 2014 21:15:29 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450070731222</guid>
          
            <category>Rails gem</category>
          
            <category>開発を効率化する</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsの開発を効率化させる - Awesome Printを使ってログ情報をハイライトさせて見やすくする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141028/1414505988</link>
          <description>
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;Awesome Print とは&lt;/h3&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/michaeldv/awesome_print&quot; target=&quot;_blank&quot;&gt;Awesome Print&lt;/a&gt;とは、Rubyオブジェクトに色やインデントをつけることにより、ログの情報を見やすくするライブラリです。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;Awesome Print導入前&lt;/h5&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141026/20141026123505.png&quot; alt=&quot;f:id:nipe880324:20141026123505p:plain&quot; title=&quot;f:id:nipe880324:20141026123505p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;Awesome Print導入後&lt;/h5&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141026/20141026123450.png&quot; alt=&quot;f:id:nipe880324:20141026123450p:plain&quot; title=&quot;f:id:nipe880324:20141026123450p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;awesome_print 1.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#awesome_print-create-rails&quot;&gt;Railsプロジェクトの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#awesome_print-getting-started&quot;&gt;Awesome Printのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;awesome_print-create-rails&quot;&gt;Railsプロジェクトの作成&lt;/h3&gt;まずはRailsプロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new awesome_print_test
cd awesome_print_test&lt;/pre&gt;&lt;p&gt;次にAwesome Printの挙動を確認するために、UserをScaffoleで作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g scaffold User firstname:string lastname:string email:string
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;awesome_print-getting-started&quot;&gt;Awesome Printのインストール方法&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;では、Awesome Printをインストールします。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;にAwesome PrintのGemを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;awesome_print&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;IRBの場合&lt;/h5&gt;
    &lt;p&gt;IRB(デフォルト)の場合は、Railsプロジェクトのルートディレクトリ配下に&lt;code&gt;.irbrc&lt;/code&gt;を作成し、下記を記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# .irbrc&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;awesome_print&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;AwesomePrint&lt;/span&gt;.irb!
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;Pryの場合&lt;/h5&gt;
    &lt;p&gt;Pryを入れている場合は、Railsプロジェクトのルートディレクトリ配下に&lt;code&gt;.pryrc&lt;/code&gt;を作成し、下記を記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# .pryrc&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;awesome_print&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;AwesomePrint&lt;/span&gt;.pry!
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;rails c&lt;/code&gt;でconsoleを開いて、結果を確認してみましょう。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141026/20141026123558.png&quot; alt=&quot;f:id:nipe880324:20141026123558p:plain&quot; title=&quot;f:id:nipe880324:20141026123558p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/michaeldv/awesome_print&quot;&gt;https://github.com/michaeldv/awesome_print&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 28 Oct 2014 23:19:48 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450070286801</guid>
          
            <category>Rails gem</category>
          
            <category>開発を効率化する</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsの開発効率をあげる - Rails-ERDを使ってRailsでER図を簡単につくる</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141027/1414409495</link>
          <description>
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;Rails-ERDとは&lt;/h3&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/voormedia/rails-erd&quot; target=&quot;_blank&quot;&gt;Rails-ERD&lt;/a&gt;とは、&lt;br /&gt;
ActiveRecordをもとにRailsプロジェクトのER図を作成してくれるツールです。&lt;br /&gt;
Railsプロジェクト(ActiveRecord)からER図を簡単に作れるので、Excelや他のツールでER図を作って、Railsに反映させていくという2重管理をしなくてよくなり、メンテナンスコストが下がるので開発効率があがると思います。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Rails-ERDで作成されたER図の例（CMS）です。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141025/20141025035233.png&quot; alt=&quot;f:id:nipe880324:20141025035233p:plain:w480&quot; title=&quot;f:id:nipe880324:20141025035233p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;対象読者&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Railsの開発効率を上げたい方（特に、ER図をDryに管理したい方）&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby  2.0&lt;/li&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;rails-erd 1.1.0&lt;/li&gt;
&lt;li&gt;Graphviz&lt;/li&gt;
&lt;li&gt;Mac OS X 10.10 Yoshimite&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#rails-erd-create-rails&quot;&gt;Railsプロジェクトを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-erd-install&quot;&gt;Rails-ERDのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-erd-usage&quot;&gt;Rails-ERDの使い方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails-erd-create-rails&quot;&gt;1. Railsプロジェクトを作成&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;まずはRailsプロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new rails-erd_test
cd rails-erd_test&lt;/pre&gt;&lt;p&gt;次にRails-ERDでER図を作成するために、モデルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g scaffold User firstname:string lastname:string email:string
rails g model Post title:string body:text user:references
rails g model Comment body:text user:references
rake db:migrate&lt;/pre&gt;&lt;p&gt;Userモデルに&lt;code&gt;has_many&lt;/code&gt;を追加します。&lt;br /&gt;
ちなみに、PostモデルとCommentモデルには、&lt;code&gt;user:references&lt;/code&gt;を指定したので&lt;code&gt;belongs_to&lt;/code&gt;が追加されています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:posts&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:comments&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails-erd-install&quot;&gt;2. Rails-ERDのインストール&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;では、さっそくRailsにRails-ERDをインストールしていきましょう。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;にRails-ERDを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails-erd&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 上記でうまくいかない、かつ、OSX Mavericksを使っている場合はこちらを使ってください&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# gem &#39;rails-erd&#39;, github: &#39;paulwittmann/rails-erd&#39;, branch: &#39;mavericks&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bundlerでgemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;次に、&lt;a href=&quot;http://www.graphviz.org/&quot; target=&quot;_blank&quot;&gt;Graphviz&lt;/a&gt;というグラフを作成するツールをいれます。&lt;br /&gt;
&lt;a href=&quot;http://www.graphviz.org/Download..php&quot; target=&quot;_blank&quot;&gt;http://www.graphviz.org/Download..php&lt;/a&gt;からOSに応じてダウンロードし、インストールしてください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-erd-usage&quot;&gt;3. Rails-ERDの使い方&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;rake erd&lt;/code&gt;コマンドでER図が作成されます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ rake erd
Loading application environment...
Loading code in search of Active Record models...
Generating Entity-Relationship Diagram for 3 models...
Done! Saved diagram to erd.pdf.&lt;/pre&gt;&lt;p&gt;ファイルは、&lt;cdoe&gt;erd.pdf&lt;/cdoe&gt;で作成されましたので、開いてみましょう。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141025/20141025035156.png&quot; alt=&quot;f:id:nipe880324:20141025035156p:plain:w480&quot; title=&quot;f:id:nipe880324:20141025035156p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;次のようにオプションを指定すると、主キー、外部キーの表示、ファイル名、ファイルタイプを変更できます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ rake erd attributes=foreign_keys,primary_keys,content filename=rails-erd filetype=png&lt;/pre&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141025/20141025035210.png&quot; alt=&quot;f:id:nipe880324:20141025035210p:plain:w480&quot; title=&quot;f:id:nipe880324:20141025035210p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;オプションの詳細は&lt;a href=&quot;http://voormedia.github.io/rails-erd/customise.html&quot; target=&quot;_blank&quot;&gt;http://voormedia.github.io/rails-erd/customise.html&lt;/a&gt;を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;br /&gt;
Rails-ERDを使うことで、Railsプロジェクト(ActiveRecord)からER図を簡単に作れるので是非使ってください。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/voormedia/rails-erd&quot;&gt;voormedia/rails-erd &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://voormedia.github.io/rails-erd&quot;&gt;Rails ERD &amp;ndash; Entity-Relationship Diagrams for Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;パーフェクトRuby on Rails&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Mon, 27 Oct 2014 20:31:35 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450070177417</guid>
          
            <category>Rails gem</category>
          
            <category>開発を効率化する</category>
          
            <category>DB</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsの開発効率をあげる - Springを使ってRailsのコンソールコマンドの実行を早くする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141026/1414289421</link>
          <description>
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;Springとは&lt;/h3&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/rails/spring&quot; target=&quot;_blank&quot;&gt;Spring&lt;/a&gt;とは、Rails4.1から標準で付属するようになった&lt;b&gt;アプリケーションプリローダー&lt;/b&gt;です。&lt;br /&gt;
Rails内では様々なライブラリのロードなどの前処理が行われるので、コマンドを実行するための待ち時間がかかってしまいます。&lt;br /&gt;
事前にバックグラウンドでライブラリをロードしておくことで、その待ち時間を短くするものが&lt;b&gt;アプリケーションプリローダー&lt;/b&gt;です。&lt;/p&gt;&lt;p&gt;MiniTestやRSpecを&lt;code&gt;rake&lt;/code&gt;コマンドで実行したり、サーバー起動やconsoleを&lt;code&gt;rails&lt;/code&gt;コマンドで実行すると思いますが、動き出すまで数秒かかると思います。&lt;br /&gt;
開発を通すとこういったコマンドは、何十回、何百回も実行することになるので、数秒でも早いにこしたことはありません。&lt;/p&gt;&lt;p&gt;他の有名なアプリケーションプリローダーには、&lt;a href=&quot;https://github.com/sporkrb/spork&quot; target=&quot;_blank&quot;&gt;Spork&lt;/a&gt;や&lt;a href=&quot;https://github.com/burke/zeus&quot; target=&quot;_blank&quot;&gt;Zeus&lt;/a&gt;といったものもあります。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;Spring導入前&lt;/h4&gt;
    &lt;p&gt;Springを使わないでテストを実行してみます。&lt;br /&gt;
&lt;b&gt;realが5秒程度かかっています。&lt;/b&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ &lt;span class=&quot;synStatement&quot;&gt;time&lt;/span&gt; bin/rake &lt;span class=&quot;synStatement&quot;&gt;test&lt;/span&gt;
.......

&lt;span class=&quot;synConstant&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;synConstant&quot;&gt;13&lt;/span&gt; assertions, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; failures, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; errors, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; skips

real  0m5.213s
user  0m0.825s
sys 0m0.379s
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;Spring導入後&lt;/h4&gt;
    &lt;p&gt;今度はSpringを使ってテストを実行します。&lt;br /&gt;
&lt;b&gt;realの値が5秒から2秒になっています。&lt;/b&gt;&lt;br /&gt;
まだ、依存するライブラリが少ないですが、プロジェクトが大きくなるにつれてSpringの恩恵は増えてくると思います。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ &lt;span class=&quot;synStatement&quot;&gt;time&lt;/span&gt; bin/rake &lt;span class=&quot;synStatement&quot;&gt;test&lt;/span&gt;
.......

&lt;span class=&quot;synConstant&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;synConstant&quot;&gt;13&lt;/span&gt; assertions, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; failures, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; errors, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; skips

real  0m1.980s
user  0m0.852s
sys 0m0.394s
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;対象読者&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Railsの開発効率を上げたい方（特に、rake, railsコマンドを良く使う方）&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby  2.0&lt;/li&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;Spring 1.1.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;Springの動作要件&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby  1.9.3, 2.0, 2.1&lt;/li&gt;
&lt;li&gt;Rails 3.2, 4.0, 4.1 (default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Process.fork&lt;/code&gt;を使っているのでWindows, JRuby環境はだめ&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#spring-create-rails&quot;&gt;Railsプロジェクトを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#spring-install&quot;&gt;Springをインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#spring-usage&quot;&gt;Springの使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#spring-additional-commands&quot;&gt;Springのコマンドを追加(RSpec, Cucumperなど)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#spring-removal&quot;&gt;Springの削除&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;better-errors-create-rails&quot;&gt;1. Railsプロジェクトを作成&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;まずはRailsプロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new spring_test
cd spring_test&lt;/pre&gt;&lt;p&gt;次にSpringの挙動を確認するために、UserをScaffoldで作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g scaffold User firstname:string lastname:string email:string
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;spring-install&quot;&gt;2. Springをインストール&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;では、さっそくRailsにSpringをインストールしていきましょう。&lt;/p&gt;&lt;p&gt;Rails 4.1ではデフォルトで入っているので、&lt;code&gt;Gemfile&lt;/code&gt;に記載されていることを確認します。&lt;br /&gt;
Rails 3.2や4.0の場合や、Springがコメントアウトされている場合は、次のように記載してください。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,        &lt;span class=&quot;synConstant&quot;&gt;group&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bundlerでgemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;そして、Railsプロジェクトのルートの&lt;code&gt;bin/spring&lt;/code&gt;という実行ファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle exec spring binstub --all&lt;/pre&gt;&lt;p&gt;これにより、&lt;code&gt;bin/rails&lt;/code&gt;や&lt;code&gt;bin/rake&lt;/code&gt;に次のようなコードも追加されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.expand_path(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;../spring&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;__FILE__&lt;/span&gt;)
&lt;span class=&quot;synStatement&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;LoadError&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;spring-usage&quot;&gt;3. Springの使い方&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;Springがバックグラウンドで起動しているか確認します。&lt;br /&gt;
&lt;code&gt;Spring is not running.&lt;/code&gt;であることを確認します。止まっていない場合は、&lt;code&gt;bin/spring stop&lt;/code&gt;で停止できます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ bin/spring status
Spring is not running.&lt;/pre&gt;&lt;p&gt;では、テストを実行してみましょう。&lt;br /&gt;
rakeやrailsコマンドの最初の実行時にはSpringが起動していないため実行は早くありません。&lt;br /&gt;
&lt;b&gt;realが5秒程度かかっています。&lt;/b&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ time bin/rake test
Run options: --seed 59255

# Running:

.......

Finished in 0.855353s, 8.1838 runs/s, 15.1984 assertions/s.

7 runs, 13 assertions, 0 failures, 0 errors, 0 skips

real  0m5.213s
user  0m0.825s
sys 0m0.379s&lt;/pre&gt;&lt;p&gt;また&lt;code&gt;bin/spring status&lt;/code&gt;を実行すると、Springが起動しています。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ bin/spring status
Spring is running:

41751 spring server | spring_test | started 22 secs ago
41752 spring app    | spring_test | started 22 secs ago | test mode&lt;/pre&gt;&lt;p&gt;では、またテストを実行してみましょう。&lt;br /&gt;
&lt;b&gt;realの値が5秒から2秒になっています。&lt;/b&gt;&lt;br /&gt;
まだ、依存するライブラリが少ないですが、プロジェクトが大きくなるにつれてSpringの恩恵は増えてくると思います。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ time bin/rake test
Run options: --seed 32264

# Running:

.......

Finished in 0.172552s, 40.5675 runs/s, 75.3396 assertions/s.

7 runs, 13 assertions, 0 failures, 0 errors, 0 skips

real  0m1.980s
user  0m0.852s
sys 0m0.394s&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;spring-additional-commands&quot;&gt;4. Springのコマンドを追加(RSpec, Cucumperなど)&lt;/h3&gt;Springに&lt;code&gt;rspec&lt;/code&gt;、&lt;code&gt;cucumber&lt;/code&gt;などコマンドを追加できます。&lt;br /&gt;
方法は同じなので、RSpecコマンドを追加してみましょう。&lt;/p&gt;&lt;p&gt;まず、&lt;code&gt;Gemfile&lt;/code&gt;にGemを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spring-commands-rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;group&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;Springを停止します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bin/spring stop&lt;/pre&gt;&lt;p&gt;&lt;code&gt;bin/rspec&lt;/code&gt;コマンドを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;spring binstub --all
* bin/rake: spring already present
* bin/rspec: generated with spring
* bin/rails: spring already present&lt;/pre&gt;&lt;p&gt;今はRSpecが入っていないので実行できませんが、次のように実行します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bin/rspec&lt;/pre&gt;&lt;p&gt;他には、以下のようなSpringのGemがあります。&lt;br /&gt;
上記のGemfileの内容を書き換えるとそのコマンドを追加できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;spring-commands-rspec&lt;/li&gt;
&lt;li&gt;spring-commands-cucumber&lt;/li&gt;
&lt;li&gt;spring-commands-spinach&lt;/li&gt;
&lt;li&gt;spring-commands-testunit&lt;/li&gt;
&lt;li&gt;spring-commands-teaspoon&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;spring-removal&quot;&gt;5. Springの削除&lt;/h3&gt;Springをプロジェクトから削除する方法です。&lt;/p&gt;&lt;p&gt;&lt;code&gt;bin/&lt;/code&gt;からSpringの実行ファイルを削除します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ bin/spring binstub --remove --all&lt;/pre&gt;&lt;p&gt;次に&lt;code&gt;Gemfile&lt;/code&gt;からSprignを削除します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 下記2行を削除かコメントアウト&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# gem &#39;spring&#39;,        group: :development&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ bundle install&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上です。&lt;br /&gt;
Springを使うことで、コマンド実行の待ち時間が減り開発効率も上がることでしょう。&lt;br /&gt;
そのほかにも、guardというファイルの変更を検知し、自動でRSpecやRuboCopの実行、ブラウザの更新を行ってくれるGemもあります。&lt;br /&gt;
今日ものある場合は下記からインストール方法や使い方がわかります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141016/1413389293&quot; target=&quot;_blank&quot;&gt;guard-livereload - 自動でブラウザ更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141021/1413819783&quot; target=&quot;_blank&quot;&gt;guard-rspec - 自動でRSpec実行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141019/1413698128&quot; target=&quot;_blank&quot;&gt;guard-rubocop - 自動でRuboCop実行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rails/spring&quot;&gt;rails/spring &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;パーフェクトRuby on Rails&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sun, 26 Oct 2014 11:10:21 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450070159912</guid>
          
            <category>開発を効率化する</category>
          
            <category>Rails gem</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsの開発効率をあげる - Better_Errorsを使ってdevelopment環境のエラー画面をリッチにする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141025/1414225490</link>
          <description>
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;Better_Errorsとは&lt;/h3&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/charliesome/better_errors&quot; target=&quot;_blank&quot;&gt;Better_Errors&lt;/a&gt;とは、Railsを始めとするRackアプリのエラー画面をリッチにするGemです。&lt;/p&gt;&lt;p&gt;では、実際にBetter_Errorsの導入前後の画面を見てみましょう。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;Better_Errors導入前&lt;/h5&gt;
    &lt;p&gt;よく見慣れたエラーですね。どこの箇所でExceptionが発生したかわかります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141025/20141025005133.png&quot; alt=&quot;f:id:nipe880324:20141025005133p:plain:w480&quot; title=&quot;f:id:nipe880324:20141025005133p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;Better_Errors導入後&lt;/h5&gt;
    &lt;p&gt;左側にスタックトレース、右上にソースコードと対話式console、右下にリクエストパラメーターや変数が表示されており、エラーの原因を理解するの簡単にできます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141025/20141025005146.png&quot; alt=&quot;f:id:nipe880324:20141025005146p:plain:w480&quot; title=&quot;f:id:nipe880324:20141025005146p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;対象読者&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Railsの開発効率を上げたい方（特に、開発中にエラー画面がよく表示される方）&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;better_errors     2.0.0&lt;/li&gt;
&lt;li&gt;binding_of_caller 0.7.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#better-errors-create-rails&quot;&gt;Railsプロジェクトを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#better-errors-install&quot;&gt;Better_Errorsをインストール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;better-errors-create-rails&quot;&gt;1. Railsプロジェクトを作成&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;まずはRailsプロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new better_errors_test
cd better_errors_test&lt;/pre&gt;&lt;p&gt;次にBetter Errorsの挙動を確認するために、UserモデルとCommentモデルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g scaffold User firstname:string lastname:string email:string
rails g model Comment body:string user:references
rake db:migrate&lt;/pre&gt;&lt;p&gt;Userモデルにアソシエーションを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:comments&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;ちなみに、Commentモデルを作成したときに&lt;code&gt;user:references&lt;/code&gt;を追加したので既にアソシエーションがついています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/comment.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Comment&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;better-errors-install&quot;&gt;2. Better_Errorsをインストール&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;では、さっそくRailsにBetter_Errorsをインストールしていきましょう。&lt;/p&gt;&lt;p&gt;まずは、&lt;code&gt;Gemfile&lt;/code&gt;にBetter_Errorsを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;better_errors&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;     &lt;span class=&quot;synComment&quot;&gt;# 開発中のエラー画面をリッチにする&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;binding_of_caller&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 開発中のエラー画面にさらに変数の値を表示する&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bundlerでgemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;では、&lt;code&gt;rails s&lt;/code&gt;でサーバーを起動し、存在しないUser IDを指定してエラーを発生させましょう。&lt;br /&gt;
&lt;code&gt;http://localhost:3000/users/1000&lt;/code&gt;にアクセスすると、エラーが発生しBetter_Errorsによりリッチなエラー画面が表示されます。&lt;/p&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141025/20141025005146.png&quot; alt=&quot;f:id:nipe880324:20141025005146p:plain:w480&quot; title=&quot;f:id:nipe880324:20141025005146p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;左側にスタックトレース、右上にソースコードと対話式console、右下にリクエストパラメーターや変数が表示されています。&lt;br /&gt;
エラー画面としてはとても見やすいですね。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;br /&gt;
Better_Errorsを使うことで、開発中のエラー画面の情報が増えるので、開発効率も上がること間違いないでしょう。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/charliesome/better_errors&quot;&gt;charliesome/better_errors &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;パーフェクトRuby on Rails&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sat, 25 Oct 2014 17:24:50 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450070125410</guid>
          
            <category>Rails gem</category>
          
            <category>開発を効率化する</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsの開発効率をあげる - Hirbを使ってRailsでコンソールのModelの出力結果を表形式で分かりやすく表示する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141024/1414160189</link>
          <description>&lt;p&gt;&lt;code&gt;rails console&lt;/code&gt;でモデルの内容をきれいに表形式で表示できるようにする&lt;code&gt;hirb&lt;/code&gt;というgemのインストール方法を説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;Hirb導入前&lt;/h5&gt;
    &lt;p&gt;値が表示されているが、複数表示された時にデータが見づらい。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails c
&lt;span class=&quot;synType&quot;&gt;Loading&lt;/span&gt; development environment (&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4.1&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;)

irb(main):&lt;span class=&quot;synConstant&quot;&gt;001&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&amp;gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.all
  &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; Load (&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.1ms)  &lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.* &lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#&amp;lt;ActiveRecord::Relation [#&amp;lt;User id: 1, firstname: &amp;quot;太郎&amp;quot;, lastname: &amp;quot;鈴木&amp;quot;, email: &amp;quot;t.suzuki@test.com&amp;quot;, created_at: &amp;quot;2014-10-23 17:07:14&amp;quot;, updated_at: &amp;quot;2014-10-23 17:07:14&amp;quot;&amp;gt;, #&amp;lt;User id: 2, firstname: &amp;quot;花子&amp;quot;, lastname: &amp;quot;佐藤&amp;quot;, email: &amp;quot;h.satou@test.com&amp;quot;, created_at: &amp;quot;2014-10-23 17:07:57&amp;quot;, updated_at: &amp;quot;2014-10-23 17:07:57&amp;quot;&amp;gt;]&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;Hirb導入後&lt;/h5&gt;
    &lt;p&gt;表形式で結果が表示されるため、各データがとても見やすい。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails c
&lt;span class=&quot;synType&quot;&gt;Loading&lt;/span&gt; development environment (&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4.1&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;)

irb(main):&lt;span class=&quot;synConstant&quot;&gt;001&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&amp;gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.all
  &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; Load (&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;.4ms)  &lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.* &lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
+----+-----------+----------+-------------------+-------------------------+-------------------------+
| id | firstname | lastname | email             | created_at              | updated_at              |
+----+-----------+----------+-------------------+-------------------------+-------------------------+
| &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;  | 太郎      | 鈴木     | t.suzuki&lt;span class=&quot;synIdentifier&quot;&gt;@test&lt;/span&gt;.com  | &lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt;    | &lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt;  |
| &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;  | 花子      | 佐藤     | h.satou&lt;span class=&quot;synIdentifier&quot;&gt;@test&lt;/span&gt;.com   | &lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;57&lt;/span&gt;    | &lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;57&lt;/span&gt;  |
+----+-----------+----------+-------------------+-------------------------+-------------------------+
&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; rows &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt; set
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;対象読者&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Railsの開発効率を上げたい方（特に、consoleでModelの内容をよく確認する方）&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;hirb  0.7.2&lt;/li&gt;
&lt;li&gt;hirb-unicode 0.0.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#hirb-create-rails&quot;&gt;Railsプロジェクトを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hirb-install&quot;&gt;Hirbをインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hirb-with-pry&quot;&gt;HirbをPryと一緒に使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;hirb-create-rails&quot;&gt;1. Railsプロジェクトを作成&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;まずはRailsプロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new hirb_test
cd hirb_test&lt;/pre&gt;&lt;p&gt;次にHirbの挙動を確認するために、UserモデルとCommentモデルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g scaffold User firstname:string lastname:string email:string
rails g model Comment body:string user:references
rake db:migrate&lt;/pre&gt;&lt;p&gt;Userモデルにアソシエーションを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:comments&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Commentモデルを作成したときに&lt;code&gt;user:references&lt;/code&gt;を追加したので既にアソシエーションがついています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/comment.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Comment&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Modelのデータを表示する必要があるため、データを2件ほど追加しておきます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ rails c
Loading development environment (Rails 4.1.5)
irb(main):001:0&amp;gt; User.create(firstname: &amp;#34;太郎&amp;#34;, lastname: &amp;#34;鈴木&amp;#34;, email: &amp;#34;t.suzuki@test.com&amp;#34;)
...
irb(main):002:0&amp;gt; User.create(firstname: &amp;#34;花子&amp;#34;, lastname: &amp;#34;佐藤&amp;#34;, email: &amp;#34;h.satou@test.com&amp;#34;)
...&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;hirb-install&quot;&gt;2. Hirbをインストール&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;にHirbを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hirb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;         &lt;span class=&quot;synComment&quot;&gt;# モデルの出力結果を表形式で表示するGem&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hirb-unicode&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 日本語などマルチバイト文字の出力時の出力結果のずれに対応&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bundlerでgemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;では、&lt;code&gt;rails c&lt;/code&gt;でconsoleを開いて、Hirbの出力結果を確認しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails c
&lt;span class=&quot;synType&quot;&gt;Loading&lt;/span&gt; development environment (&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4.1&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;)
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;] irb(main)&amp;gt;
&lt;/pre&gt;&lt;p&gt;ちなみに、Pryを入れていない場合は、Rubyに標準で付属しているirbが使われます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails c
&lt;span class=&quot;synType&quot;&gt;Loading&lt;/span&gt; development environment (&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4.1&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;)
irb(main):&lt;span class=&quot;synConstant&quot;&gt;001&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&amp;gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.all  &lt;span class=&quot;synComment&quot;&gt;# Hirbの有効化前。表示が見にくい。&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; Load (&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.1ms)  &lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.* &lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#&amp;lt;ActiveRecord::Relation [#&amp;lt;User id: 1, firstname: &amp;quot;太郎&amp;quot;, lastname: &amp;quot;鈴木&amp;quot;, email: &amp;quot;t.suzuki@test.com&amp;quot;, created_at: &amp;quot;2014-10-23 17:07:14&amp;quot;, updated_at: &amp;quot;2014-10-23 17:07:14&amp;quot;&amp;gt;, #&amp;lt;User id: 2, firstname: &amp;quot;花子&amp;quot;, lastname: &amp;quot;佐藤&amp;quot;, email: &amp;quot;h.satou@test.com&amp;quot;, created_at: &amp;quot;2014-10-23 17:07:57&amp;quot;, updated_at: &amp;quot;2014-10-23 17:07:57&amp;quot;&amp;gt;]&amp;gt;&lt;/span&gt;

irb(main):&lt;span class=&quot;synConstant&quot;&gt;002&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&amp;gt; &lt;span class=&quot;synType&quot;&gt;Hirb&lt;/span&gt;.enable  &lt;span class=&quot;synComment&quot;&gt;# Hirbの有効化&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

irb(main):&lt;span class=&quot;synConstant&quot;&gt;003&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&amp;gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.all   &lt;span class=&quot;synComment&quot;&gt;# Hirbの有効化後。表示が見やすい。&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; Load (&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;.4ms)  &lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.* &lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
+----+-----------+----------+-------------------+-------------------------+-------------------------+
| id | firstname | lastname | email             | created_at              | updated_at              |
+----+-----------+----------+-------------------+-------------------------+-------------------------+
| &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;  | 太郎      | 鈴木     | t.suzuki&lt;span class=&quot;synIdentifier&quot;&gt;@test&lt;/span&gt;.com | &lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt;     | &lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt;  |
| &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;  | 花子      | 佐藤     | h.satou&lt;span class=&quot;synIdentifier&quot;&gt;@test&lt;/span&gt;.com  | &lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;57&lt;/span&gt;     | &lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;57&lt;/span&gt;  |
+----+-----------+----------+-------------------+-------------------------+-------------------------+
&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; rows &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt; set
&lt;/pre&gt;&lt;p&gt;このようにHirbを使うことでActiveRecordの出力結果が見やすくなります。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;hirb-with-pry&quot;&gt;3. HirbをPryと一緒に使う&lt;/h3&gt;以前紹介したパワフルなconsoleのPryと一緒にHirbを使うためには設定が必要です。&lt;/p&gt;&lt;p&gt;Pryのインストール方法や使い方に「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141024/1414081224&quot; target=&quot;_blank&quot;&gt;Pryを使ってconsoleを拡張/デバッグを実施&lt;/a&gt;」を参照して下さい。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;にPryを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hirb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;         &lt;span class=&quot;synComment&quot;&gt;# モデルの出力結果を表形式で表示するGem&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hirb-unicode&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 日本語などマルチバイト文字の出力時の出力結果のずれに対応&lt;/span&gt;

  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# rails console(もしくは、rails c)でirbの代わりにpryを使われる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-doc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# methodを表示&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-byebug&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# デバッグを実施&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bundlerでgemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;Railsプロジェクトのルートディレクトリ(Gemfileと同じ場所)に&lt;code&gt;.pryrc&lt;/code&gt;を作成し、次の内容を記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# .pryrc&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hirb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;LoadError&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Missing goodies, bummer&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;defined?&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Hirb&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Slightly dirty hack to fully support in-session Hirb.disable/enable toggling&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;Hirb&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;View&lt;/span&gt;.instance_eval &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;enable_output_method&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@output_method&lt;/span&gt; = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@old_print&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Pry&lt;/span&gt;.config.print
      &lt;span class=&quot;synType&quot;&gt;Pry&lt;/span&gt;.config.print = &lt;span class=&quot;synStatement&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |*&lt;span class=&quot;synIdentifier&quot;&gt;args&lt;/span&gt;|
        &lt;span class=&quot;synType&quot;&gt;Hirb&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;View&lt;/span&gt;.view_or_page_output(args[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]) || &lt;span class=&quot;synIdentifier&quot;&gt;@old_print&lt;/span&gt;.call(*args)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;disable_output_method&lt;/span&gt;
      &lt;span class=&quot;synType&quot;&gt;Pry&lt;/span&gt;.config.print = &lt;span class=&quot;synIdentifier&quot;&gt;@old_print&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@output_method&lt;/span&gt; = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synType&quot;&gt;Hirb&lt;/span&gt;.enable
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;では、Pryのconsole時にHirbが有効になっていることを確認しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails c
&lt;span class=&quot;synType&quot;&gt;Loading&lt;/span&gt; development environment (&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4.1&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;)
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;] pry(main)&amp;gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.all
  &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; Load (&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.7ms)  &lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.* &lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
+----+-----------+----------+-------------------+-------------------------+-------------------------+
| id | firstname | lastname | email             | created_at              | updated_at              |
+----+-----------+----------+-------------------+-------------------------+-------------------------+
| &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;  | 太郎      | 鈴木     | t.suzuki&lt;span class=&quot;synIdentifier&quot;&gt;@test&lt;/span&gt;.com | &lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;UTC&lt;/span&gt; | &lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;UTC&lt;/span&gt; |
| &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;  | 花子      | 佐藤     | h.satou&lt;span class=&quot;synIdentifier&quot;&gt;@test&lt;/span&gt;.com  | &lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;57&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;UTC&lt;/span&gt; | &lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;57&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;UTC&lt;/span&gt; |
+----+-----------+----------+-------------------+-------------------------+-------------------------+
&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; rows &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt; set
[&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;] pry(main)&amp;gt;
&lt;/pre&gt;&lt;p&gt;Hirbのおかげで、PryでもModelの結果が表形式に整形されて表示されるようになりました。&lt;/p&gt;&lt;p&gt;以上です。&lt;br /&gt;
Hirbを使うことで、console上でのModelの結果がとても見やすくなるので、Railsでconsoleをたくさん使う方は是非入れてみることをお勧めします。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cldwalker/hirb&quot;&gt;cldwalker/hirb &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;パーフェクトRuby on Rails&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Fri, 24 Oct 2014 23:16:29 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450069964670</guid>
          
            <category>Rails gem</category>
          
            <category>開発を効率化する</category>
          
        </item>
      
        <item>
          <title>Railsの開発効率をあげる - Pryを使ってRailsのコンソールをパワーアップ &amp; デバッグをする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141024/1414081224</link>
          <description>
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;Pryとは&lt;/h3&gt;
    &lt;p&gt;Rubyには、標準で付属されているirb(Interactive Ruby)というツールがあります。&lt;br /&gt;
consoleで、&lt;code&gt;irb&lt;/code&gt;と入力するとirbが実行されます。&lt;br /&gt;
そこで、対話的にRubyの式を入力・実行することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ irb
irb(main):&lt;span class=&quot;synConstant&quot;&gt;001&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、Pryはirbの代替となるパワフルな対話ツールです。&lt;br /&gt;
なにがパワフルかというと次のようなことができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ドキュメントが見れる&lt;/li&gt;
&lt;li&gt;シンタックスハイライト&lt;/li&gt;
&lt;li&gt;デバッグができる（&lt;code&gt;binding.pry&lt;/code&gt;をソース二記載するとブレイクポイントになる）&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ pry
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;] pry(main)&amp;gt; ls     &lt;span class=&quot;synComment&quot;&gt;# 現在のスコープの変数とメソッドを表示&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;methods&lt;/span&gt;: inspect  to_s
&lt;span class=&quot;synConstant&quot;&gt;locals&lt;/span&gt;: _  __  _dir_  _ex_  _file_  _in_  _out_  _pry_
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails      4.1&lt;/li&gt;
&lt;li&gt;pry-rails  0.3.2&lt;/li&gt;
&lt;li&gt;pry-doc    0.6.0&lt;/li&gt;
&lt;li&gt;pry-byebug 2.0&lt;/li&gt;
&lt;li&gt;pry-stack_explorer 0.4.9.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#pry-create-rails&quot;&gt;Railsプロジェクトを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pry-install&quot;&gt;pryをインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pry-pry&quot;&gt;pryコマンド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pry-pry-rails&quot;&gt;pry-railsコマンド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pry-pry-byebug&quot;&gt;pry-byebugでデバッグ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pry-pry-stack_explorer&quot;&gt;pry-stack_explorerでより深くデバッグ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;pry-create-rails&quot;&gt;1. Railsプロジェクトを作成&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;まずはRailsプロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new pry_test
cd pry_test&lt;/pre&gt;&lt;p&gt;次にPryで捜査を確認するために、UserモデルとCommentモデルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g scaffold User firstname:string lastname:string email:string
rails g model Comment body:string user:references
rake db:migrate&lt;/pre&gt;&lt;p&gt;Userモデルにアソシエーションを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:comments&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Commentモデルを作成したときに&lt;code&gt;user:references&lt;/code&gt;を追加したので既にアソシエーションがついています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/comment.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Comment&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;pry-install&quot;&gt;2. pryをインストール&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;にPryを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# rails console(もしくは、rails c)でirbの代わりにpryを使われる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-doc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# methodを表示&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-byebug&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# デバッグを実施(Ruby 2.0以降で動作する)&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-stack_explorer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# スタックをたどれる&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bundlerでgemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;では、&lt;code&gt;rails c&lt;/code&gt;でconsoleを開きましょう。&lt;br /&gt;
consoleに&lt;code&gt;pry(main)&lt;/code&gt;と表示されれば、Pryが使われている証拠です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails c
&lt;span class=&quot;synType&quot;&gt;Loading&lt;/span&gt; development environment (&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4.1&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;)
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;] pry(main)&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ちなみに、Pryを入れていない場合は、Rubyに標準で付属しているirbが使われます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails c
&lt;span class=&quot;synType&quot;&gt;Loading&lt;/span&gt; development environment (&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4.1&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;)
irb(main):&lt;span class=&quot;synConstant&quot;&gt;001&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;pry-pry&quot;&gt;3. pryコマンド&lt;/h3&gt;Railsのルートで、&lt;code&gt;rails c&lt;/code&gt;でPryを使うことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails c
&lt;span class=&quot;synType&quot;&gt;Loading&lt;/span&gt; development environment (&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4.1&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;)
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;] pry(main)&amp;gt; a = &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;] pry(main)&amp;gt; watch a  &lt;span class=&quot;synComment&quot;&gt;# watch:変更されたら通知するように設定するコマンド&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Watching&lt;/span&gt; a
&lt;span class=&quot;synConstant&quot;&gt;watch&lt;/span&gt;: a =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;] pry(main)&amp;gt; a = &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;watch&lt;/span&gt;: a =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt;          &lt;span class=&quot;synComment&quot;&gt;# 変更されたので通知される&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Pryでは次のようなコマンドが使えますので、ざっと確認しておいて損はないと思います。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;ヘルプ
  help               コマンドの情報を表示

コンテキスト
  cd                 新しいコンテキスト（オブジェクトかスコープ）に移動
  find-method        現在のclass/module、ネームスペース内のメソッドを探す
  ls                 現在のスコープ内の変数やメソッドのリストを表示
  pry-backtrace      pryセッションのバックトレースを表示
  raise-up           現在のpryインスタンス外でExceptionを発生させる
  reset              Reset the repl to a clean state.
  watch              Expressionの値を確認し、変わったときにNotificationを表示する
  whereami           現在のコンテキスト周辺のコードを表示
  wtf?               直近のExceptionのバックトレースを表示

編集
  /^\s*!\s*$/        入力バッファをクリア
  amend-line         マルチラインモードでの入力ラインを修正
  edit               Invoke the default editor on a file.
  hist               コマンド入力の履歴を表示する
  play               Playback a string variable, method, line, or file as input.
  show-input         Show the contents of the input buffer for the current multi-line expression.

Introspection
  ri                 View ri documentation.
  show-doc           Show the documentation for a method or class.
  show-source        Show the source for a method or class.
  stat               View method information and set _file_ and _dir_ locals.

Gems
  gem-cd             Change working directory to specified gem&amp;#39;s directory.
  gem-install        Install a gem and refresh the gem cache.
  gem-list           List and search installed gems.
  gem-open           Opens the working directory of the gem in your editor.

Commands
  import-set         Import a pry command set.
  install-command    Install a disabled command.

Aliases
  !!!                Alias for `exit-program`
  !!@                Alias for `exit-all`
  $                  Alias for `show-source`
  ?                  Alias for `show-doc`
  @                  Alias for `whereami`
  breakpoint         Alias for `break`
  breaks             Alias for `breakpoints`
  c                  Alias for `continue`
  clipit             Alias for `gist --clip`
  f                  Alias for `finish`
  file-mode          Alias for `shell-mode`
  history            Alias for `hist`
  n                  Alias for `next`
  quit               Alias for `exit`
  quit-program       Alias for `exit-program`
  reload-method      Alias for `reload-code`
  s                  Alias for `step`
  show-method        Alias for `show-source`

Input and output
  .&amp;lt;shell command&amp;gt;   All text following a &amp;#39;.&amp;#39; is forwarded to the shell.
  cat                Show code from a file, pry&amp;#39;s input buffer, or the last exception.
  change-inspector   Change the current inspector proc.
  change-prompt      Change the current prompt.
  fix-indent         Correct the indentation for contents of the input buffer
  list-inspectors    List the inspector procs available for use.
  list-prompts       List the prompts available for use.
  save-file          Export to a file using content from the repl.
  shell-mode         Toggle shell mode. bring in pwd prompt and file completion.

Misc
  gist               Upload code, docs, history to https://gist.github.com/.
  pry-version        Show pry version.
  reload-code        Reload the source file that contains the specified code object.
  toggle-color       Toggle syntax highlighting.

Navigating pry
  !pry               Start a pry session on current self.
  disable-pry        Stops all future calls to pry and exits the current session.
  exit               Pop the previous binding.
  exit-all           End the current pry session.
  exit-program       End the current program.
  jump-to            Jump to a binding further up the stack.
  nesting            Show nesting information.
  switch-to          Start a new subsession on a binding in the current stack.

Prompts
  simple-prompt      Toggle the simple prompt.&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;pry-pry-rails&quot;&gt;4. pry-railsコマンド&lt;/h3&gt;pry-railsを入れることで、モデルやルートなどを確認することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails c
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;] pry(main)&amp;gt; show-models   &lt;span class=&quot;synComment&quot;&gt;# すべてのモデルを表示する&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 今回定義したCommentとUserモデルが表示さています&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Comment&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: integer
  &lt;span class=&quot;synConstant&quot;&gt;body&lt;/span&gt;: string
  &lt;span class=&quot;synConstant&quot;&gt;user_id&lt;/span&gt;: integer
  &lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;: datetime
  &lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;: datetime
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: integer
  &lt;span class=&quot;synConstant&quot;&gt;firstname&lt;/span&gt;: string
  &lt;span class=&quot;synConstant&quot;&gt;lastname&lt;/span&gt;: string
  &lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;: string
  &lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;: datetime
  &lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;: datetime
  has_many &lt;span class=&quot;synConstant&quot;&gt;:comments&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;では、pry-railsのコマンド一覧です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;
  recognize-path     どのルートにマッチする&lt;span class=&quot;synType&quot;&gt;URL&lt;/span&gt;か確認する
  show-middleware    すべてのミドルウェアを表示する
  show-model         引数で指定したモデルを表示する
  show-models        すべてのモデルを表示する
  show-routes        すべてのルートを表示する
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;pry-pry-byebug&quot;&gt;5. pry-byebugでデバッグ&lt;/h3&gt;pry-byebugを使うことにより、デバッグを実行することが可能です。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;ブレークポイントを設定&lt;/h4&gt;
    &lt;p&gt;binding.pryとソースに入力し、そこがブレークポイントになります。&lt;br /&gt;
そこの箇所でプログラムが中断されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/users_controller.rb&lt;/span&gt;
  ...
  &lt;span class=&quot;synComment&quot;&gt;# POST /users&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# POST /users.json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.new(user_params)
    binding.pry &lt;span class=&quot;synComment&quot;&gt;# ブレークポイントを設定&lt;/span&gt;
    puts &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

    respond_to &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;|
      &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;.save
        format.html { redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;User was successfully created.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
        format.json { render &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:created&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;location&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt; }
      &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
        format.html { render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt; }
        format.json { render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;.errors, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:unprocessable_entity&lt;/span&gt; }
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  ...
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;プログラム実行&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;.&lt;/code&gt;をつけることでTerminalコマンドを実行することができるので、&lt;code&gt;.rails s&lt;/code&gt;とPry上で実行して、サーバーを起動しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;29&lt;/span&gt;] pry(main)&amp;gt; .rails s
=&amp;gt; &lt;span class=&quot;synType&quot;&gt;Booting&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;WEBrick&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4.1&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt; application starting &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt; development on http&lt;span class=&quot;synConstant&quot;&gt;:/&lt;/span&gt;/&lt;span class=&quot;synConstant&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;0.0&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;3000&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synType&quot;&gt;Run&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails server -h&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; more startup options
=&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;Notice&lt;/span&gt;: server is listening on all interfaces (&lt;span class=&quot;synConstant&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;0.0&lt;/span&gt;). &lt;span class=&quot;synType&quot;&gt;Consider&lt;/span&gt; using &lt;span class=&quot;synConstant&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;0.1&lt;/span&gt; (--binding option)
=&amp;gt; &lt;span class=&quot;synType&quot;&gt;Ctrl&lt;/span&gt;-&lt;span class=&quot;synType&quot;&gt;C&lt;/span&gt; to shutdown server
[&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;01&lt;/span&gt;] &lt;span class=&quot;synType&quot;&gt;INFO&lt;/span&gt;  &lt;span class=&quot;synType&quot;&gt;WEBrick&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;1.3&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;01&lt;/span&gt;] &lt;span class=&quot;synType&quot;&gt;INFO&lt;/span&gt;  ruby &lt;span class=&quot;synConstant&quot;&gt;2.0&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; (&lt;span class=&quot;synConstant&quot;&gt;2013&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;06&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;27&lt;/span&gt;) [x86_64-darwin13.&lt;span class=&quot;synConstant&quot;&gt;2.0&lt;/span&gt;]
[&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;01&lt;/span&gt;] &lt;span class=&quot;synType&quot;&gt;INFO&lt;/span&gt;  &lt;span class=&quot;synType&quot;&gt;WEBrick&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;HTTPServer&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#start: pid=13779 port=3000&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、ユーザー新規画面を開きます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141024/20141024011854.png&quot; alt=&quot;f:id:nipe880324:20141024011854p:plain:w480&quot; title=&quot;f:id:nipe880324:20141024011854p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;ステップ実行&lt;/h4&gt;
    &lt;p&gt;「Create User」ボタンを押すとサーバーを起動させていたconsoleが次のようにブレークポイントを設定した箇所で止まっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Started&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;0.1&lt;/span&gt; at &lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;33&lt;/span&gt; +0900
&lt;span class=&quot;synType&quot;&gt;Processing&lt;/span&gt; by &lt;span class=&quot;synType&quot;&gt;UsersController&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#create as HTML&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;Parameters&lt;/span&gt;: {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;✓&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;authenticity_token&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;7T1ISCnaEA5UqHK/FEn7E820I1ql6k5UdvaZQxTKC20=&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;太郎&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;lastname&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;鈴木&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;t.suzuki@test.com&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}

&lt;span class=&quot;synConstant&quot;&gt;From&lt;/span&gt;: /&lt;span class=&quot;synType&quot;&gt;Users&lt;/span&gt;/nipe0324/rails_samples/pry_test/app/controllers/users_controller.rb @ line &lt;span class=&quot;synConstant&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;UsersController&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#create:&lt;/span&gt;

    &lt;span class=&quot;synConstant&quot;&gt;26&lt;/span&gt;: &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;27&lt;/span&gt;:   &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.new(user_params)
    &lt;span class=&quot;synConstant&quot;&gt;28&lt;/span&gt;:   binding.pry &lt;span class=&quot;synComment&quot;&gt;# ブレークポイントを設定&lt;/span&gt;
 =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;29&lt;/span&gt;:   puts &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;30&lt;/span&gt;:
    &lt;span class=&quot;synConstant&quot;&gt;31&lt;/span&gt;:   respond_to &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;|
    &lt;span class=&quot;synConstant&quot;&gt;32&lt;/span&gt;:     &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;.save
    &lt;span class=&quot;synConstant&quot;&gt;33&lt;/span&gt;:       format.html { redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;User was successfully created.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
    &lt;span class=&quot;synConstant&quot;&gt;34&lt;/span&gt;:       format.json { render &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:created&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;location&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt; }
    &lt;span class=&quot;synConstant&quot;&gt;35&lt;/span&gt;:     &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;36&lt;/span&gt;:       format.html { render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt; }
    &lt;span class=&quot;synConstant&quot;&gt;37&lt;/span&gt;:       format.json { render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;.errors, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:unprocessable_entity&lt;/span&gt; }
    &lt;span class=&quot;synConstant&quot;&gt;38&lt;/span&gt;:     &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;39&lt;/span&gt;:   &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;40&lt;/span&gt;: &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;] pry(&lt;span class=&quot;synComment&quot;&gt;#&amp;lt;UsersController&amp;gt;)&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;通常のRubyやPryコマンドが使えるので、変数の内容などを表示できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;] pry(&lt;span class=&quot;synComment&quot;&gt;#&amp;lt;UsersController&amp;gt;)&amp;gt; p @user&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&amp;lt;User id: nil, firstname: &amp;quot;太郎&amp;quot;, lastname: &amp;quot;鈴木&amp;quot;, email: &amp;quot;t.suzuki@test.com&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#&amp;lt;User id: nil, firstname: &amp;quot;太郎&amp;quot;, lastname: &amp;quot;鈴木&amp;quot;, email: &amp;quot;t.suzuki@test.com&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;では、次の行へステップ実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;] pry(&lt;span class=&quot;synComment&quot;&gt;#&amp;lt;UsersController&amp;gt;)&amp;gt; next  # 次の行へ実行&lt;/span&gt;
execute     &lt;span class=&quot;synComment&quot;&gt;# puts &amp;quot;execute&amp;quot; でexecuteが出力された&lt;/span&gt;

&lt;span class=&quot;synConstant&quot;&gt;From&lt;/span&gt;: /&lt;span class=&quot;synType&quot;&gt;Users&lt;/span&gt;/nipe0324/&lt;span class=&quot;synType&quot;&gt;Google&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Drive&lt;/span&gt;/rails/rails_samples/pry_test/app/controllers/users_controller.rb @ line &lt;span class=&quot;synConstant&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;UsersController&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#create:&lt;/span&gt;

    &lt;span class=&quot;synConstant&quot;&gt;26&lt;/span&gt;: &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;27&lt;/span&gt;:   &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.new(user_params)
    &lt;span class=&quot;synConstant&quot;&gt;28&lt;/span&gt;:   binding.pry &lt;span class=&quot;synComment&quot;&gt;# ブレークポイントを設定&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;29&lt;/span&gt;:   puts &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;30&lt;/span&gt;:
 =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;31&lt;/span&gt;:   respond_to &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;|
    &lt;span class=&quot;synConstant&quot;&gt;32&lt;/span&gt;:     &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;.save
    &lt;span class=&quot;synConstant&quot;&gt;33&lt;/span&gt;:       format.html { redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;User was successfully created.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
    &lt;span class=&quot;synConstant&quot;&gt;34&lt;/span&gt;:       format.json { render &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:created&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;location&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt; }
    &lt;span class=&quot;synConstant&quot;&gt;35&lt;/span&gt;:     &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;36&lt;/span&gt;:       format.html { render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt; }
    &lt;span class=&quot;synConstant&quot;&gt;37&lt;/span&gt;:       format.json { render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;.errors, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:unprocessable_entity&lt;/span&gt; }
    &lt;span class=&quot;synConstant&quot;&gt;38&lt;/span&gt;:     &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;39&lt;/span&gt;:   &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;40&lt;/span&gt;: &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;] pry(&lt;span class=&quot;synComment&quot;&gt;#&amp;lt;UsersController&amp;gt;)&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;といったようにデバッグができます。&lt;/p&gt;&lt;p&gt;pry-byebugで使えるコマンドは次のとおりです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Pry&lt;/span&gt;-byebug (v2.&lt;span class=&quot;synConstant&quot;&gt;0.0&lt;/span&gt;)
  &lt;span class=&quot;synStatement&quot;&gt;break&lt;/span&gt;              ブレークポイントをセットか編集する
  breakpoints        定義されたブレークポイントのリストを表示
  continue           プログラム実行をコンティニューする。そして、&lt;span class=&quot;synType&quot;&gt;Pry&lt;/span&gt;セッションを終了させる。
  finish             現在のスタックフレームが終わるまで実行する
  &lt;span class=&quot;synStatement&quot;&gt;next&lt;/span&gt;               現在のスタックフレーム内の次の列を実行する
  step               次の行かメソッドの内をステップ実行する
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;pry-pry-stack_explorer&quot;&gt;pry-stack_explorerでより深くデバッグ&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;では、また、画面からUserを作成しましょう。&lt;br /&gt;
すると、&lt;code&gt;binding.pry&lt;/code&gt;を記述したブレークポイントで止まります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Frame&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;number&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;/&lt;span class=&quot;synConstant&quot;&gt;76&lt;/span&gt;

&lt;span class=&quot;synConstant&quot;&gt;From&lt;/span&gt;: /&lt;span class=&quot;synType&quot;&gt;Users&lt;/span&gt;/nipe0324/&lt;span class=&quot;synType&quot;&gt;Google&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Drive&lt;/span&gt;/rails/rails_samples/pry_test/app/controllers/users_controller.rb @ line &lt;span class=&quot;synConstant&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;UsersController&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#create:&lt;/span&gt;

    &lt;span class=&quot;synConstant&quot;&gt;26&lt;/span&gt;: &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;27&lt;/span&gt;:   &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.new(user_params)
    &lt;span class=&quot;synConstant&quot;&gt;28&lt;/span&gt;:   binding.pry &lt;span class=&quot;synComment&quot;&gt;# ブレークポイントを設定&lt;/span&gt;
 =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;29&lt;/span&gt;:   puts &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;30&lt;/span&gt;: 
    &lt;span class=&quot;synConstant&quot;&gt;31&lt;/span&gt;:   respond_to &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;|
    &lt;span class=&quot;synConstant&quot;&gt;32&lt;/span&gt;:     &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;.save
    &lt;span class=&quot;synConstant&quot;&gt;33&lt;/span&gt;:       format.html { redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;User was successfully created.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
    &lt;span class=&quot;synConstant&quot;&gt;34&lt;/span&gt;:       format.json { render &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:created&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;location&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt; }
    &lt;span class=&quot;synConstant&quot;&gt;35&lt;/span&gt;:     &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;36&lt;/span&gt;:       format.html { render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt; }
    &lt;span class=&quot;synConstant&quot;&gt;37&lt;/span&gt;:       format.json { render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;.errors, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:unprocessable_entity&lt;/span&gt; }
    &lt;span class=&quot;synConstant&quot;&gt;38&lt;/span&gt;:     &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;39&lt;/span&gt;:   &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;40&lt;/span&gt;: &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;次にpry上で&lt;code&gt;show-stack&lt;/code&gt;と打つとスタックトレースが表示されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;] pry(&lt;span class=&quot;synComment&quot;&gt;#&amp;lt;UsersController&amp;gt;)&amp;gt; show-stack&lt;/span&gt;
when_started hook &lt;span class=&quot;synConstant&quot;&gt;failed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;NoMethodError&lt;/span&gt;: &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt; method &lt;span class=&quot;synSpecial&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;eval&#39; called for nil:NilClass&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;/Users/nipe0324/.rbenv/versions/2.1.2/lib/ruby/gems/2.1.0/gems/pry-stack_explorer-0.4.9.1/lib/pry-stack_explorer.rb:109:in &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;`&lt;/span&gt;bindings_equal?&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;(see _pry_.hooks.errors to debug)&lt;/span&gt;

&lt;span class=&quot;synConstant&quot;&gt;Showing all accessible frames in stack (77 in total):&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;=&amp;gt; #0  create &amp;lt;UsersController#create()&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;   #1 [block]   block in run &amp;lt;PryByebug::Processor#run(initial=?, &amp;amp;_block)&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;   #2 [method]  run &amp;lt;PryByebug::Processor#run(initial=?, &amp;amp;_block)&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;   #3 [method]  resume_pry &amp;lt;PryByebug::Processor#resume_pry(context)&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;   #4 [method]  at_line &amp;lt;PryByebug::Processor#at_line(context, _file, _line)&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;   #5 [method]  at_line &amp;lt;Byebug::Context#at_line(file, line)&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;   #6 [method]  create &amp;lt;UsersController#create()&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;   #7 [method]  send_action &amp;lt;ActionController::ImplicitRender#send_action(method, *args)&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;   #8 [method]  process_action &amp;lt;AbstractController::Base#process_action(method_name, *args)&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;   #9 [method]  process_action &amp;lt;ActionController::Rendering#process_action(*arg1)&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、&lt;code&gt;frame [スタック番号]&lt;/code&gt;を打つと、スタックを辿れ、そこでコマンドを実行することができます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[2] pry(#&amp;lt;UsersController&amp;gt;)&amp;gt; frame 7

Frame number: 7/76
Frame type: method

From: /Users/nipe0324/.rbenv/versions/2.1.2/lib/ruby/gems/2.1.0/gems/actionpack-4.1.5/lib/action_controller/metal/implicit_render.rb @ line 4 ActionController::ImplicitRender#send_action:

    3: def send_action(method, *args)
 =&amp;gt; 4:   ret = super
    5:   default_render unless performed?
    6:   ret
    7: end&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
Pryを使うことで、rails consoleを拡張できるだけでなく、有用な情報を簡単に表示できること、デバッグができることなど便利ですので、是非使いこなせるようになってみるといいかもしれません。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rweng/pry-rails&quot;&gt;rweng/pry-rails &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pry/pry-stack_explorer&quot;&gt;pry/pry-stack_explorer &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;パーフェクトRuby on Rails&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Fri, 24 Oct 2014 01:20:24 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450069938973</guid>
          
            <category>Rails gem</category>
          
            <category>開発を効率化する</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsの開発効率を上げる - guard-rspec 自動でテスト(RSpec)を実行させる</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141021/1413819783</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141016/20141016010205.png&quot; alt=&quot;f:id:nipe880324:20141016010205p:plain:w320&quot; title=&quot;f:id:nipe880324:20141016010205p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;Guardとは&lt;/h3&gt;
    &lt;p&gt;Guardとはファイルの変更を検知して、自動的にさまざまな処理を実行してくれる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;のGemです。&lt;br /&gt;
これ単体で使うよりも、他の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB&quot;&gt;ツール&lt;/a&gt;と連携し、自動的に処理を行うことにより開発効率を上げることができます。&lt;/p&gt;&lt;p&gt;メジャーどころとしては、次の３つだと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20141016/1413389293&quot;&gt;guard-livereload - Viewファイルの変更したときに自動的にブラウザをリロードする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;guard-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rspec&quot;&gt;rspec&lt;/a&gt; - specファイルを変更したときに自動的に&lt;code&gt;RSpec&lt;/code&gt;を実行する&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20141019/1413698128&quot;&gt;guard-rubocop - ファイルを修正したときに&lt;code&gt;RuboCop&lt;/code&gt;を実行する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;本記事では、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;へ&lt;code&gt;guard-rspec&lt;/code&gt;の導入方法を記載します。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RSpec&quot;&gt;RSpec&lt;/a&gt;を自動的に実行することで、ソースがいつ壊れたか簡単に検知できるようにします。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;対象読者&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;の開発効率を上げたい方&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;確認バージョン&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Mac OSX 10.9&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;  2.0&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.1&lt;/li&gt;
&lt;li&gt;guard 2.6.1&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rspec&quot;&gt;rspec&lt;/a&gt;-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 3.0.2&lt;/li&gt;
&lt;li&gt;guard-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rspec&quot;&gt;rspec&lt;/a&gt; 4.2.10&lt;/li&gt;
&lt;li&gt;terminal-notifier-guard 1.5.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#guard-rspec-create-rails&quot;&gt;Railsプロジェクトの作成 + RSpec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#guard-rspec-getting-started&quot;&gt;guard-rspecの導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#guard-rspec-options&quot;&gt;guard-rspecのオプション&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;guard-rspec-create-rails&quot;&gt;1. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;プロジェクトの作成 + &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RSpec&quot;&gt;RSpec&lt;/a&gt;&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;まず、Guardを実行させるベースとなる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のプロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new guard_test
cd guard_test&lt;/pre&gt;&lt;p&gt;次に、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RSpec&quot;&gt;RSpec&lt;/a&gt;を&lt;code&gt;Gemfile&lt;/code&gt;に追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# Gemfile

group :development, :test do
  gem &amp;#39;rspec-rails&amp;#39;
end&lt;/pre&gt;&lt;p&gt;Bundlerで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rspec&quot;&gt;rspec&lt;/a&gt;-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt;を入れます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;そして、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RSpec&quot;&gt;RSpec&lt;/a&gt;の設定ファイルを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g rspec:install
      create  .rspec
      create  spec
      create  spec/spec_helper.rb
      create  spec/rails_helper.rb&lt;/pre&gt;&lt;p&gt;Warningがたくさん表示されてしまうので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rspec&quot;&gt;rspec&lt;/a&gt;コマンドのオプションを記載するファイルの&lt;code&gt;.rspec&lt;/code&gt;を次のように修正します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# .rspec

--color
--require spec_helper&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、簡単なProductのScaffoldを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g scaffold Product name:string price:integer discontinued:boolean&lt;/pre&gt;&lt;p&gt;マイグレートします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:migrate&lt;/pre&gt;&lt;p&gt;では&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RSpec&quot;&gt;RSpec&lt;/a&gt;を実行してみましょう。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rspec

...
Finished in 0.27292 seconds (files took 2.15 seconds to load)
30 examples, 0 failures, 17 pending&lt;/pre&gt;&lt;p&gt;30件のテストの内、失敗は0件、17件は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DA%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0&quot;&gt;ペンディング&lt;/a&gt;。つまり、13件が成功しました。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;guard-rspec-getting-started&quot;&gt;2. guard-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rspec&quot;&gt;rspec&lt;/a&gt;の導入&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;では、準備が整い舞いましたので、&lt;code&gt;guard-rspec&lt;/code&gt;を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;プロジェクトに導入していきます。&lt;/p&gt;&lt;p&gt;まずは、&lt;code&gt;Gemfile&lt;/code&gt;に&lt;code&gt;guard-rspec&lt;/code&gt;と&lt;code&gt;terminal-notifier-guard&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;guard-rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# guardでrspecを動かす&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;terminal-notifier&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;terminal-notifier-guard&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# デスクトップ通知を行う&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bundlerを実行して、インストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Guardfile&lt;/code&gt;（Guardの設定を記載するファイル）に「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RSpec&quot;&gt;RSpec&lt;/a&gt;用の設定」を追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;guard init rspec&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
作成された&lt;code&gt;Guardfile&lt;/code&gt;の中身を確認してみます。&lt;br /&gt;
&lt;code&gt;guard :rspec&lt;/code&gt;のブロック内に監視対象と実行するSpecファイルが記載されています。&lt;br /&gt;
具体的には、&lt;code&gt;watch&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で「監視するファイル」を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;で記載し、ブロック内で監視するファイルが変更されたときに「実行するファイル」を指定します。&lt;/p&gt;&lt;p&gt;以下の設定で、適切な単位でのテスト実行がされ、失敗時にはデスクトップに通知されるため修正はしません。&lt;br /&gt;
&lt;code&gt;guard-rspec&lt;/code&gt;のオプションについては、「&lt;a href=&quot;#guard-rspec-options&quot;&gt;guard-rspecのオプション&lt;/a&gt;」を参照して下さい。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Guardfile&lt;/span&gt;

guard &lt;span class=&quot;synConstant&quot;&gt;:rspec&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.+&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_spec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;$}&lt;/span&gt;)
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;lib/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(.+)\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;$}&lt;/span&gt;)     { |&lt;span class=&quot;synIdentifier&quot;&gt;m&lt;/span&gt;| &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/lib/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;m[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_spec.rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
  watch(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/spec_helper.rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)  { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }

  &lt;span class=&quot;synComment&quot;&gt;# Rails example&lt;/span&gt;
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;app/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(.+)\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;$}&lt;/span&gt;)                           { |&lt;span class=&quot;synIdentifier&quot;&gt;m&lt;/span&gt;| &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;m[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_spec.rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;app/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(.*)(\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;erb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;|\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;haml&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;|\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;slim&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)$}&lt;/span&gt;)          { |&lt;span class=&quot;synIdentifier&quot;&gt;m&lt;/span&gt;| &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;m[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}#{&lt;/span&gt;m[&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_spec.rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;app/controllers/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(.+)&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;$}&lt;/span&gt;)  { |&lt;span class=&quot;synIdentifier&quot;&gt;m&lt;/span&gt;| [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/routing/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;m[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_routing_spec.rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;m[&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;s/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;m[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;m[&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_spec.rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/acceptance/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;m[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_spec.rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] }
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/support/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(.+)\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;$}&lt;/span&gt;)                  { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
  watch(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;config/routes.rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)                           { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/routing&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
  watch(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;app/controllers/application_controller.rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)  { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/controllers&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }

  &lt;span class=&quot;synComment&quot;&gt;# Capybara features specs&lt;/span&gt;
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;app/views/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(.+)&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.*\.(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;erb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;haml&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;slim&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)$}&lt;/span&gt;)     { |&lt;span class=&quot;synIdentifier&quot;&gt;m&lt;/span&gt;| &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/features/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;m[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_spec.rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }

  &lt;span class=&quot;synComment&quot;&gt;# Turnip features and steps&lt;/span&gt;
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/acceptance/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(.+)\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;$}&lt;/span&gt;)
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/acceptance/steps/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(.+)&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_steps&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;$}&lt;/span&gt;)   { |&lt;span class=&quot;synIdentifier&quot;&gt;m&lt;/span&gt;| &lt;span class=&quot;synType&quot;&gt;Dir&lt;/span&gt;[&lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;**/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;m[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;.feature&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)][&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;] || &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/acceptance&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;||&amp;lt;


では、&amp;lt;code&amp;gt;&lt;span class=&quot;synType&quot;&gt;Guard&lt;/span&gt;&amp;lt;/code&amp;gt;を実行します。
&amp;gt;||
bundle exec guard
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;※&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;プロジェクトの配置パスに日本語が入っていると、「&lt;b&gt;E, [2014-10-16T00:43:38.055423 #28197] &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ERROR&quot;&gt;ERROR&lt;/a&gt; -- : run() in thread failed: inspected result must be ASCII only or use the same encoding with default external:/Users/nipe0324/.rbenv/versions/2.0.0-p247/lib/&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ruby&quot;&gt;ruby&lt;/a&gt;/gems/2.0.0/gems/listen-2.7.9/lib/listen/listener.rb:329:in `inspect&#39;&lt;/b&gt;」のようなエラーが発生するのでご注意ください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Pendingである&lt;code&gt;product_spec.rb&lt;/code&gt;にテストを追加してみましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:model&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;空文字を許容しないこと&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      product = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;discontinued&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
      expect(product).to be_invalid
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;spceファイルを保存すると、guardが変更を検知し、特定のspecファイルを自動的に実行します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;15:50:03 - INFO - Running: ./spec/models/product_spec.rb:5
Run options: include {:locations=&amp;gt;{&amp;#34;./spec/models/product_spec.rb&amp;#34;=&amp;gt;[5]}}
F

Failures:

  1) Product#name 空文字を許容しないこと
     Failure/Error: expect(product).to be_invalid
       expected `#&amp;lt;Product id: nil, name: &amp;#34;&amp;#34;, price: 100, discontinued: false, created_at: nil, updated_at: nil&amp;gt;.invalid?` to return true, got false
     # ./spec/models/product_spec.rb:7:in `block (3 levels) in &amp;lt;top (required)&amp;gt;&amp;#39;

Finished in 0.00922 seconds (files took 2.5 seconds to load)
1 example, 1 failure

Failed examples:

rspec ./spec/models/product_spec.rb:5 # Product#name 空文字を許容しないこと&lt;/pre&gt;&lt;p&gt;さらに、テストが失敗するので、右上にデスクトップ通知が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141019/20141019155242.png&quot; alt=&quot;f:id:nipe880324:20141019155242p:plain:w320&quot; title=&quot;f:id:nipe880324:20141019155242p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;では、Productモデルを実装しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;保存するとまた特定のspecファイルのみ実行され、実行結果がデスクトップに表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141019/20141019155503.png&quot; alt=&quot;f:id:nipe880324:20141019155503p:plain:w320&quot; title=&quot;f:id:nipe880324:20141019155503p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;これで、自動的に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RSpec&quot;&gt;RSpec&lt;/a&gt;を実行する環境を構築できました。&lt;br /&gt;
また、guardを実行しているコンソール上で&lt;code&gt;Enter&lt;/code&gt;を押すと、全てのSpecファイルを実行することが可能です。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;guard-rspec-options&quot;&gt;3. guard-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rspec&quot;&gt;rspec&lt;/a&gt;のオプション&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;次のように&lt;code&gt;guard-rspec&lt;/code&gt;にオプションを指定することが可能です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Guardfile&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# bundle execをつけて、rspecコマンドを実行する&lt;/span&gt;
guard &lt;span class=&quot;synConstant&quot;&gt;:rspec&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;cmd&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;bundle exec rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;指定できるオプションは次のようになっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synConstant&quot;&gt;cmd&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;zeus rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;      &lt;span class=&quot;synComment&quot;&gt;# rspecコマンドの前に特定のコマンドをつけてrspecを実行できる（デフォルト値：&#39;rspec&#39;）&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;cmd_additional_args&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;-f progress&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# rspecのオプションを指定できる&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;spec_paths&lt;/span&gt;: [&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;]   &lt;span class=&quot;synComment&quot;&gt;# specファイルのカスタム配列を指定できる&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;failed_mode&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:focus&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# specが失敗した時の挙動&lt;/span&gt;
                       &lt;span class=&quot;synComment&quot;&gt;# 使用可能な値:&lt;/span&gt;
                       &lt;span class=&quot;synComment&quot;&gt;#  :focus - focus on the first 10 failed specs, rerun till they pass&lt;/span&gt;
                       &lt;span class=&quot;synComment&quot;&gt;#  :keep - keep failed specs until they pass (add them to new ones)&lt;/span&gt;
                       &lt;span class=&quot;synComment&quot;&gt;#  :none (default) - just report&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;all_after_pass&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# specファイルが変更されたら全てのspecを実行する（デフォルト値：false）&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;all_on_start&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;     &lt;span class=&quot;synComment&quot;&gt;# guard起動時に全てのspecを実行する（デフォルト値：false）&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;launchy&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;           &lt;span class=&quot;synComment&quot;&gt;# rspecの結果ファイルの出力パスを指定する。 例： ./tmp/spec_results.html（デフォルト値：nil）&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;notification&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# specが実行されたあとに通知を表示するか指定する（デフォルト値： true）&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;run_all&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;cmd&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;custom rspec command&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;custom message&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; } &lt;span class=&quot;synComment&quot;&gt;# Custom options to use when running all specs&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;My project&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# 通知のタイトルを指定できる（デフォルト値：&#39;RSpec results&#39;）&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/guard/guard-rspec&quot;&gt;guard/guard-rspec &amp;middot; GitHub&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。分からない箇所や間違いなどありましたらコメントください。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Tue, 21 Oct 2014 00:43:03 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450069240623</guid>
          
            <category>開発を効率化する</category>
          
            <category>Rails gem</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsの開発効率を上げる - guard-rubocopを使ってRailsで自動で静的コード解析ツール(RuboCop)を実行させる</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141019/1413698128</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141016/20141016010205.png&quot; alt=&quot;f:id:nipe880324:20141016010205p:plain:w320&quot; title=&quot;f:id:nipe880324:20141016010205p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;Guardとは&lt;/h3&gt;
    &lt;p&gt;Guardとはファイルの変更を検知して、自動的にさまざまな処理を実行してくれるRubyのGemです。&lt;br /&gt;
これ単体で使うよりも、他のツールと連携し、自動的に処理を行い開発効率を上げるために使います。&lt;br /&gt;
メジャーどころとしては、次の３つだと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20141016/1413389293&quot;&gt;guard-livereload - Viewファイルの変更したときに自動的にブラウザをリロードする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20141021/1413819783&quot;&gt;guard-rspec - specファイルを変更したときに自動的に&lt;code&gt;RSpec&lt;/code&gt;を実行する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;guard-rubocop - ファイルを修正したときに&lt;code&gt;RuboCop&lt;/code&gt;を実行する&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
本記事では、Railsへ&lt;code&gt;guard-rubocop&lt;/code&gt;の導入方法を記載します。&lt;br /&gt;
また、&lt;code&gt;rubocop&lt;/code&gt;は自動で動くので、失敗したときに、Mac OS X の通知センターの機能を使って通知するようにします。&lt;/p&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141019/20141019145153.png&quot; alt=&quot;f:id:nipe880324:20141019145153p:plain:w320&quot; title=&quot;f:id:nipe880324:20141019145153p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;対象読者&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Railsの開発効率を上げたい方&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;確認バージョン&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Mac OSX 10.9&lt;/li&gt;
&lt;li&gt;Ruby  2.0&lt;/li&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;guard 2.6.1&lt;/li&gt;
&lt;li&gt;rubocop 0.26.1&lt;/li&gt;
&lt;li&gt;guard-rubocop 1.1.0&lt;/li&gt;
&lt;li&gt;terminal-notifier-guard 1.5.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#guard-rubocop-create-rails&quot;&gt;Railsプロジェクトの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#guard-rubocop-getting-started&quot;&gt;guard-rubocopの導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#guard-rubocop-options&quot;&gt;guard-rubocopのオプション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#guard-rubocop-rspec&quot;&gt;guard-rubocopとguard-rspecの混合&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;h3 id=&quot;guard-rubocop-create-rails&quot;&gt;1. Railsプロジェクトの作成&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;まず、Guardを実行させるベースとなるRailsのプロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new guard_test&lt;/pre&gt;&lt;p&gt;次に、簡単なProductのScaffoldを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;cd guard_test
rails g scaffold Product name:string price:integer discontinued:boolean&lt;/pre&gt;&lt;p&gt;マイグレートします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;guard-rubocop-getting-started&quot;&gt;2. guard-rubocopの導入&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;の&lt;code&gt;developemnt&lt;/code&gt;グループ内に必要なgemを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rubocop&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;guard-rubocop&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;terminal-notifier-guard&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bundlerを実行して、インストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;Guard定義が記載された&lt;code&gt;Guardfile&lt;/code&gt;(Guardの設定ファイル)を作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;guard init rubocop&lt;/pre&gt;&lt;p&gt;コマンドが上手くいかない場合は、下記を実行して下さい。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;gem install rubocop
gem install guard-rubocop
gem install terminal-notifier-guard&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
作成された&lt;code&gt;Guardfile&lt;/code&gt;の中身を確認してみます。&lt;br /&gt;
&lt;code&gt;rubocop&lt;/code&gt;のブロック内に監視対象が記載されています。&lt;br /&gt;
&lt;code&gt;watch&lt;/code&gt;メソッドで監視するファイルを正規表現で記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Guardfile&lt;/span&gt;

guard &lt;span class=&quot;synConstant&quot;&gt;:rubocop&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{.+\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;$}&lt;/span&gt;)
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{(?:.+&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)?\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rubocop&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;yml&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;$}&lt;/span&gt;) { |&lt;span class=&quot;synIdentifier&quot;&gt;m&lt;/span&gt;| &lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.dirname(m[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]) }
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;次のように修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Guardfile&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# guard :rubocop do&lt;/span&gt;
guard &lt;span class=&quot;synConstant&quot;&gt;:rubocop&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;all_on_start&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;cli&lt;/span&gt;: [&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;clang&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;--rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;] &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{.+\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;$}&lt;/span&gt;)
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{.+\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rake&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;$}&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# .rakeファイルも監視対象にする&lt;/span&gt;
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{(?:.+&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)?\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rubocop&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;yml&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;$}&lt;/span&gt;) { |&lt;span class=&quot;synIdentifier&quot;&gt;m&lt;/span&gt;| &lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.dirname(m[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]) }
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;上記の設定でguard起動時にrubocopを実行させず、失敗時に通知センターに通知がされます。&lt;br /&gt;
rubocopの詳細なオプションについては、本記事下記の「&lt;a href=&quot;#guard-rubocop-options&quot;&gt;guard-rubocopのオプション&lt;/a&gt;」を参照して下さい。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;では、&lt;code&gt;Guard&lt;/code&gt;を実行します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle exec guard&lt;/pre&gt;&lt;p&gt;&lt;i&gt;※Railsプロジェクトの配置パスに日本語が入っていると、「&lt;b&gt;E, [2014-10-16T00:43:38.055423 #28197] ERROR -- : run() in thread failed: inspected result must be ASCII only or use the same encoding with default external:/Users/nipe0324/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/listen-2.7.9/lib/listen/listener.rb:329:in `inspect&#39;&lt;/b&gt;」のようなエラーが発生するのでご注意ください。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;.rb&lt;/code&gt;のファイルを編集することで、自動でrubocopが動き、（デフォルトのrubocopの規約が厳しすぎて）失敗するので、右上で通知がされます。&lt;/p&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141019/20141019145153.png&quot; alt=&quot;f:id:nipe880324:20141019145153p:plain:w320&quot; title=&quot;f:id:nipe880324:20141019145153p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;これで、自動でrubocopを起動する環境を構築することができました。&lt;br /&gt;
rubocopの設定については、&lt;a href=&quot;https://github.com/bbatsov/rubocop&quot;&gt;bbatsov/rubocop &amp;middot; GitHub&lt;/a&gt; を参照して下さい。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;guard-rubocop-options&quot;&gt;3. guard-rubocopのオプション&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;次のように&lt;code&gt;guard-rubocop&lt;/code&gt;にオプションを指定することが可能です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Guardfile&lt;/span&gt;

guard &lt;span class=&quot;synConstant&quot;&gt;:rubocop&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;all_on_start&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;cli&lt;/span&gt;: [&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;clang&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;--rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;] &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{.+\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;$}&lt;/span&gt;)
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{(?:.+&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)?\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rubocop&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;yml&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;$}&lt;/span&gt;) { |&lt;span class=&quot;synIdentifier&quot;&gt;m&lt;/span&gt;| &lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.dirname(m[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]) }
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;指定できるオプションは次のようになっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synConstant&quot;&gt;all_on_start&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;     &lt;span class=&quot;synComment&quot;&gt;# Guard起動時にすべてのファイルをチェックする（デフォルト値：true）&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;cli&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;--rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;         &lt;span class=&quot;synComment&quot;&gt;# RuboCopへのオプションをを文字列か配列で指定する（デフォルト値：nil）&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;keep_failed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;      &lt;span class=&quot;synComment&quot;&gt;# Keep failed files until they pass. (default: true)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;notification&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:failed&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# 実行後に通知センターに通知をする（デフォルト値：failed - 失敗時）&lt;/span&gt;
                       &lt;span class=&quot;synComment&quot;&gt;#   true    - 毎回通知する&lt;/span&gt;
                       &lt;span class=&quot;synComment&quot;&gt;#   false   - 通知をしない&lt;/span&gt;
                       &lt;span class=&quot;synComment&quot;&gt;#   :failed - 失敗時のみ通知する&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;guard-rubocop-rspec&quot;&gt;guard-rubocopとguard-rspecの混合&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;TDDで実装しているときに、RedとGreenの段階では、「RSpecが失敗したら、RuboCopの実行をしない」ように制御したい場合があるかもしれません。&lt;br /&gt;
そのようなときに、次のように&lt;code&gt;Guardfile&lt;/code&gt;を修正するとよいです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Guardfile&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# RSpecが失敗したら、RuboCopをスキップする&lt;/span&gt;
group &lt;span class=&quot;synConstant&quot;&gt;:red_green_refactor&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;halt_on_fail&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;

  guard &lt;span class=&quot;synConstant&quot;&gt;:rspec&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    ...
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  guard &lt;span class=&quot;synConstant&quot;&gt;:rubocop&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    ...
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;


* 参考文献
- [https&lt;span class=&quot;synConstant&quot;&gt;:/&lt;/span&gt;/github.com/guard/guard&lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;]

&lt;/pre&gt;
&lt;/div&gt;</description>
          <pubDate>Sun, 19 Oct 2014 14:55:28 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450069002348</guid>
          
            <category>開発を効率化する</category>
          
            <category>Rails gem</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsの開発効率を上げる - guard-livereloadを使ってRailsでブラウザのオートリロードをさせる</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141016/1413389293</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141016/20141016010205.png&quot; alt=&quot;f:id:nipe880324:20141016010205p:plain:w320&quot; title=&quot;f:id:nipe880324:20141016010205p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;Guardとは&lt;/h3&gt;
    &lt;p&gt;Guardとはファイルの変更を検知して、自動的にさまざまな処理を実行してくれるRubyのGemです。&lt;br /&gt;
これ単体で使うよりも、他のツールと連携し、自動的に処理を行い開発効率を上げるために使います。&lt;br /&gt;
メジャーどころとしては、次の３つだと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;guard-livereload - Viewファイルの変更したときに自動的にブラウザをリロードする&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20141021/1413819783&quot;&gt;guard-rspec - specファイルを変更したときに自動的に&lt;code&gt;RSpec&lt;/code&gt;を実行する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20141019/1413698128&quot;&gt;guard-rubocop - ファイルを修正したときに&lt;code&gt;RuboCop&lt;/code&gt;を実行する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;本記事では、Railsへ&lt;code&gt;guard-livereload&lt;/code&gt;の導入方法を記載します。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Mac OSX 10.9&lt;/li&gt;
&lt;li&gt;Ruby  2.0&lt;/li&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;guard 2.6.1&lt;/li&gt;
&lt;li&gt;guard-livereload 2.3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#guard-create-rails&quot;&gt;Railsプロジェクトの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#guard-livereload-getting-started&quot;&gt;guard-livereloadの導入&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;guard-create-rails&quot;&gt;1. Railsプロジェクトの作成&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;まず、Guardを実行させるベースとなるRailsのプロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new guard_test&lt;/pre&gt;&lt;p&gt;次に、簡単なProductのScaffoldを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;cd guard_test
rails g scaffold Product name:string price:integer discontinued:boolean&lt;/pre&gt;&lt;p&gt;マイグレートします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;guard-livereload-getting-started&quot;&gt;2. guard-livereloadの導入&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;の&lt;code&gt;developemnt group&lt;/code&gt;内に&lt;code&gt;guard-livereload&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;guard-livereload&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bundlerを実行して、インストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;Guard定義が記載された&lt;code&gt;Guardfile&lt;/code&gt;(Guardの設定ファイル)を作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle exec guard init livereload&lt;/pre&gt;&lt;p&gt;作成された&lt;code&gt;Guardfile&lt;/code&gt;の中身を確認してみます。&lt;/p&gt;&lt;p&gt;これは、&lt;code&gt;guard&lt;/code&gt;で監視するファイルが変更された場合に実行するプラグイン(livereload, rspec, rubocopなど)を記載します。&lt;br /&gt;
そして、&lt;code&gt;guard&lt;/code&gt;ブロック内に&lt;code&gt;watch&lt;/code&gt;を記載し、監視するファイルを記載します。&lt;/p&gt;&lt;p&gt;基本的に&lt;code&gt;bundle exec guard init [Guardのプラグイン名&lt;/code&gt;を実行することにより、基本的な設定を自動で&lt;code&gt;Guardfile&lt;/code&gt;に追加してくれます。&lt;/p&gt;&lt;p&gt;既にViewやHelperなどの変更に対する監視が記載されているので、今回は特に編集しません。&lt;br /&gt;
監視対象を増やしたい、減らしたい場合は必要に応じて追加してください。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# A sample Guardfile&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# More info at https://github.com/guard/guard#readme&lt;/span&gt;

guard &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;livereload&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;app/views/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.+\.(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;erb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;haml&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;slim&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)$}&lt;/span&gt;)
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;app/helpers/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.+\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;)
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;public/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.+\.(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)}&lt;/span&gt;)
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;config/locales/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.+\.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;yml&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;)
  &lt;span class=&quot;synComment&quot;&gt;# Rails Assets Pipeline&lt;/span&gt;
  watch(&lt;span class=&quot;synSpecial&quot;&gt;%r{(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;vendor&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/assets/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\w+&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(.+\.(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;))).*}&lt;/span&gt;) { |&lt;span class=&quot;synIdentifier&quot;&gt;m&lt;/span&gt;| &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/assets/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;m[&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; }
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;次にブラウザに&lt;code&gt;LiveReload&lt;/code&gt;のエクステンションを追加します。&lt;br /&gt;
次のサイトにSafari, Chrome, FireFoxのエクステンションへのリンクがあります。&lt;br /&gt;
&lt;a href=&quot;http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-&quot;&gt;http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-&lt;/a&gt;&lt;/p&gt;&lt;p&gt;エクステンションを入れたら、&lt;code&gt;Guard&lt;/code&gt;を実行します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle exec guard
00:52:35 - INFO - Guard is using TerminalTitle to send notifications.
00:52:36 - INFO - LiveReload is waiting for a browser to connect.
00:52:36 - INFO - Guard is now watching at &amp;#39;/Users/nipe0324/guard_test&amp;#39;&lt;/pre&gt;&lt;p&gt;&lt;i&gt;※Railsプロジェクトの配置パスに日本語が入っていると、「&lt;b&gt;E, [2014-10-16T00:43:38.055423 #28197] ERROR -- : run() in thread failed: inspected result must be ASCII only or use the same encoding with default external:/Users/nipe0324/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/listen-2.7.9/lib/listen/listener.rb:329:in `inspect&#39;&lt;/b&gt;」のようなエラーが発生するのでご注意ください。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;そして、別コンソールでサーバーを起動します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails s&lt;/pre&gt;&lt;p&gt;&lt;code&gt;http://localhost:3000/products&lt;/code&gt;にアクセスし、ブラウザの&lt;code&gt;LiveRelad&lt;/code&gt;を有効にしてください。&lt;br /&gt;
Guardのコンソールに次のように「&lt;b&gt;Browser connected.&lt;/b&gt;」と表示されたら、ブラウザとGuardが接続された証拠です。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[1] guard(main)&amp;gt; 00:52:42 - INFO - Browser connected.&lt;/pre&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141016/20141016010240.png&quot; alt=&quot;f:id:nipe880324:20141016010240p:plain:w480&quot; title=&quot;f:id:nipe880324:20141016010240p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;この状態で、&lt;code&gt;index.html&lt;/code&gt;を更新し、保存します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Listing products&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所 開始 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;color:red;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Guardで自動的に追加される文字列&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所 終了 --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;thead&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Name&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Price&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Discontinued&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;colspan&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;thead&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;/pre&gt;&lt;p&gt;保存をすると、GuardがViewファイルの変更を検知し、ブラウザを自動的にリロードしてくれます。&lt;/p&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141016/20141016010257.png&quot; alt=&quot;f:id:nipe880324:20141016010257p:plain:w480&quot; title=&quot;f:id:nipe880324:20141016010257p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;これで、毎回ファイルを更新してブラウザをロードするということがなくなりとっても便利です。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;もし、VagrantなどでMacなどに仮想マシンを起動させている場合は、そのための設定方法が記載されています。&lt;br /&gt;
&lt;iframe src=&quot;http://togattti.hateblo.jp/embed/2014/09/09/233049&quot; title=&quot;Vagrant環境にLive Reloadを設定する - 麹町で働くWebエンジニアのメモ帳&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://togattti.hateblo.jp/entry/2014/09/09/233049&quot;&gt;Vagrant環境にLive Reloadを設定する - 麹町で働くWebエンジニアのメモ帳&lt;/a&gt;&lt;/iframe&gt;&lt;br /&gt;
&lt;a href=&quot;http://togattti.hateblo.jp/entry/2014/09/09/233049&quot;&gt;Vagrant&amp;#x74B0;&amp;#x5883;&amp;#x306B;Live Reload&amp;#x3092;&amp;#x8A2D;&amp;#x5B9A;&amp;#x3059;&amp;#x308B; - &amp;#x9EB9;&amp;#x753A;&amp;#x3067;&amp;#x50CD;&amp;#x304F;Web&amp;#x30A8;&amp;#x30F3;&amp;#x30B8;&amp;#x30CB;&amp;#x30A2;&amp;#x306E;&amp;#x30E1;&amp;#x30E2;&amp;#x5E33;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/guard/guard&quot;&gt;guard/guard &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
以上です。分からない箇所や間違いなどありましたらコメントください。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Thu, 16 Oct 2014 01:08:13 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450068828864</guid>
          
            <category>Rails gem</category>
          
            <category>開発を効率化する</category>
          
        </item>
      
    
  </channel>
</rss>
