<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>検索 - Rails Webook</title>
    <link>http://ruby-rails.hatenadiary.com/category/%E6%A4%9C%E7%B4%A2</link>
    <description>自社のECを開発している会社で働いています。Rails情報やサービスを成長させる方法を書いていきます</description>
    <lastBuildDate>Fri, 18 Dec 2015 02:44:31 +0900</lastBuildDate>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <generator>Hatena::Blog</generator>
    
      
      
        <item>
          <title>RailsでElasticsearch: サジェスト (Suggest) 機能でオートコンプリート</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20151027/1445957667</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151027/20151027234933.png&quot; alt=&quot;f:id:nipe880324:20151027234933p:plain:w420&quot; title=&quot;f:id:nipe880324:20151027234933p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;今回は、「&lt;b&gt;Elasticsearchのサジェスト(Suggest)機能でオートコンプリートを実装&lt;/b&gt;」します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151018/1445142266&quot;&gt;RailsでElasticsearchを使って簡単な全文検索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151019/1445265581&quot;&gt;ページネーション・１ページあたりの表示件数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151021/1445353566&quot;&gt;ソート機能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151022/1445439798&quot;&gt;アグリゲーション（ファセット）と Post Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151025/1445703231&quot;&gt;ハイライト (Highlight)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;と&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でElasticsearchを使って検索機能を実装してきました。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;サジェスト機能では、サジェスター（Suggester）を利用し、入力したテキストから似たような単語を返す機能です。&lt;br /&gt;
Elasticsearch 1.7 では、サジェスト機能の一部はまだ「開発中」のようです。&lt;/p&gt;&lt;p&gt;参考までに、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;はこちらです。&lt;a href=&quot;https://github.com/nipe0324/rails_samples/tree/master/elasticsearch_test&quot; target=&quot;_blank&quot;&gt;elasticsearch_test - GitHub&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-6-data&quot;&gt;データを投入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-6-es-suggest&quot;&gt;Elasticsearchのサジェストクエリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-6-autocomplete&quot;&gt;オートコンプリートでサジェスト機能を利用&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac%20OS%20X&quot;&gt;Mac OS X&lt;/a&gt; 10.11 El Capitan&lt;/li&gt;
&lt;li&gt;elasticsearch 1.7.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/dsl&quot;&gt;dsl&lt;/a&gt; 0.1.2&lt;/li&gt;
&lt;li&gt;elasticsearch-model 0.1.8&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 0.1.8&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-6-data&quot;&gt;1. データを投入&lt;/h3&gt;そろそろデータが寂しくなってきたので、&lt;a href=&quot;https://github.com/livedoor/datasets&quot; target=&quot;_blank&quot;&gt;livedoorグルメの研究用データセット&lt;/a&gt;を使い、それっぽいレストラン情報を表示するようにします。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;データベースを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/postgresql&quot;&gt;postgresql&lt;/a&gt;に変更&lt;/h4&gt;現在、sqlite3を使っているので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/postgresql&quot;&gt;postgresql&lt;/a&gt;に変更します。&lt;/p&gt;&lt;p&gt;&lt;code&gt;sqlite3&lt;/code&gt;を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%E1%A5%F3%A5%C8%A5%A2%A5%A6%A5%C8&quot;&gt;コメントアウト&lt;/a&gt;し、&lt;code&gt;pg&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;#gem &#39;sqlite3&#39;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Use postgresql&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;database.yml&lt;/code&gt;を修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;&amp;amp;default&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; postgresql
  &lt;span class=&quot;synIdentifier&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; postgres
  &lt;span class=&quot;synIdentifier&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; postgres
  &lt;span class=&quot;synIdentifier&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; unicode
  &lt;span class=&quot;synIdentifier&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;lt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;*default&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; elasticsearch_test_development

&lt;span class=&quot;synIdentifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;lt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;*default&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; elasticsearch_test_test

&lt;span class=&quot;synIdentifier&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;lt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;*default&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; elasticsearch_test_production
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;データを投入する&lt;/h4&gt;データベースを&lt;code&gt;postgres&lt;/a&gt;ユーザーをオーナーとして作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;createdb -U postgres elasticsearch_test_development&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/nipe0324/rails_samples/blob/master/elasticsearch_test/db/dump.sql&quot;&gt;dump.sql&lt;/a&gt;からダンプファイルをダウンロードし、下記コマンドでデータを投入します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;psql -U postgres elasticsearch_test_development &amp;lt; db/dump.sql&lt;/pre&gt;&lt;p&gt;※ dump.sqlは、livedoorグルメの研究用データセットを少し加工したダンプデータです&lt;/p&gt;&lt;p&gt;マイグレーションファイルを使わずに、データベースをマイグレートしたので、今後マイグレーションが使えなくなります。&lt;br /&gt;
そのため、マイグレーションファイルを削除します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rm -f ./db/migrate/*.rb&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Elasticsearchにインデクシング&lt;/h4&gt;データを投入したついでに、いくつかカラムも追加したので、それらのデータをElasticsearchにインデクシングします。&lt;/p&gt;&lt;p&gt;まずは、マッピング(DBでいうスキーマ)を修正します。&lt;br /&gt;
詳細は、コメントで記載しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;

  ...

  &lt;span class=&quot;synComment&quot;&gt;# インデックス(index)とマッピング(mappings)の設定&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# katakana_analyzerというカタカナとしてアナライズするアナライザーを定義&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# kuromoji_tokenizerでトークン化し、katakana_readingformでフィルターをする&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# katakana_readingformはカタカナかローマ字に変換するトークンフィルター&lt;/span&gt;
  settings &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: {
    &lt;span class=&quot;synConstant&quot;&gt;analysis&lt;/span&gt;: {
      &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: {
        &lt;span class=&quot;synConstant&quot;&gt;katakana_analyzer&lt;/span&gt;: {
          &lt;span class=&quot;synConstant&quot;&gt;tokenizer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji_tokenizer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;filter&lt;/span&gt;: [&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;katakana_readingform&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;]
        }
      },
      &lt;span class=&quot;synConstant&quot;&gt;filter&lt;/span&gt;: {
        &lt;span class=&quot;synConstant&quot;&gt;katakana_readingform&lt;/span&gt;: {
          &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji_readingform&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;use_romaji&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
        }
      }
    }
  } &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    mappings &lt;span class=&quot;synConstant&quot;&gt;dynamic&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# デフォルトでマッピングが自動作成されるがそれを無効にする&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# マッピングの公式ドキュメント&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-core-types.html&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# indexesメソッドでインデックスする値を定義します。&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# analyzer: インデクシング時、検索時に使用するアナライザーを指定します。指定しない場合、グローバルで設定されているアナライザーが利用されます。&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# kuromojiは日本語のアナライザーです。&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;,      &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:name_kana&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:alphabet&lt;/span&gt;

      indexes &lt;span class=&quot;synConstant&quot;&gt;:zip&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:address&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:description&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# type: booleanでclosedはboolean型として定義します&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      indexes &lt;span class=&quot;synConstant&quot;&gt;:access_count&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# date型として定義&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# formatは日付のフォーマットを指定(2015-10-16T19:26:03.679Z)&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# 詳細: https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;date_time&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:updated_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;date_time&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# ロケーション情報も定義&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:location&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;geo_point&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# 階層化してインデクシングできます。pref.nameとして検索できます。&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;not_analyzed&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      indexes &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;not_analyzed&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# サジェストのために、レストラン名を、そのまま(raw)、ひらがな(hira)、&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# かたかな(kana)、ローマ字(romaji)で作成&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# type: &#39;completion&#39;にすることで前方一致でサジェスト検索できる&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:suggest&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name_raw&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name_hira&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name_kana&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;index_analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;katakana_analyzer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name_romaji&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次にインデクシング時に呼ばれる&lt;code&gt;as_indexed_json&lt;/code&gt;メソッドを修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# インデクシング時に呼び出されるメソッド&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# マッピングのデータを返すようにする&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;as_indexed_json&lt;/span&gt;(options = {})
    attributes
      .symbolize_keys
      .slice(
        &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name_kana&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:alphabet&lt;/span&gt;,
        &lt;span class=&quot;synConstant&quot;&gt;:zip&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:address&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:description&lt;/span&gt;,
        &lt;span class=&quot;synConstant&quot;&gt;:access_count&lt;/span&gt;,
        &lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:updated_at&lt;/span&gt;)
      .merge(&lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: pref.name })
      .merge(&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: category.name })
      .merge(&lt;span class=&quot;synConstant&quot;&gt;location&lt;/span&gt;: location)
      .merge(&lt;span class=&quot;synConstant&quot;&gt;suggest&lt;/span&gt;: {
        &lt;span class=&quot;synConstant&quot;&gt;name_raw&lt;/span&gt;: name,
        &lt;span class=&quot;synConstant&quot;&gt;name_hira&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;input&lt;/span&gt;: name_kana, &lt;span class=&quot;synConstant&quot;&gt;output&lt;/span&gt;: name },
        &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: name,
        &lt;span class=&quot;synConstant&quot;&gt;name_romaji&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;input&lt;/span&gt;: alphabet, &lt;span class=&quot;synConstant&quot;&gt;output&lt;/span&gt;: name },
      })
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# ロケーションが存在しない場合もあるため、&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# マッピングのgeo_point型の場合、&amp;quot;lat,lon&amp;quot;の形式で返す必要がある&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-geo-point-type.html&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;location&lt;/span&gt;
    (lat &amp;amp;&amp;amp; lon) ? &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;lat&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;lon&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、インデックスを再作成して、データをインデクシングします。&lt;br /&gt;
※ レストラン数が20万件ほどあるので、数十分ほどかかります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# rails console&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.create_index! &lt;span class=&quot;synConstant&quot;&gt;force&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.refresh_index!
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.import
&lt;/pre&gt;&lt;p&gt;最後に、少しデータ項目も増えたので検索結果画面の表示内容を修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の数をカラム区切りで表示できるように number_with_delimiter を呼ぶようにする --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;検索結果: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; number_with_delimiter&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; current_document %&amp;gt;&lt;/span&gt; / 約&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; number_with_delimiter&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @restaurants.results.total %&amp;gt;&lt;/span&gt;件&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;表示件数: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; per_page_links&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;ソート順: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; sort_links&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.each do |r| %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;（&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :name_kana) %&amp;gt;&lt;/span&gt;）&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- description を表示するように修正 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.description&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text-muted&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- アクセス数 を表示するように修正 --&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;アクセス数&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; (&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.access_count&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;)&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;都道府県:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;pref.name&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;カテゴリ:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;category.name&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;出店日:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.created_at&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  ...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、検索をしてみると、Elasticsearchにうまくインデクシングされていれば、検索結果が「約20万件」と表示されれると思います。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151027/20151027234849.png&quot; alt=&quot;f:id:nipe880324:20151027234849p:plain:w420&quot; title=&quot;f:id:nipe880324:20151027234849p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-6-es-suggest&quot;&gt;2. Elasticsearchのサジェストクエリ&lt;/h3&gt;Elasticsearchの公式ドキュメントの「&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html&quot; target=&quot;_blank&quot;&gt;suggester&lt;/a&gt;」を参考にすると、サジェストを行うには、&lt;code&gt;_search&lt;/code&gt;と&lt;code&gt;_suggest&lt;/code&gt;の２つのエンドポイントがあることがわかります。&lt;/p&gt;&lt;p&gt;今回は、オートコンプリートのためのサジェストであり、検索結果やアグリゲーションなど必要ないため、&lt;code&gt;_suggest&lt;/code&gt;のほうを利用します。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://localhost:9200/_plugin/marvel/sense/index.html&quot; target=&quot;_blank&quot;&gt;Marvel Sense&lt;/a&gt;を開き、サジェストのクエリを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/restaurant/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 0,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggest&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;my_suggest&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;レストラン&amp;quot;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;completion&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggest.name_raw&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;// 結果&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;took&amp;quot;&lt;/span&gt;: 41,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;timed_out&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_shards&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 5,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;successful&amp;quot;&lt;/span&gt;: 5,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;: 0
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 214227,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;: 0,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[]&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggest&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;my_suggest&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
         &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;レストラン&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;offset&amp;quot;&lt;/span&gt;: 0,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;length&amp;quot;&lt;/span&gt;: 5,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;options&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
               &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;レストラン鎌倉山&amp;quot;&lt;/span&gt;,
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;: 3
               &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
               &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;レストラン オリーブ&amp;quot;&lt;/span&gt;,
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;: 2
               &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
               &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;レストラン オーパス&amp;quot;&lt;/span&gt;,
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;: 2
               &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
               &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;レストラン スコット&amp;quot;&lt;/span&gt;,
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;: 2
               &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
               &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;レストラン ポルト&amp;quot;&lt;/span&gt;,
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;: 2
               &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
         &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;※Marvel Senseから&lt;code&gt;_suggest&lt;/code&gt;をうまく使えなかったので&lt;code&gt;_search&lt;/code&gt;で実行しています。&lt;/p&gt;&lt;p&gt;このように、&lt;code&gt;suggest.&lt;サジェスト名&gt;.options&lt;/code&gt;内に配列で返ってきます。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-6-autocomplete&quot;&gt;3. オートコンプリートでサジェスト機能を利用&lt;/h3&gt;jQuery UI と Elasticsearchのサジェスト機能でオートコンプリートを実装します。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;jQuery UIでオートコンプリート&lt;/h4&gt;まずは、jQuery UIでオートコンプリートを作成します。&lt;/p&gt;&lt;p&gt;Gemfileに&lt;code&gt;jquery-ui-rails&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;jquery-ui-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;インストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;&lt;code&gt;application.js&lt;/code&gt;にオートコンプリートモジュールのみ追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/applciation.js&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;//= require jquery&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require jquery-ui/autocomplete&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require jquery_ujs&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require turbolinks&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require_tree .&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;application.css&lt;/code&gt;にもオートコンプリートのスタイリングファイルを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;/* app/assets/stylesheets/applicaiton.css */&lt;/span&gt;

 &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt;= require jquery-ui/autocomplete
 &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt;= require jquery-ui-custom
 &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt;= require_tree &lt;span class=&quot;synSpecial&quot;&gt;.&lt;/span&gt;
 &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt;= require_self
 &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt;/
&lt;/pre&gt;&lt;p&gt;Bootstrapに合うようにjQuery UIのオートコンプリートのスタイリングを修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;/* app/assets/stylesheets/jquery-ui-custom.css */&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;.ui-autocomplete&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;absolute&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100%&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1000&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;float&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;left&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;display&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;none&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;min-width&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;160px&lt;/span&gt;;
  _width: &lt;span class=&quot;synConstant&quot;&gt;160px&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;4px&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;list-style&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;none&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;#ffffff&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;border-color&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;#ccc&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;border-color&lt;/span&gt;: rgba(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0.2&lt;/span&gt;);
  &lt;span class=&quot;synType&quot;&gt;border-style&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;solid&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;border-width&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1px&lt;/span&gt;;
  -webkit-&lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt;;
  -moz-&lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt;;
  -webkit-box-shadow: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;10px&lt;/span&gt; rgba(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0.2&lt;/span&gt;);
  -moz-box-shadow: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;10px&lt;/span&gt; rgba(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0.2&lt;/span&gt;);
  box-shadow: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;10px&lt;/span&gt; rgba(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0.2&lt;/span&gt;);
  -webkit-&lt;span class=&quot;synType&quot;&gt;background&lt;/span&gt;-&lt;span class=&quot;synType&quot;&gt;clip&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;padding&lt;/span&gt;-box;
  -moz-&lt;span class=&quot;synType&quot;&gt;background&lt;/span&gt;-&lt;span class=&quot;synType&quot;&gt;clip&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;padding&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;background&lt;/span&gt;-&lt;span class=&quot;synType&quot;&gt;clip&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;padding&lt;/span&gt;-box;
  *&lt;span class=&quot;synType&quot;&gt;border-right-width&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;2px&lt;/span&gt;;
  *&lt;span class=&quot;synType&quot;&gt;border-bottom-width&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;2px&lt;/span&gt;;

  .ui-&lt;span class=&quot;synType&quot;&gt;menu&lt;/span&gt;-item &amp;gt; a.ui-corner-&lt;span class=&quot;synType&quot;&gt;all&lt;/span&gt; {
    &lt;span class=&quot;synType&quot;&gt;display&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;block&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;3px&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;15px&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;clear&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;both&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;font-weight&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;normal&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;18px&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;#555555&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;white-space&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;nowrap&lt;/span&gt;;

    &amp;amp;.ui-state-hover, &amp;amp;.ui-state-active {
      &lt;span class=&quot;synType&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;#ffffff&lt;/span&gt;;
      &lt;span class=&quot;synType&quot;&gt;text-decoration&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;none&lt;/span&gt;;
      &lt;span class=&quot;synType&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;#0088cc&lt;/span&gt;;
      &lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;0px&lt;/span&gt;;
      -webkit-&lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;0px&lt;/span&gt;;
      -moz-&lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;0px&lt;/span&gt;;
      &lt;span class=&quot;synType&quot;&gt;background-image&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;none&lt;/span&gt;;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synError&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;最後にオートコンプリートを呼び出すようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-coffee&quot; data-lang=&quot;coffee&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/top.coffee&lt;/span&gt;
$ &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt;
  $&lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;#q&#39;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;autocomplete
    &lt;span class=&quot;synIdentifier&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/top/suggest.json&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;サーバーサイドのサジェスト機能を実装&lt;/h4&gt;クライアント側の処理を追加したので、サーバー側でサジェスト機能の実装をします。&lt;/p&gt;&lt;p&gt;&lt;code&gt;top/suggest&lt;/code&gt;のルートを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.routes.draw &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  root &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;top#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  get  &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;top/suggest&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;to&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;top#suggest&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;defaults&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
コントローラーに&lt;code&gt;suggest&lt;/code&gt;アクションを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/top_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TopController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  ...

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;suggest&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# jQuery UI Autocompleteから&amp;quot;term&amp;quot;キーで入力フィールドの値が送られてくる&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# namesはレストラン名の配列&lt;/span&gt;
    names = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.suggest(params[&lt;span class=&quot;synConstant&quot;&gt;:term&lt;/span&gt;])
    render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: names
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、Restaurantモデルに&lt;code&gt;suggets&lt;/code&gt;メソッドを追加します。&lt;br /&gt;
&lt;code&gt;elasticsearch-dsl gem&lt;/code&gt;ではまだ&lt;code&gt;_suggest&lt;/code&gt;エンドポイントにアクセスするDSLは定義されていなかったので、&lt;code&gt;elasticserch-persistence gem&lt;/code&gt;を利用します。&lt;/p&gt;&lt;p&gt;Gemfileに追加し、&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch-persistence&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-rails.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;インストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;

  ...

  &lt;span class=&quot;synComment&quot;&gt;# サジェストのキー&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;SUGGEST_KEYS&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; name_raw name_kana name_romaji name_hira &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;

  ...

  &lt;span class=&quot;synComment&quot;&gt;# サジェスト結果を配列で返す&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;suggest&lt;/span&gt;(keyword)

    &lt;span class=&quot;synComment&quot;&gt;# 次のようなサジェストのボディ(Hash)を作成&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# name_raw: {&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   text: &amp;lt;keyword&amp;gt;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   completion: { field: &amp;quot;suggest.name_raw&amp;quot;, size: 10 }&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# },&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# name_kana: {&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   ...&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# }&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
    suggest_definition = &lt;span class=&quot;synType&quot;&gt;SUGGEST_KEYS&lt;/span&gt;.inject({}) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;result&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;key&lt;/span&gt;|
      result.merge(
        key =&amp;gt; {
          &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: keyword,
          &lt;span class=&quot;synConstant&quot;&gt;completion&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;field&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;suggest.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;key&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt; }
        }
      )
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# elasticsearch-persistence を利用し、Elasticsearchにサジェストクエリを送る&lt;/span&gt;
    response = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Persistence&lt;/span&gt;.client.suggest({
      &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.index_name,
      &lt;span class=&quot;synConstant&quot;&gt;body&lt;/span&gt;: suggest_definition
    })

    &lt;span class=&quot;synComment&quot;&gt;# Elasticsearchからの結果を配列に変換する&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;SUGGEST_KEYS&lt;/span&gt;.map &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;key&lt;/span&gt;|
      response[key][&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;].map{|&lt;span class=&quot;synIdentifier&quot;&gt;opt&lt;/span&gt;| opt.fetch(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;)}
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;.flatten.uniq
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  ...
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;動作確認&lt;/h4&gt;サジェスト機能を使ってオートコンプリートを実装しましたので、画面から確認します。&lt;br /&gt;
検索バーに適当にキーワードを入れると、前方一致で検索した店名が検索されます。&lt;br /&gt;
ひらがな、カタカナ、ローマ字などでもサジェスト検索するようにしていますので、それらのキーワードでもサジェストされます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151027/20151027234933.png&quot; alt=&quot;f:id:nipe880324:20151027234933p:plain:w420&quot; title=&quot;f:id:nipe880324:20151027234933p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/kijtra/items/36dd35b3b9db75c88f55&quot;&gt;Elasticsearch&amp;#x3067;&amp;#x3001;&amp;#x6F22;&amp;#x5B57;&amp;#x30C7;&amp;#x30FC;&amp;#x30BF;&amp;#x3067;&amp;#x3082;&amp;#x5E73;&amp;#x4EEE;&amp;#x540D;&amp;#x3067;&amp;#x30B5;&amp;#x30B8;&amp;#x30A7;&amp;#x30B9;&amp;#x30C8;&amp;#x53D6;&amp;#x5F97; - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/daz/2168334&quot;&gt;Bootstrap styling for jQuery UI autocomplete &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 27 Oct 2015 23:54:27 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653458415126053650</guid>
          
            <category>elasticsearch</category>
          
            <category>検索</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでElasticsearch: ハイライト（Highlight）</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20151025/1445703231</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170217.png&quot; alt=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151018/1445142266&quot;&gt;RailsでElasticsearchを使って簡単な全文検索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151019/1445265581&quot;&gt;ページネーション・１ページあたりの表示件数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151021/1445353566&quot;&gt;ソート機能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151022/1445439798&quot;&gt;アグリゲーション（ファセット）と Post Filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;と&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でElasticsearchを使って検索機能を実装してきました。&lt;br /&gt;
今回は、「&lt;b&gt;Elasticsearchのハイライト機能&lt;/b&gt;」について簡単に説明します。&lt;/p&gt;&lt;p&gt;参考までに、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;はこちらです。&lt;a href=&quot;https://github.com/nipe0324/rails_samples/tree/master/elasticsearch_test&quot; target=&quot;_blank&quot;&gt;elasticsearch_test - GitHub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-5-highlight&quot;&gt;ハイライト機能を実装&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac%20OS%20X&quot;&gt;Mac OS X&lt;/a&gt; 10.11 El Capitan&lt;/li&gt;
&lt;li&gt;elasticsearch 1.7.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/dsl&quot;&gt;dsl&lt;/a&gt; 0.1.2&lt;/li&gt;
&lt;li&gt;elasticsearch-model 0.1.8&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 0.1.8&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-5-highlight&quot;&gt;1. ハイライト機能を実装&lt;/h3&gt;次のようにハイライト機能を実装します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151025/20151025010952.png&quot; alt=&quot;f:id:nipe880324:20151025010952p:plain:w420&quot; title=&quot;f:id:nipe880324:20151025010952p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;Elasticsearchのハイライトクエリを作成&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html&quot; target=&quot;_blank&quot;&gt;Highlighting - Elasticsearch Documentation&lt;/a&gt;によると、&lt;code&gt;&quot;highlight&quot;&lt;/code&gt;キーを指定することで、ハイライトを行えます。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby/blob/master/elasticsearch-dsl/lib/elasticsearch/dsl/search/highlight.rb&quot; target=&quot;_blank&quot;&gt;highlight.rb - elasticsearch-dsl&lt;/a&gt;を参考にし、&lt;code&gt;search&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;にハイライトキーを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
    ...
    search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
      query { ... }

      &lt;span class=&quot;synComment&quot;&gt;# highlightキーを指定&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#   pre_tagsでマッチした文字列の前(pre)に追加するタグを指定&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#   post_tagsでマッチした文字列の後(post)に追加するタグを指定&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#   filedsでハイライトを行うフィールドを指定&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#   マッチした場合次のようになります。&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;highlight&amp;gt;文字列&amp;lt;/highlight&amp;gt;&lt;/span&gt;
      highlight {
        pre_tags [&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;highlight&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;]
        post_tags [&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;/highlight&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;]
        fields &lt;span class=&quot;synSpecial&quot;&gt;%w{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; name name_kana address pref.name category.name &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
      }
    }
    ...
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;レスポンスの確認&lt;/h4&gt;クエリで&lt;code&gt;highlight&lt;/code&gt;を指定したので、レスポンスを確認します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 「牛角」で検索したときのレスポンス&lt;/span&gt;
response = __elasticsearch__.search(search_definition)
result = response.first
=&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#&amp;lt;Elasticsearch::Model::Response::Result:0x007fa5f5509400&lt;/span&gt;
 &lt;span class=&quot;synIdentifier&quot;&gt;@result&lt;/span&gt;=
  {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;restaurant_development&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_type&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;restaurant&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;605&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_score&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;,
   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;_source&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;
    {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ぎゅうかく&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;130-0033&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;池袋3-33&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015-10-18T11:41:12.335Z&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;東京都&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;},
     &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;居酒屋&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}},
   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;highlight&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;highlight&amp;gt;牛&amp;lt;/highlight&amp;gt;&amp;lt;highlight&amp;gt;角&amp;lt;/highlight&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]},
   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;[&lt;span class=&quot;synConstant&quot;&gt;1445168472335&lt;/span&gt;]}&amp;gt;

&lt;span class=&quot;synComment&quot;&gt;# highlightキーに格納されています&lt;/span&gt;
result.highlight
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;name&amp;quot;=&amp;gt;[&amp;quot;&amp;lt;highlight&amp;gt;牛&amp;lt;/highlight&amp;gt;&amp;lt;highlight&amp;gt;角&amp;lt;/highlight&amp;gt;&amp;quot;]}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# マッチしたフィールド名で取得できます&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 形態素解析のkuromojiが「牛」と「角」に分割しているので次のようになっている。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# そこら辺は辞書登録などアナライザーをチューニングする必要があるがここでは省略します&lt;/span&gt;
result.highlight.name
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;&amp;lt;highlight&amp;gt;牛&amp;lt;/highlight&amp;gt;&amp;lt;highlight&amp;gt;角&amp;lt;/highlight&amp;gt;&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ハイライト文字列を表示するヘルパーを作成&lt;/h4&gt;ハイライトの値を表示するヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# ハイライト文字列(&amp;lt;highlight&amp;gt;[文字列]&amp;lt;/highlight&amp;gt;)か文字列([文字列])を返す&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   result [Elasticsearch::Model::Response::Result] を指定&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   field  フィールド名&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;highlight_or_text&lt;/span&gt;(result, field)
    highlight_for_result(result, field) || text_for_result(result, field)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# ハイライト文字列を返す&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 存在しな場合もあるのでtryを行っている&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;highlight_for_result&lt;/span&gt;(result, field)
    result.try(&lt;span class=&quot;synConstant&quot;&gt;:highlight&lt;/span&gt;).try(field.to_sym).try(&lt;span class=&quot;synConstant&quot;&gt;:join&lt;/span&gt;).try(&lt;span class=&quot;synConstant&quot;&gt;:html_safe&lt;/span&gt;)
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 文字列を返す&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# pref.nameなどに対応できるようにするためにinjectメソッドを利用しています&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;text_for_result&lt;/span&gt;(result, field)
    field.to_s.split(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).inject(result) { |&lt;span class=&quot;synIdentifier&quot;&gt;result&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;field&lt;/span&gt;| result.send(field.to_sym) }
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;※これらの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;はresultを使っているので、&lt;code&gt;[Elasticsearch::Model::Response::Result]&lt;/code&gt;をラッピングさせたResultクラスを作って、その中で処理をさせたほうがよいと思います。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;ビューでハイライトさせる&lt;/h4&gt;ハイライト文字列は&lt;code&gt;highlight&lt;/code&gt;タグで囲むようにしていますので、スタイリングを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;/* app/assets/stylesheets/application.css */

...
highlight {
  color: #d9534f;
  font-style: italic;
}&lt;/pre&gt;&lt;p&gt;そして、ビューファイルで先程の&lt;code&gt;highlight_or_text&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を呼び出します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;

...

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.each do |r| %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- highlight_or_textヘルパーメソッドに変更する --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;（&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :name_kana) %&amp;gt;&lt;/span&gt;）&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text-muted&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;都道府県:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;pref.name&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;カテゴリ:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; highlight_or_text(r,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;category.name&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;出店日:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.created_at&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ハイライトの画面確認&lt;/h4&gt;次のように「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%ED%B3%D1&quot;&gt;牛角&lt;/a&gt;」で検索すると&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%ED%B3%D1&quot;&gt;牛角&lt;/a&gt;が赤文字で表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151025/20151025010952.png&quot; alt=&quot;f:id:nipe880324:20151025010952p:plain:w420&quot; title=&quot;f:id:nipe880324:20151025010952p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;まとめ&lt;/h3&gt;
    &lt;p&gt;Elasticsearchで&lt;code&gt;highlihgt&lt;/code&gt;キーを指定することで、ハイライト機能を実装しました。レスポンスでは、マッチした文字列がある場合、&lt;code&gt;highlight&lt;/code&gt;に値が入ります。&lt;br /&gt;
次は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151027/1445957667&quot;&gt;Elasticsearchのサジェスト機能を使用してオートコンプリート機能&lt;/a&gt;」を実装します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html&quot;&gt;Highlighting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sun, 25 Oct 2015 01:13:51 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653458415125740097</guid>
          
            <category>elasticsearch</category>
          
            <category>検索</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでElasticsearch: アグリゲーション（ファセット）と Post Filter</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20151022/1445439798</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170217.png&quot; alt=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151018/1445142266&quot;&gt;RailsでElasticsearchを使って簡単な全文検索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151019/1445265581&quot;&gt;ページネーション・１ページあたりの表示件数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/entry/20151021/1445353566&quot;&gt;ソート機能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;と&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でElasticsearchを使って検索機能を実装してきました。&lt;br /&gt;
今回は、「&lt;b&gt;アグリゲーション（ファセット）と Post Filter&lt;/b&gt;」について説明します。&lt;/p&gt;&lt;p&gt;「アグリゲーション」は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SQL&quot;&gt;SQL&lt;/a&gt;でいうGROUP BYのようなもので、最小値、最大値、平均値などを求めたり、カテゴリ毎の数を数えたりなどドキュメントを集約させるものです。Elasticsearchでは、従来あった集約機能の「ファセット」では複雑な集約を処理できなかったので、新しくアグリゲーションを作ったぽいです。&lt;/p&gt;&lt;p&gt;具体的には、下記画像の左側のサイドバーで検索結果を絞り込めるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151021/20151021235800.png&quot; alt=&quot;f:id:nipe880324:20151021235800p:plain:w420&quot; title=&quot;f:id:nipe880324:20151021235800p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-4-es-query&quot;&gt;アグリゲーションのためのElasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-4-category-aggregation&quot;&gt;カテゴリのアグリゲーションの実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-4-multi-category&quot;&gt;複数カテゴリの検索に対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-4-pref&quot;&gt;都道府県のアグリゲーションと複数都道府県の検索&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac%20OS%20X&quot;&gt;Mac OS X&lt;/a&gt; 10.11 El Capitan&lt;/li&gt;
&lt;li&gt;elasticsearch 1.7.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/dsl&quot;&gt;dsl&lt;/a&gt; 0.1.2&lt;/li&gt;
&lt;li&gt;elasticsearch-model 0.1.8&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 0.1.8&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-4-es-query&quot;&gt;アグリゲーションのためのElasticsearch&lt;br /&gt;
&lt;h4&gt;アグリゲーションの形式&lt;/h4&gt;アグリゲーションの形式は次の様に記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;aggregations&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;lt;アグリゲーション名&amp;gt;&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;lt;アグリゲーションタイプ&amp;gt;&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &amp;lt;アグリゲーションタイプに応じた記載&amp;gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;アグリゲーション名は、&lt;code&gt;caetgory&lt;/code&gt;や&lt;code&gt;min_price&lt;/code&gt;など自分で自由にアグリゲーションの名前を決めます。&lt;br /&gt;
アグリゲーションタイプは、&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html&quot;&gt;Aggregations - Elasticsearch&lt;/a&gt;のサイドバーに記載されている、Min Aggregation、Max Aggregation、Terms Aggregation、Filter Aggregationなどどのようにアグリゲーションするかによってアグリゲーションタイプを分けます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;カテゴリで集約&lt;/h4&gt;カテゴリのアグリゲーションを作成してみます。&lt;br /&gt;
&lt;a href=&quot;http://localhost:9200/_plugin/marvel/sense/index.html&quot; target=&quot;_blank&quot;&gt;Marvel Sense&lt;/a&gt;を開き、下記クエリを実行してください。&lt;br /&gt;
アグリゲーション名は&lt;code&gt;category&lt;/code&gt;、アグリゲーションタイプは&lt;code&gt;Terms Aggregation&lt;/code&gt;を利用しています。&lt;br /&gt;
&lt;code&gt;Terms Aggregation&lt;/code&gt;では、&lt;code&gt;field&lt;/code&gt;でカテゴリ名(category.name)でグルーピングし、&lt;code&gt;size&lt;/code&gt;で最大10件表示すると指定しています。&lt;br /&gt;
結果として、&lt;code&gt;aggregations.category.bucket&lt;/code&gt;にグルーピングした結果が入ります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 0, &lt;span class=&quot;synComment&quot;&gt;// hitsを表示したくないのであえてsizeは0に指定&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;aggs&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;terms&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category.name&amp;quot;&lt;/span&gt;,
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 10
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// 結果&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;took&amp;quot;&lt;/span&gt;: 1,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;timed_out&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_shards&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    ...
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 600,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;: 0,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[]&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;aggregations&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count_error_upper_bound&amp;quot;&lt;/span&gt;: 0,
         &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sum_other_doc_count&amp;quot;&lt;/span&gt;: 0,
         &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;buckets&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;イタリアン&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count&amp;quot;&lt;/span&gt;: 200
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
            &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;定食&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count&amp;quot;&lt;/span&gt;: 200
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
            &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;居酒屋&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count&amp;quot;&lt;/span&gt;: 200
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;検索結果のみフィルタする&lt;/h4&gt;一番最初に&lt;code&gt;filterd&lt;/code&gt;によって、検索結果やアグリゲーションの結果を絞り込むことができることを説明しましたが、検索結果は絞りたいが、アグリゲーションはナビゲーション的な役割を示しているので絞りたくないという場合が往々にあります。&lt;br /&gt;
そういう場合に、&lt;code&gt;post_filter&lt;/code&gt;キーを利用して、検索結果のみを絞りことができます。&lt;/p&gt;&lt;p&gt;例えば、以下のように&lt;code&gt;filterd&lt;/code&gt;内にカテゴリの検索条件を指定してしまうと、検索結果とともに、アグリゲーションも絞りこまれてしまっています。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;GET restaurant_development/_search
{
  &amp;#34;query&amp;#34;: {
    &amp;#34;filtered&amp;#34;: {
      &amp;#34;query&amp;#34;: { &amp;#34;match_all&amp;#34;: {} },
      &amp;#34;filter&amp;#34;: {
        &amp;#34;bool&amp;#34;: { // bool filterは複数のフィルタを使用できるようにする
          &amp;#34;must&amp;#34;: [ // mustは各フィルタがAND条件、shouldは各フィルタがOR条件
            { &amp;#34;term&amp;#34;: { &amp;#34;closed&amp;#34;: &amp;#34;false&amp;#34; } },
            { &amp;#34;term&amp;#34;: { &amp;#34;category.name&amp;#34;: &amp;#34;定食&amp;#34; } }
          ]
        }
      }
    }
  },
  &amp;#34;size&amp;#34;: 0,
  &amp;#34;aggregations&amp;#34;: {
    &amp;#34;category&amp;#34;: {
      &amp;#34;terms&amp;#34;: { &amp;#34;field&amp;#34;: &amp;#34;category.name&amp;#34;, &amp;#34;size&amp;#34;: 10 }
    }
  }
}

// 結果
{
   &amp;#34;took&amp;#34;: 5,
   &amp;#34;timed_out&amp;#34;: false,
   &amp;#34;_shards&amp;#34;: {
      &amp;#34;total&amp;#34;: 5,
      &amp;#34;successful&amp;#34;: 5,
      &amp;#34;failed&amp;#34;: 0
   },
   &amp;#34;hits&amp;#34;: {
      &amp;#34;total&amp;#34;: 200, // 検索結果は、category.nameとclosedで絞られて600件から200件になっている
      &amp;#34;max_score&amp;#34;: 0,
      &amp;#34;hits&amp;#34;: []
   },
   &amp;#34;aggregations&amp;#34;: {
      &amp;#34;category&amp;#34;: {
         &amp;#34;doc_count_error_upper_bound&amp;#34;: 0,
         &amp;#34;sum_other_doc_count&amp;#34;: 0,
         &amp;#34;buckets&amp;#34;: [ // アグリゲーションの結果もcategory.nameとclosedで絞られて「定食」のみになっている
            {
               &amp;#34;key&amp;#34;: &amp;#34;定食&amp;#34;,
               &amp;#34;doc_count&amp;#34;: 200
            }
         ]
      }
   }
}&lt;/pre&gt;&lt;p&gt;このように、アグリゲーションの結果も絞り込んでしまいたく場合は次のように&lt;code&gt;post_filter&lt;/code&gt;を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;filtered&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;filter&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;must&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;closed&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 0,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;aggregations&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;terms&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category.name&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 10 &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;post_filter&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;must&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category.name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;定食&amp;quot;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// 結果&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;took&amp;quot;&lt;/span&gt;: 4,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;timed_out&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_shards&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 5,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;successful&amp;quot;&lt;/span&gt;: 5,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;: 0
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 200, &lt;span class=&quot;synComment&quot;&gt;// 検索結果はcateogyr.nameとclosedで絞りこまれている&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;: 0,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[]&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;aggregations&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count_error_upper_bound&amp;quot;&lt;/span&gt;: 0,
         &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sum_other_doc_count&amp;quot;&lt;/span&gt;: 0,
         &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;buckets&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// アグリゲーションの結果は、closedのみで絞りこまれている&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;定食&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count&amp;quot;&lt;/span&gt;: 200
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
            &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;イタリアン&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count&amp;quot;&lt;/span&gt;: 100
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
            &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;居酒屋&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;doc_count&amp;quot;&lt;/span&gt;: 100
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-4-category-aggregation&quot;&gt;カテゴリのアグリゲーションの実装&lt;br /&gt;
次のようにカテゴリで検索結果を絞り込めるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151021/20151021235853.png&quot; alt=&quot;f:id:nipe880324:20151021235853p:plain:w420&quot; title=&quot;f:id:nipe880324:20151021235853p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;アグリゲーションのクエリを作成&lt;/h4&gt;まずは、アグリゲーションのクエリを作成します。アグリゲーション名は「category」、アグリゲーションタイプには「Terms Aggregation」を利用します。&lt;br /&gt;
&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby/blob/master/elasticsearch-dsl/lib/elasticsearch/dsl/search/aggregations/terms.rb&quot;&gt;elasticsearch-ruby/elasticsearch-dsl/lib/elasticsearch/dsl/search/aggregations/terms.rb&lt;/a&gt;を参考にして、&lt;code&gt;search_definition&lt;/code&gt;にカテゴリのアグリゲーションを追加します。&lt;br /&gt;
また、検索結果のみにカテゴリの検索条件を適用させたいので&lt;code&gt;post_filter&lt;/code&gt;も利用しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
  &lt;span class=&quot;synComment&quot;&gt;# 検索パラメータを取得&lt;/span&gt;
  ...
  category_name = params[&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;]

  search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
    ...

    &lt;span class=&quot;synComment&quot;&gt;# アグリゲーション - 集約をする&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/aggregations.html&lt;/span&gt;
    aggregation &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      terms &lt;span class=&quot;synConstant&quot;&gt;field&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# Post Filter - 検索結果のみにフィルターをしたい場合に使う。アグリゲーションに対してフィルターされない&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/_post_filter.html&lt;/span&gt;
    post_filter {
      bool {
        must {
          term &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; category_name
        } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; category_name.present?
      }
    } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; category_name.present?
  }
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;カテゴリのアグリゲーションの表示&lt;/h4&gt;カテゴリのアグリゲーションを画面に表示させる前に、Elasticsearchからのレスポンスがどのように構造になっているか確認します。基本的には、Marvel Senseで実行した結果と同じ構造になっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# rails console&lt;/span&gt;
resposne = __elasticsearch__.search(search_definition)

&lt;span class=&quot;synComment&quot;&gt;# aggregationsキーにアグリゲーションの結果が入っている&lt;/span&gt;
response.aggregations &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; アグリゲーション結果が入っている&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 自分が指定したアグリゲーション名(category)のbucketsに値が入っている&lt;/span&gt;
response.aggregations.category.buckets
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# [&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   {&amp;quot;key&amp;quot;=&amp;gt;&amp;quot;定食&amp;quot;, &amp;quot;doc_count&amp;quot;=&amp;gt;200},&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   {&amp;quot;key&amp;quot;=&amp;gt;&amp;quot;イタリアン&amp;quot;, &amp;quot;doc_count&amp;quot;=&amp;gt;100},&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   {&amp;quot;key&amp;quot;=&amp;gt;&amp;quot;居酒屋&amp;quot;, &amp;quot;doc_count&amp;quot;=&amp;gt;100}&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# ]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面にこれらを表示させるようにします。&lt;br /&gt;
例によってアグリゲーションのカテゴリリンクを作成する&lt;code&gt;category_aggs_link&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を作成しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索フォーム --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; root_path, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :get, enforce_utf8: false do %&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- アグリゲーションの表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- カテゴリ --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel panel-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel-heading&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; category_aggs_link(name:&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;カテゴリ一覧&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, all: true) %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.aggregations.category.buckets.each do |bucket| %&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group-item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; category_aggs_link(name:&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; bucket[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;key&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;], count: bucket.doc_count) %&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
アグリゲーションのカテゴリリンクを表示する&lt;code&gt;category_aggs_link&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を作成します。&lt;br /&gt;
また、&lt;code&gt;query_string&lt;/code&gt;に&lt;code&gt;:cateogy&lt;/code&gt;を追加して、カテゴリの条件を引き継げるようにしておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# アグリゲーションのカテゴリリンクを返す&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   name:  [String]  リンクのテキスト名&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   count: [Integer] カテゴリのドキュメント数。リンクのテキスト名に追加されて表示される (オプション)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   all:   [Boolean] true: カテゴリ一覧のリンク、false: カテゴリ一覧以外のリンク（オプション）&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;category_aggs_link&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;:, &lt;span class=&quot;synConstant&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
    &lt;span class=&quot;synComment&quot;&gt;# 表示するリンク名&lt;/span&gt;
    link_text = count ? &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;name&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;count&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : name

    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; all &lt;span class=&quot;synComment&quot;&gt;# カテゴリ一覧のリンク&lt;/span&gt;
      params = query_string.except(&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# クエリストリングからcategoryを抜く&lt;/span&gt;
      url = params.empty? ? &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# urlを作成&lt;/span&gt;
      link_to link_text, url &lt;span class=&quot;synComment&quot;&gt;# aタグ作成&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# カテゴリ一覧以外のリンク&lt;/span&gt;
      current = query_string.fetch(&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# 現在選択されているカテゴリ名&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; name == current
        name &lt;span class=&quot;synComment&quot;&gt;# 現在選択されているカテゴリはテキストで表示&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
        params = query_string.merge(&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: name)
        url = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
        link_to link_text, url
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 各リンクで引き継ぐクエリストリングパラメータ&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 表示件数やソート順などのリンクを押した時に`q`や`closed`などのパラメータは引き続き設定したままにするために使用&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 下記で`:page`は設定しないので、リンクを押した時に、ページは0ページ目ににクリアされる&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;query_string&lt;/span&gt;
    params.slice(&lt;span class=&quot;synConstant&quot;&gt;:q&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:per&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;画面の確認&lt;/h4&gt;カテゴリのアグリゲーションを表示させます。また、リンクを押すと、そのカテゴリで検索結果が絞られます。&lt;br /&gt;
このとき&lt;code&gt;post_filter&lt;/code&gt;を使っているので、アグリゲーションの結果は絞られていません。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151021/20151021235853.png&quot; alt=&quot;f:id:nipe880324:20151021235853p:plain:w420&quot; title=&quot;f:id:nipe880324:20151021235853p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;例によって、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;ログからElasticsearchのクエリを確認すると、&lt;code&gt;aggregations&lt;/code&gt;でカテゴリ名で集約、&lt;code&gt;post_filter&lt;/code&gt;でカテゴリ名でフィルタしていることがわかります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Started GET &amp;#34;/?category=%E5%AE%9A%E9%A3%9F&amp;#34; for ::1 at 2015-10-18 22:19:59 +0900
Processing by TopController#index as HTML
  Parameters: {&amp;#34;category&amp;#34;=&amp;gt;&amp;#34;定食&amp;#34;}
  Restaurant Search (5.8ms) {index: &amp;#34;restaurant_development&amp;#34;, type: &amp;#34;restaurant&amp;#34;, body: {query: {filtered: {query: {match_all: {}}, filter: {term: {closed: &amp;#34;false&amp;#34;}}}}, post_filter: {bool: {must: [{term: {&amp;#34;category.name&amp;#34;=&amp;gt;&amp;#34;定食&amp;#34;}}]}}, aggregations: {category: {terms: {field: &amp;#34;category.name&amp;#34;, size: 10}}}, sort: [{&amp;#34;created_at&amp;#34;=&amp;gt;{order: &amp;#34;desc&amp;#34;}}]}, size: 40, from: 0}
  Rendered top/index.html.erb within layouts/application (23.7ms)
Completed 200 OK in 59ms (Views: 51.8ms | ActiveRecord: 0.0ms | Elasticsearch: 5.8ms)&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-4-multi-category&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;カテゴリの検索に対応&lt;br /&gt;
現在は１つのカテゴリでしか絞れないので、次のように&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のカテゴリで絞れるように修正します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151021/20151021235921.png&quot; alt=&quot;f:id:nipe880324:20151021235921p:plain:w420&quot; title=&quot;f:id:nipe880324:20151021235921p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;h4&gt;デリミタの定義&lt;/h4&gt;デリミタ（セパレータ）を&lt;code&gt;+&lt;/code&gt;にし、&lt;code&gt;/?category=定食+イタリアン&lt;/code&gt;といったようなURLで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のカテゴリを検索できるようにします。&lt;/p&gt;&lt;p&gt;このとき注意しないといけないのが、カテゴリ名に&lt;code&gt;+&lt;/code&gt;が入らないようにしないといけません。&lt;br /&gt;
カテゴリ名に&lt;code&gt;+&lt;/code&gt;が入ってしまうと、誤ってデリミタで分割してしまいそのカテゴリでうまく検索できなくなってしまいます。&lt;/p&gt;&lt;p&gt;カテゴリ名に&lt;code&gt;+&lt;/code&gt;が入らないようにバリデーションを追加しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# デリミタ: 複数カテゴリなどの検索条件に使用する&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/models/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:restaurants&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# +を含んでいるカテゴリ名はinvalidとする&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# REgexp.newで作成される正規表現 /\/+/&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;without&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Regexp&lt;/span&gt;.new(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;\\#{&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;) }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# うまくバリデーションが設定されているか確認&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).valid? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hoge+hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).valid? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
カテゴリリンクを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のカテゴリを処理できるように修正します。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;方式にして、現在選択されているカテゴリは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;をON、選択されていないカテゴリは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;をOFFにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# カテゴリリンクのパターン&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   カテゴリ一覧のリンク    =&amp;gt; params[:category]を覗いたリンクを作成&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   カテゴリ一覧以外のリンク(現在選択されている)  =&amp;gt; params[:category]の値からカテゴリ名を削除&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   カテゴリ一覧以外のリンク(現在選択されていない) =&amp;gt; params[:category]の値にカテゴリ名を追加&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 引数&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   name:  [String]  リンクのテキスト名&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   count: [Integer] カテゴリのドキュメント数。リンクのテキスト名に追加されて表示される (オプション)&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   all:   [Boolean] true: カテゴリ一覧のリンク、false: カテゴリ一覧以外のリンク（オプション）&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;category_aggs_link&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;:, &lt;span class=&quot;synConstant&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
  &lt;span class=&quot;synComment&quot;&gt;# 表示するリンク名&lt;/span&gt;
  link_text = count ? &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;name&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;count&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : name

  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; all &lt;span class=&quot;synComment&quot;&gt;# カテゴリ一覧のリンク&lt;/span&gt;
    params = query_string.except(&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# クエリストリングからcategoryを抜く&lt;/span&gt;
    url = params.empty? ? &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# aタグのリンク&lt;/span&gt;
    link_to link_text, url &lt;span class=&quot;synComment&quot;&gt;# aタグ作成&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# カテゴリ一覧以外のリンク&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 現在選択されているカテゴリ名の取得ために、カテゴリ名をデリミタで分割する。値がない場合もあるので、tryを使う&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# query_string[:categoyr]は nil や &#39;定食&#39; 、 &#39;定食+イタリアン&#39; などの値がくる&lt;/span&gt;
    currents = query_string[&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;].try(&lt;span class=&quot;synConstant&quot;&gt;:split&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;) || []

    &lt;span class=&quot;synComment&quot;&gt;# 複数のカテゴリで結合できるように、現在選択されている場合はパラメータからカテゴリ名を削除、選択されていない場合はカテゴリ名を追加する&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; name.in?(currents) &lt;span class=&quot;synComment&quot;&gt;# 現在選択されているカテゴリ名&lt;/span&gt;
      category_names = currents - [name]
      params = category_names.empty? ? query_string.except(&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;) : query_string.merge(&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: category_names.join(&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;))
      url = params.empty? ? &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
      link_to url &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;input type=&#39;checkbox&#39; checked=&#39;checked&#39;&amp;gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;link_text&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;.html_safe
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 現在選択されていないカテゴリ名&lt;/span&gt;
      category_names = (currents + [name]).uniq
      params = query_string.merge(&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: category_names.join(&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;))
      url = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
      link_to url &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;input type=&#39;checkbox&#39;&amp;gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;link_text&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;.html_safe
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;search&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;も&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;カテゴリに対応できるようにします。&lt;br /&gt;
カテゴリ名パラメータをデリミタで分割し、&lt;code&gt;post_filter&lt;/code&gt;で&lt;code&gt;should&lt;/code&gt;で各カテゴリ名をOR検索するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;
&lt;span class=&quot;synComment&quot;&gt;# Elasticsearchからのレスポンスを返す&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
  &lt;span class=&quot;synComment&quot;&gt;# 検索パラメータを取得&lt;/span&gt;
  ...
  &lt;span class=&quot;synComment&quot;&gt;# カテゴリ名をデリミタで分割する。値がない場合もあるので、tryを使う&lt;/span&gt;
  category_names = params[&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;].try(&lt;span class=&quot;synConstant&quot;&gt;:split&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;) || []

  &lt;span class=&quot;synComment&quot;&gt;# 検索クエリを作成（Elasticsearch::DSLを利用）&lt;/span&gt;
  search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
    ...

    &lt;span class=&quot;synComment&quot;&gt;# Post Filter - 検索結果のみにフィルターをしたい場合に使う。アグリゲーションに対してフィルターされない&lt;/span&gt;
    post_filter {
      bool {
        &lt;span class=&quot;synComment&quot;&gt;# 複数のカテゴリでOR検索したいので、shouldに変更し、eachで回す&lt;/span&gt;
        category_names.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;category_name&lt;/span&gt;|
          should { term &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; category_name }
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      }
    } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; category_names.present?
  }
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;動作確認&lt;/h4&gt;次の通り、サイドバーのカテゴリ一覧が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;になり、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;を選択できるようになりました。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151021/20151021235921.png&quot; alt=&quot;f:id:nipe880324:20151021235921p:plain:w420&quot; title=&quot;f:id:nipe880324:20151021235921p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;ログでも、&lt;code&gt;post_filter: {bool: {should: [{term: {&quot;category.name&quot;=&gt;&quot;定食&quot;}}, {term: {&quot;category.name&quot;=&gt;&quot;イタリアン&quot;}}]}}&lt;/code&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のカテゴリ名で検索結果を絞っていることがわかります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Started GET &amp;#34;/?category=%E5%AE%9A%E9%A3%9F%2B%E3%82%A4%E3%82%BF%E3%83%AA%E3%82%A2%E3%83%B3&amp;amp;per=80&amp;#34; for ::1 at 2015-10-18 22:27:39 +0900
Processing by TopController#index as HTML
  Parameters: {&amp;#34;category&amp;#34;=&amp;gt;&amp;#34;定食+イタリアン&amp;#34;, &amp;#34;per&amp;#34;=&amp;gt;&amp;#34;80&amp;#34;}
  Restaurant Search (10.7ms) {index: &amp;#34;restaurant_development&amp;#34;, type: &amp;#34;restaurant&amp;#34;, body: {query: {filtered: {query: {match_all: {}}, filter: {term: {closed: &amp;#34;false&amp;#34;}}}}, post_filter: {bool: {should: [{term: {&amp;#34;category.name&amp;#34;=&amp;gt;&amp;#34;定食&amp;#34;}}, {term: {&amp;#34;category.name&amp;#34;=&amp;gt;&amp;#34;イタリアン&amp;#34;}}]}}, aggregations: {category: {terms: {field: &amp;#34;category.name&amp;#34;, size: 10}}}, sort: [{&amp;#34;created_at&amp;#34;=&amp;gt;{order: &amp;#34;desc&amp;#34;}}]}, size: 80, from: 0}
  Rendered top/index.html.erb within layouts/application (29.8ms)
Completed 200 OK in 58ms (Views: 46.4ms | ActiveRecord: 0.0ms | Elasticsearch: 10.7ms)&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-4-pref&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県のアグリゲーションと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県の検索&lt;br /&gt;
カテゴリと同じように&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県もアグリゲーションを行います。また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県で絞り込めるようにします。&lt;br /&gt;
また、アグリゲーション同士の検索条件は連動するようにします。例えば、「カテゴリ:定食屋」で絞りこむと、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県のアグリゲーションは「カテゴリ:定食屋」の集計したものを表示するようにします。逆もしかりです。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151022/20151022000118.png&quot; alt=&quot;f:id:nipe880324:20151022000118p:plain:w420&quot; title=&quot;f:id:nipe880324:20151022000118p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県のアグリゲーション&lt;/h4&gt;画面に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県(pref)のアグリゲーションを表示、絞り込むようにできるようにします。&lt;br /&gt;
例によって、&lt;code&gt;pref_aggs_link&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使用してリンクを表示します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;

...
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- アグリゲーションの表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- カテゴリ --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel panel-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 都道府県 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel panel-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel-heading&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; pref_aggs_link(name:&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;都道府県一覧&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, all: true) %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.aggregations.pref.buckets.each do |bucket| %&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group-item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; pref_aggs_link(name:&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; bucket[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;key&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;], count: bucket.doc_count) %&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、アグリゲーションの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県のリンクを作成する&lt;code&gt;pref_aggs_link&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を実装します。&lt;br /&gt;
&lt;code&gt;category_aggs_link&lt;/code&gt;と&lt;code&gt;pref_aggs_link&lt;/code&gt;はキー名が&lt;code&gt;category&lt;/code&gt;か&lt;code&gt;pref&lt;/code&gt;だけが異なるだけなので、&lt;code&gt;aggs_link&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に共通部分を切り出しました。&lt;br /&gt;
また、&lt;code&gt;query_string&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に&lt;code&gt;:pref&lt;/code&gt;キーを追加しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# アグリゲーションのカテゴリリンクを作成&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;category_aggs_link&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;:, &lt;span class=&quot;synConstant&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
    aggs_link(&lt;span class=&quot;synConstant&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: name, &lt;span class=&quot;synConstant&quot;&gt;count&lt;/span&gt;: count, &lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: all)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# アグリゲーションの都道府県リンクを作成&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;pref_aggs_link&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;:, &lt;span class=&quot;synConstant&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
    aggs_link(&lt;span class=&quot;synConstant&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: name, &lt;span class=&quot;synConstant&quot;&gt;count&lt;/span&gt;: count, &lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: all)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# アグリゲーションのリンクを作成&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# リンクのパターン&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   一覧のリンク    =&amp;gt; params[key]を除いたリンクを作成&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   一覧以外のリンク(現在選択されている)  =&amp;gt; params[key]の値からカテゴリ名を削除&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   一覧以外のリンク(現在選択されていない) =&amp;gt; params[key]の値にカテゴリ名を追加&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 引数&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   name:  [String]  リンクのテキスト名&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   count: [Integer] カテゴリのドキュメント数。リンクのテキスト名に追加されて表示される (オプション)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   all:   [Boolean] true: リンク、false: 一覧以外のリンク（オプション）&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;aggs_link&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;key&lt;/span&gt;:, &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;:, &lt;span class=&quot;synConstant&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
    &lt;span class=&quot;synComment&quot;&gt;# 表示するリンク名&lt;/span&gt;
    link_text = count ? &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;name&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;count&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : name

    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; all &lt;span class=&quot;synComment&quot;&gt;# 一覧のリンク&lt;/span&gt;
      params = query_string.except(key)
      url = params.empty? ? &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
      link_to link_text, url
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 一覧以外のリンク&lt;/span&gt;
      currents = query_string[key].try(&lt;span class=&quot;synConstant&quot;&gt;:split&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;) || [] &lt;span class=&quot;synComment&quot;&gt;# 現在選択されているカテゴリ名&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# 複数のカテゴリで結合できるように、現在選択されている場合はパラメータからカテゴリ名を削除、選択されていない場合はカテゴリ名を追加する&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; name.in?(currents) &lt;span class=&quot;synComment&quot;&gt;# 現在選択されているカテゴリ名&lt;/span&gt;
        aggs_names = currents - [name]
        params = aggs_names.empty? ? query_string.except(key) : query_string.merge(key =&amp;gt; aggs_names.join(&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;))
        url = params.empty? ? &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
        link_to url &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;input type=&#39;checkbox&#39; checked=&#39;checked&#39;&amp;gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;link_text&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;.html_safe
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 現在選択されていないカテゴリ名&lt;/span&gt;
        aggs_names = (currents + [name]).uniq
        params = query_string.merge(key =&amp;gt; aggs_names.join(&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;))
        url = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params.to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
        link_to url &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;input type=&#39;checkbox&#39;&amp;gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;link_text&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;.html_safe
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 各リンクで引き継ぐクエリストリングパラメータ&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;query_string&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# :prefを追加&lt;/span&gt;
    params.slice(&lt;span class=&quot;synConstant&quot;&gt;:q&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:per&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
最後に、検索クエリを修正します。&lt;code&gt;parmas[:pref]&lt;/code&gt;を受け取るようにし、アグリゲーションとPost Filterにprefを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
  &lt;span class=&quot;synComment&quot;&gt;# 検索パラメータを取得&lt;/span&gt;
  ...
  pref_names     = params[&lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt;].try(&lt;span class=&quot;synConstant&quot;&gt;:split&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DELIMITER&lt;/span&gt;) || []

  search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
    ...

    &lt;span class=&quot;synComment&quot;&gt;# アグリゲーション&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/aggregations.html&lt;/span&gt;
    aggregation &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      terms &lt;span class=&quot;synConstant&quot;&gt;field&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# アグリゲーションにprefを追加。sizeは都道府県が47なので、47にしておきます&lt;/span&gt;
    aggregation &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      terms &lt;span class=&quot;synConstant&quot;&gt;field&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pref.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;47&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# Post Filter - 検索結果のみにフィルターをしたい場合に使う。アグリゲーションに対してフィルターされない&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Post Filter - 検索結果のみにフィルターをしたい場合に使う。アグリゲーションに対してフィルターされない&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/_post_filter.html&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; category_names.present? || pref_names.present?
      post_filter {
        &lt;span class=&quot;synComment&quot;&gt;# (カテゴリ1 OR カテゴリ2 OR ...) AND (都道府県1 OR 都道府県2 OR ...) となる&lt;/span&gt;
        bool {
          &lt;span class=&quot;synComment&quot;&gt;# カテゴリのフィルタ&lt;/span&gt;
          must {
            bool {
              category_names.each { |&lt;span class=&quot;synIdentifier&quot;&gt;category_name&lt;/span&gt;|
                should { term &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; category_name }
              }
            }
          } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; category_names.present?

          &lt;span class=&quot;synComment&quot;&gt;# 都道府県のフィルタ&lt;/span&gt;
          must {
            bool {
              pref_names.each { |&lt;span class=&quot;synIdentifier&quot;&gt;pref_name&lt;/span&gt;|
                should { term &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pref.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; pref_name }
              }
            }
          } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; pref_names.present?
        }
      }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  }
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;アグリゲーション同士の検索条件の連携&lt;/h4&gt;&lt;code&gt;post_filter&lt;/code&gt;で検索条件を指定したので、検索結果はうまく表示されるようになりました。&lt;br /&gt;
しかし、サイドバーのアグリゲーションのカウント表示はアグリゲーション内でフィルタを行っていないのでうまく表示されていないので表示するようにします。&lt;/p&gt;&lt;p&gt;具体的には、カテゴリを選択すると、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県アグリゲーション内で選択されたカテゴリでフィルタします。&lt;br /&gt;
また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県を選択すると、カテゴリアグリゲーション内で選択された&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県でフィルタをします。&lt;/p&gt;&lt;p&gt;アグリゲーションにフィルタを実施するには、Filter Aggregationを使います。&lt;br /&gt;
&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby/blob/0cf4dd7dcc4c990dc03c33c5c2b4946e4e733bbe/elasticsearch-dsl/lib/elasticsearch/dsl/search/aggregations/filter.rb
&quot; target=&quot;_blank&quot;&gt;elasticsearch-ruby/elasticsearch-dsl/lib/elasticsearch/dsl/search/aggregations/filter.rb&lt;/a&gt;を参考にし、フィルタをアグリゲーションに追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Elasticsearchのクエリを作成し、検索を実施する&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
  ...

  search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
    query {
      ...
    }

    sort {
      ...
    }

    &lt;span class=&quot;synComment&quot;&gt;# アグリゲーション&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/aggregations.html&lt;/span&gt;
    aggregation &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# categoryアグリゲーションのフィルタ条件&lt;/span&gt;
      condition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Filters&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Bool&lt;/span&gt;.new {
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; pref_names.present?
          pref_names.each { |&lt;span class=&quot;synIdentifier&quot;&gt;pref_name&lt;/span&gt;|
            should { term &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pref.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; pref_name }
          }
        &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
          must { match_all }
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      }

      &lt;span class=&quot;synComment&quot;&gt;# アグリゲーションのフィルタを行う&lt;/span&gt;
      filter condition &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        aggregation &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
          terms &lt;span class=&quot;synConstant&quot;&gt;field&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    aggregation &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# prefアグリゲーションのフィルタ条件&lt;/span&gt;
      condition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Filters&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Bool&lt;/span&gt;.new {
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; category_names.present?
          category_names.each { |&lt;span class=&quot;synIdentifier&quot;&gt;category_name&lt;/span&gt;|
            should { term &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; category_name }
          }
        &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
          must { match_all }
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      }

      &lt;span class=&quot;synComment&quot;&gt;# アグリゲーションのフィルタを行う&lt;/span&gt;
      filter condition &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        aggregation &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
          terms &lt;span class=&quot;synConstant&quot;&gt;field&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pref.name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;47&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# Post Filter&lt;/span&gt;
    post_filter {
      ...
    }
  }
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
フィルタアグリゲーションを追加したことでレスポンスの結果の構造が変わりましたので、ビューファイルを修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- アグリゲーションの表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- カテゴリ --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel panel-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
      &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- category から category.category に変更 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.aggregations.category.category.buckets.each do |bucket| %&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 都道府県 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel panel-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
      &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- pref から pref.pref に変更 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.aggregations.pref.pref.buckets.each do |bucket| %&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;動作確認&lt;/h4&gt;これで、カテゴリと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県のアグリゲーション同士が連動するようになりました。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151022/20151022000118.png&quot; alt=&quot;f:id:nipe880324:20151022000118p:plain:w420&quot; title=&quot;f:id:nipe880324:20151022000118p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Elasticsearchのクエリが長くなってきて見づらくなってきましたが一応次のようになります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Started GET &amp;#34;/?category=%E5%AE%9A%E9%A3%9F%2B%E3%82%A4%E3%82%BF%E3%83%AA%E3%82%A2%E3%83%B3&amp;amp;pref=%E7%A5%9E%E5%A5%88%E5%B7%9D%E7%9C%8C&amp;#34; for ::1 at 2015-10-18 23:02:08 +0900
Processing by TopController#index as HTML
  Parameters: {&amp;#34;category&amp;#34;=&amp;gt;&amp;#34;定食+イタリアン&amp;#34;, &amp;#34;pref&amp;#34;=&amp;gt;&amp;#34;神奈川県&amp;#34;}
  Restaurant Search (9.4ms) {index: &amp;#34;restaurant_development&amp;#34;, type: &amp;#34;restaurant&amp;#34;, body: {query: {filtered: {query: {match_all: {}}, filter: {term: {closed: &amp;#34;false&amp;#34;}}}}, post_filter: {bool: {must: [{bool: {should: [{term: {&amp;#34;category.name&amp;#34;=&amp;gt;&amp;#34;定食&amp;#34;}}, {term: {&amp;#34;category.name&amp;#34;=&amp;gt;&amp;#34;イタリアン&amp;#34;}}]}}, {bool: {should: [{term: {&amp;#34;pref.name&amp;#34;=&amp;gt;&amp;#34;神奈川県&amp;#34;}}]}}]}}, aggregations: {category: {filter: #&amp;lt;Elasticsearch::DSL::Search::Filters::Bool:0x007fbc27bda188 @hash={bool: {should: [{term: {&amp;#34;pref.name&amp;#34;=&amp;gt;&amp;#34;神奈川県&amp;#34;}}]}}, @args={}, @options={}, @block=#&amp;lt;Proc:0x007fbc27bd9df0@/Users/shoji/GDrive/rails/rails_samples/elasticsearch_test/app/models/restaurant.rb:107&amp;gt;&amp;gt;, aggregations: {category: {terms: {field: &amp;#34;category.name&amp;#34;, size: 10}}}}, pref: {filter: #&amp;lt;Elasticsearch::DSL::Search::Filters::Bool:0x007fbc27bd2aa0 @hash={bool: {should: [{term: {&amp;#34;category.name&amp;#34;=&amp;gt;&amp;#34;定食&amp;#34;}}, {term: {&amp;#34;category.name&amp;#34;=&amp;gt;&amp;#34;イタリアン&amp;#34;}}]}}, @args={}, @options={}, @block=#&amp;lt;Proc:0x007fbc27bd2938@/Users/shoji/GDrive/rails/rails_samples/elasticsearch_test/app/models/restaurant.rb:127&amp;gt;&amp;gt;, aggregations: {pref: {terms: {field: &amp;#34;pref.name&amp;#34;, size: 47}}}}}, sort: [{&amp;#34;created_at&amp;#34;=&amp;gt;{order: &amp;#34;desc&amp;#34;}}]}, size: 40, from: 0}
  Rendered top/index.html.erb within layouts/application (35.8ms)
Completed 200 OK in 96ms (Views: 85.1ms | ActiveRecord: 0.0ms | Elasticsearch: 9.4ms)&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;まとめ&lt;/h3&gt;
    &lt;p&gt;今回はアグリゲーション（ファセット）とPost Filterを使い、よくあるファセット検索を実装しました。&lt;br /&gt;
次は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151025/1445703231&quot;&gt;ハイライト機能&lt;/a&gt;」について説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-post-filter.html&quot;&gt;Post filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 22 Oct 2015 00:03:18 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653458415125052769</guid>
          
            <category>elasticsearch</category>
          
            <category>検索</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでElasticsearch: ソート機能を実装</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20151021/1445353566</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170217.png&quot; alt=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;前々回は「&lt;a href=&quot;/entry/20151018/1445142266&quot;&gt;RailsでElasticsearchを使って簡単な全文検索&lt;/a&gt;」、&lt;br /&gt;
前回は、「&lt;a href=&quot;/entry/20151019/1445265581&quot;&gt;ページネーション・１ページあたりの表示件数&lt;/a&gt;」を実装しました。&lt;br /&gt;
今回は、「&lt;b&gt;ソート機能&lt;/b&gt;」を実装します。Elasticsearchのソート機能があるのでかなり簡単に作成できます。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-3-es-query&quot;&gt;ソートのElasticsearchのクエリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-3-sort&quot;&gt;ソート機能を実装&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac%20OS%20X&quot;&gt;Mac OS X&lt;/a&gt; 10.11 El Capitan&lt;/li&gt;
&lt;li&gt;elasticsearch 1.7.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/dsl&quot;&gt;dsl&lt;/a&gt; 0.1.2&lt;/li&gt;
&lt;li&gt;elasticsearch-model 0.1.8&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 0.1.8&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-3-es-query&quot;&gt;1. ソートのElasticsearchのクエリ&lt;/h3&gt;&lt;code&gt;sort&lt;/code&gt;パラメータを指定することで、ソートすることができます。&lt;br /&gt;
ソートキーと&lt;code&gt;order&lt;/code&gt;にソート順の「&lt;code&gt;asc&lt;/code&gt;(昇順)」か「&lt;code&gt;desc&lt;/code&gt;(降順)」を指定します。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;日付でソート&lt;/h4&gt;デフォルトのソート順は&lt;code&gt;asc&lt;/code&gt;(昇順)です。&lt;br /&gt;
&lt;a href=&quot;http://localhost:9200/_plugin/marvel/sense/index.html&quot;&gt;Marvel Sense&lt;/a&gt;を開き下記クエリを実行します。&lt;br /&gt;
ドキュメントを&lt;code&gt;created_at&lt;/code&gt;の降順(desc)に並べます。つまり、「新しい順」に並べます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sort&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;order&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;desc&amp;quot;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これを使えば、商品などで価格フィールドがある場合は、「安い順」「高い順」なども簡単にできます。&lt;/p&gt;&lt;p&gt;ソートするフィールドに値がない場合に、最後に表示するか(&lt;code&gt;_last&lt;/code&gt;)、最初に表示するか(&lt;code&gt;_first&lt;/code&gt;)を&lt;code&gt;missing&lt;/code&gt;で指定することもできます。&lt;br /&gt;
デフォルトでは最後に表示するようになっているので特段指定しなくてもいいと思います。&lt;br /&gt;
下記は、created_atに値がないドキュメントを最初に表示します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sort&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;order&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;desc&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;missing&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_first&amp;quot;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;関連度でソート&lt;/h4&gt;関連度でソートをする場合、デフォルトのソート順は&lt;code&gt;desc&lt;/code&gt;(関連度が高い順)です。&lt;br /&gt;
&lt;code&gt;_score&lt;/code&gt;を指定することで関連度順にソートできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sort&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;例えば、titleとcommentがあるときに、titleにマッチしたほうがスコアを高くなるように設定するなどして、関連度のスコアを変えます。スコアの設定は省略します。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-3-sort&quot;&gt;2. ソート機能を実装&lt;/h3&gt;「出店の新しい順」「あいうえお順」などのソート順を指定できるリンクを追加します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018052901.png&quot; alt=&quot;f:id:nipe880324:20151018052901p:plain:w420&quot; title=&quot;f:id:nipe880324:20151018052901p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;ソート順のリンクを表示&lt;/h4&gt;ソート順のリンクを画面に表示する&lt;code&gt;sort_links&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;でリンクを作成します。&lt;br /&gt;
また、&lt;code&gt;created_at&lt;/code&gt;を出店日とし、画面に表示させます。&lt;br /&gt;
（※&lt;code&gt;created_at&lt;/code&gt;はあくまでレコードが作成された日付なので、管理上は&lt;code&gt;opend_at&lt;/code&gt;などカラムを新たに追加し、その値を出店日としたほうがよいです）&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;検索結果: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; current_page(params:&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; params) %&amp;gt;&lt;/span&gt; / 約&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @restaurants.results.total&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;件&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;表示件数: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; per_page_links&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; per_pages: [40, 80, 120], query_string: query_string(params) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- ソート順のリンクを追加 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;ソート順: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; sort_links&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.each do |r| %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;（&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.name_kana&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;）&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text-muted&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;都道府県: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.pref.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;カテゴリ: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.category.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 出店日を追加 --&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;出店日: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.created_at&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;sort_linksヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を作成&lt;/h4&gt;ソート順のリンクを返す&lt;code&gt;sort_links&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を作成します。&lt;br /&gt;
また、&lt;code&gt;query_string&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に&lt;code&gt;:sort&lt;/code&gt;キーを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  ...
  &lt;span class=&quot;synComment&quot;&gt;# ソートのリンクを返す&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;sort_links&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 現在の値の設定。例：{ sort: &#39;created_at+asc&#39; }&lt;/span&gt;
    current = { &lt;span class=&quot;synConstant&quot;&gt;sort&lt;/span&gt;: query_string.fetch(&lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;, ::&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;SORTS&lt;/span&gt;.first[&lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;]) }

    &lt;span class=&quot;synComment&quot;&gt;# aタグの作成&lt;/span&gt;
    ::&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;SORTS&lt;/span&gt;.map &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;sort&lt;/span&gt;|
      &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; current == sort.except(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;)
        sort[&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;# 現在設定されているソート順をテキストで表示&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
        link_to(sort[&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;], &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;query_string.merge(&lt;span class=&quot;synConstant&quot;&gt;sort&lt;/span&gt;: sort[&lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;]).to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;.join(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).html_safe
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# クエリストリングを作成&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;query_string&lt;/span&gt;(params)
    params.slice(&lt;span class=&quot;synConstant&quot;&gt;:q&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:per&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;ソート順のデータをRestaurantモデルにSORTSという定数で定義しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# ソートの組み合わせ&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# name: 画面に表示する文字列。sort: &amp;lt;ソートするキー名&amp;gt;+&amp;lt;ソート順序(asc or desc)&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;SORTS&lt;/span&gt; = [
    { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;出店の新しい順&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;sort&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at+desc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; },
    { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;出店の古い順&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;sort&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at+asc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; },
    { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;あいうえお順&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;sort&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name_kana+asc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
  ]
  ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ソートクエリの作成&lt;/h4&gt;&lt;code&gt;searchメソッド&lt;/code&gt;を修正して、ソートをできるようにします。&lt;br /&gt;
まずは、&lt;code&gt;params&lt;/code&gt;からソートキーとソートオーダーを取得します。&lt;br /&gt;
また、&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby/blob/master/elasticsearch-dsl/lib/elasticsearch/dsl/search/sort.rb&quot;&gt;lasticsearch-ruby/elasticsearch-dsl/lib/elasticsearch/dsl/search/sort.rb&lt;/a&gt;を参考にし、&lt;code&gt;search_definition&lt;/code&gt;に&lt;code&gt;sort&lt;/code&gt;を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;#app/models/restaurant.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
  &lt;span class=&quot;synComment&quot;&gt;# 検索パラメータを取得&lt;/span&gt;
  ...
  &lt;span class=&quot;synComment&quot;&gt;# sort_by: ソートのキー(&#39;created_at&#39;など)、order: ソートの順序(&#39;asc&#39;か&#39;desc&#39;)&lt;/span&gt;
  sort_by, order = (params[&lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;] || &lt;span class=&quot;synType&quot;&gt;SORTS&lt;/span&gt;.first[&lt;span class=&quot;synConstant&quot;&gt;:sort&lt;/span&gt;]).split(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

  &lt;span class=&quot;synComment&quot;&gt;# 検索クエリを作成（Elasticsearch::DSLを利用）&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 参考: https://github.com/elastic/elasticsearch-ruby/tree/master/elasticsearch-dsl&lt;/span&gt;
  search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
    query {
      ...
    }

    &lt;span class=&quot;synComment&quot;&gt;# ソート&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html&lt;/span&gt;
    sort {
      by sort_by, &lt;span class=&quot;synConstant&quot;&gt;order&lt;/span&gt;: order
    }
  }

  __elasticsearch__.search(search_definition)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ソートの動作確認&lt;/h4&gt;&lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt;にアクセスし、ソート順が指定できます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018052901.png&quot; alt=&quot;f:id:nipe880324:20151018052901p:plain:w420&quot; title=&quot;f:id:nipe880324:20151018052901p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;このときElasticsearchへのクエリは次のようになり、&lt;code&gt;sort&lt;/code&gt;でソートするフィールド名が、&lt;code&gt;order&lt;/code&gt;で順序が指定されていることがわかると思います。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Started GET &amp;#34;/?sort=created_at%2Basc&amp;#34; for ::1 at 2015-10-18 05:24:09 +0900
Processing by TopController#index as HTML
  Parameters: {&amp;#34;sort&amp;#34;=&amp;gt;&amp;#34;created_at+asc&amp;#34;}
  Restaurant Search (18.5ms) {index: &amp;#34;restaurant_development&amp;#34;, type: &amp;#34;restaurant&amp;#34;, body: {query: {filtered: {query: {match_all: {}}, filter: {term: {closed: &amp;#34;false&amp;#34;}}}}, sort: [{&amp;#34;created_at&amp;#34;=&amp;gt;{order: &amp;#34;asc&amp;#34;}}]}, size: 40, from: 0}
  Rendered top/index.html.erb within layouts/application (222.3ms)
Completed 200 OK in 472ms (Views: 441.0ms | ActiveRecord: 0.0ms | Elasticsearch: 18.5ms)&lt;/pre&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;まとめ&lt;/h3&gt;
    &lt;p&gt;今回は、Elasticsearchの&lt;code&gt;sort&lt;/code&gt;キーを追加することで簡単にソートに実装しました。&lt;br /&gt;
次回は、&lt;a herf=&quot;/entry/20151022/1445439798&quot;&gt;ファセット（アグリゲーション）と Post Filter&lt;/a&gt;を実装します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html&quot;&gt;Sort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 21 Oct 2015 00:06:06 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653458415124951669</guid>
          
            <category>elasticsearch</category>
          
            <category>検索</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでElasticsearch: ページネーションと１ページの表示件数を実装</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20151019/1445265581</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170217.png&quot; alt=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;前回の記事で、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151018/1445142266&quot; target=&quot;_blank&quot;&gt;RailsでElasticsearchを使って簡単な全文検索&lt;/a&gt;」を実装しました。&lt;br /&gt;
今回は、「&lt;b&gt;ページネーション・１ページあたりの表示件数&lt;/b&gt;」について実装していきます。&lt;br /&gt;
ページネーションの実装は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のページネーションを実装する有名なgemの&lt;a href=&quot;https://github.com/amatsuda/kaminari&quot; target=&quot;_blank&quot;&gt;kaminari&lt;/a&gt;を使って実装します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-2-seeds&quot;&gt;データを投入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-2-es-query&quot;&gt;ページネーションのためのElasticsearchのクエリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-2-pagination&quot;&gt;Elasticsearchでページネーションを実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-2-per-pages&quot;&gt;ページあたりの表示件数を変更&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac%20OS%20X&quot;&gt;Mac OS X&lt;/a&gt; 10.11 El Capitan&lt;/li&gt;
&lt;li&gt;elasticsearch 1.7.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/dsl&quot;&gt;dsl&lt;/a&gt; 0.1.2&lt;/li&gt;
&lt;li&gt;elasticsearch-model 0.1.8&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 0.1.8&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;rails-elasticsearch-2-seeds&quot;&gt;1. データを投入&lt;/h3&gt;ページネーションのためにデータを増やします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/seeds.rb&lt;/span&gt;
...
restaurants = [
  {
    &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;松屋&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;まつや&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;240-0113&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;三浦郡葉山町堀内24-3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: tokyo, &lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: teisyoku, &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
  },
  ...
] * &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 600件(6 * 100)のデータを作成&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.create!(restaurants)
&lt;/pre&gt;&lt;p&gt;データを投入します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:seed&lt;/pre&gt;&lt;p&gt;Elasticsearverを起動させます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;elasticsearch&lt;/pre&gt;&lt;p&gt;インデックスを作成しなおします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# rails console&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.create_index! &lt;span class=&quot;synConstant&quot;&gt;force&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.refresh_index!
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.import
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで、データベース、ドキュメントともに「600件」のレストランデータが作成されました。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-2-es-query&quot;&gt;2. ページネーションのためのElasticsearchのクエリ&lt;/h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;で実装を始める前に、Elasticsearchのクエリで表示件数やページ数を指定する方法を説明します。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;取得するドキュメント数を指定する&lt;/h4&gt;&lt;code&gt;size&lt;/code&gt;パラメータを指定することで取得するドキュメント数を指定できます。&lt;br /&gt;
デフォルトでは、「10件」となっています。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://localhost:9200/_plugin/marvel/sense/index.html&quot; target=&quot;_blank&quot;&gt;Marvel Sense&lt;/a&gt;を開き、&lt;code&gt;size&lt;/code&gt;を指定して、&lt;code&gt;match_all&lt;/code&gt;を実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 3
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;すると、結果は&lt;code&gt;hits.total&lt;/code&gt;は「600件」となっていますが、&lt;code&gt;hits.hits&lt;/code&gt;の数を数えると「3件」となっていることがわかります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// 検索結果&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;took&amp;quot;&lt;/span&gt;: 2,
 &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;timed_out&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
 &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_shards&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 5,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;successful&amp;quot;&lt;/span&gt;: 5,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;: 0
 &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
 &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 600,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;: 1,
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
       &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;restaurant_development&amp;quot;&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;restaurant&amp;quot;&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;73&amp;quot;&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;: 1,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_source&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;松屋&amp;quot;&lt;/span&gt;,
             &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name_kana&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;まつや&amp;quot;&lt;/span&gt;,
             &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;zip&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;240-0113&amp;quot;&lt;/span&gt;,
             &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;address&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;三浦郡葉山町堀内24-3&amp;quot;&lt;/span&gt;,
             ...
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
       ...
    &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;特定の範囲のドキュメントを取得する&lt;/h4&gt;&lt;code&gt;from&lt;/code&gt;と&lt;code&gt;size&lt;/code&gt;パラメータを指定することで取得するドキュメントの範囲を決めることができます。&lt;br /&gt;
&lt;code&gt;from&lt;/code&gt;のデフォルト値で「0」となりま。&lt;/p&gt;&lt;p&gt;下記は、ドキュメント「11から20」までを取得します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;from&amp;quot;&lt;/span&gt;: 10,
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 10
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-2-pagination&quot;&gt;3. Elasticsearchでページネーションを実装&lt;/h3&gt;&lt;code&gt;kaminari&lt;/code&gt;を使ってページネーションを実装します。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;kaminariのインストール&lt;/h4&gt;&lt;code&gt;Gemfile&lt;/code&gt;に&lt;b&gt;&lt;code&gt;elasticsearch&lt;/code&gt;の前&lt;/b&gt;に&lt;code&gt;gem &#39;kaminari&#39;&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kaminari&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-ruby.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch-dsl&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-ruby.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch-model&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-rails.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-rails.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;インストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ページネーションのビューを追加&lt;/h4&gt;Bootstrap 3のテーマでページネーションのビューファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g kaminari:views bootstrap3&lt;/pre&gt;&lt;p&gt;kaminariの&lt;code&gt;paginate&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使うことでページネーションのリンクを表示できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- ページネーションを表示するヘルパーメソッド --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; paginate&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @restaurants %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;fromとsizeを指定する&lt;/h4&gt;Elasticsearchの&lt;code&gt;from&lt;/code&gt;と&lt;code&gt;size&lt;/code&gt;を指定します。&lt;br /&gt;
&lt;code&gt;kaminari&lt;/code&gt;の機能の、&lt;code&gt;page&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で「ページ番号」を、&lt;code&gt;per&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で「ページあたりの表示数」を設定することで自動的に&lt;code&gt;from&lt;/code&gt;と&lt;code&gt;size&lt;/code&gt;が計算されて、Elasticsearchに渡されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/top_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TopController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# page(params[:page]) - ページ番号を取得(paginateヘルパーがいいかんじにやってくれる)&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# per(40) - 1ページあたりの表示数 40件&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@restaurants&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.search(params).page(params[&lt;span class=&quot;synConstant&quot;&gt;:page&lt;/span&gt;]).per(&lt;span class=&quot;synConstant&quot;&gt;40&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次のように&lt;code&gt;elasticsearch-model&lt;/code&gt;が内部的に&lt;code&gt;size&lt;/code&gt;と&lt;code&gt;from&lt;/code&gt;を計算しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# elasticsearch-rails/elasticsearch-model/lib/elasticsearch/model/response/pagination.rb&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;@page&lt;/span&gt;     = [num.to_i, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;].max
&lt;span class=&quot;synIdentifier&quot;&gt;@per_page&lt;/span&gt; ||= __default_per_page
&lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.search.definition.update &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@per_page&lt;/span&gt;,
                              &lt;span class=&quot;synConstant&quot;&gt;from&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@per_page&lt;/span&gt; * (&lt;span class=&quot;synIdentifier&quot;&gt;@page&lt;/span&gt; - &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ページネーションの動作確認&lt;/h4&gt;画面をロードすると１ページあたり40件表示されるようになります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018040113.png&quot; alt=&quot;f:id:nipe880324:20151018040113p:plain:w420&quot; title=&quot;f:id:nipe880324:20151018040113p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;このとき、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;ログのElasticsearchに発行されているクエリを見ると、&lt;code&gt;size: 40, from: 40&lt;/code&gt;となっているので、うまくElasticsearchに値を渡せているとわかります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Started GET &amp;#34;/?page=2&amp;#34; for ::1 at 2015-10-18 00:10:54 +0900
Processing by TopController#index as HTML
  Parameters: {&amp;#34;page&amp;#34;=&amp;gt;&amp;#34;2&amp;#34;}
  Restaurant Search (22.5ms) {index: &amp;#34;restaurant_development&amp;#34;, type: &amp;#34;restaurant&amp;#34;, body: {query: {filtered: {query: {match_all: {}}}}}, size: 40, from: 40}
  Rendered top/index.html.erb within layouts/application (32.5ms)
Completed 200 OK in 68ms (Views: 61.2ms | ActiveRecord: 0.0ms | Elasticsearch: 5.8ms)&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-2-per-pages&quot;&gt;4. ページあたりの表示件数を変更&lt;/h3&gt;次のように、「現在の表示件数のfrom値」と「ページあたりの表示件数のリンク」を表示できるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018040416.png&quot; alt=&quot;f:id:nipe880324:20151018040416p:plain:w420&quot; title=&quot;f:id:nipe880324:20151018040416p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;h4&gt;ビューの修正&lt;/h4&gt;「現在の表示件数のfrom値」は、&lt;code&gt;current_document&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使って表示します。&lt;br /&gt;
また、「表示件数のリンク」は、&lt;code&gt;per_page_links&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使ってaタグを作成するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;検索結果: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; current_document&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt; / 約&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @restaurants.results.total&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;件&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;表示件数: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; per_page_links&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;from値の取得&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を作成&lt;/h4&gt;現在の表示件数のfrom値は、「現在のページ数 x 現在の表示件数」なので、それを返すようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 現在表示しているドキュメントのfrom値を表示&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ※文字列を指定されるとうまくいかないかもしれない&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;current_document&lt;/span&gt;
    (params.fetch(&lt;span class=&quot;synConstant&quot;&gt;:page&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;).to_i - &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;) * params.fetch(&lt;span class=&quot;synConstant&quot;&gt;:per&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;).to_i 
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;表示件数のリンクを作成する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を作成&lt;/h4&gt;次に、表示件数のリンクを作成する&lt;code&gt;per_page_links&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# ページ表示件数のリンクを返す&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;per_page_links&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 表示件数の初期値の設定&lt;/span&gt;
    current = query_string.fetch(&lt;span class=&quot;synConstant&quot;&gt;:per&lt;/span&gt;, ::&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;PER_PAGES&lt;/span&gt;.first).to_i

    &lt;span class=&quot;synComment&quot;&gt;# aタグの作成&lt;/span&gt;
    ::&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;PER_PAGES&lt;/span&gt;.map &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;per_page&lt;/span&gt;|
      &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; current == per_page
        per_page
      &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
        link_to(per_page, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;query_string.merge(&lt;span class=&quot;synConstant&quot;&gt;per&lt;/span&gt;: per_page).to_query&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;.join(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).html_safe
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# クエリストリングを作成&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 表示件数やソート順などのリンクを押した時にqやclosedなどのパラメータは設定したままにする&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# pageは設定しないのでページは0ページ目ににクリアされる&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   params - paramsオブジェクト&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;query_string&lt;/span&gt;(params)
    params.slice(&lt;span class=&quot;synConstant&quot;&gt;:q&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:per&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
RestaurantモデルにPER_PAGESとページネーションの表示件数を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...
  &lt;span class=&quot;synComment&quot;&gt;# ページの表示件数を追加&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;PER_PAGES&lt;/span&gt; = [&lt;span class=&quot;synConstant&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;120&lt;/span&gt;]

  &lt;span class=&quot;synComment&quot;&gt;# デフォルトの１ページの表示件数&lt;/span&gt;
  paginates_per &lt;span class=&quot;synType&quot;&gt;PER_PAGES&lt;/span&gt;.first
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
コントローラーで&lt;code&gt;per&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を定数40から、&lt;code&gt;params[:per]&lt;/code&gt;に変更します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/top_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TopController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# per(params[:per])に変更&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@restaurants&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.search(params).page(params[&lt;span class=&quot;synConstant&quot;&gt;:page&lt;/span&gt;]).per(params[&lt;span class=&quot;synConstant&quot;&gt;:per&lt;/span&gt;])
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;動作確認&lt;/h4&gt;画面を表示し、検索ボタン、表示件数のリンク、ページネーションのリンクを押してうまく動きます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018040416.png&quot; alt=&quot;f:id:nipe880324:20151018040416p:plain:w420&quot; title=&quot;f:id:nipe880324:20151018040416p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;ログのElasticsearchのクエリを見ると、&lt;code&gt;size&lt;/code&gt;や&lt;code&gt;from&lt;/code&gt;の値が表示内容と同じあれば問題なさそうです。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Started GET &amp;#34;/?closed=t&amp;amp;page=2&amp;amp;per=120&amp;amp;q=%E6%9D%B1%E4%BA%AC%E9%83%BD&amp;#34; for ::1 at 2015-10-18 04:03:57 +0900
Processing by TopController#index as HTML
  Parameters: {&amp;#34;closed&amp;#34;=&amp;gt;&amp;#34;t&amp;#34;, &amp;#34;page&amp;#34;=&amp;gt;&amp;#34;2&amp;#34;, &amp;#34;per&amp;#34;=&amp;gt;&amp;#34;120&amp;#34;, &amp;#34;q&amp;#34;=&amp;gt;&amp;#34;東京都&amp;#34;}
  Restaurant Search (11.2ms) {index: &amp;#34;restaurant_development&amp;#34;, type: &amp;#34;restaurant&amp;#34;, body: {query: {filtered: {query: {multi_match: {query: &amp;#34;東京都&amp;#34;, fields: [&amp;#34;name&amp;#34;, &amp;#34;name_kana&amp;#34;, &amp;#34;address&amp;#34;, &amp;#34;pref.name&amp;#34;, &amp;#34;category.name&amp;#34;]}}}}}, size: 120, from: 120}
  Rendered top/index.html.erb within layouts/application (36.7ms)
Completed 200 OK in 73ms (Views: 60.8ms | ActiveRecord: 0.0ms | Elasticsearch: 11.2ms)&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;まとめ&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;kaminari&lt;/code&gt;を使ってページネーションを実装しました。&lt;br /&gt;
次は、「&lt;a href=&quot;/entry/20151021/1445353566&quot;&gt;ソート機能&lt;/a&gt;」を実装します。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-rails/tree/master/elasticsearch-model#pagination&quot;&gt;elasticsearch-rails/elasticsearch-model at master &amp;middot; elastic/elasticsearch-rails &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amatsuda/kaminari&quot;&gt;amatsuda/kaminari &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Mon, 19 Oct 2015 23:39:41 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653458415124942939</guid>
          
            <category>elasticsearch</category>
          
            <category>検索</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでElasticsearch: 全文検索を実装</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20151018/1445142266</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170217.png&quot; alt=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170217p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でElasticsearchを使ってレストラン検索アプリを作成、店名、住所、カテゴリなどからレストランを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C1%B4%CA%B8%B8%A1%BA%F7&quot;&gt;全文検索&lt;/a&gt;できるようにします。また、フィルタ(filter)も使って検索条件を指定することで、閉店している店舗も含めて検索できるようにします。&lt;/p&gt;&lt;p&gt;今後、Elasticsearchのページネーション・ページあたりの表示件数、ソート、ファセット・post_filter、ハイライト、サジェスト機能などをより実践的な機能を実装していきます。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-1-setup&quot;&gt;ElasticsearchのMacへのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-1-rails-new&quot;&gt;Railsプロジェクト作成とテストデータ作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-1-freetext-keyword&quot;&gt;RailsとElasticsearchで全文検索を実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-elasticsearch-1-filter&quot;&gt;検索条件を指定する&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac%20OS%20X&quot;&gt;Mac OS X&lt;/a&gt; 10.11 El Capitan&lt;/li&gt;
&lt;li&gt;elasticsearch 1.7.2&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.3&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/dsl&quot;&gt;dsl&lt;/a&gt; 0.1.2&lt;/li&gt;
&lt;li&gt;elasticsearch-model 0.1.8&lt;/li&gt;
&lt;li&gt;elasticsearch-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt; 0.1.8&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;rails-elasticsearch-1-setup&quot;&gt;1. Elasticsearchの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac&quot;&gt;Mac&lt;/a&gt;へのインストール&lt;/h3&gt;Homvebrewを使って&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac&quot;&gt;Mac&lt;/a&gt;にElasticsearchインストールします。&lt;br /&gt;
Elasticsearchを使うためには&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Java&quot;&gt;Java&lt;/a&gt;が必要なので&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Java&quot;&gt;Java&lt;/a&gt;もインストールします。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac&quot;&gt;Mac&lt;/a&gt;以外で実行する場合は適宜&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Java&quot;&gt;Java&lt;/a&gt;とElasticsearchをインストールしてください。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;Homebrewのインストール&lt;/h4&gt;Homebrewが入っていない場合は、&lt;a href=&quot;http://qiita.com/_daisuke/items/d3b2477d15ed2611a058&quot; target=&quot;_blank&quot;&gt;MacにHomebrewをインストールする&lt;/a&gt;を参照してインストールしてください。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;JDK8のインストール&lt;/h4&gt;Elasticsearchは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Java&quot;&gt;Java&lt;/a&gt;を利用しているのでインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;brew install caskroom/cask/brew-cask
brew tap caskroom/versions
brew cask install java
java -version #=&amp;gt; 「java version &amp;#34;1.8.0_60&amp;#34;」のように表示される&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Elasticsearchのインストール&lt;/h4&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;brew install elasticsearch
elasticsearch -v #=&amp;gt; 「Version: 1.7.2, ...」と表示されること&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Elasticsearch Pluginのインストール&lt;/h4&gt;ElasticsearchはPluginをインストールすることで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%C1%C2%D6%C1%C7%B2%F2%C0%CF&quot;&gt;形態素解析&lt;/a&gt;や管理画面など拡張することができます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;which elasticsearch
/usr/local/bin/elasticsearch

# 日本語の形態素解析プラグイン kuromoji のインストール
# https://github.com/elastic/elasticsearch-analysis-kuromoji
/usr/local/bin/plugin install elasticsearch/elasticsearch-analysis-kuromoji/2.7.0

# Elasticsearchの管理プラグイン mervel のインストール
# https://www.elastic.co/guide/en/marvel/current/_installation.html
/usr/local/bin/plugin install elasticsearch/marvel/latest&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Elasticsearchの起動&lt;/h4&gt;&lt;code&gt;elasticsearch&lt;/code&gt;コマンドでElasticsearchを起動させます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# フォアグラウンドでElasticsearchが起動します
elasticsearch
# バックグラウンドでElasticsearchを起動させる
# elasticsearch -d&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Elasticsearchの確認&lt;/h4&gt;&lt;a href=&quot;http://localhost:9200/_plugin/marvel/&quot; target=&quot;_blank&quot;&gt;http://localhost:9200/_plugin/marvel/&lt;/a&gt;にアクセスするとMarvel&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3&quot;&gt;プラグイン&lt;/a&gt;をいれたので、Elasticsearchの管理画面が見れます。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF&quot;&gt;クラスタ&lt;/a&gt;ー、インデックスやキャッシュのヒット、ドキュメント数などが見れます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170605.png&quot; alt=&quot;f:id:nipe880324:20151017170605p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170605p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;また、右上の「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Dashboard&quot;&gt;Dashboard&lt;/a&gt; -&gt; Sense」をクリックすると、次のようにクエリを実行できる画面を表示できます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170622.png&quot; alt=&quot;f:id:nipe880324:20151017170622p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170622p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-1-rails-new&quot;&gt;2. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;プロジェクト作成とテストデータ作成&lt;/h3&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;プロジェクトの作成&lt;/h4&gt;&lt;code&gt;rails new&lt;/code&gt;コマンドで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;プロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new elasticsearch_test&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;モデル作成&lt;/h4&gt;次のようなシンプルなER図を作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;restaurants - (N-1) - categories (カテゴリ)
            - (N-1) - prefs (都道府県)&lt;/pre&gt;&lt;p&gt;モデルと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Restaurant name name_kana pref_id:integer zip address category_id:integer closed:boolean
rails g model Pref name
rails g model Category name name_kana&lt;/pre&gt;&lt;p&gt;アソシエーションを定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/models/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:restaurants&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/models/pref.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Pref&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:restaurants&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;を実行します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;シードデータの作成&lt;/h4&gt;検索のテスト用に少量のシードデータを作成しておきます。&lt;br /&gt;
後ほど、大量のデータで行いますが、はじめのうちはElasticsearchのクエリ結果が正しいか確認しやすいように5件程度のデータで行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/seeds.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;.transaction &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# すべてのレコードを削除する&lt;/span&gt;
  [&lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Pref&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;].each(&amp;amp;&lt;span class=&quot;synConstant&quot;&gt;:delete_all&lt;/span&gt;)

  &lt;span class=&quot;synComment&quot;&gt;# カテゴリの作成(3件)&lt;/span&gt;
  teisyoku = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;定食&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,      &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ていしょく&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
  italian = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;イタリアン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;いたりあん&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
  izakaya = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;居酒屋&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,    &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;いざかや&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

  &lt;span class=&quot;synComment&quot;&gt;# 都道府県の作成(2件)&lt;/span&gt;
  tokyo = &lt;span class=&quot;synType&quot;&gt;Pref&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;東京都&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
  kanagawa = &lt;span class=&quot;synType&quot;&gt;Pref&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;神奈川県&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

  &lt;span class=&quot;synComment&quot;&gt;# レストラン作成(各カテゴリ, 都道府県の掛け算で6件)&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.create!([
    {
      &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;松屋&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;まつや&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;240-0113&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;三浦郡葉山町堀内24-3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: tokyo, &lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: teisyoku, &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
    },
    {
      &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ラ・マーレ・ド・茶屋&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;らまーれどちゃや&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;142-0111&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;港区六本木1-1-1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: kanagawa, &lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: teisyoku, &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
    },
    {
      &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;レストラン シェ・リュイ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;しぇりゅい&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;150-0033&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;渋谷区猿楽町11-11&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: tokyo, &lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: italian, &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
    },
    {
      &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;スパゲティ　ハシヤ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;はしや&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;162-0023&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;三浦1-11&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: kanagawa, &lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: italian, &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
    },
    {
      &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ぎゅうかく&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;130-0033&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;池袋3-33&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: tokyo, &lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: izakaya, &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
    },
    {
      &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;沖縄そば やんばる&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;おきなわそばやんばる&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;zip&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;231-0011&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;西区横浜1-11&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: kanagawa, &lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: izakaya, &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
    }
  ])
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;シードデータを投入します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:seed&lt;/pre&gt;&lt;p&gt;&lt;h4&gt;検索画面を作成&lt;/h4&gt;シンプルな検索画面を作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g controller top index&lt;/pre&gt;&lt;p&gt;パスを修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.routes.draw &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  root &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;top#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;レストランをすべて表示するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/top_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TopController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@restaurants&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.all.includes(&lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;レイアウトファイルにBootstrapを読み込むようにしておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;ElasticsearchTest&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; stylesheet_link_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;all&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; javascript_include_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; csrf_meta_tags&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- headにcssとscriptを追加 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;//netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;//netdna.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- headにcssとscriptを追加 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; yield&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;シンプルにすべてのレストランを表示するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;レストラン検索&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.each do |r| %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;　（都道府県: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.pref.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;、カテゴリ: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.category.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;）&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;動作確認&lt;/h4&gt;&lt;code&gt;rails s&lt;/code&gt;でサーバを起動し、&lt;a href=&quot;http://localhost:3000/&quot; target=&quot;_blank&quot;&gt;http://localhost:3000/&lt;/a&gt;にアクセスすると次のように表示されると思います。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170800.png&quot; alt=&quot;f:id:nipe880324:20151017170800p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170800p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-1-freetext-keyword&quot;&gt;3. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;とElasticsearchで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C1%B4%CA%B8%B8%A1%BA%F7&quot;&gt;全文検索&lt;/a&gt;を実装&lt;/h3&gt;Elasticsearchのセットアップと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;で検索できるようにしたのでElasticsearchの基礎をまじえながらRilsで使う方法を説明します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;ElsticSearchの起動&lt;/h4&gt;フロントエンドで起動しておきます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;elasticsearch&lt;/pre&gt;&lt;p&gt;また、&lt;a href=&quot;http://localhost:9200/_plugin/marvel/&quot; target=&quot;_blank&quot;&gt;http://localhost:9200/_plugin/marvel/&lt;/a&gt;にアクセスし、Marvel(管理画面)も開いておきます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でElasticsearchを使った検索の流れ&lt;/h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でElasticsearchを使ったときの検索の流れは次のようになります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;[前準備] Elasticsearchにインデックス(RDSでいうとデータベース)を作成&lt;/li&gt;
&lt;li&gt;[前準備] 作成したインデックスにドキュメントタイプ(RDSでいうとテーブル)を作成&lt;/li&gt;
&lt;li&gt;[前準備] DBからデータを取得し、ドキュメント(RDSでいうレコード)を作成&lt;/li&gt;
&lt;li&gt;検索画面を作成する（画面から検索ボタンを押すと、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;が検索パラメータを受け取る）&lt;/li&gt;
&lt;li&gt;検索パラメータからElasticsearchのクエリを作成し、検索する&lt;/li&gt;
&lt;li&gt;Elasticsearchのレスポンスを画面に表示する&lt;/li&gt;
&lt;li&gt;定期的にドキュメントを追加/更新/削除する&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;次からはこの流れにしたがって、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;とElasticsearchを使って「フリーキーワード検索」を実装していきます。&lt;/p&gt;&lt;p&gt;&lt;h4&gt;Elasticsearchのgemをインストール&lt;/h4&gt;まずは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;からElasticsearchを便利に使えるgemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-ruby.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch-dsl&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-ruby.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch-model&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-rails.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;git&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;git://github.com/elasticsearch/elasticsearch-rails.git&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle&lt;/pre&gt;&lt;p&gt;それぞれのgemが提供する機能は次のとおりです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby&quot; target=&quot;_blank&quot;&gt;elasticsearch&lt;/a&gt;: Elasticsearch用の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;クライアントと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を提供&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby/tree/master/elasticsearch-dsl&quot; target=&quot;_blank&quot;&gt;elasticsearch-dsl&lt;/a&gt;: Elasticsearchのクエリを書きやすくするための&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3%C6%C3%B2%BD%B8%C0%B8%EC&quot;&gt;ドメイン特化言語&lt;/a&gt;)を提供&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-rails&quot; target=&quot;_blank&quot;&gt;elasticsearch-modelとelasticsearch-rails&lt;/a&gt;: &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt;、ActiveModel、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;からElasticsearchを使えるようにする&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;[前準備] Elasticsearchにインデックス(RDSでいうとデータベース)を作成&lt;/h4&gt;インデックスとはRDSでいうデータベースのようなものです。&lt;br /&gt;
インデックスを作るには、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt;に&lt;code&gt;Elasticsearch::Model&lt;/code&gt;をインクルードし、Elasticsearchクライアントの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を呼び出すことでインデックスを作成できます。&lt;/p&gt;&lt;p&gt;Restaurantに&lt;code&gt;Elasticsearch::Model&lt;/code&gt;をインクルードします。&lt;br /&gt;
そして、&lt;code&gt;index_name&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;にインデックス名を指定します。デフォルトはモデル名になりますが、環境ごとにインデックスを分けたほうが都合が良いので、&lt;code&gt;Rails.env&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Model&lt;/span&gt;

  index_name &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;restaurant_&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.env&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# インデックス名を指定(RDBでいうデータベース)&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、下記コマンドを実行することで、インデックスの作成ができます。&lt;br /&gt;
既にインデックスがある場合は削除もできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# rails console&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# インデックスの作成。index:にはインデックス名、settingsにはインデックスの設定、mappingsにはマッピングの設定を記載&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.client.indices.create \
  &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.index_name,
  &lt;span class=&quot;synConstant&quot;&gt;body&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;settings&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.settings.to_hash, &lt;span class=&quot;synConstant&quot;&gt;mappings&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.mappings.to_hash }

&lt;span class=&quot;synComment&quot;&gt;# インデックスの削除&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.client.indices.delete &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.index_name &lt;span class=&quot;synStatement&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これらのコマンドは結構長いので、下記コマンドで強制的インデックスの削除/作成ができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# rails console&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.create_index! &lt;span class=&quot;synConstant&quot;&gt;force&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.refresh_index!
&lt;/pre&gt;&lt;p&gt;これで、&lt;code&gt;restaurant_development&lt;/code&gt;というインデックスを作成できました。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;[前準備] 作成したインデックスにドキュメントタイプ(RDSでいうとテーブル)を作成&lt;/h4&gt;ドキュメントタイプはRDSでいうテーブルのようなもので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;（RDSでいう&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DDL&quot;&gt;DDL&lt;/a&gt;）というもので作成します。&lt;/p&gt;&lt;p&gt;では、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;を定義し作成します。&lt;br /&gt;
Elasticsearch:Modelの&lt;code&gt;settings&lt;/code&gt;の&lt;code&gt;mappings&lt;/code&gt;を定義することで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  index_name &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;restaurant_&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.env&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# インデックス名を指定(RDBでいうデータベース)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# document_type # ドキュメントタイプを指定(RDBでいうテーブル)。デフォルトでクラス名&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# インデックス設定とマッピング(RDBでいうスキーマ)を設定&lt;/span&gt;
  settings &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    mappings &lt;span class=&quot;synConstant&quot;&gt;dynamic&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# デフォルトでマッピングが自動作成されるがそれを無効にする&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# マッピングの公式ドキュメント&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-core-types.html&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# indexesメソッドでインデックスする値を定義します。&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# analyzer: インデクシング時、検索時に使用するアナライザーを指定します。指定しない場合、グローバルで設定されているアナライザーが利用されます。&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# kuromojiは日本語のアナライザーです。&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;,      &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:name_kana&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      indexes &lt;span class=&quot;synConstant&quot;&gt;:zip&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:address&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kuromoji&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# type: booleanでclosedはboolean型として定義します&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# date型として定義&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# formatは日付のフォーマットを指定(2015-10-16T19:26:03.679Z)&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# 詳細: https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;date_time&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# 階層化してインデクシングできます。pref.nameとして検索できます。&lt;/span&gt;
      indexes &lt;span class=&quot;synConstant&quot;&gt;:pref&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;not_analyzed&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      indexes &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        indexes &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;analyzer&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;not_analyzed&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;インデックスを作成し直します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# rails console&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.create_index! &lt;span class=&quot;synConstant&quot;&gt;force&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.__elasticsearch__.refresh_index!
&lt;/pre&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/curl&quot;&gt;curl&lt;/a&gt;コマンドで定義した&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;を確認できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;curl -XGET &lt;span class=&quot;synConstant&quot;&gt;&#39;localhost:9200/restaurant_development/_mapping/restaurant?pretty=true&#39;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;restaurant_development&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;mappings&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;restaurant&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;dynamic&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;,
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;address&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;analyzer&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;kuromoji&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;,
                &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;not_analyzed&amp;quot;&lt;/span&gt;,
                &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;analyzer&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;closed&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;boolean&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;format&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;date_time&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;analyzer&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;kuromoji&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name_kana&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;analyzer&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;kuromoji&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;pref&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;,
                &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;not_analyzed&amp;quot;&lt;/span&gt;,
                &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;analyzer&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
          &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;zip&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;[前準備] DBからデータを取得し、ドキュメントタイプにドキュメント(RDSでいうレコード)を作成&lt;/h4&gt;ドキュメントをインポートするときに呼ばれる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の&lt;code&gt;as_indexed_json&lt;/code&gt;を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# インデクシング時に呼び出されるメソッド&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# マッピングのデータを返すようにする&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;as_indexed_json&lt;/span&gt;(options = {})
    attributes
      .symbolize_keys
      .slice(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name_kana&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:zip&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:address&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;)
      .merge(&lt;span class=&quot;synConstant&quot;&gt;pref&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: pref.name })
      .merge(&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: category.name })
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 次のような出力になります&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.first.as_indexed_json
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {:name=&amp;gt;&amp;quot;松屋&amp;quot;, :name_kana=&amp;gt;&amp;quot;まつや&amp;quot;, :zip=&amp;gt;&amp;quot;240-0113&amp;quot;, :address=&amp;gt;&amp;quot;三浦郡葉山町堀内24-3&amp;quot;, :closed=&amp;gt;false, :created_at=&amp;gt;Fri, 16 Oct 2015 19:26:03 UTC +00:00, :pref=&amp;gt;{:name=&amp;gt;&amp;quot;東京都&amp;quot;}, :category=&amp;gt;{:name=&amp;gt;&amp;quot;定食&amp;quot;}}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、&lt;code&gt;import&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;でインデクシングを行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.import
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 0&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これで、インデクシングされたので、&lt;a href=&quot;http://localhost:9200/_plugin/marvel/&quot; target=&quot;_blank&quot;&gt;Marvel&lt;/a&gt;のINDICESの&lt;code&gt;restaurant_development&lt;/code&gt;のDocuments数が「6」になっています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170915.png&quot; alt=&quot;f:id:nipe880324:20151017170915p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170915p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://localhost:9200/_plugin/marvel/sense/index.html&quot; target=&quot;_blank&quot;&gt;Marvel Sense&lt;/a&gt;からクエリを実行すると、次のように結果が返ってきます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170931.png&quot; alt=&quot;f:id:nipe880324:20151017170931p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170931p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;検索フォームを作成する&lt;/h4&gt;フリーキーワードを入力できる検索フォームを作成します。&lt;br /&gt;
検索/検索結果表示画面(&lt;code&gt;index.html.erb&lt;/code&gt;)にフォームを追加します。&lt;br /&gt;
検索結果の表示も変えています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;レストラン検索&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索フォーム --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; root_path, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :get, enforce_utf8: false do %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; search_field_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :q, params[:q], &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;form-control&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, placeholder: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;店名、場所、カテゴリ&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;btn btn-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;検索&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @restaurants.each do |r| %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;（&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.name_kana&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;）&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text-muted&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;都道府県: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.pref.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;カテゴリ: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; r.category.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;画面を表示すると次のようになります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017170957.png&quot; alt=&quot;f:id:nipe880324:20151017170957p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017170957p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;検索パラメータからElasticsearchのクエリを作成し、検索する&lt;/h4&gt;まずは、Elasticsearchのクエリを作成し、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;からElasticsearchにどのようなクエリを投げればよいか確認します。&lt;br /&gt;
&lt;a href=&quot;http://localhost:9200/_plugin/marvel/sense/index.html&quot; target=&quot;_target&quot;&gt;Marvel Sense&lt;/a&gt;を開き、クエリを試します。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のフィールドからクエリ文字列にマッチするドキュメントを取得するには&lt;code&gt;multi_match&lt;/code&gt;を使用します。&lt;br /&gt;
参考: &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/1.7/query-dsl-multi-match-query.html&quot; target=&quot;_blank&quot;&gt;Multi Matchクエリ&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;から次のクエリを作成するようにします。&lt;br /&gt;
&lt;code&gt;query&lt;/code&gt;にはユーザが入力した検索キーワード、&lt;code&gt;fields&lt;/code&gt;には検索を行うフィールド名を指定します。&lt;br /&gt;
下記の例では、&lt;code&gt;name&lt;/code&gt;、&lt;code&gt;name_kana&lt;/code&gt;、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;pref.name&lt;/code&gt;、&lt;code&gt;category.name&lt;/code&gt;に「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%ED%B3%D1&quot;&gt;牛角&lt;/a&gt;」という文字列が入っているドキュメントを取得します。&lt;br /&gt;
※&lt;code&gt;pref.name&lt;/code&gt;と&lt;code&gt;category.name&lt;/code&gt;は&quot;keyword&quot;アナライザーを使用しているので全文マッチしないとヒットしません。例：「東京」ではヒットせず、「東京都」でヒットする。ここらへんの検索のチューニングは専門的なので省きます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;multi_match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;:    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;牛角&amp;quot;&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;fields&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name_kana&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;address&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;pref.name&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category.name&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// 結果&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;took&amp;quot;&lt;/span&gt;: 3,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;timed_out&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_shards&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 5,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;successful&amp;quot;&lt;/span&gt;: 5,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;: 0
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
   &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: 1, &lt;span class=&quot;synComment&quot;&gt;// ヒットしたドキュメント数&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;: 0.08322528, &lt;span class=&quot;synComment&quot;&gt;// 最大の関連度&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hits&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
         &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;restaurant_development&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synComment&quot;&gt;// インデックス&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;restaurant&amp;quot;&lt;/span&gt;,  &lt;span class=&quot;synComment&quot;&gt;// ドキュメントタイプ&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;: 0.08322528, &lt;span class=&quot;synComment&quot;&gt;// 関連度&lt;/span&gt;
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;_source&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;// データ&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;牛角&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name_kana&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ぎゅうかく&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;zip&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;130-0033&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;address&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;池袋3-33&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;closed&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2015-10-16T19:26:03.683Z&amp;quot;&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;pref&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;東京都&amp;quot;&lt;/span&gt;
               &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
               &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;category&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;居酒屋&amp;quot;&lt;/span&gt;
               &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;上記のクエリを作成するには、ユーザの検索キーワードが必要になります。&lt;br /&gt;
そのため、コントローラーで検索フォームの&lt;code&gt;q&lt;/code&gt;パラメータを&lt;code&gt;search&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に渡すようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controller/top_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TopController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@restaurants&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.search(params)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、Restaurantモデルに&lt;code&gt;search&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を定義します。&lt;br /&gt;
&lt;code&gt;search&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;は、Elasticsearchのクエリを作成し、検索を実施、Elasticsearchからのレスポンスを返します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# Elasticsearchのクエリを作成し、検索を実施する&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Elasticsearchからのレスポンスを返す&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
    &lt;span class=&quot;synComment&quot;&gt;# 検索パラメータを取得&lt;/span&gt;
    keyword = params[&lt;span class=&quot;synConstant&quot;&gt;:q&lt;/span&gt;]

    &lt;span class=&quot;synComment&quot;&gt;# 検索クエリを作成（Elasticsearch::DSLを利用）&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 参考: https://github.com/elastic/elasticsearch-ruby/tree/master/elasticsearch-dsl&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 検索キーワードが入力されたときは、下記クエリを作成&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# &amp;quot;query&amp;quot;: {&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   &amp;quot;multi_match&amp;quot;: {&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#     &amp;quot;query&amp;quot;:    &amp;quot;牛角&amp;quot;, // 検索キーワード&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#     &amp;quot;fields&amp;quot;: [&amp;quot;name&amp;quot;, &amp;quot;name_kana&amp;quot;, &amp;quot;address&amp;quot;, &amp;quot;pref.name&amp;quot;, &amp;quot;category.name&amp;quot;]&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   }&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# }&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 検索キーワードが入力されてない時は、下記クエリを作成（すべてのドキュメントを取得）&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# &amp;quot;query&amp;quot;: {&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   &amp;quot;match_all&amp;quot;: {}&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# }&lt;/span&gt;
    search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
      query {
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; keyword.present?
          multi_match {
            query keyword
            fields &lt;span class=&quot;synSpecial&quot;&gt;%w{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; name name_kana address pref.name category.name &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
          }
        &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
          match_all
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      }
    }

    &lt;span class=&quot;synComment&quot;&gt;# 検索クエリをなげて結果を表示&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# __elasticsearch__にElasticsearchを操作するたくさんのメソッドが定義されている&lt;/span&gt;
    __elasticsearch__.search(search_definition)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;最後に&lt;cocd&gt;application.rb&lt;/code&gt;に&lt;code&gt;require &#39;elasticsearch/rails/instrumentation&#39;&lt;/code&gt;を追加します。&lt;br /&gt;
こうすることで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;ログにElasticsearchの実行時間やは発行したクエリが表示されるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/application.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Require the gems listed in Gemfile, including any gems&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# you&#39;ve limited to :test, :development, or :production.&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Bundler&lt;/span&gt;.require(*&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.groups)
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;elasticsearch/rails/instrumentation&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで画面から「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%ED%B3%D1&quot;&gt;牛角&lt;/a&gt;」と検索すると&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%ED%B3%D1&quot;&gt;牛角&lt;/a&gt;が表示されます。「東京都」と検索すると東京都の店が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151017/20151017171045.png&quot; alt=&quot;f:id:nipe880324:20151017171045p:plain:w420&quot; title=&quot;f:id:nipe880324:20151017171045p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;このとき&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;ログで注目してもらいたいのが、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SQL&quot;&gt;SQL&lt;/a&gt;の実行がないこと(AcriveRecord: 0.0ms)です。代わりに、Elasticsearchへの実行時間が記載されています。さらに、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0&quot;&gt;デバッグ&lt;/a&gt;用でElasticsearchに送られたクエリも表示されています。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Started GET &amp;#34;/?q=%E6%9D%B1%E4%BA%AC%E9%83%BD&amp;#34; for ::1 at 2015-10-17 16:05:19 +0900
Processing by TopController#index as HTML
  Parameters: {&amp;#34;q&amp;#34;=&amp;gt;&amp;#34;東京都&amp;#34;}
  Restaurant Search (9.1ms) {index: &amp;#34;restaurant_development&amp;#34;, type: &amp;#34;restaurant&amp;#34;, body: {query: {multi_match: {query: &amp;#34;東京都&amp;#34;, fields: [&amp;#34;name&amp;#34;, &amp;#34;name_kana&amp;#34;, &amp;#34;address&amp;#34;, &amp;#34;pref.name&amp;#34;, &amp;#34;category.name&amp;#34;]}}}}
  Rendered top/index.html.erb within layouts/application (10.2ms)
Completed 200 OK in 44ms (Views: 34.0ms | ActiveRecord: 0.0ms | Elasticsearch: 9.1ms)&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;Elasticsearchのレスポンスを画面に表示する&lt;/h4&gt;既に画面に表示されてレストランの表示がされてしまっていますが、&lt;code&gt;__elasticsearch__.search&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の帰り値について説明することでうまく表示されている理由を説明します。&lt;/p&gt;&lt;p&gt;Elasticsearchはヒットするドキュメントを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;形式で返します。Elasticsearch::Modelによりそれをインスタン化して扱いやすいものにしています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;response = __elasticsearch__.search(search_definition)

&lt;span class=&quot;synComment&quot;&gt;# レスポンスのクラス名はElasticsearch::Model::Response::Response&lt;/span&gt;
response.class &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Elasticsearch::Model::Response::Response&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ヒットしたドキュメント数を取得&lt;/span&gt;
response.results.total &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 3&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ヒットしたドキュメントの最初のドキュメントを取得&lt;/span&gt;
response.results.first
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Elasticsearch::Model::Response::Result:0x007fc0c6dc28a8&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  @result=&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   {&amp;quot;_index&amp;quot;=&amp;gt;&amp;quot;restaurant_development&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#    &amp;quot;_type&amp;quot;=&amp;gt;&amp;quot;restaurant&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#    &amp;quot;_id&amp;quot;=&amp;gt;&amp;quot;1&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#    &amp;quot;_score&amp;quot;=&amp;gt;0.41762865,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#    &amp;quot;_source&amp;quot;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     {&amp;quot;name&amp;quot;=&amp;gt;&amp;quot;松屋&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;name_kana&amp;quot;=&amp;gt;&amp;quot;まつや&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;zip&amp;quot;=&amp;gt;&amp;quot;240-0113&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;address&amp;quot;=&amp;gt;&amp;quot;三浦郡葉山町堀内24-3&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;closed&amp;quot;=&amp;gt;false,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;created_at&amp;quot;=&amp;gt;&amp;quot;2015-10-16T19:26:03.679Z&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;pref&amp;quot;=&amp;gt;{&amp;quot;name&amp;quot;=&amp;gt;&amp;quot;東京都&amp;quot;},&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;category&amp;quot;=&amp;gt;{&amp;quot;name&amp;quot;=&amp;gt;&amp;quot;定食&amp;quot;}}}&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# response.first でも同じ結果が返ってきます&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# これは、responseオブジェクトがEnumerableモジュールのメソッドをresultsにデリゲートしているためです。&lt;/span&gt;
result = response.first

&lt;span class=&quot;synComment&quot;&gt;# 関連度を取得&lt;/span&gt;
result._score &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 0.41762865&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ドキュメント(_source)の内容を取得&lt;/span&gt;
result._source.name &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;松屋&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# _sourceを省略できる&lt;/span&gt;
result.name &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;松屋&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 入れ子になっている値は.(ドット)でアクセスできる&lt;/span&gt;
result.pref &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; {&amp;quot;name&amp;quot;=&amp;gt;&amp;quot;東京都&amp;quot;}&lt;/span&gt;
result.pref.name &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;東京都&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# データベースからヒットしたドキュメントのActiveRecordのインスタンスの配列を取得&lt;/span&gt;
response.records.to_a
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [#&amp;lt;Restaurant:xxxx&amp;gt;, #&amp;lt;Restaurant:yyyy&amp;gt;, ...]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;このようにレスポンスが&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt;と同じように扱えるため、&lt;code&gt;each&lt;/code&gt;や&lt;code&gt;pref.name&lt;/code&gt;などと記載したままでも問題なく表示されていたということです。&lt;br /&gt;
せっかくなので、ヒットしたドキュメント数を表示するように追加しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/top/index.html.erb
...

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の表示 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-xs-9&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索結果の数を表示する --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;検索結果: 約&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @restaurants.results.total&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;件&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;ドキュメントも追加/更新/削除する&lt;/h4&gt;これで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;とElasticsearchを使って、検索キーワードで検索をできるようにできました。&lt;br /&gt;
最後に、ドキュメントの取得元のDBのレコードの追加/更新/削除があった場合、ドキュメントも追加/更新/削除するようにします。&lt;br /&gt;
そうしないと、レコードが更新されたのに、検索結果の内容が正しくないものになってしまいます。&lt;/p&gt;&lt;p&gt;DBを更新しても、Elasticsearchのドキュメントを更新しないと以下のようになってしまいます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# DBの変更前にクエリを実行&lt;/span&gt;
response = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.search(&lt;span class=&quot;synConstant&quot;&gt;q&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
response.first.address &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;池袋3-33&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DBを更新&lt;/span&gt;
record = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.find_by(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
record.update(&lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;池袋9-99&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DBの更新後にクエリ実行。住所が変わっていない&lt;/span&gt;
response = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.search(&lt;span class=&quot;synConstant&quot;&gt;q&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
response.first.address &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;池袋3-33&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;一番シンプルな方法は、&lt;code&gt;Elasticsearch::Model::Callbacks&lt;/code&gt;をインクルードします。&lt;br /&gt;
これをインクルードすることで、&lt;code&gt;after_commit&lt;/code&gt;後にドキュメントを作成/更新/削除する処理が走るようになります。（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;: &lt;a href=&quot;https://github.com/elastic/elasticsearch-rails/blob/master/elasticsearch-model/lib/elasticsearch/model/adapters/active_record.rb#L65&quot; target=&quot;_blank&quot;&gt;コールバックの実装&lt;/a&gt;）&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Model&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Model&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Callbacks&lt;/span&gt;

  ...
&lt;/pre&gt;&lt;p&gt;DBを更新するとドキュメントも更新されるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# DBの変更前にクエリを実行&lt;/span&gt;
response = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.search(&lt;span class=&quot;synConstant&quot;&gt;q&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
response.first.address &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;池袋3-33&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DBを更新。コールバックでドキュメントも更新される&lt;/span&gt;
record = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.find_by(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
record.update(&lt;span class=&quot;synConstant&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;池袋5-55&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DBの更新後にクエリ実行。住所が変わっている&lt;/span&gt;
response = &lt;span class=&quot;synType&quot;&gt;Restaurant&lt;/span&gt;.search(&lt;span class=&quot;synConstant&quot;&gt;q&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;牛角&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
response.first.address &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;池袋5-55&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これはシンプルなのですが、大量にレコード追加/更新/削除があると、Elasticsearchのドキュメントの追加/更新/削除が溜まっていき、溜まっている場合、それが&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DC%A5%C8%A5%EB%A5%CD%A5%C3%A5%AF&quot;&gt;ボトルネック&lt;/a&gt;となり、パフォーマンスが悪くなってしまいます。&lt;br /&gt;
そのため、一般的には、非同期で行うのが普通です。非同期で行うので検索結果の内容がDBの内容と少しの時間ずれが発生します。&lt;br /&gt;
非同期でドキュメントを更新する方法は次のとおりです。&lt;br /&gt;
&lt;a href=&quot;https://github.com/elastic/elasticsearch-rails/tree/master/elasticsearch-model#asynchronous-callbacks&quot; target=&quot;_blank&quot;&gt;elasticsearch-model - 非同期コールバック&lt;/a&gt;を参照ください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-elasticsearch-1-filter&quot;&gt;4. 検索条件を指定する&lt;/h3&gt;Restaurantモデルの&lt;code&gt;closed&lt;/code&gt;は、レストランが閉店したかどうかをboolean値で保持しています。&lt;br /&gt;
次のような&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;を表示し、デフォルトでは、閉店したレストランを除外して検索できるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018035057.png&quot; alt=&quot;f:id:nipe880324:20151018035057p:plain:w320&quot; title=&quot;f:id:nipe880324:20151018035057p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;をクリックすることで、閉店したレストランも含めて検索できるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018035115.png&quot; alt=&quot;f:id:nipe880324:20151018035115p:plain:w320&quot; title=&quot;f:id:nipe880324:20151018035115p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;検索条件を指定するfilterクエリ&lt;/h4&gt;&lt;a href=&quot;http://localhost:9200/_plugin/marvel/sense/index.html&quot; target=&quot;_blank&quot;&gt;Marvel Sense&lt;/a&gt;を開きます。&lt;/p&gt;&lt;p&gt;下記のように、&lt;code&gt;filtered&lt;/code&gt;を指定し、&lt;code&gt;filter&lt;/code&gt;内でフィルタを指定します。&lt;br /&gt;
&lt;code&gt;term&lt;/code&gt;は、termフィルタで、「&quot;closed&quot;フィールドがfalseのものを取得する」という検索条件になります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;GET restaurant_development/_search
&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;filtered&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{}&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;filter&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;closed&amp;quot;&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;フィルターにはさまざまなものがあり、&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-filters.html&quot; target=&quot;_blank&quot;&gt;query-dsl-filter&lt;/a&gt;を参照ください。&lt;br /&gt;
よく使うのは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のフィルタをANDやORで指定できる「boolフィルタ」や日付や数値の範囲で検索できる「rangeフィルタ」、termsフィルタやtermフィルタです。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4&gt;検索条件を実装&lt;/h4&gt;まず、画面に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/top/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;レストラン検索&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 検索フォーム --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; root_path, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :get, enforce_utf8: false do %&amp;gt;&lt;/span&gt;
  ...
  
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- チェックボックスのフィールドを追加 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; check_box_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :closed, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;t&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, params[:closed].present? %&amp;gt;&lt;/span&gt; 閉店しているレストランも検索結果に含める
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;btn btn-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;検索&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、&lt;code&gt;search&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で&lt;code&gt;closed&lt;/code&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;が押されているかどうかを取得します。&lt;br /&gt;
「閉店しているレストランも検索結果に含める」&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;が押されている場合のみ、&lt;code&gt;params[:closed]&lt;/code&gt;に値が設定されるので、closed変数は&lt;code&gt;true&lt;/code&gt;になります。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;が押されていない場合は、blankになるので、closed変数は&lt;code&gt;false&lt;/code&gt;になります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;search&lt;/span&gt;(params = {})
  &lt;span class=&quot;synComment&quot;&gt;# 検索パラメータを取得&lt;/span&gt;
  keyword = params[&lt;span class=&quot;synConstant&quot;&gt;:q&lt;/span&gt;]
  closed  = params[&lt;span class=&quot;synConstant&quot;&gt;:closed&lt;/span&gt;].present?
  ...
&lt;/pre&gt;&lt;p&gt;次にフィルタを利用した&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;を作成します。&lt;br /&gt;
Elasticsearch::&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;でのtermフィルタの使い方は、&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby/blob/master/elasticsearch-dsl/lib/elasticsearch/dsl/search/filters/term.rb&quot; target=&quot;_blank&quot;&gt;elasticsearch-ruby/elasticsearch-dsl/lib/elasticsearch/dsl/search/filters/term.rb&lt;/a&gt;に記載されているので参考にしてクエリを記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/restaurant.rb&lt;/span&gt;

search_definition = &lt;span class=&quot;synType&quot;&gt;Elasticsearch&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DSL&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Search&lt;/span&gt;.search {
  query {
    filtered {
      query {
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; keyword.present?
          multi_match {
            query keyword
            fields &lt;span class=&quot;synSpecial&quot;&gt;%w{&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; name name_kana address pref.name category.name &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
          }
        &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
          match_all
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      }

      &lt;span class=&quot;synComment&quot;&gt;# 開店しているレストランのみ表示する条件(closed: false)&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# closed=trueの場合は、この検索条件を実施しない&lt;/span&gt;
      filter {
        term &lt;span class=&quot;synConstant&quot;&gt;closed&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      } &lt;span class=&quot;synStatement&quot;&gt;unless&lt;/span&gt; closed
    }
  }
}
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4&gt;フィルタの動作確認&lt;/h4&gt;&lt;a href=&quot;http://localhost:3000/&quot; target=&quot;_blank&quot;&gt;http://localhost:3000/&lt;/a&gt;でアクセスすると、検索結果が「開店しているレストラン4件」のみ表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018035057.png&quot; alt=&quot;f:id:nipe880324:20151018035057p:plain:w320&quot; title=&quot;f:id:nipe880324:20151018035057p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;「閉店しているレストランも検索結果に含める」&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;を選択し、検索ボタンを押すと、すべてのレストラン(6件)表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20151018/20151018035115.png&quot; alt=&quot;f:id:nipe880324:20151018035115p:plain:w320&quot; title=&quot;f:id:nipe880324:20151018035115p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;まとめ&lt;/h3&gt;
    &lt;p&gt;これで、シンプルですが、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;とElasticsearchを使って、検索キーワードで検索をできるようにできました。&lt;br /&gt;
これに、Elasticsearchの機能の「ページネーション・ページ当たりの表示数」、「ソート」、「ファセット・post_filter」、「ハイライト」、「サジェスト」などの機能を付け加えていけばより実践的な検索機能が実装できるようになります。&lt;/p&gt;&lt;p&gt;次は「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20151019/1445265581&quot;&gt;ページネーションとページあたりの表示変更できる&lt;/a&gt;」を実装します。&lt;/p&gt;&lt;p&gt;以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-rails/tree/master/elasticsearch-model&quot;&gt;elasticsearch-rails/elasticsearch-model at master &amp;middot; elastic/elasticsearch-rails &amp;middot; GitHub&lt;/a&gt; - Elasticsearchへの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby/tree/master/elasticsearch-dsl&quot;&gt;elasticsearch-ruby/elasticsearch-dsl at master &amp;middot; elastic/elasticsearch-ruby &amp;middot; GitHub&lt;/a&gt; - クエリ作成&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/1.7/query-dsl-multi-match-query.html#type-best-fields&quot;&gt;Multi Match Query&lt;/a&gt; - multi matchクエリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sun, 18 Oct 2015 13:24:26 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653458415124899634</guid>
          
            <category>検索</category>
          
            <category>elasticsearch</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでSonspotを使って全文検索を行う</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150223/1424695504</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221125622.jpg&quot; alt=&quot;f:id:nipe880324:20150221125622j:plain:w480&quot; title=&quot;f:id:nipe880324:20150221125622j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/11304375@N07/&quot;&gt;Flickr: Image Editor&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sunspot/sunspot&quot; target=&quot;_blank&quot;&gt;Sunspot&lt;/a&gt;は、オープンソースの全文検索システムの&lt;a href=&quot;http://ja.wikipedia.org/wiki/Apache_Solr&quot; target=&quot;_blank&quot;&gt;Solr（ソーラー）&lt;/a&gt;を使って、幅広い記述でパワフルな全文検索ができるRubyライブラリです。&lt;br /&gt;
商用ではSolrを立てる必要があります。開発環境では開発用のSolrサーバーを使います。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;Ruby  2.1.0&lt;/li&gt;
&lt;li&gt;sunspot_rails 2.1.1&lt;/li&gt;
&lt;li&gt;sunspot_solr  2.1.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#sunspot-install&quot;&gt;Sunspotのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sunspot-basic-usage&quot;&gt;Sunspotの基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sunspot-reindex&quot;&gt;リインデックス(reindex)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;sunspot-install&quot;&gt;1. Sunspotのインストール&lt;/h3&gt;&lt;code&gt;Gemfile&lt;/code&gt;に追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sunspot_rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 開発環境用のSolrディストリビューション&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sunspot_solr&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
バンドルを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
SunspotのSolrへの接続情報を設定するファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g sunspot_rails:&lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
  create  config/sunspot.yml
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;sunspot-basic-usage&quot;&gt;2. Sunspotの基本的な使い方&lt;/h3&gt;全文検索のデモ用にProductモデルとCategoryモデルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g model Product name:string desc:text category_id:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
bin/rails g model Category name:string
bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
リレーションを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/model/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/model/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
検索確認のためにデータを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/seeds.rb&lt;/span&gt;
category1 = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;デスクトップパソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
category1.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;高いパソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;高いだけありHigh Specなパソコンです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
category1.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;安いパソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;とにかく安さだけを追求したパソコンです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

category2 = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ノートパソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
category2.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;小さいノートPC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;小さいノートPCです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
category2.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;大きいノートPC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;大きいノートPCです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
category2.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High SpecノートPC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;性能がよいノートPCです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

category3 = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;スマホ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
category3.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High Specスマホ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High Specなスマホです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
category3.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;普通のスマホ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;スマホです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
データを入れます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake db:seed
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、ここからSunspotを使うように設定をしていきます。&lt;/p&gt;&lt;p&gt;まず、全文検索を行いたいクラスに&lt;code&gt;searchable&lt;/code&gt;ブロックを追加します。&lt;br /&gt;
今回はProductクラスを全文検索できるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belogns_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;

  searchable &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    text &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:desc&lt;/span&gt;

    integer &lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;
    time &lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;text&lt;/code&gt;フィールドは全文検索されます。&lt;code&gt;integer&lt;/code&gt;や&lt;code&gt;string&lt;/code&gt;などの他のフィールドはクエリをスコープするために使われます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;そして、開発環境用のSolrディストリビューション（&lt;code&gt;sunspot_solr&lt;/code&gt;）を起動させます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;// バックグラウンド
bin/rake sunspot:solr:&lt;span class=&quot;synStatement&quot;&gt;start&lt;/span&gt;  // Solrを起動させる
bin/rake sunspot:solr:&lt;span class=&quot;synStatement&quot;&gt;stop&lt;/span&gt;   // Solrを停止させる

// フォアグラウンド
bin/rake sunspot:solr:run    // Solrを起動させる
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、全文検索を行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ bin/rails c

&lt;span class=&quot;synComment&quot;&gt;# Productのtextフィールド(name, descカラム)に&amp;quot;High Spec&amp;quot;を含んでいるすべての商品を検索する&lt;/span&gt;
search = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.search { fulltext &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High Spec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
products = search.results
products.count &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 3&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# category_idが1か2で、&#39;pizza&#39;を含んでいて、1週間以内に作成された、2ページ目の商品を検索する&lt;/span&gt;
search = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.search &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  fulltext &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High Spec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  with(&lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
  with(&lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;).greater_than(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.week.ago)
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
products = search.results
products.count &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 1&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# カテゴリ毎に存在する商品数を取得する(facet)&lt;/span&gt;
search = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.search &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  fulltext &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High spec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  facet &lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

search.facet(&lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;).rows.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;facet&lt;/span&gt;|
  puts &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Category &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;facet.value&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; has &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;facet.count&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Category 1 has 1 products&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Category 2 has 1 products&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Category 3 has 1 products&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;・実施にはコントローラー内で上記のように記載すれば、実際に検索を行うことができます。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;・他にもページネーションや複数の値の検索などさまざな検索方法は、&lt;a href=&quot;https://github.com/sunspot/sunspot&quot; target=&quot;_blank&quot;&gt;Sunspot - GitHub&lt;/a&gt;を参照してください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;production環境でSunspotを実行する場合は、別途Solrサーバーを立て、&lt;code&gt;sunspot.yml&lt;/code&gt;を適切に設定する必要があります。&lt;/p&gt;&lt;p&gt;また、test環境で実行する場合は、下記のコマンドでSolrの起動と停止をしてください。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;// solrを起動
bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; sunspot-solr &lt;span class=&quot;synStatement&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;8981&lt;/span&gt;
// RSpec&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;テスト&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;を実行
bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; rake spec
// solrを停止
bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; sunspot-solr &lt;span class=&quot;synStatement&quot;&gt;stop&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;sunspot-reindex&quot;&gt;3. リインデックス(reindex)&lt;/h3&gt;Railsを使っている場合、オブジェクトは&lt;code&gt;save&lt;/code&gt;コールバックによりSolrに自動的にインデックスされます。&lt;/p&gt;&lt;p&gt;その他にも、手動でリインデックスを実行する方法があります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# クラス自体をインデックスする&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.reindex
&lt;span class=&quot;synType&quot;&gt;Sunspot&lt;/span&gt;.commit


&lt;span class=&quot;synComment&quot;&gt;# 複数のオブジェクトをインデックスする&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Sunspot&lt;/span&gt;.index [product1, product2]
&lt;span class=&quot;synType&quot;&gt;Sunspot&lt;/span&gt;.commit


&lt;span class=&quot;synComment&quot;&gt;# 自動的にコミットされる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Sunspot&lt;/span&gt;.index! [product1, product2]
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
もし、&lt;code&gt;searchable&lt;/code&gt;ブロック内のコードを修正した場合、すべてのオブジェクトをリインデックスしなければなりません。&lt;br /&gt;
そういった時に、次のコマンドでリインデックスができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake sunspot:solr:reindex
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sunspot/sunspot&quot;&gt;sunspot/sunspot &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/278-search-with-sunspot&quot;&gt;#278 Search with Sunspot - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Mon, 23 Feb 2015 21:45:04 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450084600899</guid>
          
            <category>Rails Model</category>
          
            <category>Rails中級</category>
          
            <category>検索</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsでransackを使って検索機能を作成する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141008/1412774436</link>
          <description>
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;ransackとは&lt;/h3&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/activerecord-hackery/ransack&quot; target=&quot;_blank&quot;&gt;ransack&lt;/a&gt;はモデルの検索インターフェースを簡単に作れるgemです。それにより検索機能を簡単に実装できます。&lt;/p&gt;&lt;p&gt;商品の検索機能をステップステップで作成することにより、ransackの使い方を説明していきます。&lt;br /&gt;
次のように検索フォームを作成し、検索をすることができます。&lt;/p&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141008/20141008215332.png&quot; alt=&quot;f:id:nipe880324:20141008215332p:plain:w480&quot; title=&quot;f:id:nipe880324:20141008215332p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Mac OSX 10.9&lt;/li&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;Ransack 1.4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#ransack-create-project&quot;&gt;Railsプロジェクトの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ransack-install&quot;&gt;Ransackのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ransack-search-function&quot;&gt;Ransackで検索機能と検索フォームを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ransack-sort-on-table&quot;&gt;Ransackでテーブルのソートリンク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ransack-restrict&quot;&gt;Ransackで検索条件を絞る&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;ransack-create-project&quot;&gt;1. Railsプロジェクトの作成&lt;/h3&gt;まずは、Railsプロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new ransack_test
cd ransack_test&lt;/pre&gt;&lt;p&gt;Scaffoldで商品を作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g scaffold Product name:string description:string price:integer discontinued:boolean carrier_id:integer&lt;/pre&gt;&lt;p&gt;商品の取り扱い会社を保持するCarrierモデルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Carrier name:string&lt;/pre&gt;&lt;p&gt;モデル間の関連を追加します。&lt;br /&gt;
まずは、Carrierモデルです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/carrier.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Carrier&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;次は、Productモデルです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/carrier.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:carrier&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;マイグレートを実行します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:migrate&lt;/pre&gt;&lt;p&gt;初期データを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/seeds.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# This file should contain all the record creation needed to seed the database with its default values.&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Examples:&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   cities = City.create([{ name: &#39;Chicago&#39; }, { name: &#39;Copenhagen&#39; }])&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   Mayor.create(name: &#39;Emanuel&#39;, city: cities.first)&lt;/span&gt;

carrier1 = &lt;span class=&quot;synType&quot;&gt;Carrier&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Mocodo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
carrier2 = &lt;span class=&quot;synType&quot;&gt;Carrier&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;BankSoft&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)

carrier1.products..create!(
  &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;iPhone 6&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;今回のモデルチェンジではいくつか見どころがあるが、その中でも特に大きなポイントとなるのが画面サイズのアップだ。「iPhone 6」は4.7インチ、「iPhone 6 Plus」は5.5インチの「Retina HDディスプレイ」を採用している。従来モデル「iPhone 5s」の4インチと比べて、「iPhone 6」はひと回り、「iPhone 6 Plus」ではそれ以上に大きなディスプレイとなっている。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;96480&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;discontinued&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)

carrier1.products.create!(
  &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;iPhone 3G&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;iPhone 3Gとはアップル インコーポレイテッドが設計・販売しているスマートフォンである。iPhoneの第2世代機で、2008年6月9日にサンフランシスコのモスコーニ・センター（英語版）で開催されたWWDC 2008で発表された。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;12800&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;discontinued&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)

carrier2.products..create!(
  &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;AQUOS CRYSTAL SoftBank&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;画面のフレームを極限までなくした「フレームレス構造」によって、画面だけを持っているような感覚を実現したスマートフォン。ディスプレイは大画面の5.0型「S-CG Silicon」（1280×720ドット）液晶を搭載しながら、女性でも片手で操作できるコンパクトなサイズに仕上げている。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;8800&lt;/span&gt;,
  &lt;span class=&quot;synConstant&quot;&gt;discontinued&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;データを投入します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:seed&lt;/pre&gt;&lt;p&gt;そして、Carrierを表示するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/products/index.html.erb

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%# 変更前 %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.carrier_id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%# 変更後 %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.carriers.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;では、&lt;code&gt;rails s&lt;/code&gt;で画面を表示してみましょう。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141008/20141008215539.png&quot; alt=&quot;f:id:nipe880324:20141008215539p:plain:w480&quot; title=&quot;f:id:nipe880324:20141008215539p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ransack-install&quot;&gt;2. Ransackのインストール&lt;/h3&gt;では、準備ができたので&lt;code&gt;Ransack&lt;/code&gt;をインストールしていきましょう。&lt;/p&gt;&lt;p&gt;まずは、&lt;code&gt;Gemfile&lt;/code&gt;に&lt;code&gt;ransack&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
...
gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ransack&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ransack&lt;/code&gt;をインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;ransack-search-function&quot;&gt;3. Ransackで検索機能と検索フォームを作成&lt;/h3&gt;Ransackで検索機能と検索フォームを追加します。&lt;/p&gt;&lt;p&gt;まず、コントローラーに検索をするコードを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;  ...
  &lt;span class=&quot;synComment&quot;&gt;# GET /products&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# GET /products.json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#@products = Product.all&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@q&lt;/span&gt;        = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.search(params[&lt;span class=&quot;synConstant&quot;&gt;:q&lt;/span&gt;])
    &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt; = &lt;span class=&quot;synIdentifier&quot;&gt;@q&lt;/span&gt;.result(&lt;span class=&quot;synConstant&quot;&gt;distinct&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  ...
&lt;/pre&gt;&lt;p&gt;次に、商品一覧のビューに検索フォームを追加します。&lt;br /&gt;
コメントで記載していますが、&lt;br /&gt;
Ransackでは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;search_form_for&lt;/code&gt;を使う&lt;/li&gt;
&lt;li&gt;&lt;code&gt;カラム名_start&lt;/code&gt;、&lt;code&gt;カラム名_cont&lt;/code&gt;などで検索条件を指定する&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;ことにより、検索フォームを作成します。&lt;br /&gt;
以下に上げているもので検索パターンをほぼ網羅しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Listing products&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%# form_for の代わりに search_form_for を使うことで検索フォームを作成 %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; search_form_for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @q do |f| %&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%# &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; 特定の文字列で始まる商品名で検索 %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :name_start, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;商品名&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.search_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :name_start %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%# cont 文字列が含まれる商品説明で検索（not_cont で含まれない商品説明） %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :description_cont, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;商品説明&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.search_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :description_cont %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%# 関連の名前で検索 Product.carrier.&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :carrier_name_cont, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;キャリア&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.search_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :carrier_name_cont %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%# lt で特定の数値より下で検索（gt はより上、eq は同じ、gteqやlteqなどもできる） %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :price_lt, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;値段(以下)&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.search_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :price_lt %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%# or で複数の値をorで検索（and 複数の値をand条件で検索） %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :name_or_description_cont, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;名前 or 説明&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.search_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :name_or_description_cont %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%# 検索ボタン %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.submit&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;/pre&gt;&lt;p&gt;では、&lt;code&gt;rails s&lt;/code&gt;でサーバーを起動し検索してみましょう。&lt;br /&gt;
まず、「商品名」を &quot;iPhone&quot; で検索します。&lt;br /&gt;
デフォルトでは大文字小文字を区別しません。「商品名」が &quot;iPhone&quot; で始まる文字列で検索されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141008/20141008220206.png&quot; alt=&quot;f:id:nipe880324:20141008220206p:plain:w480&quot; title=&quot;f:id:nipe880324:20141008220206p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;次に、「商品説明」に &quot;ディスプレイ&quot; を入力し、検索します。&lt;br /&gt;
すると、複合条件で検索された結果が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141008/20141008220222.png&quot; alt=&quot;f:id:nipe880324:20141008220222p:plain:w480&quot; title=&quot;f:id:nipe880324:20141008220222p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ransack-sort-on-table&quot;&gt;4. Ransackでテーブルのソートリンク&lt;/h3&gt;Ransackが提供している&lt;code&gt;sort_link&lt;/code&gt;ヘルパーをテーブルのヘッダーに設定することによりテーブルの列をソートすることができるようになります。&lt;br /&gt;
&lt;code&gt;default_order&lt;/code&gt;オプションにより、初期のソート順を指定できます。&lt;/p&gt;&lt;p&gt;では、テーブルのヘッダーにテーブルのソートリンクを追加しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/products/index.html.erb
  ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;thead&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; sort_link(@q,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Description&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; sort_link(@q,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :price, default_order: :desc) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Discontinued&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Carrier&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;colspan&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;thead&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

	  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @products.each do |product| %&amp;gt;&lt;/span&gt;
	      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.description&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.price&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.discontinued&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.carrier.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Show&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, product %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Edit&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_product_path(product) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Destroy&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, product, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :delete, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: { confirm: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Are you sure?&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; } %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;/pre&gt;&lt;p&gt; 画面を更新しましょう。「Name」や「Price」がクリック可能になり、昇順や降順ができるようになりました。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141008/20141008220408.png&quot; alt=&quot;f:id:nipe880324:20141008220408p:plain:w480&quot; title=&quot;f:id:nipe880324:20141008220408p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ransack-restrict&quot;&gt;5. Ransackで検索条件を絞る&lt;/h3&gt;ユーザーが独自に検索パラメーターを指定した場合には、その他の項目で検索ができてしまいます。&lt;br /&gt;
そのため、セキュリティを意識する必要がある場合は、&lt;br /&gt;
「Name」、「Description」、「Carrier.Name」、「Price」以外&lt;br /&gt;
の検索条件を利用できないようにします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;カラム名を制限するには、&lt;code&gt;ransackable_attributes&lt;/code&gt;をオーバーライドし、許可するカラム名を配列で指定します。&lt;/li&gt;
&lt;li&gt;関連を制限するには、&lt;code&gt;ransackable_associations&lt;/code&gt;をオーバーライドし、許可する関連名を配列で指定します。&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:carrier&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# デフォルトでは全てのカラム名を返す&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 許可するカラムの名前をオーバーライドする&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;ransackable_attributes&lt;/span&gt; auth_object = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name description price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# デフォルトは全てのアソシエーション名を返す&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 許可する関連の配列をオーバーライドする&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;ransackable_associations&lt;/span&gt; auth_object = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;carrier&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    &lt;p&gt;&lt;a href=&quot;http://qiita.com/nysalor/items/9a95d91f2b97a08b96b0&quot;&gt;http://qiita.com/nysalor/items/9a95d91f2b97a08b96b0&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Wed, 08 Oct 2014 22:20:36 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450068003305</guid>
          
            <category>Rails gem</category>
          
            <category>検索</category>
          
        </item>
      
    
  </channel>
</rss>
