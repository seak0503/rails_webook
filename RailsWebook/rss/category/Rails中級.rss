<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>Rails中級 - Rails Webook</title>
    <link>http://ruby-rails.hatenadiary.com/category/Rails%E4%B8%AD%E7%B4%9A</link>
    <description>自社のECを開発している会社で働いています。Rails情報やサービスを成長させる方法を書いていきます</description>
    <lastBuildDate>Fri, 18 Dec 2015 02:44:31 +0900</lastBuildDate>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <generator>Hatena::Blog</generator>
    
      
      
        <item>
          <title>RailsでRoarを使ってAPIサーバーとAPIクライアントを作る</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150708/1436284476</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150708/20150708005750.jpg&quot; alt=&quot;f:id:nipe880324:20150708005750j:plain:w420&quot; title=&quot;f:id:nipe880324:20150708005750j:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;&lt;a href=&quot;https://www.flickr.com/photos/130732751@N03/&quot;&gt;samuelrodgers752 | Flickr - Photo Sharing!&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/apotonick/roar&quot; target=&quot;_blank&quot;&gt;Roar&lt;/a&gt;はRepresenterを使ってRESTなAPIをパース、レンダーすることができるgemです。&lt;br /&gt;
つまり、Roarを使うことで、RailsでJSONを返すAPIサーバーを作成したり、逆に、APIサーバーにアクセスするAPIクライアントをRubyで作れます。&lt;/p&gt;&lt;p&gt;下記に記載しましたが、有名なgemに比べて、メリットとしては、Rubyでサーバーとクライアントを作る場合、同じような箇所を幾分か共有できる点です。&lt;br /&gt;
デメリットとしては、個人的にパースやレンダー時にエラーが発生してもデバッグしづらく対処しづらいことです。&lt;/p&gt;&lt;p&gt;サーバー側でAPIを作る場合、「&lt;a href=&quot;https://www.ruby-toolbox.com/categories/API_Builders&quot; target=&quot;_blank&quot;&gt;Ruby Toolbox - API Builders&lt;/a&gt;」によると、jbuilderやGrape、Rablなどが人気のようです。&lt;br /&gt;
APIにアクセスするクライアントを作る場合、「&lt;a href=&quot;https://www.ruby-toolbox.com/categories/http_clients&quot; target=&quot;_blank&quot;&gt;Ruby Toolbox - HTTP Clients&lt;/a&gt;」によるとRest-ClientやFaradayなどが人気です。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    &lt;p&gt;&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-usage&quot;&gt;1. Roarの簡単な使い方&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-install&quot;&gt;1.1. Railsにインストール&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-define-representer&quot;&gt;1.2. Representerの定義&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-render&quot;&gt;1.3. レンダー(JSON, Hash, XML)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-parse&quot;&gt;1.4. パース(JSON, Hash, XML)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-decorator&quot;&gt;1.5. Decoratorの定義と使い方&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-corrabolation&quot;&gt;2. Roarでクライアントとサーバーの連携&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-abstract&quot;&gt;2.1. 概要&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-show&quot;&gt;2.2. showアクション(単一アイテムの取得)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-index&quot;&gt;2.3. indexアクション(複数アイテムの取得)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-cud&quot;&gt;2.4. create, update, destroyアクション(アイテムの作成、更新、削除)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-cud&quot;&gt;2.5. 多対多関連のCUD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.3&lt;/li&gt;
&lt;li&gt;Ruby 2.2.0&lt;/li&gt;
&lt;li&gt;Roar 1.0.1&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;roar-usage&quot;&gt;1. Roarの簡単な使い方&lt;/h3&gt;&lt;h3 id=&quot;roar-install&quot;&gt;1.1. Railsにインストール&lt;/h3&gt;&lt;code&gt;Gemfile&lt;/code&gt;に追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;roar-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt;を実施すれば完了です。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;roar-define-representer&quot;&gt;1.2. Representerの定義&lt;/h3&gt;&lt;code&gt;rails g representer&lt;/code&gt;コマンドでRepresenterを作ることができます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g representer Tweet id content
      create  app/representers/tweet_representer.rb&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;app/representers&lt;/code&gt;配下にRpresenterが作成されます。&lt;br /&gt;
&lt;code&gt;property&lt;/code&gt;でRepresenterでレンダーやパースする値を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/representers/user_representer.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;

  property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
  property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Representerの定義では、他にも、パースやレンダー時に値を変換したり、パースやレンダーをスキップしたりといろいろとカスタマイズができるので、&lt;br /&gt;
困ったら以下のREADMEを読むと良いと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apotonick/roar&quot; target=&quot;_blank&quot;&gt;roar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apotonick/representable&quot; target=&quot;_blank&quot;&gt;representable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apotonick/roar-rails&quot; target=&quot;_blank&quot;&gt;roar-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-render&quot;&gt;1.3. レンダー(JSON, Hash, XML)&lt;/h3&gt;定義したRepresenterを&lt;code&gt;extend&lt;/code&gt;すし、&lt;code&gt;to_json&lt;/code&gt;、&lt;code&gt;to_hash&lt;/code&gt;メソッドを呼ぶことで、JSONやHashを出力することができます。&lt;br /&gt;
&lt;code&gt;TweetRepresenter&lt;/code&gt;で&lt;code&gt;id&lt;/code&gt;と&lt;code&gt;content&lt;/code&gt;を定義しているのでその2つしか出力されません。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;; &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
tweet.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)

tweet.to_json
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&amp;quot;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;content\&amp;quot;:\&amp;quot;Hoge\&amp;quot;}&amp;quot;&lt;/span&gt;

tweet.to_hash
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;id&amp;quot;=&amp;gt;1, &amp;quot;content&amp;quot;=&amp;gt;&amp;quot;Hoge&amp;quot;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、RailsでJSONを返したい場合は、次のようにします。&lt;br /&gt;
&lt;code&gt;render json:&lt;/code&gt;は引数に渡したオブジェクトの&lt;code&gt;to_json&lt;/code&gt;メソッドを呼び出した結果を返します。&lt;br /&gt;
そのため、Representerで定義した&lt;code&gt;id&lt;/code&gt;と&lt;code&gt;content&lt;/code&gt;のみが返されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/tweets_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;TweetsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  skip_before_action &lt;span class=&quot;synConstant&quot;&gt;:verify_authenticity_token&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
    tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;]).extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
    render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: tweet
    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&amp;quot;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;content\&amp;quot;:\&amp;quot;Hoge\&amp;quot;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
XML形式で出力したい場合は、Representerに&lt;code&gt;Roar::XML&lt;/code&gt;をincludeし、&lt;code&gt;to_xml&lt;/code&gt;メソッドを呼び出します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;; &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;XML&lt;/span&gt;

  property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
  property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.last
tweet.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
tweet.to_xml
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;&amp;lt;tweet&amp;gt;\n  &amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;\n  &amp;lt;content&amp;gt;Hoge&amp;lt;/content&amp;gt;\n&amp;lt;/tweet&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-parse&quot;&gt;1.4. パース(JSON, Hash, XML)&lt;/h3&gt;定義したRepresenterを&lt;code&gt;extend&lt;/code&gt;すし、&lt;code&gt;to_json&lt;/code&gt;、&lt;code&gt;to_hash&lt;/code&gt;メソッドを呼ぶことで、JSONやHashを出力することができます。&lt;br /&gt;
&lt;code&gt;TweetRepresenter&lt;/code&gt;で&lt;code&gt;id&lt;/code&gt;と&lt;code&gt;content&lt;/code&gt;を定義しているのでその2つしか出力されません。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;; &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
tweet.from_json(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;content\&amp;quot;:\&amp;quot;Hoge\&amp;quot;}&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Tweet id: 1, content: &amp;quot;Hoge&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
tweet.from_hash({ &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; })
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Tweet id: 1, content: &amp;quot;Hoge&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# from_hashはHashのキーがシンボルの場合うまく認識してくれません。&lt;/span&gt;
tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
tweet.from_hash({ &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; })
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Tweet id: nil, content: nil, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# with_indifferent_accessを使いましょう&lt;/span&gt;
tweet.from_hash({ &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }.with_indifferent_access)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Tweet id: 1, content: &amp;quot;Hoge&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、RailsでJSONやHashを受け取って、オブジェクトを作成したい場合は、&lt;code&gt;from_json&lt;/code&gt;や&lt;code&gt;from_hash&lt;/code&gt;を使います。&lt;br /&gt;
Representerで定義した&lt;code&gt;id&lt;/code&gt;と&lt;code&gt;content&lt;/code&gt;のみが取得してオブジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/tweets_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;TweetsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  skip_before_action &lt;span class=&quot;synConstant&quot;&gt;:verify_authenticity_token&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
    tweet.from_hash(params[&lt;span class=&quot;synConstant&quot;&gt;:tweet&lt;/span&gt;])      &lt;span class=&quot;synComment&quot;&gt;# httpリクエストの場合&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# tweet.from_json(request.body.read) # jsonリクエストの場合&lt;/span&gt;

    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; tweet.save
      render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: tweet, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:created&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: tweet.errors.full_messages, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:unprocessable_entity&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
XMLをパースしたい場合も、レンダーと同じようにRepresenterに&lt;code&gt;Roar::XML&lt;/code&gt;をincludeし、&lt;code&gt;from_xml&lt;/code&gt;を呼び出します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;; &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;XML&lt;/span&gt;

  property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
  property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

xml =&amp;lt;&amp;lt;&lt;span class=&quot;synSpecial&quot;&gt;XML&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;tweet&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  &amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  &amp;lt;content&amp;gt;Hoge&amp;lt;/content&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;/tweet&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;XML&lt;/span&gt;

tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new
tweet.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
tweet.from_xml xml
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Tweet id: 1, content: &amp;quot;Hoge&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-decorator&quot;&gt;1.5. Decoratorの定義と使い方&lt;/h3&gt;パフォーマンスやオブジェクト汚染のため&lt;code&gt;extend&lt;/code&gt;が嫌いな人のために、デコレーターで実行することもできます。&lt;br /&gt;
次のように&lt;code&gt;Roar::Decorator&lt;/code&gt;を継承することでデコレーターを定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/representers/tweet_representer.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Hypermedia&lt;/span&gt;

  property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
  property &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# Decorator内の represented はデコレートするモデルを表します。&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
作成したデコレーターでラップします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/tweets_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;TweetsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  skip_before_action &lt;span class=&quot;synConstant&quot;&gt;:verify_authenticity_token&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
    tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
    decorator = &lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;.new(tweet)
    render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: decorator
    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&amp;quot;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;content\&amp;quot;:\&amp;quot;Hoge\&amp;quot;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;roar-corrabolation&quot;&gt;2. Roarでクライアントとサーバーの連携&lt;/h3&gt;&lt;h3 id=&quot;roar-abstract&quot;&gt;2.1. 概要&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;Roarでサーバー側のRailsアプリ(Tweet)とクライアント側のRailsアプリ(Blog)を連携するようにします。&lt;br /&gt;
サンプルは&lt;a href=&quot;https://github.com/nipe0324/rails_samples/tree/master/roar_test&quot; target=&quot;_blank&quot;&gt;roar_test - GitHub&lt;/a&gt;にあります。&lt;/p&gt;&lt;p&gt;シナリオとしては、Tweetアプリ(サーバー側)を既に運用しており、新しいBlogアプリ(クライアント側)を立ち上げようと考えていて、Tweetアプリにデータを公開したいというという感じをイメージして作りました。&lt;br /&gt;
ER図は次の通りで、クライアント側は&lt;code&gt;artciles&lt;/code&gt;しかないが、&lt;code&gt;artcile&lt;/code&gt;を投稿した時に、合わせてTag付きでTweetも投稿できるみたいなことをしています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150708/20150708005219.png&quot; alt=&quot;f:id:nipe880324:20150708005219p:plain:w420&quot; title=&quot;f:id:nipe880324:20150708005219p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;詳細はGitHubを参照してみればいいので、RoarでCRUDをしながら連携する方法の抜粋（かなり雑です）を記載しました。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;roar-show&quot;&gt;2.2. showアクション(単一アイテムの取得)&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;クライアントの詳細画面で、articleとtweetを表示します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150708/20150708005205.png&quot; alt=&quot;f:id:nipe880324:20150708005205p:plain:w420&quot; title=&quot;f:id:nipe880324:20150708005205p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;クライアントのコントローラーは次の通りです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/artcles_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ローカル(クライアント)DBから取得&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

  &lt;span class=&quot;synComment&quot;&gt;# Roarでサーバー側からデータを取得&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build.show(&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.remote_tweet_id)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Roarの定義とクライアントのコードです。&lt;br /&gt;
&lt;code&gt;Roar::Client&lt;/code&gt;をincludeすることで、get, post, put, deleteメソッドがincludeされます。&lt;br /&gt;
&lt;code&gt;build&lt;/code&gt;メソッドでクライアントを作成し、&lt;code&gt;show&lt;/code&gt;メソッドで、サーバー側のRailsにアクセスしています。&lt;br /&gt;
レスポンスは、&lt;code&gt;Reprsenter&lt;/code&gt;と&lt;code&gt;Client&lt;/code&gt;で定義されている、id, content, tagsをパースし、OpenStructの値として代入します。&lt;br /&gt;
このとき、&lt;code&gt;as&lt;/code&gt;オプションを使うことで、Tweet.id を Article.remote_tweet_id に変換しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/representer/json/tweet.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;OpenStruct&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      collection_representer &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;

      property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;

      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# only client side&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# ServerからClientへ受け取ったときの変換処理&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:remote_tweet_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;as&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;,    &lt;span class=&quot;synComment&quot;&gt;# Tweet.id =&amp;gt; Article.remote_tweet_id に変換&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;skip_render&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# Clientの作成メソッド(Singular用)&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;build&lt;/span&gt;
        ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;)
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# APIのURL&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;api_url&lt;/span&gt;
        &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;http://localhost:3001/api/tweets&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# リモートのTweetsController#showにアクセス&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;(id)
        get(&lt;span class=&quot;synConstant&quot;&gt;uri&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.api_url&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;id&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;as&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
サーバー側では、単純にServerをextendしているだけです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/tweets_controller.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
  render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.extend(::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;)
    &lt;span class=&quot;synComment&quot;&gt;# {&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   &amp;quot;id&amp;quot;: 1,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   &amp;quot;content&amp;quot;: &amp;quot;tweet 1&amp;quot;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   &amp;quot;tags&amp;quot;: [&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#     { &amp;quot;id&amp;quot;: 1000, &amp;quot;name&amp;quot;: &amp;quot;tag 1&amp;quot; },&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#     { &amp;quot;id&amp;quot;: 1001, &amp;quot;name&amp;quot;: &amp;quot;tag 2&amp;quot; }&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   ]&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# }&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
サーバー側のRepresenterです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;OpenStruct&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      collection_representer &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;

      property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;

      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;

      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;,
                        &lt;span class=&quot;synConstant&quot;&gt;parse_strategy&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:find_or_instantiate&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-index&quot;&gt;2.3. indexアクション(複数アイテムの取得)&lt;/h3&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;コレクションの取得の場合、コレクション用のクライアントを作成し、一覧を取得します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/articls_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@articles&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.all
  &lt;span class=&quot;synComment&quot;&gt;# コレクション用のクライアントを作成し、allメソッドで一覧を取得&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweets&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build_collection.all
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;コレクションを取得するには、配列をextendします。また、&lt;code&gt;Representer.for_collection&lt;/code&gt;をextendする必要が有ります。&lt;br /&gt;
&lt;code&gt;all&lt;/code&gt;メソッドは、サーバー側のTweetsController#indexアクションにアクセスします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/representers/json/tweet.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;OpenStruct&lt;/span&gt;
    ...

    &lt;span class=&quot;synComment&quot;&gt;# only client side&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
      ...

      &lt;span class=&quot;synComment&quot;&gt;# Clientの作成メソッド(Collection用)&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;build_collection&lt;/span&gt;
        [].extend(::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;).extend(::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;.for_collection)
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# リモートのTweetsController#indexにアクセス&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;all&lt;/span&gt;
        get(&lt;span class=&quot;synConstant&quot;&gt;uri&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.api_url, &lt;span class=&quot;synConstant&quot;&gt;as&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
サーバーのコントローラーでも&lt;code&gt;for_collection&lt;/code&gt;を使って、コレクションを返すようにしています。&lt;br /&gt;
&gt;|ruby&lt;br /&gt;
def index&lt;br /&gt;
  @tweets = Tweet.all&lt;br /&gt;
  render json: @tweets.extend(::Json::Tweet::Server.for_collection)&lt;br /&gt;
    # [&lt;br /&gt;
    #   {&lt;br /&gt;
    #     &quot;id&quot;: 1,&lt;br /&gt;
    #     &quot;content&quot;: &quot;tweet 1&quot;,&lt;br /&gt;
    #     &quot;tags&quot;: [&lt;br /&gt;
    #       { &quot;id&quot;: 1000, &quot;name&quot;: &quot;tag 1&quot; },&lt;br /&gt;
    #       { &quot;id&quot;: 1001, &quot;name&quot;: &quot;tag 2&quot; }&lt;br /&gt;
    #     ]&lt;br /&gt;
    #   },&lt;br /&gt;
    #   {&lt;br /&gt;
    #     &quot;id&quot;: 2,&lt;br /&gt;
    #     &quot;content&quot;: &quot;tweet 2&quot;,&lt;br /&gt;
    #     &quot;tags&quot;: []&lt;br /&gt;
    #   }&lt;br /&gt;
    # ]&lt;br /&gt;
end&lt;br /&gt;
|&lt;/p&gt;

&lt;/div&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-cud&quot;&gt;2.4. create, update, destroyアクション(アイテムの作成、更新、削除)&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;コレクションを作成し、作成、更新、削除を行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/articles_controller.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# POST /articles&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(article_params)

  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build.from_hash(params[&lt;span class=&quot;synConstant&quot;&gt;:article&lt;/span&gt;])
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.create
  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.remote_tweet_id = &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.remote_tweet_id

  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.save
    redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Article was successfully created.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
    render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# PATCH/PUT /articles/1&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;update&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build.from_hash(params[&lt;span class=&quot;synConstant&quot;&gt;:article&lt;/span&gt;])
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.update(&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.remote_tweet_id)

  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.update(article_params)
    redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Article was successfully updated.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
    render &lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DELETE /articles/1&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;destroy&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.destroy(&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.remote_tweet_id)

  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.destroy
  redirect_to articles_url, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Article was successfully destroyed.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-cud&quot;&gt;2.5. 多対多関連のCUD&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;TweetとTagは多対多関係です。&lt;/p&gt;&lt;p&gt;まず、クライアントサイドでは次のようにして、リクエストを送ります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 画面から次のようなパラメータがフォームから送られてきます。&lt;/span&gt;
{
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;✓&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;authenticity_token&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;xxx&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; {
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;article 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;client article&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; [{ &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;new tag&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }]
  },
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Update Article&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
}

&lt;span class=&quot;synComment&quot;&gt;# コントローラーで画面のフォーム情報をfrom_hashでパースして取得します&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# createメソッドでリクエストを送ります。&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
  ...
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build.from_hash(params[&lt;span class=&quot;synConstant&quot;&gt;:article&lt;/span&gt;])
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.create
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# from_hashのパース時に取得されるデータは次のように定義しています。&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;OpenStruct&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      collection_representer &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;

      property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;

      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# ClientからServerへのリクエストを送るときの変換処理&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;as&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;,  &lt;span class=&quot;synComment&quot;&gt;# Article.title =&amp;gt; Tag.content 用にキー名を変換&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;render_filter&lt;/span&gt;: -&amp;gt; (value, _doc, _args) { value.to_s[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;] + &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; } &lt;span class=&quot;synComment&quot;&gt;# Twitter用に文字列を短くする&lt;/span&gt;
      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;OpenStruct&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      collection_representer &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;

      property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# only client side&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;サーバーサイドでは次の通りです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# POSTされるjsonデータは次のようになりmす&lt;/span&gt;
{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;client art...&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;[{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}, {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}, {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;new tag&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}] }

&lt;span class=&quot;synComment&quot;&gt;# controllerで取得し、from_jsonでパースし、値を設定し保存&lt;/span&gt;
tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;).from_json(request.body.read)
tweet.save

&lt;span class=&quot;synComment&quot;&gt;# パースの内容はRepresenterで定義&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# parse_strategy: :find_or_instantiate はidが既にあればそのインスタンスを返し、&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# idがなければ新しいインスタンスを作成する&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;

  collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;,
                    &lt;span class=&quot;synConstant&quot;&gt;parse_strategy&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:find_or_instantiate&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;
</description>
          <pubDate>Wed, 08 Jul 2015 00:54:36 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450100658763</guid>
          
            <category>Rails中級</category>
          
            <category>API</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Postgresqlのデータ型一覧とRailsのマイグレーションの指定方法</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150607/1433606267</link>
          <description>&lt;p&gt;Postgresqlの各データ型とRailsのマイグレーションでの指定方法をまとめました。&lt;br /&gt;
次の目次にある、データ型についてまとめました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#postgresql-migration-int&quot;&gt;数値データ型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#postgresql-migration-money&quot;&gt;通貨型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#postgresql-migration-str&quot;&gt;文字型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#postgresql-migration-date&quot;&gt;日付/時刻データ型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#postgresql-migration-bool&quot;&gt;論理値データ型&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.2.0&lt;/li&gt;
&lt;li&gt;Rails 4.2.1&lt;/li&gt;
&lt;li&gt;Postgresql 9.4.1&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;postgresql-migration-int&quot;&gt;数値データ型&lt;/h3&gt;数値データ型には2、4、8バイト整数と、4、8バイト浮動小数点、精度設定が可能な数があります。&lt;/p&gt;&lt;p&gt;&lt;table border=&quot;1&quot; class=&quot;CALSTABLE&quot;&gt;
  &lt;colgroup&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;/colgroup&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;型名&lt;/th&gt;&lt;th&gt;格納サイズ&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;th&gt;範囲&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;smallint&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;2バイト&lt;/td&gt;&lt;td&gt;狭範囲の整数&lt;/td&gt;&lt;td&gt;-32768から+32767&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;integer&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;4バイト&lt;/td&gt;&lt;td&gt;典型的に使用する整数&lt;/td&gt;&lt;td&gt;-2147483648から+2147483647&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;bigint&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;8バイト&lt;/td&gt;&lt;td&gt;広範囲整数&lt;/td&gt;&lt;td&gt;-9223372036854775808から+9223372036854775807&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;decimal&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;可変長&lt;/td&gt;&lt;td&gt;ユーザ指定精度、正確、通貨などに使用&lt;/td&gt;&lt;td&gt;小数点前までは131072桁、小数点以降は16383桁&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;numeric&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;可変長&lt;/td&gt;&lt;td&gt;decimalと同じ&lt;/td&gt;&lt;td&gt;小数点前までは131072桁、小数点以降は16383桁&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;real&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;4バイト&lt;/td&gt;&lt;td&gt;可変精度、不正確&lt;/td&gt;&lt;td&gt;6桁精度&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;double precision&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;8バイト&lt;/td&gt;&lt;td&gt;可変精度、不正確&lt;/td&gt;&lt;td&gt;15桁精度&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;smallserial&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;2バイト&lt;/td&gt;&lt;td&gt;狭範囲自動整数&lt;/td&gt;&lt;td&gt;1から32767&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;serial&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;4バイト&lt;/td&gt;&lt;td&gt;自動増分整数&lt;/td&gt;&lt;td&gt;1から2147483647&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;bigserial&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;8バイト&lt;/td&gt;&lt;td&gt;広範囲自動増分整数&lt;/td&gt;&lt;td&gt;1から9223372036854775807&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# マイグレーションファイル&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateHoges&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:hoges&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.integer &lt;span class=&quot;synConstant&quot;&gt;:int2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# smallint型&lt;/span&gt;
      t.integer &lt;span class=&quot;synConstant&quot;&gt;:int4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# integer型&lt;/span&gt;
      t.integer &lt;span class=&quot;synConstant&quot;&gt;:int&lt;/span&gt;            &lt;span class=&quot;synComment&quot;&gt;# integer型&lt;/span&gt;
      t.integer &lt;span class=&quot;synConstant&quot;&gt;:int8&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# bigint型&lt;/span&gt;

      t.decimal &lt;span class=&quot;synConstant&quot;&gt;:decimal&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;precision&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;scale&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# decimal/numeric(10,2)型&lt;/span&gt;

      t.float &lt;span class=&quot;synConstant&quot;&gt;:real&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# real型&lt;/span&gt;
      t.float &lt;span class=&quot;synConstant&quot;&gt;:double_precision&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# double precision型&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;参考：&lt;a href=&quot;https://www.postgresql.jp/document/9.4/html/datatype-numeric.html#DATATYPE-INT&quot; target=&quot;_blank&quot;&gt;数値データ型の詳細な説明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;postgresql-migration-money&quot;&gt;通貨型&lt;/h3&gt;money型は貨幣金額を固定精度の小数点で格納します。&lt;br /&gt;
範囲は小数点2桁を想定しています。出力形式は通常は&quot;典型的な&quot;通貨書式となりますが、ロケールによって異なります。&lt;/p&gt;&lt;p&gt;&lt;table border=&quot;1&quot; class=&quot;CALSTABLE&quot;&gt;
  &lt;colgroup&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;/colgroup&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;型名&lt;/th&gt;&lt;th&gt;格納サイズ&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;th&gt;範囲&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;money&lt;/td&gt;&lt;td&gt;8バイト&lt;/td&gt;&lt;td&gt;貨幣金額&lt;/td&gt;&lt;td&gt;-92233720368547758.08 から +92233720368547758.07&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# マイグレーションファイル&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateHoges&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:hoges&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.money &lt;span class=&quot;synConstant&quot;&gt;:money&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# money型&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;参考：&lt;a href=&quot;https://www.postgresql.jp/document/9.4/html/datatype-money.html&quot; target=&quot;_blank&quot;&gt;通貨型の詳細な説明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;postgresql-migration-str&quot;&gt;文字型&lt;/h3&gt;&lt;table border=&quot;1&quot; class=&quot;CALSTABLE&quot;&gt;
  &lt;colgroup&gt;&lt;col&gt;&lt;col&gt;&lt;/colgroup&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;型名&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;character varying(&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;n&lt;/i&gt;&lt;/tt&gt;)&lt;/tt&gt;、&lt;tt class=&quot;TYPE&quot;&gt;varchar(&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;n&lt;/i&gt;&lt;/tt&gt;)&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;上限付き可変長&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;character(&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;n&lt;/i&gt;&lt;/tt&gt;)&lt;/tt&gt;、&lt;tt class=&quot;TYPE&quot;&gt;char(&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;n&lt;/i&gt;&lt;/tt&gt;)&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;空白で埋められた固定長&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;text&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;制限なし可変長&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# マイグレーションファイル&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateHoges&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:hoges&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.string &lt;span class=&quot;synConstant&quot;&gt;:str&lt;/span&gt;                &lt;span class=&quot;synComment&quot;&gt;# character varying型&lt;/span&gt;
      t.string &lt;span class=&quot;synConstant&quot;&gt;:str128&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;128&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# character varying(128)型&lt;/span&gt;
      t.text   &lt;span class=&quot;synConstant&quot;&gt;:text&lt;/span&gt;               &lt;span class=&quot;synComment&quot;&gt;# text型&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;参考：&lt;a href=&quot;https://www.postgresql.jp/document/9.4/html/datatype-character.html&quot; target=&quot;_blank&quot;&gt;日付/時刻データ型の詳細な説明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;postgresql-migration-date&quot;&gt;日付/時刻データ型&lt;/h3&gt;&lt;table border=&quot;1&quot; class=&quot;CALSTABLE&quot;&gt;
  &lt;colgroup&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;/colgroup&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;型名&lt;/th&gt;&lt;th&gt;格納サイズ&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;th&gt;最遠の過去&lt;/th&gt;&lt;th&gt;最遠の未来&lt;/th&gt;&lt;th&gt;精度&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;timestamp [ (&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;p&lt;/i&gt;&lt;/tt&gt;) ] [ without time zone ]&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;8 バイト&lt;/td&gt;&lt;td&gt;日付と時刻両方（時間帯なし）&lt;/td&gt;&lt;td&gt;4713 BC&lt;/td&gt;&lt;td&gt;294276 AD&lt;/td&gt;&lt;td&gt;1μ秒、14桁&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;timestamp [ (&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;p&lt;/i&gt;&lt;/tt&gt;) ] with time zone&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;8バイト&lt;/td&gt;&lt;td&gt;日付と時刻両方、時間帯付き&lt;/td&gt;&lt;td&gt;4713 BC&lt;/td&gt;&lt;td&gt;294276 AD&lt;/td&gt;&lt;td&gt;1μ秒、14桁&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;date&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;4バイト&lt;/td&gt;&lt;td&gt;日付（時刻なし）&lt;/td&gt;&lt;td&gt;4713 BC&lt;/td&gt;&lt;td&gt;5874897 AD&lt;/td&gt;&lt;td&gt;1日&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;time [ (&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;p&lt;/i&gt;&lt;/tt&gt;) ] [ without time zone ]&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;8バイト&lt;/td&gt;&lt;td&gt;時刻（日付なし）&lt;/td&gt;&lt;td&gt;00:00:00&lt;/td&gt;&lt;td&gt;24:00:00&lt;/td&gt;&lt;td&gt;1μ秒、14桁&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;time [ (&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;p&lt;/i&gt;&lt;/tt&gt;) ] with time zone&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;12バイト&lt;/td&gt;&lt;td&gt;その日の時刻のみ、時間帯付き&lt;/td&gt;&lt;td&gt;00:00:00+1459&lt;/td&gt;&lt;td&gt;24:00:00-1459&lt;/td&gt;&lt;td&gt;1μ秒、14桁&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;interval [ &lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;fields&lt;/i&gt;&lt;/tt&gt; ] [ (&lt;tt class=&quot;REPLACEABLE&quot;&gt;&lt;i&gt;p&lt;/i&gt;&lt;/tt&gt;) ]&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;16バイト&lt;/td&gt;&lt;td&gt;時間間隔&lt;/td&gt;&lt;td&gt;-178000000年&lt;/td&gt;&lt;td&gt;178000000年&lt;/td&gt;&lt;td&gt;1μ秒、14桁&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# マイグレーションファイル&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateHoges&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:hoges&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.datetime  &lt;span class=&quot;synConstant&quot;&gt;:datetime&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# timestamp without time zone型&lt;/span&gt;
      t.timestamp &lt;span class=&quot;synConstant&quot;&gt;:timestamp&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# timestamp without time zone型&lt;/span&gt;
      t.timestamp &lt;span class=&quot;synConstant&quot;&gt;:timestamp&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# timestamp without time zone型&lt;/span&gt;
      t.time      &lt;span class=&quot;synConstant&quot;&gt;:time&lt;/span&gt;      &lt;span class=&quot;synComment&quot;&gt;# date型&lt;/span&gt;
      t.date      &lt;span class=&quot;synConstant&quot;&gt;:date&lt;/span&gt;      &lt;span class=&quot;synComment&quot;&gt;# time without time zone型&lt;/span&gt;
      t.column    &lt;span class=&quot;synConstant&quot;&gt;:duration&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:interval&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# interval型&lt;/span&gt;
      t.column &lt;span class=&quot;synConstant&quot;&gt;:timestamp_with_tz&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;timestamp with time zone&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      t.column &lt;span class=&quot;synConstant&quot;&gt;:time_with_tz&lt;/span&gt;,      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;time with time zone&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;参考：&lt;a href=&quot;https://www.postgresql.jp/document/9.4/html/datatype-datetime.html&quot; target=&quot;_blank&quot;&gt;日付/時刻データ型の詳細な説明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;postgresql-migration-bool&quot;&gt;論理値データ型&lt;/h3&gt;boolean型はいくつかの状態を取ることができます。 &quot;真&quot;もしくは&quot;偽&quot;、そして第3の状態はSQLではNULL値で表現される&quot;不明&quot;の状態です。&lt;/p&gt;&lt;p&gt;&lt;table border=&quot;1&quot; class=&quot;CALSTABLE&quot;&gt;
  &lt;colgroup&gt;&lt;col&gt;&lt;col&gt;&lt;col&gt;&lt;/colgroup&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;名前&lt;/th&gt;&lt;th&gt;格納サイズ&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;&lt;tt class=&quot;TYPE&quot;&gt;boolean&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;1バイト&lt;/td&gt;&lt;td&gt;真または偽の状態&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# マイグレーションファイル&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateHoges&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:hoges&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.boolean   &lt;span class=&quot;synConstant&quot;&gt;:bool&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# boolean型&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;参考：&lt;a href=&quot;https://www.postgresql.jp/document/9.4/html/datatype-boolean.html&quot; target=&quot;_blank&quot;&gt;論理値データ型の詳細な説明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;他にもバイナリ型やJSON型などのデータ型もあるので気にになる方は、参考のURLを一度読んでみてください。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.postgresql.jp/document/9.4/html/datatype.html&quot;&gt;https://www.postgresql.jp/document/9.4/html/datatype.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sun, 07 Jun 2015 00:57:47 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450096729801</guid>
          
            <category>Rails Migration</category>
          
            <category>Rails中級</category>
          
            <category>DB</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでActiveRecord/Arelを使って複雑なSELECT文を実行する方法</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150428/1430154446</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150428/20150428020246.jpg&quot; alt=&quot;f:id:nipe880324:20150428020246j:plain&quot; title=&quot;f:id:nipe880324:20150428020246j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Rails(ActiveRecord/Arel)で複雑なSELECT文を実行する方法をまとめました。&lt;br /&gt;
メリット、デメリットや使いどころなどまとめ途中なのであしからずお願いします。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.2.0&lt;/li&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;Arel  6.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#complex-sql-conclusion&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#complex-sql-preparation&quot;&gt;ER図&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#complex-sql-active-record&quot;&gt;Active Record&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#complex-sql-arel&quot;&gt;Arel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#complex-sql-raw-sql&quot;&gt;生SQL&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;complex-sql-conclusion&quot;&gt;1. まとめ&lt;/h3&gt;まず、個人的な意見として、それぞれの方法のメリット・デメリットをまとめました。&lt;/p&gt;&lt;p&gt;&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;&lt;th&gt;メリット&lt;/th&gt;&lt;th&gt;デメリット&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ActiveRecord&lt;/td&gt;
      &lt;td&gt;&lt;br /&gt;
      　・1, 2テーブル内での検索なら簡単に処理をかけれる&lt;br /&gt;
      　・返り値がActiveRecord::Relationやモデルのインスタンスなので扱いやすい&lt;br /&gt;
      &lt;/td&gt;
      &lt;td&gt;&lt;br /&gt;
      　・複数のテーブルにまたがる検索で、検索条件、他テーブルのカラム値の扱いがしずらい&lt;br /&gt;
      　・CASE WHENやカラムなど行いづらい&lt;br /&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Arel&lt;/td&gt;
      &lt;td&gt;文字列でなくメソッドで検索文を記載できる（個人的にあまりメリットが見えていない）&lt;/td&gt;
      &lt;td&gt;RailsのプライベートAPIなので使うべきではない。&lt;a href=&quot;https://github.com/rails/rails/issues/16978&quot; target=&quot;_blank&quot;&gt;参考&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;生SQL&lt;/td&gt;
      &lt;td&gt;複雑なSQLをかける&lt;/td&gt;
      &lt;td&gt;返り値がHashなのでモデルのメソッドが使いずらい&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;メインでよく行う処理では比較的簡単なSQL（ActiveRecordで十分足りる）で処理をおこなえ、レポート集計などは複雑なSQL（生のSQL）でもしょうがないと思います。&lt;br /&gt;
こういう状態が、保守性、パフォーマンス、メンテナンス性などに優れた良いDB設計ができているということだと個人的に思います。&lt;br /&gt;
つまり、メイン処理のSQLが複雑になってしまうということは、どこかでDB設計のミスを犯していたり、パフォーマンスのために正規化を崩しすぎてしまったのではと思います。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;complex-sql-preparation&quot;&gt;2. ER図&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;ER図&lt;/h3&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150428/20150428015849.jpg&quot; alt=&quot;f:id:nipe880324:20150428015849j:plain&quot; title=&quot;f:id:nipe880324:20150428015849j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;DBスキーマとモデルの作成&lt;/h3&gt;
    &lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g model User username email password
bin/rails g model Order order_no:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; user_id:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
bin/rails g model LineItem quantity:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; book_id:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
bin/rails g model Book isbn name name_kana price:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
bin/rails g model Category
bin/rake db:migrate
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;モデルの定義&lt;/h3&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:orders&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:line_items&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;total_price&lt;/span&gt;
    line_items.map(&amp;amp;&lt;span class=&quot;synConstant&quot;&gt;:total_price&lt;/span&gt;).sum
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;LineItem&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:order&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:book&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;total_price&lt;/span&gt;
    book.price * quantity
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Book&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:line_items&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:books&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;complex-sql-active-record&quot;&gt;3. Active Record&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;簡単にテーブルからデータを取得でき、また、オブジェクトとして取得できるので、データを扱いやすいです。&lt;br /&gt;
しかし、複雑なSQLを実行する場合は、ActiveRecordにより作成されるSQLを確認しないと、パフォーマンスが悪いSQLになっている可能性もあるので注意が必要です。&lt;/p&gt;&lt;p&gt;&lt;code&gt;joins&lt;/code&gt;メソッドを使うことで次のように&lt;code&gt;INNER JOIN&lt;/code&gt;をして、複数のテーブルに対して&lt;code&gt;WHERE句&lt;/code&gt;を実施することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;users = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.joins(&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;book&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; }}).where(&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }, &lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;IT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; })

&lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.* &lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;book_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;IT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;includes&lt;/code&gt;メソッドを使うことで次のように&lt;code&gt;LEFT OUTTER JOIN&lt;/code&gt;をして、複数のテーブルに対して&lt;code&gt;WHERE句&lt;/code&gt;を実施することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;users = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.includes(&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;book&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; }}).where(&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }, &lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;IT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; })

&lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r0, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r1, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r2, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r3, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r4, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r5, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t1_r0, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;order_no&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t1_r1, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t1_r2, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t1_r3, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t1_r4, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r0, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r1, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;book_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r2, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r3, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r4, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r5, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r0, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r1, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r2, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r3, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r4, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r5, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r6, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r7, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t4_r0, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t4_r1, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t4_r2, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t4_r3
&lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;book_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;IT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;また、オブジェクトとして帰ってくるので、その後に処理を行いやすいです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.includes(&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;book&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; }}).where(&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }).first
user.orders.count
&lt;/pre&gt;&lt;p&gt;扱いづらいが、&lt;code&gt;select&lt;/code&gt;メソッドにより他テーブルの値を取得し、アクセスできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.select(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users.*, orders.order_no AS order_no&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).joins(&lt;span class=&quot;synConstant&quot;&gt;:orders&lt;/span&gt;).find(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; SELECT  users.*, orders.order_no AS order_no FROM &amp;quot;users&amp;quot; INNER JOIN &amp;quot;orders&amp;quot; ON &amp;quot;orders&amp;quot;.&amp;quot;user_id&amp;quot; = &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot; WHERE &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot; = ? LIMIT 1  [[&amp;quot;id&amp;quot;, 1]]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# selectで指定した値を取得できます&lt;/span&gt;
user.attributes
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; {&amp;quot;id&amp;quot;=&amp;gt;1, &amp;quot;username&amp;quot;=&amp;gt;&amp;quot;test&amp;quot;, &amp;quot;email&amp;quot;=&amp;gt;&amp;quot;hoge@example.com&amp;quot;, &amp;quot;password&amp;quot;=&amp;gt;nil, &amp;quot;created_at&amp;quot;=&amp;gt;Mon, 27 Apr 2015 15:49:16 UTC +00:00, &amp;quot;updated_at&amp;quot;=&amp;gt;Mon, 27 Apr 2015 15:49:16 UTC +00:00, &amp;quot;order_no&amp;quot;=&amp;gt;1}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# もちろんアクセスもできます&lt;/span&gt;
user.order_no &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 1&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;complex-sql-arel&quot;&gt;4. Arel&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/rails/arel&quot; target=&quot;_blank&quot;&gt;Arel - GitHub公式&lt;/a&gt;によると、複雑なSQLクエリの生成を簡単にするらしいです。（個人的にあまりメリットが見えていません）&lt;br /&gt;
また、一説によると、RailsのプライベートAPIなので使うべきではないらしいです。&lt;a href=&quot;https://github.com/rails/rails/issues/16978&quot; target=&quot;_blank&quot;&gt;参考&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;users  = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.arel_table
orders = &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.arel_table
sql    = users.join(orders, &lt;span class=&quot;synType&quot;&gt;Arel&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Nodes&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;OuterJoin&lt;/span&gt;).on(users[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;].eq(orders[&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;])).where(orders[&lt;span class=&quot;synConstant&quot;&gt;:order_no&lt;/span&gt;].eq(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)).to_sql
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;SELECT FROM \&amp;quot;users\&amp;quot; LEFT OUTER JOIN \&amp;quot;orders\&amp;quot; ON \&amp;quot;users\&amp;quot;.\&amp;quot;id\&amp;quot; = \&amp;quot;orders\&amp;quot;.\&amp;quot;user_id\&amp;quot; WHERE \&amp;quot;orders\&amp;quot;.\&amp;quot;order_no\&amp;quot; = 1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;complex-sql-raw-sql&quot;&gt;5. 生SQL&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;副問い合わせ、CASE WHENなど複雑なSQLを記載でき、基本的にはSQLの知識はあると思うので学習コストは少ないと思います。&lt;br /&gt;
しかし、返り値がHashなのでモデルのメソッドが使いずらく、また、SQLサーバーに依存したコードになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 実行したいSQLをヒアドキュメトで記載する&lt;/span&gt;
query = &amp;lt;&amp;lt;-&lt;span class=&quot;synSpecial&quot;&gt;SQL&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  SELECT users.*&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  FROM &amp;quot;users&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  LEFT OUTER JOIN &amp;quot;orders&amp;quot; ON &amp;quot;orders&amp;quot;.&amp;quot;user_id&amp;quot; = &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  LEFT OUTER JOIN &amp;quot;line_items&amp;quot; ON &amp;quot;line_items&amp;quot;.&amp;quot;order_id&amp;quot; = &amp;quot;orders&amp;quot;.&amp;quot;id&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  LEFT OUTER JOIN &amp;quot;books&amp;quot; ON &amp;quot;books&amp;quot;.&amp;quot;id&amp;quot; = &amp;quot;line_items&amp;quot;.&amp;quot;book_id&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  LEFT OUTER JOIN &amp;quot;categories&amp;quot; ON &amp;quot;categories&amp;quot;.&amp;quot;id&amp;quot; = &amp;quot;books&amp;quot;.&amp;quot;category_id&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  WHERE &amp;quot;users&amp;quot;.&amp;quot;username&amp;quot; = &#39;test&#39;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;SQL&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# SQLを実行する&lt;/span&gt;
hash = &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;.connection.select_all(query)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; #&amp;lt;ActiveRecord::Result:0x007f9ab9869c90 @columns=[&amp;quot;id&amp;quot;, &amp;quot;username&amp;quot;, &amp;quot;email&amp;quot;, &amp;quot;password&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;updated_at&amp;quot;], @rows=[[1, &amp;quot;test&amp;quot;, &amp;quot;hoge@example.com&amp;quot;, nil, &amp;quot;2015-04-27 15:49:16.971518&amp;quot;, &amp;quot;2015-04-27 15:49:16.971518&amp;quot;]], @hash_rows=nil, @column_types={}&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 表形式で取得できる&lt;/span&gt;
hash.columns
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;quot;id&amp;quot;, &amp;quot;username&amp;quot;, &amp;quot;email&amp;quot;, &amp;quot;password&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;updated_at&amp;quot;]&lt;/span&gt;
hash.rows
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [[1, &amp;quot;test&amp;quot;, &amp;quot;hoge@example.com&amp;quot;, nil, &amp;quot;2015-04-27 15:49:16.971518&amp;quot;, &amp;quot;2015-04-27 15:49:16.971518&amp;quot;]]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rigelgroupllc.com/blog/2014/09/14/working-with-complex-sql-statements/&quot;&gt;Working with complex SQL statements in Rails and ActiveRecord - Rigel Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19175084/activerecord-query-through-multiple-joins&quot;&gt;ruby on rails 4 - ActiveRecord query through multiple joins - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 28 Apr 2015 02:07:26 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450092867365</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
            <category>SQL</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでDraperを使ってプレゼンテーション層（デコレーター）を実装する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150415/1429031791</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150415/20150415020650.jpg&quot; alt=&quot;f:id:nipe880324:20150415020650j:plain&quot; title=&quot;f:id:nipe880324:20150415020650j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/herry/&quot;&gt;Flickr: HerryLawford&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/drapergem/draper&quot;&gt;Draper&lt;/a&gt;はRailsのプレゼンテーション層の役割を担うgemです。&lt;br /&gt;
この記事では、Draperを通し、プレゼンテーション層の必要性や使い方を説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby   2.2.1&lt;/li&gt;
&lt;li&gt;Rails  4.2.0&lt;/li&gt;
&lt;li&gt;Draper 1.4.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;0.   &lt;a href=&quot;#draper-why&quot;&gt;プレゼンテーション層の必要性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.   &lt;a href=&quot;#draper-installation&quot;&gt;Draperのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.   &lt;a href=&quot;#draper-basic-usage&quot;&gt;Draperの簡単な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.   &lt;a href=&quot;#draper-instanate&quot;&gt;デコレーターインスタンスの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.1. &lt;a href=&quot;#draper-single-obj&quot;&gt;単独のオブジェクトのデコレーター&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.2. &lt;a href=&quot;#draper-individual-collection&quot;&gt;コレクションの個々のオブジェクトのデコレーター&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.3. &lt;a href=&quot;#draper-collection&quot;&gt;コレクション自身のデコレーター&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.4. &lt;a href=&quot;#draper-related-object&quot;&gt;関連するオブジェクトのデコレーター&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.   &lt;a href=&quot;#draper-create-class&quot;&gt;デコレータークラスの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.1. &lt;a href=&quot;#draper-access-helper&quot;&gt;デコレーター内でヘルパーメソッドへのアクセス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.2. &lt;a href=&quot;#draper-access-model&quot;&gt;デコレーター内でモデルオブジェクトへアクセス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.3. &lt;a href=&quot;#draper-render-html&quot;&gt;デコレーターでHTMLをレンダリングする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.4. &lt;a href=&quot;#draper-delegate&quot;&gt;デコレーターのデリゲート（委託）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-why&quot;&gt;0. プレゼンテーション層の必要性&lt;/h3&gt;Draperはデコレーター（他にはプレゼンター、ビューモデルなどと呼ばれます）であり、ビューとモデルの中間に位置し、モデルやビューに実装されやすい表示ロジック/フォーマットといったプレゼンテーション層の責務を引き受けることで可読性、保守性を向上させることができます。&lt;/p&gt;&lt;p&gt;ビューにif文が多くて見ずらい、モデルに表示用のロジックが多くなってしまった、ビューのロジックをヘルパーに書いているがヘルパーの名前空間の衝突が怖い(※1)などの場合にDraperを導入するとよいと思います。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※1 Railsのヘルパーはグローバルな名前空間にメソッドが定義されるので、異なるヘルパーモジュールに同じメソッド名のメソッドを定義すると名前が衝突します&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;ビューにif文が多くて見ずらい&lt;/h5&gt;
    &lt;p&gt;ビューからロジックをなくしたい。HTML構造が複雑になり、ビューファイルが見ずらくなる。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# Draper導入前
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Twitter:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% if @user.twitter_name.present? %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @user.twitter_name, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;http://twitter.com/#{@user.twitter_name}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% else %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;None given&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

# Draper導入後
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Twitter:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @user.twitter&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;ヘルパーの名前空間の衝突&lt;/h5&gt;
    &lt;p&gt;別々のヘルパーでfooメソッドという同じメソッド名のメソッドを定義したので衝突してしまって、思うようにメソッドが動かない。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;foo&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ApplicationHelper#foo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;BooksHelper&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;foo&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;BooksHelper#foo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ApplicationHelper#fooが上書きされてしまう??&lt;/span&gt;
foo &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &#39;BooksHelper#foo&#39; &lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;モデルに表示用のロジックが多い&lt;/h5&gt;
    &lt;p&gt;モデルはドメインロジックを記載するべきであり、メソッドが多くやすいので、UIの細かなフォーマットなどはあまり書きたくない。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Draper導入前&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;SomeModel&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;posted_at&lt;/span&gt;
    created_at.strftime(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;%Y/%m/%d&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Draper導入後&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;SomeModel&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# posted_atメソッドはデコレータークラスに移動&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-installation&quot;&gt;1. Draperのインストール方法&lt;/h3&gt;&lt;code&gt;Gemfile&lt;/code&gt;にDraperを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;draper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;~&amp;gt; 1.3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
バンドラーを実行して、Draperをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-basic-usage&quot;&gt;2. Draperの簡単な使い方&lt;/h3&gt;まず、Scaffoldで作成します。&lt;br /&gt;
Draperを入れたので、デコレーターも作成されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g scaffold Article title body:text
      ...
      invoke    decorator
      create      app/decorators/article_decorator.rb
&lt;/pre&gt;&lt;p&gt;※&lt;code&gt;rails g resource&lt;/code&gt;や&lt;code&gt;rails g decorator&lt;/code&gt;というジェネレーターを実行した場合もデコレーターが作成されます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;デコレーターにプレゼンテーション層のメソッドを定義します。&lt;br /&gt;
イメージとしては、ビューやモデルに書くべきではなく、ヘルパーに書くようなメソッドです。例えば、日付のフォーマット、条件分岐でビューの表示が少し変わるなどです。&lt;br /&gt;
今回は、日付をフォーマットして、spanタグ付きで表示する&lt;code&gt;posted_at&lt;/code&gt;メソッドを追加しました。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/decorators/article_decorator.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  delegate_all

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;posted_at&lt;/span&gt;
    h.content_tag &lt;span class=&quot;synConstant&quot;&gt;:span&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      model.created_at.strftime(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;%Y/%m/%d %H:%m&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;デコレーターはモデルオブジェクトを保持しています。&lt;br /&gt;
そして、&lt;code&gt;delegate_all&lt;/code&gt;と記載することで、デコレーター内に定義されていないメソッドが呼び出されたい場合、デコレーターが保持しているモデルオブジェクトにメソッド呼び出しを委譲します。&lt;br /&gt;
そのため、基本的にデコレーターを導入しても、モデルの処理が行われるので従来通り動きます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;次に、コントローラー内で作成したデコレーターを使いようにします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コレクションの個々のオブジェクトをデコレートするには&lt;code&gt;decorate_collection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;単独のオブジェクトをデコレートするには&lt;code&gt;decorate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/articles_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticlesController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  before_action &lt;span class=&quot;synConstant&quot;&gt;:set_article&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;only&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:update&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;]

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@articles&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt;.decorate_collection(&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.all)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  ...

  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_article&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt;.decorate(&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;]))
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これで、Articleオブジェクトを保持した、Articleデコレーターインスタンスが作成されました。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;最後に、ビューからデコレーターのメソッドを呼び出します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/articles/index.html.erb --&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @articles.each do |article| %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; article.title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; article.body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- デコレーターのメソッド呼び出し --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; article.posted_at&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Show&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, article %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Edit&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_article_path(article) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Destroy&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, article, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :delete, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: { confirm: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Are you sure?&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; } %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;title&lt;/code&gt;や&lt;code&gt;body&lt;/code&gt;は、デコレーターの&lt;code&gt;delegate_all&lt;/code&gt;でモデルに委譲させるのでモデルのメソッドが呼び出されます。&lt;br /&gt;
&lt;code&gt;posted_at&lt;/code&gt;は、デコレーターで定義したメソッドが呼び出されます。&lt;/p&gt;&lt;p&gt;画面は次のようになります。（Posted atの値のスタイリングをしています）&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150415/20150415021453.jpg&quot; alt=&quot;f:id:nipe880324:20150415021453j:plain:w480&quot; title=&quot;f:id:nipe880324:20150415021453j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;このようにして、Draperを使うことができます。&lt;br /&gt;
モデルとビューの間にデコレーターを導入することで、モデル内のビジネスロジックと関係ないメソッドを減らせ、ビューから条件分岐を減らせ、ヘルパーメソッドのメソッド名の衝突問題を防ぐことができるようになります。&lt;br /&gt;
アプリの規模が大きくなってきてこのようなことに困った場合は、導入をお勧めします。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-instanate&quot;&gt;3. デコレーターインスタンスの作成&lt;/h3&gt;&lt;h3 id=&quot;draper-single-obj&quot;&gt;3.1. 単独のオブジェクトのデコレーター&lt;/h3&gt;単独のオブジェクトの場合、次のように&lt;code&gt;decorate&lt;/code&gt;メソッドやデコレーターの&lt;code&gt;new&lt;/code&gt;メソッドを使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# decorateメソッドを使うと、モデルからデコレーターを推測して作成されます&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Articleの場合、ArticleDecoratorが使われる。&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;]).decorate


&lt;span class=&quot;synComment&quot;&gt;# デコレーターを指定したい場合は、デコーレータを作成します&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@widget&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ProductDecorator&lt;/span&gt;.new(&lt;span class=&quot;synType&quot;&gt;Widget&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;]))
&lt;span class=&quot;synComment&quot;&gt;# 以下も同じ&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@widget&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ProductDecorator&lt;/span&gt;.decorate(&lt;span class=&quot;synType&quot;&gt;Widget&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;]))
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、次のように&lt;code&gt;decorates_finders&lt;/code&gt;メソッドをデコレーターに定義すれば、ActiveRecordのように&lt;code&gt;find&lt;/code&gt;メソッドがつかえるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/decorators/articl_decorator.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  decorates_finders
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# コントローラーなど&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-individual-collection&quot;&gt;3.2. コレクションの個々のオブジェクトのデコレーター&lt;/h3&gt;コレクションの場合、次のように&lt;code&gt;decorate_collection&lt;/code&gt;メソッドを使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;@articles&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt;.decorate_collection(&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.all)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-collection&quot;&gt;3.3. コレクション自身のデコレーター&lt;/h3&gt;コレクション自身をデコレートしたい場合は、&lt;code&gt;Draper::CollectionDecorator&lt;/code&gt;のサブクラスのデコレータークラスを定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/decorators/articles_decorator.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticlesDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;CollectionDecorator&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;page_number&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;42&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# コントローラーなど&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@articles&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ArticlesDecorator&lt;/span&gt;.new(&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.all)
&lt;span class=&quot;synComment&quot;&gt;# もしくは、&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@articles&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ArticlesDecorator&lt;/span&gt;.decorate(&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.all)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-related-object&quot;&gt;3.4. 関連するオブジェクトのデコレーター&lt;/h3&gt;&lt;code&gt;decorates_association&lt;/code&gt;を使うことで、関連するオブジェクトのデコレーターを使うように宣言できます。&lt;br /&gt;
次の場合、authorモデルに対応するAuthorDecoratorを使うことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/decorators/article_decorator.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  decorates_association &lt;span class=&quot;synConstant&quot;&gt;:author&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# app/decorators/author_decorator.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AuthorDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;hoge&lt;/span&gt;
    model.name + &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hogehoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# ビューでAuthorDecoratorのメソッドを呼び出す&lt;/span&gt;
article.author.hoge
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-create-class&quot;&gt;4. デコレータークラスの作成&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;draper-access-helper&quot;&gt;4.1. デコレーター内でヘルパーメソッドへのアクセス&lt;/h3&gt;デコレーターからヘルパーメソッドを使うには、&lt;code&gt;h&lt;/code&gt;メソッドを使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;emphatic&lt;/span&gt;
    h.content_tag(&lt;span class=&quot;synConstant&quot;&gt;:strong&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Awesome&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;strong&amp;gt;Awesome&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-access-model&quot;&gt;4.2. デコレーター内でモデルオブジェクトへアクセス&lt;/h3&gt;デコレーター内でデコレーターが保持しているモデルオブジェクトにアクセスするにはモデルには、&lt;code&gt;object&lt;/code&gt;（もしくは、エイリアスの&lt;code&gt;model&lt;/code&gt;）を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;published_at&lt;/span&gt;
    object.published_at.strftime(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;%A, %B %e&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-render-html&quot;&gt;4.3. デコレーターでHTMLをレンダリングする&lt;/h3&gt;条件分岐をビューからデコレーターに移す場合、HTMLの断片が入ってしまうことがあります。&lt;br /&gt;
デコレーター内に直でHTMLコードを記載するとHTMLコードの断片が散らばり可読性や保守性が下がるので、次のようにするといいかもしれません。&lt;/p&gt;&lt;p&gt;HTMLのレンダリングが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1行程度なら&lt;code&gt;content_tag&lt;/code&gt;ヘルパーメソッドを使う&lt;/li&gt;
&lt;li&gt;複数行の場合は&lt;code&gt;render&lt;/code&gt;メソッドを使って部分テンプレートを表示する&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  delegate_all

  &lt;span class=&quot;synComment&quot;&gt;# 1行程度なので、content_tagメソッドを使う&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;emphatic&lt;/span&gt;
    h.content_tag(&lt;span class=&quot;synConstant&quot;&gt;:strong&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Awesome&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;strong&amp;gt;Awesome&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 複数行のため、部分テンプレートを呼び出す&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;sub_view&lt;/span&gt;
    h.render &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sub_view&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;: model.title
    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; articles/sub_view.html.erb　を表示する&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;draper-delegate&quot;&gt;4.4. デコレーターのデリゲート（委託）&lt;/h3&gt;デコレーターオブジェクトへのメソッド呼び出しを、モデルにデリゲート（委託）することができます。&lt;br /&gt;
&lt;code&gt;delegate_all&lt;/code&gt;で全てのメソッドを委託、&lt;code&gt;delegate&lt;/code&gt;で指定したメソッドを委託するように宣言できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# デコレーター&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Draper&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 全てのメソッド呼び出しにおいて、デコレーターで定義していないメソッドは、モデルオブジェクトへ委譲される&lt;/span&gt;
  delegate_all

  &lt;span class=&quot;synComment&quot;&gt;# 特定のメソッドのみ委譲する（toオプションを指定しないとデフォルトでobjectに委譲する）&lt;/span&gt;
  delegate &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:body&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 特定のメソッドを指定したオブジェクトに委譲する&lt;/span&gt;
  delegate &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;to&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:author&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;prefix&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# 使い方（ビューなど）&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;ArticleDecorator&lt;/span&gt;.decorate(&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;]))
&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.title  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; articleのtitle&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.body   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; articleのbody&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.author_name   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; articleの author.name&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/drapergem/draper&quot;&gt;https://github.com/drapergem/draper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://morizyun.github.io/blog/draper-ruby-gem-code-clear/&quot;&gt;http://morizyun.github.io/blog/draper-ruby-gem-code-clear/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/286-draper&quot;&gt;http://railscasts.com/episodes/286-draper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 15 Apr 2015 02:16:31 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450091528638</guid>
          
            <category>設計</category>
          
            <category>リファクタリング</category>
          
            <category>Rails View</category>
          
            <category>Rails中級</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでAcitiveJobとDelayedJobを使ってバックグランド処理を行う</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150304/1425396671</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150115/20150115212630.jpg&quot; alt=&quot;f:id:nipe880324:20150115212630j:plain:w480&quot; title=&quot;f:id:nipe880324:20150115212630j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/doug88888/&quot;&gt;Flickr: @Doug88888&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;メール送信、大量データのインポート/エクスポートなど&lt;b&gt;長い時間がかかる処理&lt;/b&gt;はバックグラウンドで処理するのが一般的です。&lt;br /&gt;
Railsでバックグラウンド処理を実現するためには、&lt;a href=&quot;https://github.com/mperham/sidekiq&quot; target=&quot;_blank&quot;&gt;Sidekiq&lt;/a&gt;, &lt;a href=&quot;https://github.com/resque/resque&quot; target=&quot;_blank&quot;&gt;Resque&lt;/a&gt;, &lt;a href=&quot;https://github.com/collectiveidea/delayed_job&quot; target=&quot;_blank&quot;&gt;Delayed Job&lt;/a&gt;といったgemが有名です。&lt;/p&gt;&lt;p&gt;また、Rails4.2からActive Jobが追加されました。これは、たくさんあるバックグラウンド処理を行うgemへの共通インターフェースのようなものが追加されました。&lt;br /&gt;
メリットとして、バックグラウンド処理のgemがどれでも、ソースコードは同じように記述できるようになります。ちなみに、ActiveJobだけではバックグラウンド処理はできないので、バックグラウンド処理のgemを入れる必要があります。&lt;/p&gt;&lt;p&gt;この記事では、DelayedJobでのバックグラウンド処理の実施方法から、ActiveJobとDelayedJobを組み合わせたバックグラウンド処理の実施方法までを説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2&lt;/li&gt;
&lt;li&gt;Active Job 4.2&lt;/li&gt;
&lt;li&gt;delayed_job 4.0.6&lt;/li&gt;
&lt;li&gt;delayed_job_active_record 4.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;#delayed_job&quot;&gt;1. Delayed Jobのインストールと使い方&lt;/a&gt;&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-install&quot;&gt;1.1. DelayedJobのインストール&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-enqueue&quot;&gt;1.2. ジョブを登録する（エンキュー）&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-worker&quot;&gt;1.3. ジョブを実行する（ワーカーの起動・停止・再起動）&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;#delayed_job-aj&quot;&gt;2. ActiveJobとの連携&lt;/a&gt;&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-aj-adapter&quot;&gt;2.1. バックグラウンドジョブとのアダプターを設定&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-aj-create-job&quot;&gt;2.2. ジョブを作成&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-aj-exception&quot;&gt;2.3. Active Jobの例外処理&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;#delayed_job-ref&quot;&gt;3. リファレンス&lt;/a&gt;&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-ref-create&quot;&gt;3.1. ジョブの作成&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-ref-exception&quot;&gt;3.2. ジョブ内の例外処理&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-ref-execution&quot;&gt;3.3. ジョブの実行&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-ref-worker&quot;&gt;3.4. ワーカーの起動/停止&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#delayed_job-ref-callbacks&quot;&gt;3.5. ジョブのコールバックの一覧&lt;/a&gt;&lt;/h5&gt;
    &lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job&quot;&gt;1. Delayed Jobのインストールと使い方&lt;/h3&gt;まずは、Active Jobと連携しない、Delayed Job単体での使い方を見ていきます。&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;delayed_job-install&quot;&gt;1.1. DelayedJobのインストール&lt;/h3&gt;まず、&lt;code&gt;Gemfile&lt;/code&gt;にORM(オブジェクト・リレーション・マッパー)に合わせた&lt;code&gt;delayed_job&lt;/code&gt;のgemを追記します。&lt;br /&gt;
ORMがActiveRecordの場合、&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;delayed_job_active_record&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ODM(オブジェクト・ドキュメント・マッパー)がMongoidの場合、&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;delayed_job_mongoid&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、&lt;code&gt;delayed_job&lt;/code&gt;をインストールします。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ActiveRecordの場合、ジョブを管理するテーブルが必要となるので、次のコマンドで作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g delayed_job:active_record
bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;今回は、ActiveRecordでの説明を行います。それ以外のORMを利用している場合は、GitHubのページを確認してください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-enqueue&quot;&gt;1.2. ジョブを登録する（エンキュー）&lt;/h3&gt;&lt;code&gt;delay&lt;/code&gt;メソッドを呼ぶことにより、バックグラウンドで処理を実行することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# フォアグラウンドで実行される&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@letter&lt;/span&gt;.deliver

&lt;span class=&quot;synComment&quot;&gt;# バックグラウンドで実行される&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@letter&lt;/span&gt;.delay.deliver
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
たとえば、次のような時間のかかる&lt;code&gt;deliver&lt;/code&gt;メソッドがあったとします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/letters_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;LettersController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# POST/letters/1/deliver&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;deliver&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@letter&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Letter&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
    &lt;span class=&quot;synIdentifier&quot;&gt;@letter&lt;/span&gt;.deliver
    redirect_to letters_url, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;手紙を送りました。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# app/models/letter.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Letter&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;deliver&lt;/span&gt;
    sleep &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 処理に時間がかかることを擬似的に実施&lt;/span&gt;
    update(&lt;span class=&quot;synConstant&quot;&gt;delivered_at&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.zone.now)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次のような画面で&lt;code&gt;Deliver&lt;/code&gt;ボタンを押します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150115/20150115211836.jpg&quot; alt=&quot;f:id:nipe880324:20150115211836j:plain:w480&quot; title=&quot;f:id:nipe880324:20150115211836j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;code&gt;deliver&lt;/code&gt;メソッドは時間のかかる処理(sleep 10)なので、&lt;b&gt;10秒後にリダイレクト&lt;/b&gt;されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150115/20150115211848.jpg&quot; alt=&quot;f:id:nipe880324:20150115211848j:plain:w480&quot; title=&quot;f:id:nipe880324:20150115211848j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;しかし、次のように&lt;code&gt;delay&lt;/code&gt;をメソッドをチェインさせてみましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/letters_controller.rb&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@letter&lt;/span&gt;.delay.deliver
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、ジョブを処理するワーカーを起動させます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake &lt;span class=&quot;synStatement&quot;&gt;jobs&lt;/span&gt;:work
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、また&lt;code&gt;Deliver&lt;/code&gt;ボタンを押すと、すぐにリダイレクトされます。&lt;br /&gt;
バックグラウンドで処理されるため、&lt;code&gt;deliverd_at&lt;/code&gt;がまだ設定されていません。&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150115/20150115212009.jpg&quot; alt=&quot;f:id:nipe880324:20150115212009j:plain:w480&quot; title=&quot;f:id:nipe880324:20150115212009j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;バックグラウンドで処理が走っているので、10秒後にブラウザをリロードすればちゃんと設定されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150115/20150115212030.jpg&quot; alt=&quot;f:id:nipe880324:20150115212030j:plain:w480&quot; title=&quot;f:id:nipe880324:20150115212030j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-worker&quot;&gt;1.3. ジョブを実行する（ワーカーの起動・停止・再起動）&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;開発時&lt;/h4&gt;
    &lt;p&gt;rakeタスクでフォアグラウンドでワーカーを走らせ、ジョブを処理します。&lt;br /&gt;
&lt;code&gt;Ctrl+C&lt;/code&gt;でワーカーを終了できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake &lt;span class=&quot;synStatement&quot;&gt;jobs&lt;/span&gt;:work
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;本番時&lt;/h4&gt;
    &lt;p&gt;デーモンでワーカーを走らせ、ジョブを処理します。&lt;br /&gt;
デーモンで動かすので、&lt;code&gt;daemons&lt;/code&gt;というgemを&lt;code&gt;Gemfile&lt;/code&gt;に追加し、&lt;code&gt;bundle install&lt;/code&gt;を実施しておく必要があります。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 別々のプロセス内で2つのワーカーを走らせる&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;RAILS_ENV&lt;/span&gt;=production bin/delayed_job &lt;span class=&quot;synSpecial&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;start&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ワーカーを停止させる&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;RAILS_ENV&lt;/span&gt;=production bin/delayed_job &lt;span class=&quot;synStatement&quot;&gt;stop&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ワーカーを再起動させる(ワーカー数は2つ)&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;RAILS_ENV&lt;/span&gt;=production bin/delayed_job &lt;span class=&quot;synSpecial&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;restart&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-aj&quot;&gt;2. ActiveJobとの連携&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;ActiveJobの目的は、Railsにジョブのインフラを追加することで、&lt;a href=&quot;https://github.com/mperham/sidekiq&quot; target=&quot;_blank&quot;&gt;Sidekiq&lt;/a&gt;, &lt;a href=&quot;https://github.com/resque/resque&quot; target=&quot;_blank&quot;&gt;Resque&lt;/a&gt;, &lt;a href=&quot;https://github.com/collectiveidea/delayed_job&quot; target=&quot;_blank&quot;&gt;Delayed Job&lt;/a&gt;といった実際にバックグラウンドでジョブを実行するgemの差分をほぼ意識しないでジョブを扱えるようにすることです。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-aj-adapter&quot;&gt;2.1. バックグラウンドジョブとのアダプターを設定&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mperham/sidekiq&quot; target=&quot;_blank&quot;&gt;Sidekiq&lt;/a&gt;, &lt;a href=&quot;https://github.com/resque/resque&quot; target=&quot;_blank&quot;&gt;Resque&lt;/a&gt;, &lt;a href=&quot;https://github.com/collectiveidea/delayed_job&quot; target=&quot;_blank&quot;&gt;Delayed Job&lt;/a&gt;に応じて、&lt;code&gt;application.rb&lt;/code&gt;に設定を追加する必要が有ります。&lt;/p&gt;&lt;p&gt;実際に指定する値は、&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveJob/QueueAdapters.html&quot; target=&quot;_blank&quot;&gt;Active Job adapters&lt;/a&gt;を参照してください。&lt;/p&gt;&lt;p&gt;Delayed Jobの場合は、&lt;code&gt;:delayed_job&lt;/code&gt;を指定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/application.rb&lt;/span&gt;
module DelayedJobTestApp
  class Application &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt; Rails::Application
    ...

    &lt;span class=&quot;synComment&quot;&gt;# Gemfileにアダプターのgemを記載されており、gemがインストール済みであり、&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# アダプターのインストール方法を既に実施しているようにしてください。&lt;/span&gt;
    config.active_job.queue_adapter &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; :delayed_job
  end
end
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-aj-create-job&quot;&gt;2.2. ジョブを作成&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;次のコマンドでジョブを作成できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g job news_deliver
      invoke  test_unit
      create    &lt;span class=&quot;synStatement&quot;&gt;test&lt;/span&gt;/&lt;span class=&quot;synStatement&quot;&gt;jobs&lt;/span&gt;/news_deliver_job_test.rb
      create  app/&lt;span class=&quot;synStatement&quot;&gt;jobs&lt;/span&gt;/news_deliver_job.rb
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ジョブファイルの規約として、&lt;code&gt;app/jobs&lt;/code&gt;配下に配置し、&lt;code&gt;ActiveJob::Base&lt;/code&gt;を継承している必要があります。&lt;br /&gt;
Rakeタスクで作成された値は次のようになっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/jobs/news_deliver_job.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveJob&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  queue_as &lt;span class=&quot;synConstant&quot;&gt;:default&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;perform&lt;/span&gt;(*args)
    &lt;span class=&quot;synComment&quot;&gt;# Do something later&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;queue_as&lt;/code&gt;で、どのキューでジョブを走らせるかをを設定できます。デフォルト値は&lt;code&gt;:default&lt;/code&gt;。&lt;br /&gt;
そして、&lt;code&gt;perform&lt;/code&gt;メソッドにジョブに行わせたい処理を記載します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;では、コントローラーの&lt;code&gt;deliver&lt;/code&gt;メソッドの時間がかかる処理を&lt;code&gt;perform&lt;/code&gt;メソッド内に移動させます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/jobs/news_deliver_job.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveJob&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  queue_as &lt;span class=&quot;synConstant&quot;&gt;:default&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;perform&lt;/span&gt;(letter_id)
    &lt;span class=&quot;synType&quot;&gt;Letter&lt;/span&gt;.find(letter_id).deliver
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、コントローラーで、ジョブを呼び出します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/letters_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;LettersController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# POST/letters/1/deliver&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;deliver&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt;.perform_later(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
    redirect_to letters_url, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;手紙を送りました。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ジョブの呼び出し方には次のように時間を指定して呼び出すこともできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 明日の午後に実行される&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt;.set(&lt;span class=&quot;synConstant&quot;&gt;wait_until&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Date&lt;/span&gt;.tomorrow.noon).perform_later(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

&lt;span class=&quot;synComment&quot;&gt;# 1週間後に実行される&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt;.set(&lt;span class=&quot;synConstant&quot;&gt;wait&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.week).perform_later(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ワーカーを起動します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake &lt;span class=&quot;synStatement&quot;&gt;jobs&lt;/span&gt;:work
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
画面から「Deliver」ボタンを押してみると、先ほどと同じようにすぐに画面遷移します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150115/20150115212009.jpg&quot; alt=&quot;f:id:nipe880324:20150115212009j:plain:w480&quot; title=&quot;f:id:nipe880324:20150115212009j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;そして、数秒後に画面をリロードすると、Delivered atの値が設定されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150115/20150115212030.jpg&quot; alt=&quot;f:id:nipe880324:20150115212030j:plain:w480&quot; title=&quot;f:id:nipe880324:20150115212030j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-aj-exception&quot;&gt;2.3. Active Jobの例外処理&lt;/h3&gt;ジョブ内でエラーが発生した時のエラーハンドリングには、&lt;code&gt;rescue_from&lt;/code&gt;を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/letters_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveJob&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  queue_as &lt;span class=&quot;synConstant&quot;&gt;:default&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# performメソッド内でActiveRecord::RecordNotFoundが発生した場合、&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ログに出力する&lt;/span&gt;
  rescue_from(&lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RecordNotFound&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;exception&lt;/span&gt;|
    &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.logger.error &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Letterレコードは見つかりませんでした。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;perform&lt;/span&gt;(letter_id)
    &lt;span class=&quot;synComment&quot;&gt;# 例外処理のハンドリングのために無理やり例外を発生させる&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RecordNotFound&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Letter&lt;/span&gt;.find(letter_id).deliver
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
画面から「Deliver」ボタンを押すと、次のようにログにエラーメッセージが表示されます。もちろん、画面の値は更新されません。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# log/development.log&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;2015-01&lt;/span&gt;-15T20:&lt;span class=&quot;synConstant&quot;&gt;55&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;0900&lt;/span&gt;: &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;Worker(host:nac.local pid:&lt;span class=&quot;synConstant&quot;&gt;51669&lt;/span&gt;)&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; Job ActiveJob::QueueAdapters::DelayedJobAdapter::JobWrapper &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; RUNNING
&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;ActiveJob&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;NewsDeliverJob&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;ecf4386f-5d10-4bc2-bfb3-994a45633070&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; Performing NewsDeliverJob from DelayedJob&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; with arguments: &lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;ActiveJob&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;NewsDeliverJob&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;ecf4386f-5d10-4bc2-bfb3-994a45633070&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; Performed NewsDeliverJob from DelayedJob&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;synError&quot;&gt;in&lt;/span&gt; 0.53ms
Letterレコードは見つかりませんでした。
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-ref&quot;&gt;3. リファレンス&lt;/h3&gt;&lt;h3 id=&quot;delayed_job-ref-create&quot;&gt;3.1. ジョブファイルの作成&lt;/h3&gt;次のコマンドでジョブを作成するか、&lt;code&gt;app/jobs&lt;/code&gt;配下に&lt;code&gt;ActiveJob::Base&lt;/code&gt;を継承したジョブクラスを作成する方法でジョブファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g job news_deliver
      invoke  test_unit
      create    &lt;span class=&quot;synStatement&quot;&gt;test&lt;/span&gt;/&lt;span class=&quot;synStatement&quot;&gt;jobs&lt;/span&gt;/news_deliver_job_test.rb
      create  app/&lt;span class=&quot;synStatement&quot;&gt;jobs&lt;/span&gt;/news_deliver_job.rb
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;perform&lt;/code&gt;メソッドにジョブで実行したい処理を記述します。&lt;br /&gt;
&lt;code&gt;queue_as&lt;/code&gt;で、どのキューでジョブを走らせるかをを設定できます。デフォルト値は&lt;code&gt;:default&lt;/code&gt;。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/jobs/news_deliver_job.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveJob&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  queue_as &lt;span class=&quot;synConstant&quot;&gt;:default&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;perform&lt;/span&gt;(letter_id)
    &lt;span class=&quot;synType&quot;&gt;Letter&lt;/span&gt;.find(letter_id).deliver
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-ref-exception&quot;&gt;3.2. ジョブ内の例外処理&lt;/h3&gt;ジョブ内でエラーが発生した時のエラーハンドリングには、&lt;code&gt;rescue_from&lt;/code&gt;を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/letters_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveJob&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  queue_as &lt;span class=&quot;synConstant&quot;&gt;:default&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# performメソッド内でActiveRecord::RecordNotFoundが発生した場合、&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ログに出力する&lt;/span&gt;
  rescue_from(&lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RecordNotFound&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;exception&lt;/span&gt;|
    &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.logger.error &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Letterレコードは見つかりませんでした。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;perform&lt;/span&gt;(letter_id)
    &lt;span class=&quot;synComment&quot;&gt;# 例外処理のハンドリングのために無理やり例外を発生させる&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RecordNotFound&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Letter&lt;/span&gt;.find(letter_id).deliver
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-ref-execution&quot;&gt;3.3. ジョブの実行&lt;/h3&gt;ジョブの呼び出し方には次のように時間を指定して呼び出すこともできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# すぐにバックグラウンドで実行さえっる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt;.perform_later(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

&lt;span class=&quot;synComment&quot;&gt;# 明日の午後にバックグラウンドで実行される&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt;.set(&lt;span class=&quot;synConstant&quot;&gt;wait_until&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Date&lt;/span&gt;.tomorrow.noon).perform_later(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

&lt;span class=&quot;synComment&quot;&gt;# 1週間後にバックグラウンドで実行される&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;NewsDeliverJob&lt;/span&gt;.set(&lt;span class=&quot;synConstant&quot;&gt;wait&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.week).perform_later(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;delayed_job-ref-worker&quot;&gt;3.4. ワーカーの起動/停止&lt;/h3&gt;ジョブ関連のRakeタスクが使えます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;rake jobs&lt;span class=&quot;synConstant&quot;&gt;:check&lt;/span&gt;[max_age]  &lt;span class=&quot;synComment&quot;&gt;# Exit with error status if any jobs older than max_age seconds haven&#39;t been attempted yet&lt;/span&gt;
rake jobs&lt;span class=&quot;synConstant&quot;&gt;:clear&lt;/span&gt;           &lt;span class=&quot;synComment&quot;&gt;# Delayed Job のキューをクリアな状態にする&lt;/span&gt;
rake jobs&lt;span class=&quot;synConstant&quot;&gt;:work&lt;/span&gt;            &lt;span class=&quot;synComment&quot;&gt;# Delayed Job ワーカーを起動させる&lt;/span&gt;
rake jobs&lt;span class=&quot;synConstant&quot;&gt;:workoff&lt;/span&gt;         &lt;span class=&quot;synComment&quot;&gt;# Delayed Job ワーカーを起動させ、すべてのジョブが完了したら終了する&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;delayed_job-ref-callbacks&quot;&gt;3.5. ジョブのコールバックの一覧&lt;/h3&gt;Active Jobは、ジョブのライフサイクルで次のコールバックを定義しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;before_enqueue&lt;/li&gt;
&lt;li&gt;around_enqueue&lt;/li&gt;
&lt;li&gt;after_enqueue&lt;/li&gt;
&lt;li&gt;before_perform&lt;/li&gt;
&lt;li&gt;around_perform&lt;/li&gt;
&lt;li&gt;after_perform&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/collectiveidea/delayed_job&quot;&gt;collectiveidea/delayed_job &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/collectiveidea/delayed_job_active_record&quot;&gt;collectiveidea/delayed_job_active_record &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/active_job_basics.html&quot;&gt;Active Job Basics &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 04 Mar 2015 00:31:11 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450080332093</guid>
          
            <category>ActiveJob</category>
          
            <category>Rails中級</category>
          
            <category>リファレンス</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsでacts-as-taggable-onを使ってタグ管理を行う</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150225/1424858414</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224135234.jpg&quot; alt=&quot;f:id:nipe880324:20150224135234j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224135234j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;&lt;a href=&quot;https://www.flickr.com/photos/cambodia4kidsorg/&quot;&gt;Flickr: cambodia4kidsorg&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mbleigh/acts-as-taggable-on&quot; target=&quot;_blank&quot;&gt;acts-as-taggable-on&lt;/a&gt;はタグの追加、削除、関連するオブジェクトの取得、タグクラウドなどのタグを管理するためのgemです。&lt;/p&gt;&lt;p&gt;今回は、Railsで&lt;code&gt;acts-as-taggable-on&lt;/code&gt;でタグ管理を行う方法について説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby  2.2.0&lt;/li&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;acts-as-taggable-on 3.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#acts-as-taggable-on-install&quot;&gt;acts-as-taggable-onのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#acts-as-taggable-on-basic_usage&quot;&gt;acts-as-taggable-onの基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#acts-as-taggable-on-user_manage&quot;&gt;acts-as-taggable-onを使ってユーザー管理にタグ機能を実装してみる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#acts-as-taggable-on-bootstrap_tags_input&quot;&gt;Bootstrap Tags Inputを使ってユーザーのタグ入力を簡易にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#acts-as-taggable-on-related_users&quot;&gt;同じタグを保持しているユーザーを表示する&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;acts-as-taggable-on-install&quot;&gt;1. acts-as-taggable-onのインストール&lt;/h3&gt;Gemfileに追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;acts-as-taggable-on&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;~&amp;gt; 3.4&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
バンドルを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bunlde
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;acts-as-taggable-on&lt;/code&gt;で必要なテーブルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;bin/rake acts_as_taggable_on_engine&lt;span class=&quot;synConstant&quot;&gt;:install:migrations&lt;/span&gt;
bin/rake db&lt;span class=&quot;synConstant&quot;&gt;:migrate&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;acts-as-taggable-on-basic_usage&quot;&gt;2. acts-as-taggable-onの基本的な使い方&lt;/h3&gt;モデルファイルに&lt;code&gt;acts_as_taggable_on&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  acts_as_taggable_on &lt;span class=&quot;synConstant&quot;&gt;:labels&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# post.label_list が追加される&lt;/span&gt;
  acts_as_taggable            &lt;span class=&quot;synComment&quot;&gt;# acts_as_taggable_on :tags のエイリアス&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
上記のように設定することで、以下の２つのメソッドを利用することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;post.label_list
post.tag_list
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次のようにして、タグの追加、取得、設定、削除ができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# タグの追加&lt;/span&gt;
post.tag_list.add(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;programming&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)  &lt;span class=&quot;synComment&quot;&gt;# &amp;quot;Programming&amp;quot;タグを追加する&lt;/span&gt;
post.tag_list.add(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hardware&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# 複数のタグを追加する&lt;/span&gt;
post.save

post.label_list &lt;span class=&quot;synComment&quot;&gt;# tag_listだけでなく、別のタグリストのlabel_listにもアクセス可能です&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# タグの取得&lt;/span&gt;
post.tag_list &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;quot;programming&amp;quot;, &amp;quot;tips&amp;quot;, &amp;quot;hardware&amp;quot;]&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# タグの設定（上書きされる）&lt;/span&gt;
post.tag_list = [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;programming&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;# &amp;quot;a,b&amp;quot;といったカンマ区切りの文字列でも入力可能&lt;/span&gt;
post.tag_list &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;quot;programming&amp;quot;, &amp;quot;tips&amp;quot;]&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# タグの削除&lt;/span&gt;
post.tag_list.remove(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;programming&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# &amp;quot;programming&amp;quot;タグを削除する&lt;/span&gt;
post.tag_list.clear                 &lt;span class=&quot;synComment&quot;&gt;# すべてのタグを削除する&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
「最も使われて&lt;b&gt;いる&lt;/b&gt;タグ」と「最も使われて&lt;b&gt;いない&lt;/b&gt;タグ」を取得できます。&lt;br /&gt;
デフォルトで20件取得します。引数で件数を指定することで取得するを変更できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 最も使われているタグを配列で取得&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;ActsAsTaggableOn&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;.most_used
&lt;span class=&quot;synType&quot;&gt;ActsAsTaggableOn&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;.most_used(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 最も使われていないタグを配列で取得&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;ActsAsTaggableOn&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;.least_used
&lt;span class=&quot;synType&quot;&gt;ActsAsTaggableOn&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;.least_used(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;tagged_with&lt;/code&gt;メソッドで、特定のタグでPostを検索するができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# programmingのタグがつけられているPostを取得する&lt;/span&gt;
posts = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.tagged_with(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;programming&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# programmingとjavascriptタグがつけれれているPostを取得する&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# :match_all (AND条件), :any (OR条件), :exclued (NOT条件)が使える&lt;/span&gt;
posts = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.tagged_with([&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;programming&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;javascript&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;], &lt;span class=&quot;synConstant&quot;&gt;match_all&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;find_related_skills&lt;/code&gt;メソッドで、同じタグを持ったPostを検索することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;.find_related_skill &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;lt;Post ...&amp;gt;, &amp;lt;Post ...&amp;gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;acts-as-taggable-on-user_manage&quot;&gt;3. acts-as-taggable-onを使ってユーザー管理にタグ機能を実装してみる&lt;/h3&gt;ここからは、&lt;code&gt;acts-as-taggable-on&lt;/code&gt;を使って、次のようにRailsでユーザー管理にタグ機能を追加するようにしてみます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224140517.jpg&quot; alt=&quot;f:id:nipe880324:20150224140517j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224140517j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;まず、ユーザーをScaffoldで作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g scaffold User name
bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、Userモデルに&lt;code&gt;skills&lt;/code&gt;と&lt;code&gt;interests&lt;/code&gt;といった２つのタグリストを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  acts_as_ordered_taggable_on &lt;span class=&quot;synConstant&quot;&gt;:skills&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:interests&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に画面からそれぞれのタグリストをテキストフィールドでカンマ区切りで入力できるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/users/_form.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for(@user)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; do |f| %&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;名前&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :skill_list, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;スキル・特技（カンマ区切り）&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; text_field_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;user[skill_list]&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, @user.skill_list.join(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :interest_list, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;興味・関心（カンマ区切り）&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; text_field_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;user[interest_list]&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, @user.interest_list.join(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.submit&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
UsersコントローラーのStrongParametersでこれらのパラメーターを受け取れるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/users_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;user_params&lt;/span&gt;
  params.require(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:skill_list&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:interest_list&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、入力したタグを画面に表示できるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/users/index.html.erb --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;thead&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;名前&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;スキル・特技&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;興味・関心&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;colspan&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;thead&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @users.each do |user| %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; user.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;users/tag_list&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, tag_list: user.skill_list %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;users/tag_list&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, tag_list: user.interest_list %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Show&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, user %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Edit&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_user_path(user) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Destroy&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, user, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :delete, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: { confirm: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Are you sure?&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; } %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...


&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/users_tag_list.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% tag_list.each do |tag| %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;label label-primary&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、タグが入力/表示できることを確認します。&lt;br /&gt;
まず、入力画面でカンマ区切りで入力します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224140530.jpg&quot; alt=&quot;f:id:nipe880324:20150224140530j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224140530j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;そして保存して、一覧画面を表示すると入力したタグが表示されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224140540.jpg&quot; alt=&quot;f:id:nipe880324:20150224140540j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224140540j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;acts-as-taggable-on-bootstrap_tags_input&quot;&gt;4. Bootstrap Tags Inputを使ってユーザーのタグ入力を簡易にする&lt;/h3&gt;&lt;a href=&quot;http://timschlechter.github.io/bootstrap-tagsinput/examples/&quot; target=&quot;_blank&quot;&gt;Bootstrap Tags Input&lt;/a&gt;は、タグ管理のためのjQueryプラグインです。&lt;br /&gt;
これを導入することで、タグの入力を次のように簡易にできるようにします。&lt;br /&gt;
tood image 3&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://timschlechter.github.io/bootstrap-tagsinput/examples/&quot;&gt;http://timschlechter.github.io/bootstrap-tagsinput/examples/&lt;/a&gt; の「Download」からソースファイルを取得します。&lt;/p&gt;&lt;p&gt;そして、jsファイルとcssファイルをRailsにコピーします。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;cp ~/Downloads/bootstrap-tagsinput/bootstrap-tagsinput.min.js vendor/assets/javascripts/.
cp ~/Downloads/bootstrap-tagsinput/bootstrap-tagsinput.min.js.map vendor/assets/javascripts/.
cp ~/Downloads/bootstrap-tagsinput/bootstrap-tagsinput.css vendor/assets/stylesheets/.
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;application.js&lt;/code&gt;と&lt;code&gt;application.css&lt;/code&gt;に追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;// application.js
//= require bootstrap-tagsinput.min


// application.css
 *= require bootstrap-tagsinput&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;Tags Input&lt;/code&gt;を使うのは簡単で、input要素に&lt;code&gt;data-role=&quot;tagsinput&quot;&lt;/code&gt;を追加するだけです。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/users/_form.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for(@user)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; do |f| %&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :skill_list, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;スキル・特技&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; text_field_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;user[skill_list]&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, @user.skill_list.join(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;), &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;data-role&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt; &amp;quot;tagsinput&amp;quot; %&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :interest_list, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;興味・関心&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; text_field_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;user[interest_list]&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, @user.interest_list.join(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;), &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;data-role&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt; &amp;quot;tagsinput&amp;quot; %&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、入力を確認してみます。タグの入力しやすくなり、同じタグは入力できなくなっています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224140554.jpg&quot; alt=&quot;f:id:nipe880324:20150224140554j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224140554j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;カンマ区切りの文字列でサーバーに送られるので、問題なく登録ができます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224140605.jpg&quot; alt=&quot;f:id:nipe880324:20150224140605j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224140605j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;acts-as-taggable-on-related_users&quot;&gt;5. 同じタグを保持しているユーザーを表示する&lt;/h3&gt;次のように同じ「スキル・特技(skills_list)」や「興味・関心(interests_list)」を保持しているユーザーを表示できるようにしてみます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224140517.jpg&quot; alt=&quot;f:id:nipe880324:20150224140517j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224140517j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;まず、ユーザ詳細画面を修正します。&lt;code&gt;find_related_xxxx&lt;/code&gt;メソッドで関連しているユーザーを取得できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/users/show.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;notice&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; notice&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Name:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @user.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;スキル・特技:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;users/tag_list&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, tag_list: @user.skill_list %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;users/related_users&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, users: @user.find_related_skills %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;興味・関心:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;users/tag_list&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, tag_list: @user.interest_list %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;users/related_users&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, users: @user.find_related_interests %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Edit&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_user_path(@user) %&amp;gt;&lt;/span&gt; |
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Back&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, users_path %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
部分テンプレートを読んでいるので、作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/users/_related_users.html.erb --&amp;gt;&lt;/span&gt;
関連しているユーザー:
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; users.map&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; { |user| user.&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; }.join(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
画面を確認すると次のように表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224140517.jpg&quot; alt=&quot;f:id:nipe880324:20150224140517j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224140517j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;&lt;p&gt;他にもタグクラウドやタグでの検索などのトピックもあるので、詳細は&lt;a href=&quot;https://github.com/mbleigh/acts-as-taggable-on&quot;&gt;Acts As Taggable On - GitHub公式&lt;/a&gt;を参照してください。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mbleigh/acts-as-taggable-on&quot;&gt;mbleigh/acts-as-taggable-on &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://timschlechter.github.io/bootstrap-tagsinput/examples/&quot;&gt;Bootstrap Tags Input&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 25 Feb 2015 19:00:14 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450085036830</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
            <category>Rails gem</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでSonspotを使って全文検索を行う</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150223/1424695504</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221125622.jpg&quot; alt=&quot;f:id:nipe880324:20150221125622j:plain:w480&quot; title=&quot;f:id:nipe880324:20150221125622j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/11304375@N07/&quot;&gt;Flickr: Image Editor&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sunspot/sunspot&quot; target=&quot;_blank&quot;&gt;Sunspot&lt;/a&gt;は、オープンソースの全文検索システムの&lt;a href=&quot;http://ja.wikipedia.org/wiki/Apache_Solr&quot; target=&quot;_blank&quot;&gt;Solr（ソーラー）&lt;/a&gt;を使って、幅広い記述でパワフルな全文検索ができるRubyライブラリです。&lt;br /&gt;
商用ではSolrを立てる必要があります。開発環境では開発用のSolrサーバーを使います。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;Ruby  2.1.0&lt;/li&gt;
&lt;li&gt;sunspot_rails 2.1.1&lt;/li&gt;
&lt;li&gt;sunspot_solr  2.1.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#sunspot-install&quot;&gt;Sunspotのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sunspot-basic-usage&quot;&gt;Sunspotの基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sunspot-reindex&quot;&gt;リインデックス(reindex)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;sunspot-install&quot;&gt;1. Sunspotのインストール&lt;/h3&gt;&lt;code&gt;Gemfile&lt;/code&gt;に追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sunspot_rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 開発環境用のSolrディストリビューション&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sunspot_solr&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
バンドルを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
SunspotのSolrへの接続情報を設定するファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g sunspot_rails:&lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
  create  config/sunspot.yml
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;sunspot-basic-usage&quot;&gt;2. Sunspotの基本的な使い方&lt;/h3&gt;全文検索のデモ用にProductモデルとCategoryモデルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g model Product name:string desc:text category_id:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
bin/rails g model Category name:string
bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
リレーションを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/model/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/model/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
検索確認のためにデータを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/seeds.rb&lt;/span&gt;
category1 = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;デスクトップパソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
category1.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;高いパソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;高いだけありHigh Specなパソコンです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
category1.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;安いパソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;とにかく安さだけを追求したパソコンです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

category2 = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ノートパソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
category2.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;小さいノートPC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;小さいノートPCです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
category2.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;大きいノートPC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;大きいノートPCです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
category2.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High SpecノートPC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;性能がよいノートPCです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

category3 = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;スマホ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
category3.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High Specスマホ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High Specなスマホです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
category3.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;普通のスマホ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;スマホです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
データを入れます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake db:seed
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、ここからSunspotを使うように設定をしていきます。&lt;/p&gt;&lt;p&gt;まず、全文検索を行いたいクラスに&lt;code&gt;searchable&lt;/code&gt;ブロックを追加します。&lt;br /&gt;
今回はProductクラスを全文検索できるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belogns_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;

  searchable &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    text &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:desc&lt;/span&gt;

    integer &lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;
    time &lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;text&lt;/code&gt;フィールドは全文検索されます。&lt;code&gt;integer&lt;/code&gt;や&lt;code&gt;string&lt;/code&gt;などの他のフィールドはクエリをスコープするために使われます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;そして、開発環境用のSolrディストリビューション（&lt;code&gt;sunspot_solr&lt;/code&gt;）を起動させます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;// バックグラウンド
bin/rake sunspot:solr:&lt;span class=&quot;synStatement&quot;&gt;start&lt;/span&gt;  // Solrを起動させる
bin/rake sunspot:solr:&lt;span class=&quot;synStatement&quot;&gt;stop&lt;/span&gt;   // Solrを停止させる

// フォアグラウンド
bin/rake sunspot:solr:run    // Solrを起動させる
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、全文検索を行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ bin/rails c

&lt;span class=&quot;synComment&quot;&gt;# Productのtextフィールド(name, descカラム)に&amp;quot;High Spec&amp;quot;を含んでいるすべての商品を検索する&lt;/span&gt;
search = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.search { fulltext &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High Spec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
products = search.results
products.count &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 3&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# category_idが1か2で、&#39;pizza&#39;を含んでいて、1週間以内に作成された、2ページ目の商品を検索する&lt;/span&gt;
search = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.search &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  fulltext &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High Spec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  with(&lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
  with(&lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;).greater_than(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.week.ago)
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
products = search.results
products.count &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 1&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# カテゴリ毎に存在する商品数を取得する(facet)&lt;/span&gt;
search = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.search &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  fulltext &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High spec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  facet &lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

search.facet(&lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;).rows.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;facet&lt;/span&gt;|
  puts &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Category &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;facet.value&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; has &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;facet.count&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Category 1 has 1 products&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Category 2 has 1 products&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Category 3 has 1 products&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;・実施にはコントローラー内で上記のように記載すれば、実際に検索を行うことができます。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;・他にもページネーションや複数の値の検索などさまざな検索方法は、&lt;a href=&quot;https://github.com/sunspot/sunspot&quot; target=&quot;_blank&quot;&gt;Sunspot - GitHub&lt;/a&gt;を参照してください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;production環境でSunspotを実行する場合は、別途Solrサーバーを立て、&lt;code&gt;sunspot.yml&lt;/code&gt;を適切に設定する必要があります。&lt;/p&gt;&lt;p&gt;また、test環境で実行する場合は、下記のコマンドでSolrの起動と停止をしてください。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;// solrを起動
bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; sunspot-solr &lt;span class=&quot;synStatement&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;8981&lt;/span&gt;
// RSpec&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;テスト&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;を実行
bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; rake spec
// solrを停止
bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; sunspot-solr &lt;span class=&quot;synStatement&quot;&gt;stop&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;sunspot-reindex&quot;&gt;3. リインデックス(reindex)&lt;/h3&gt;Railsを使っている場合、オブジェクトは&lt;code&gt;save&lt;/code&gt;コールバックによりSolrに自動的にインデックスされます。&lt;/p&gt;&lt;p&gt;その他にも、手動でリインデックスを実行する方法があります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# クラス自体をインデックスする&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.reindex
&lt;span class=&quot;synType&quot;&gt;Sunspot&lt;/span&gt;.commit


&lt;span class=&quot;synComment&quot;&gt;# 複数のオブジェクトをインデックスする&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Sunspot&lt;/span&gt;.index [product1, product2]
&lt;span class=&quot;synType&quot;&gt;Sunspot&lt;/span&gt;.commit


&lt;span class=&quot;synComment&quot;&gt;# 自動的にコミットされる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Sunspot&lt;/span&gt;.index! [product1, product2]
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
もし、&lt;code&gt;searchable&lt;/code&gt;ブロック内のコードを修正した場合、すべてのオブジェクトをリインデックスしなければなりません。&lt;br /&gt;
そういった時に、次のコマンドでリインデックスができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake sunspot:solr:reindex
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sunspot/sunspot&quot;&gt;sunspot/sunspot &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/278-search-with-sunspot&quot;&gt;#278 Search with Sunspot - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Mon, 23 Feb 2015 21:45:04 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450084600899</guid>
          
            <category>Rails Model</category>
          
            <category>Rails中級</category>
          
            <category>検索</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsでfriendly_idを使って検索エンジンにわかりやすいURLを作成する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150221/1424489524</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221111817.jpg&quot; alt=&quot;f:id:nipe880324:20150221111817j:plain:w480&quot; title=&quot;f:id:nipe880324:20150221111817j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/marcos_hb/&quot;&gt;Flickr: marcosHB&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/norman/friendly_id&quot; target=&quot;_blank&quot;&gt;friendly_id&lt;/a&gt;は次のようにURLを人間や検索エンジンにわかりやすいようにするgemです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# firendly_idを使っていない場合&lt;/span&gt;
http&lt;span class=&quot;synConstant&quot;&gt;:/&lt;/span&gt;/example.com/states/&lt;span class=&quot;synConstant&quot;&gt;4323454&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# firendly_idを使った場合&lt;/span&gt;
http&lt;span class=&quot;synConstant&quot;&gt;:/&lt;/span&gt;/example.com/states/washington
&lt;/pre&gt;&lt;p&gt;また、URL文字列(washingtonの部分)の履歴や他言語対応などの機能もあります。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;Ruby  2.1.0&lt;/li&gt;
&lt;li&gt;friendly_id 5.1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#friendly_id-install&quot;&gt;friendly_idのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#friendly_id-basic_usage&quot;&gt;friendly_idの基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#friendly_id-add_slug&quot;&gt;slugを追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#friendly_id-add_history&quot;&gt;404エラーを避けるためにslugの履歴を取る&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;friendly_id-install&quot;&gt;1. friendly_idのインストール&lt;/h3&gt;Gemfileに追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;friendly_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;friendly_id-basic_usage&quot;&gt;2. friendly_idの基本的な使い方&lt;/h3&gt;FrendlyIdの設定ファイルと&lt;code&gt;friendly_id_slugs&lt;/code&gt;テーブルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g friendly_id
  create  db/migrate/20150220082838_create_friendly_id_slugs.rb
  create  config/initializers/friendly_id.rb

bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;&lt;code&gt;friendly_id_slugs&lt;/code&gt;テーブルは&lt;code&gt;slug&lt;/code&gt;カラム（URL上のIDの代わりに表示する文字列を保持する）のバージョニングを行うテーブルです。slugの履歴を取らない場合は必要ありません。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;code&gt;friendly_id&lt;/code&gt;を使うためにデモとしてUserをScaffoldで作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g scaffold User name:string:uniq
bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
作成されたUserモデルにFriendlyIDを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;uniqueness&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;FriendlyId&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# extend FriendlyId でもよい(違いはない)&lt;/span&gt;
  friendly_id &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# idカラムの代わりにnameカラムをURLのIDとする&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
こうすることで、Userモデルの検索や作成時などに、&lt;code&gt;id&lt;/code&gt;パラメーターに「&lt;b&gt;name属性の値&lt;/b&gt;」が設定されてサーバー側に送られてきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;{ &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tom-tick&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そのため、Usersコントローラーのユーザーを取得箇所では、&lt;code&gt;friendly&lt;/code&gt;メソッドを使いUserを取得できるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/users_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_user&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# @user = User.find(params[:id])&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.friendly.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ちなみに&lt;code&gt;friendly&lt;/code&gt;メソッドは次のように動作します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.friendly.find(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tom-tick&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; friendly_idで設定したカラムで検索できる(ここではnameカラム)&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.friendly.find(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)          &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; IDで検索ができる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find(&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt;)                  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; friendlyメソッドを使わなくてもIDで検索できる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tom-tick&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)          &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; X friendlyメソッドを使わないとnameカラムで検索できない&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面で確認してみましょう。&lt;br /&gt;
IDの代わりに、Userモデルのnameカラムの値がURLとして使われています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221120546.jpg&quot; alt=&quot;f:id:nipe880324:20150221120546j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221120546j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;日本語も作ることができます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221120552.jpg&quot; alt=&quot;f:id:nipe880324:20150221120552j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221120552j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;friendly_id-add_slug&quot;&gt;3. slugを追加する&lt;/h3&gt;現在はUserモデルのnameカラムをURLとして表示していますが、ユーザー名にスペースが入ったりするとURLが見づらいものになるのでslugカラム（URL上のIDの代わりに表示する文字列）を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g migration add_slug_to_users slug:index:uniq
  invoke  active_record
  create    db/migrate/20150220083718_add_slug_to_users.rb

bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
slugカラムを使うようにするために、Userモデルに&lt;code&gt;use: :slugged&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
friendly_id &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;use&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:slugged&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
既に存在するUserレコードの&lt;code&gt;slug&lt;/code&gt;カラムは&lt;code&gt;nil&lt;/code&gt;なので値を設定します。&lt;br /&gt;
保存をすると&lt;code&gt;nil&lt;/code&gt;の場合、FriendlyIdが自動的に&lt;code&gt;slug&lt;/code&gt;を生成してくれます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;bin/rails c

&lt;span class=&quot;synComment&quot;&gt;# slugを確認する&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.all.pluck(&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:slug&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [[1, &amp;quot;Tom Tick&amp;quot;, nil], [2, &amp;quot;田中 太郎&amp;quot;, nil]]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# FriendlyIdが自動的にslugを作成し、保存する&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find_each(&amp;amp;&lt;span class=&quot;synConstant&quot;&gt;:save&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# slugが生成されたことを確認する&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.all.pluck(&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:slug&lt;/span&gt;)
=&amp;gt; [[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Tom Tick&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tom-tick&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;], [&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;田中 太郎&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;fcf1c7ee-6d17-4b43-a67a-b6d67adfdb48&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]]
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
上記で見てわかると思うのですが、日本語は適切に入らないので、FriendlyIdの&lt;code&gt;normalize_frindly_id&lt;/code&gt;メソッドをオーバーライドします。&lt;br /&gt;
日本語の場合、&lt;code&gt;parameterize&lt;/code&gt;メソッドは空文字を返すので次のようにしています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;normalize_friendly_id&lt;/span&gt;(value)
  value.to_s.parameterize.present? ? value.to_s.parameterize : value
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、うまく入らなかったUserレコードのslugを更新します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;bin/rails c

japanese_user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.last
japanese_user.slug = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
japanese_user.save
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面を確認してみましょう。&lt;br /&gt;
英語の場合は、大文字は小文字になり、スペースはハイフンになっています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221121203.jpg&quot; alt=&quot;f:id:nipe880324:20150221121203j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221121203j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;残念ながら日本語などの場合、そのままの値をslugに設定しているのでslugを導入する前とURLは変わりません。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221120552.jpg&quot; alt=&quot;f:id:nipe880324:20150221120552j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221120552j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;上記で、slugを変更するために、&lt;code&gt;nil&lt;/code&gt;を設定て、保存することで slugの変更を行いました。&lt;br /&gt;
slugを変更したいと思うたびに、&lt;code&gt;nil&lt;/code&gt;を設定するのはめんどうなので、slugを更新するかどうかを確認する&lt;code&gt;should_generate_new_friendly_id?&lt;/code&gt;メソッドをオーバーライドします。&lt;br /&gt;
&lt;code&gt;name&lt;/code&gt;カラムをfriendly_Idとして利用しているので、&lt;code&gt;name&lt;/code&gt;属性が変更された場合にtrueを返す(slugを変更する)ようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;should_generate_new_friendly_id?&lt;/span&gt;
  name_changed?
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、名前を更新してみて、URLが変更されることを確認します。&lt;br /&gt;
URLが「tom-tick」の名前を更新すると、&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221121548.jpg&quot; alt=&quot;f:id:nipe880324:20150221121548j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221121548j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;URLが「tom-tick2」に更新されてました。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221121601.jpg&quot; alt=&quot;f:id:nipe880324:20150221121601j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221121601j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;friendly_id-add_history&quot;&gt;4. 404エラーを避けるためにslugの履歴を取る&lt;/h3&gt;上記で、&lt;code&gt;name&lt;/code&gt;属性を変更することで、URLを変更することができました。&lt;br /&gt;
しかし、もし前のURL（例：/users/tom-tick）でアクセスした場合、&lt;b&gt;404エラー Not Found （内部的にはActiveRecord::RecordNotFound Exception）&lt;/b&gt;が発生してしまいます。&lt;br /&gt;
そのため、以前のslugも保持するようにして、前のURLでアクセスされたときもページを表示できるようにします。&lt;/p&gt;&lt;p&gt;FriendlyIdでは次のように&lt;code&gt;history&lt;/code&gt;を追加するだけです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
friendly_id &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;use&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:slugged&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:history&lt;/span&gt;]
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;こうすることで、本記事の最初で作成した&lt;code&gt;friendly_id_slugs&lt;/code&gt;テーブルに自動的にslugの履歴が保持されることで、前のURLからでも同じUserモデルにアクセスできるようになります。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;slugを変更しても、前のslugでもページにアクセスできるか確認します。&lt;br /&gt;
まず、名前を「Tom Tick2」から「Tom Tick3」に変更します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221122447.jpg&quot; alt=&quot;f:id:nipe880324:20150221122447j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221122447j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;すると、slugは「tom-tick3」に変更されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221122601.jpg&quot; alt=&quot;f:id:nipe880324:20150221122601j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221122601j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;slugが変更された後でも、「/users/tom-tick2」でもアクセスできます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221122613.jpg&quot; alt=&quot;f:id:nipe880324:20150221122613j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221122613j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;現在のslugにリダイレクトさせるようにするために、ステータスコード 301 Moved Permanently（恒久的に移動した)を返しリダイレクトするようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/users_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; request.path != user_path(&lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;)
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:status&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:moved_permanently&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;friendly_id_slugs&lt;/code&gt;テーブルはslugの変更に応じて増えていくので、適切にデータの削除が必要です。削除することでアクセスができなくなるので、タイミングは難しいところです。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://norman.github.io/friendly_id/file.Guide.html&quot;&gt;File: Guide &amp;mdash; Documentation by YARD 0.8.7.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/314-pretty-urls-with-friendlyid&quot;&gt;#314 Pretty URLs with FriendlyId - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sat, 21 Feb 2015 12:32:04 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450084594626</guid>
          
            <category>SEO</category>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsでawesome_nested_setとjsTreeでインタラクティブにツリー構造を操作する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150217/1424179269</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174000.jpg&quot; alt=&quot;f:id:nipe880324:20150215174000j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174000j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;インタラクティブに階層構造を操作できるjQuery pluginの&lt;a href=&quot;http://www.jstree.com/&quot; target=&quot;_blank&quot;&gt;jsTree&lt;/a&gt;を使い、上記のようにUIを向上させます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150216/1424092796&quot; target=&quot;_blank&quot;&gt;Railsでawesome_nested_setを使って階層構造を作成する&lt;/a&gt;」の実施を前提にしています。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.1.2&lt;/li&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;awesome_nested_set 3.0.2&lt;/li&gt;
&lt;li&gt;jsTree 3.0.9&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#awesome_nested_set_jstree_crient&quot;&gt;1. jsTreeでクライアント側の動きを実装する&lt;/a&gt;&lt;/h5&gt;
    &lt;p&gt;&lt;a href=&quot;#awesome_nested_set_jstree_install&quot;&gt;1.1. RailsにjsTreeをインストールする&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#awesome_nested_set_jstree_plugin&quot;&gt;1.2. jsTreeのプラグインでカテゴリーを移動できるようにする&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#awesome_nested_set_jstree_client_actions&quot;&gt;1.3. カテゴリーの追加、リネーム、削除を追加する&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#awesome_nested_set_jstree_corroborate&quot;&gt;2. jsTreeの各アクションとRailsのAPIを連携させる&lt;/a&gt;&lt;/h5&gt;
    &lt;p&gt;&lt;a href=&quot;#awesome_nested_set_jstree_index&quot;&gt;2.1. カテゴリの初期データをサーバーから取得する&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#awesome_nested_set_jstree_server_actions&quot;&gt;2.2. カテゴリの追加/リネーム/削除アクションを実装する&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#awesome_nested_set_jstree_move&quot;&gt;2.3. カテゴリの移動アクションを実装する&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_crient&quot;&gt;1. jsTreeでクライアント側の動きを実装する&lt;/h3&gt;1では、「カテゴリの操作（追加、リネーム、削除、移動）」をできるようにします。サーバーと連携（カテゴリデータの永続化）は2で実施します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_install&quot;&gt;1.1. RailsにjsTreeをインストールする&lt;/h3&gt;まずは、RailsにjsTreeをインストールします。&lt;/p&gt;&lt;p&gt;1. 「&lt;a href=&quot;https://github.com/vakata/jstree/zipball/3.0.9&quot;&gt;Download jsTree&lt;/a&gt;」からソースファイルをダウンロードします。&lt;/p&gt;&lt;p&gt;2. 解凍したファイルの&lt;code&gt;dist/jstree.min.js&lt;/code&gt;を&lt;code&gt;vendor/assets/javascripts/.&lt;/code&gt;にコピーします。&lt;/p&gt;&lt;p&gt;3. 解凍したファイルの&lt;code&gt;dist/themes/default/*&lt;/code&gt;を&lt;code&gt;vendor/assets/stylesheets/.&lt;/code&gt;にコピーします。&lt;br /&gt;
   そして、&lt;code&gt;style.css&lt;/code&gt;を削除し、&lt;code&gt;style.min.css&lt;/code&gt;を&lt;code&gt;jstree.min.css&lt;/code&gt;にリネームします。&lt;/p&gt;&lt;p&gt;4. &lt;code&gt;application.js&lt;/code&gt;に&lt;code&gt;jstree.min&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/application.js&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require jstree.min&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;5. &lt;code&gt;application.css&lt;/code&gt;にも&lt;code&gt;jstree.min&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;// app/assets/stylesheets/application&lt;span class=&quot;synIdentifier&quot;&gt;.css&lt;/span&gt;
 &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt;= require jstree&lt;span class=&quot;synIdentifier&quot;&gt;.min&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;6. 一覧画面を次のように修正します。テーブルや登録画面へのリンクなどを削除します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/categories/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Listing Categories&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;jstree_categories&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-jstree=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;{&amp;quot;opened&amp;quot;:true}&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Root node 1
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Child node 1&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Child node 2&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Root node 2
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;7. カテゴリーの&lt;code&gt;jstree()&lt;/code&gt;を呼びます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/categories.coffee&lt;/span&gt;
$ -&amp;gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree()
&lt;/pre&gt;&lt;p&gt;8. おまけでスタイルを追加しておきます。（必須ではありません）&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/layouts/application.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  ...&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  ...&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;// app/assets/stylesheets/categories&lt;span class=&quot;synIdentifier&quot;&gt;.scss&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;.categories&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  #jstree_categories {
    &lt;span class=&quot;synType&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;10px&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;#ccc&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;3px&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;#efefef&lt;/span&gt;;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synError&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;では、画面を表示してみましょう。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174032.jpg&quot; alt=&quot;f:id:nipe880324:20150215174032j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174032j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_plugin&quot;&gt;1.2. jsTreeのプラグインでカテゴリーを移動できるようにする&lt;/h3&gt;&lt;a href=&quot;http://www.jstree.com/&quot; target=&quot;_blank&quot;&gt;jsTree&lt;/a&gt;には、チェックボックス、右クリックを有効にする、検索ボックスを追加するなどさまざまな&lt;a href=&quot;http://www.jstree.com/plugins/&quot; target=&quot;_blank&quot;&gt;jsTreeプラグイン&lt;/a&gt;が用意されています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;今回はドラッグ&amp;ドロップをできるようにする&lt;code&gt;dnd&lt;/code&gt;プラグインを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/categories.coffee&lt;/span&gt;
$ -&amp;gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree({
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : {
      &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;check_callback&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
    },
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : [ &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;dnd&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; ]
  })

  &lt;span class=&quot;synComment&quot;&gt;# カテゴリを移動させたときに呼ばれるイベント&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;move_node.jstree&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, (e, n) -&amp;gt;
    &lt;span class=&quot;synComment&quot;&gt;# Todo サーバーのデータを更新するようにする&lt;/span&gt;
    console.log &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;n.old_parent&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n.old_position&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; -&amp;gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n.parent&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n.position&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、実際にドラッグ&amp;ドロップができるか確認します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174050.jpg&quot; alt=&quot;f:id:nipe880324:20150215174050j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174050j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_client_actions&quot;&gt;1.3. カテゴリーの追加、リネーム、削除を追加する&lt;/h3&gt;右クリックを追加するプラグインからもカテゴリの「追加」、「リネーム」、「削除」のUIを追加できるのですが、次のように今回はボタンで操作するようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174059.jpg&quot; alt=&quot;f:id:nipe880324:20150215174059j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174059j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;まずはボタンを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/categories/index.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 一番下に追加 --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Create&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;btn btn-success&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;create_category&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Rename&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;btn btn-warning&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;rename_category&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Delete&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;btn btn-danger&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;,  &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;delete_category&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、ボタンを押したときの処理を登録します。&lt;br /&gt;
各処理では、カテゴリが選択されていたらボタンに記載されているアクションを実行します。カテゴリが選択されていない場合は何もしないという挙動になっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/categories.coffee&lt;/span&gt;
$ -&amp;gt;

  ...

  &lt;span class=&quot;synComment&quot;&gt;# 選択されているノードの子として新しいノードを作成する&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#create_category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, -&amp;gt;
    jstree = &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree(&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# jstreeオブジェクトを取得&lt;/span&gt;
    selected = jstree.get_selected()   &lt;span class=&quot;synComment&quot;&gt;# 選択されているカテゴリを取得&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!selected.length) &lt;span class=&quot;synComment&quot;&gt;# 選択されていない場合何もしないで終了&lt;/span&gt;

    selected = selected[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]  &lt;span class=&quot;synComment&quot;&gt;# 複数選択もあるのでselectedは配列なので、0番目を取得&lt;/span&gt;
    selected = jstree.create_node(selected, {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}) &lt;span class=&quot;synComment&quot;&gt;# create_nodeでノードを作成&lt;/span&gt;
    jstree.edit(selected) &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (selected) &lt;span class=&quot;synComment&quot;&gt;# 作成したノードを編集状態にする&lt;/span&gt;


  &lt;span class=&quot;synComment&quot;&gt;# 選択されているノードの名前を変更する&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#rename_category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, -&amp;gt;
    jstree = &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree(&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
    selected = jstree.get_selected()
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!selected.length)

    selected = selected[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]
    jstree.edit(selected);


  &lt;span class=&quot;synComment&quot;&gt;# ノードの名前の変更が確定されたときに呼ばれるイベント&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rename_node.jstree&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, (e, n) -&amp;gt;
    &lt;span class=&quot;synComment&quot;&gt;# &lt;/span&gt;&lt;span class=&quot;synTodo&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt; サーバーのノードの名前を更新する&lt;/span&gt;
    console.log &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;n.node.id&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n.old&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; -&amp;gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n.text&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;


  &lt;span class=&quot;synComment&quot;&gt;# 選択されているノードを削除する&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#delete_category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, -&amp;gt;
    jstree = &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree(&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
    selected = jstree.get_selected()
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!selected.length)

    jstree.delete_node(selected); &lt;span class=&quot;synComment&quot;&gt;# delete_nodeでノードを削除する&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面を確認して、ローカル上でカテゴリの追加、リネーム、削除ができることを確認しましょう。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174119.jpg&quot; alt=&quot;f:id:nipe880324:20150215174119j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174119j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_corroborate&quot;&gt;2. jsTreeの各アクションとRailsのAPIを連携させる&lt;/h3&gt;1では、サーバーと連携しないでカテゴリの操作（追加、リネーム、削除、移動）をできるようにしました。&lt;br /&gt;
2では、サーバーと連携し、カテゴリデータを永続化できるようにしていきます。&lt;br /&gt;
scaffold機能で作成された機能でほぼRails側のAPIはできているので、jsでAjaxリクエストを送る箇所が主になります。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_index&quot;&gt;2.1. カテゴリの初期データをサーバーから取得する&lt;/h3&gt;まずは、実際にサーバーと通信する前に、前準備として、カテゴリの階層構造を初期データを、HTMLからJSONに変更します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;まずはHTMLを削除します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/categories/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Listing Categories&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;jstree_categories&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Create&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;btn btn-success&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;create_category&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Rename&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;btn btn-warning&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;rename_category&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Delete&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;btn btn-danger&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;,  &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;delete_category&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、HTMLの代わりにJSONとして&lt;code&gt;jstree&lt;/code&gt;メソッドに渡します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/categories.coffee&lt;/span&gt;
$ -&amp;gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree({
    &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : {
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;check_callback&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : [ &lt;span class=&quot;synComment&quot;&gt;# 画面に表示する仮の初期データ&lt;/span&gt;
        { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Root node 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;opened&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; } },
        { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Child node 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; },
        { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Child node 2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; },
        { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Root node 2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
      ]
    },
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : [ &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;dnd&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; ]
  })

  ...
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;フォーマットには何種類かあり詳細は&lt;a href=&quot;http://www.jstree.com/docs/json/&quot; target=&quot;_blank&quot;&gt;jsTree - jsonフォーマット&lt;/a&gt;を参照してください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;画面が変わりなく表示されることを確認します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174059.jpg&quot; alt=&quot;f:id:nipe880324:20150215174059j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174059j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;では、Ajaxでサーバー側からカテゴリの一覧を取得するようにします。&lt;br /&gt;
&lt;code&gt;core.data.url&lt;/code&gt;にカテゴリの一覧へのURL(&lt;code&gt;categories.json&lt;/code&gt;)を記載すると画面表示時に、GET /categories.jsonをアクセスし、サーバーからカテゴリ一覧情報を取得するようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/categories.coffee&lt;/span&gt;
$ -&amp;gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree({
    &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : {
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;check_callback&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : {
        &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : (node) -&amp;gt;
          &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# GET /categoris.json を実行する&lt;/span&gt;
      }
    },
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : [ &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;dnd&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; ]
  })

  ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、Railsからカテゴリ一覧を返すようにします。&lt;br /&gt;
返すデータ形式は、先ほどまで配列で&lt;code&gt;core.date&lt;/code&gt;に指定していた値です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/views/categories/index.json.jbuilder&lt;/span&gt;
json.array!(&lt;span class=&quot;synIdentifier&quot;&gt;@categories&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;category&lt;/span&gt;|
  json.id     category.id.to_s
  json.text   category.name
  json.parent category.parent_id ? category.parent_id.to_s : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  json.state &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    json.opened &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;※ルートノードの親ノードは、awesome_nested_setの場合は「&lt;code&gt;nil&lt;/code&gt;」、jsTreeでは「&lt;code&gt;#&lt;/code&gt;」になるので、&lt;code&gt;json.parent category.parent_id ? category.parent_id.to_s : &#39;#&#39;&lt;/code&gt;としてその変換を行っています。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;では、サーバー側に仮の初期データを入力します&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# もしデータが残っている場合は、次のコマンドでDBのデータをリセットしてください&lt;/span&gt;
$ bin/rake db&lt;span class=&quot;synConstant&quot;&gt;:migrate:reset&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# コンソールからデータを初期データを入力します&lt;/span&gt;
$ bin/rails c
root = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Root node 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
root.children.append(&lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Child node 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;))
root.children.append(&lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Child node 2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;))
&lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Root node 2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面を表示しましょう。正しくカテゴリ一覧のデータが表示されると思います。&lt;br /&gt;
Ajaxでサーバーから取得しているので、一瞬だけロード中のイメージが表示されるようになます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174059.jpg&quot; alt=&quot;f:id:nipe880324:20150215174059j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174059j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_server_actions&quot;&gt;2.2. カテゴリの追加/リネーム/削除アクションを実装する&lt;/h3&gt;カテゴリの一覧ができたので、カテゴリの追加/リネーム/削除も作っていきます。&lt;br /&gt;
追加/リネーム/削除はScaffold機能で既に実装されているので、javascriptしか修正しません。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/categories.coffee&lt;/span&gt;
$ -&amp;gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# 選択されているノードの子として新しいノードを作成する&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#create_category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, -&amp;gt;
    jstree = &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree(&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
    selected = jstree.get_selected()
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!selected.length)
    selected = selected[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]

    &lt;span class=&quot;synComment&quot;&gt;# POST /categories.json&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$.&lt;/span&gt;ajax({
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    : { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;New node&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;parent_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : selected } },
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;     : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/categories.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : (res) -&amp;gt;
        selected = jstree.create_node(selected, res)
        jstree.edit(selected) &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (selected)
    })


  &lt;span class=&quot;synComment&quot;&gt;# 選択されているノードの名前を変更する&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#rename_category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, -&amp;gt;
    jstree = &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree(&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
    selected = jstree.get_selected()
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!selected.length)

    selected = selected[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]
    jstree.edit(selected);


  &lt;span class=&quot;synComment&quot;&gt;# ノードの名前の変更が確定されたときに呼ばれるイベント&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rename_node.jstree&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, (e, obj) -&amp;gt;
    id           = obj.node.id
    renamed_name = obj.text

    &lt;span class=&quot;synComment&quot;&gt;# PATCH /categories/id.json&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$.&lt;/span&gt;ajax({
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;PATCH&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    : { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : renamed_name } },
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;     : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/categories/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;id&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    })


  &lt;span class=&quot;synComment&quot;&gt;# 選択されているノードを削除する&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#delete_category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, -&amp;gt;
    jstree = &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree(&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
    selected = jstree.get_selected()
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!selected.length)

    selected = selected[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]
    id = selected

    &lt;span class=&quot;synComment&quot;&gt;# DELETE /categories/id.json&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$.&lt;/span&gt;ajax({
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;DELETE&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;     : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/categories/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;id&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : -&amp;gt;
        jstree.delete_node(selected)
    })
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面を更新して、動作を確認します。カテゴリの作成、リネーム、削除ができ、画面を更新しても変更が保存されているはずです。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174151.jpg&quot; alt=&quot;f:id:nipe880324:20150215174151j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174151j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_move&quot;&gt;2.3. カテゴリの移動アクションを実装する&lt;/h3&gt;では、最後に、ドラッグ&amp;ドロップでカテゴリを移動できるようにします。&lt;/p&gt;&lt;p&gt;まずは、javascriptでカテゴリを移動させたら、サーバー側にリクエストを送ります。&lt;br /&gt;
移動先を正しく更新するために、「移動後の親ノードのID」と「移動後のポジション番号」をサーバーに送ります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/categories.coffee&lt;/span&gt;
$ -&amp;gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# カテゴリを移動させたときに呼ばれるイベント&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;move_node.jstree&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, (e, node) -&amp;gt;
    id            = node.node.id
    parent_id     = node.parent
    new_position  = node.position

    &lt;span class=&quot;synComment&quot;&gt;# PATCH /categories/id.json&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$.&lt;/span&gt;ajax({
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;PATCH&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    : { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;parent_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : parent_id, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;new_position&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : new_position } },
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;     : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/categories/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;id&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    })
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
CategoriesコントローラーのStrongParametersに&lt;code&gt;new_position&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/categories_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;category_params&lt;/span&gt;
  params.require(&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:parent_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:new_position&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
最後に、Categoryモデルに2つのメソッドを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  acts_as_nested_set

  &lt;span class=&quot;synComment&quot;&gt;# ルートノードに移動させた場合は、parent_id は &amp;quot;#&amp;quot;になるので、&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ルートに移動させる move_to_root メソッドを呼ぶ&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 親ノードがある場合は、parent_id を 更新する&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;parent_id=&lt;/span&gt;(parent_id)
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; parent_id == &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      move_to_root
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;super&lt;/span&gt;(parent_id)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# ルートノードに移動させた場合は、親ノード(parent)がnilのため、ルートの兄弟配列から移動先を特定する&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 親ノードがある場合は、move_to_child_with_indexメソッドで移動する&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;new_position=&lt;/span&gt;(new_position)
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; parent.blank?
      prev_node = root.siblings[new_position.to_i - &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]
      move_to_right_of prev_node
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      move_to_child_with_index(parent, new_position.to_i)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、カテゴリの移動ができることを確認します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174000.jpg&quot; alt=&quot;f:id:nipe880324:20150215174000j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174000j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jstree.com/&quot;&gt;jsTree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 17 Feb 2015 22:21:09 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450083787279</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsでawesome_nested_setを使って階層構造を作成する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150216/1424092796</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215110242.jpg&quot; alt=&quot;f:id:nipe880324:20150215110242j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215110242j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/amatsuscribbler/&quot;&gt;Flickr: amatsuscribbler&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/collectiveidea/awesome_nested_set&quot; target=&quot;_blank&quot;&gt;awesome_nested_set&lt;/a&gt;とは、モデルを階層構造に管理できるようにするgemです。&lt;br /&gt;
フォルダ階層、カテゴリ階層、コメントへのリプライでの階層などツリー構造を表したい箇所で使うと便利です。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;今回は、次のように、モデルを階層構造で表示、作成、更新できるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215110501.jpg&quot; alt=&quot;f:id:nipe880324:20150215110501j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215110501j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.1.2&lt;/li&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;awesome_nested_set 3.0.2&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;i&gt;バージョン3は「Rails 4」をサポート、バージョン2は「Rails 3」をサポート、2.0以前は「Rails 2」をサポートしています。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#awesome_nested_set_basic_install&quot;&gt;awesome_nested_setのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#awesome_nested_set_basic_usage&quot;&gt;awesome_nested_setの基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#awesome_nested_set_basic_tree&quot;&gt;awesome_nested_setでカテゴリを階層構造にする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_basic_install&quot;&gt;1. awesome_nested_setのインストール&lt;/h3&gt;&lt;code&gt;Gemfile&lt;/code&gt;に追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;awesome_nested_set&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_basic_usage&quot;&gt;2. awesome_nested_setの基本的な使い方&lt;/h3&gt;&lt;code&gt;awesome_nested_set&lt;/code&gt;を使うためには、モデルに&lt;code&gt;parent_id&lt;/code&gt;、&lt;code&gt;lft&lt;/code&gt;、&lt;code&gt;rgt&lt;/code&gt;という３つのフィールドが必要です。（これらのフィールド名は設定で変更可能です）&lt;br /&gt;
また、オプションで&lt;code&gt;depth&lt;/code&gt;、&lt;code&gt;children_count&lt;/code&gt;という２つのフィールドも追加することができます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;これらのフィールドを追加するマイグレーションファイル作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g migration add_awesome_nested_set_columns_to_categories parent_id:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; lft:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; rgt:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
DBにINSERT時に&lt;code&gt;rgt&lt;/code&gt;を探すので&lt;code&gt;add_index&lt;/code&gt;で&lt;code&gt;rgt&lt;/code&gt;カラムにインデックスをつけておきます。&lt;br /&gt;
他のカラムにもインデックスをつけておくことがGitHubのREADMEで推奨されているので、&lt;code&gt;parent_id&lt;/code&gt;と&lt;code&gt;rgt&lt;/code&gt;カラムにもインデックスをつけます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/YYYYMMDDhhmmss_add_awesome_nested_set_columns_to_categories.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AddAwesomeNestedSetColumnsToCategories&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 必須のフィールド&lt;/span&gt;
    add_column &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:parent_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;
    add_column &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:lft&lt;/span&gt;,       &lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;
    add_column &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:rgt&lt;/span&gt;,       &lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;

    add_index &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:parent_id&lt;/span&gt;
    add_index &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:lft&lt;/span&gt;
    add_index &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:rgt&lt;/span&gt;


    &lt;span class=&quot;synComment&quot;&gt;# オプションのフィールド&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# add_column :categories, :depth,          :integer&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# add_column :categories, :children_count, :integer&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# add_index :categories, :depth&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
マイグレーションを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、モデル内で&lt;code&gt;acts_as_nested_set&lt;/code&gt;という宣言を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  acts_as_nested_set
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで、さまざまなメソッドが使えます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# ルートノードを作成&lt;/span&gt;
root = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 子ノードを作成&lt;/span&gt;
child1 = root.children.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;child1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
child2 = root.children.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;child2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# ノードを作成し、子ノードに接続する&lt;/span&gt;
grandchild = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;grandchild1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
grandchild.move_to_child_of(child1)

&lt;span class=&quot;synComment&quot;&gt;# 子ノードを取得&lt;/span&gt;
root.children &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;lt;Category &amp;quot;child1&amp;quot;&amp;gt;, &amp;lt;Category &amp;quot;child2&amp;quot;&amp;gt;]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 葉ノードを取得&lt;/span&gt;
root.leaves &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;lt;Category &amp;quot;child2&amp;quot;&amp;gt;, &amp;lt;Category &amp;quot;grandchild1&amp;quot;]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 兄弟ノードを取得&lt;/span&gt;
child1.siblings &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;lt;Category &amp;quot;child2&amp;quot;&amp;gt;]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 階層を取得&lt;/span&gt;
child1.level &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 1&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# 作成されたツリー&lt;/span&gt;
root
&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;-- child1&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;-- grandchild
&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;-- child2&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、階層構造に表示するためやセレクトボックスのために、&lt;code&gt;nested_set_options&lt;/code&gt;というビューヘルパーが用意されています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# form builder 有
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :parent_id, nested_set_options(Category, @category) {|i| &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#{&#39;-&#39; * i.level} #{i.name}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; } %&amp;gt;&lt;/span&gt;

# form builder 無
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; select_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;parent_id&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, options_for_select(nested_set_options(Category) {|i| &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#{&#39;-&#39; * i.level} #{i.name}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; } ) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;acts_as_nested_set&lt;/code&gt;のオプションやコールバックやフックなどがあるので、&lt;a href=&quot;https://github.com/collectiveidea/awesome_nested_set&quot; target=&quot;_blank&quot;&gt;awesome_nested_set - GitHub&lt;/a&gt;を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_basic_tree&quot;&gt;3. awesome_nested_setでカテゴリを階層構造にする&lt;/h3&gt;この章では、次のようにモデルを階層構造で表示、作成、更新できるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215110501.jpg&quot; alt=&quot;f:id:nipe880324:20150215110501j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215110501j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;まずカテゴリを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;rails g scaffold Category name
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
マイグレーションファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g migration add_awesome_nested_set_columns_to_categories parent_id:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; lft:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; rgt:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
テーブルが多くなるとパフォーマンスが低くなるので、インデックスをつけておく必要があります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/YYYYMMDDhhmmss_add_awesome_nested_set_columns_to_categories.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AddAwesomeNestedSetColumnsToCategories&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    add_column &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:parent_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;
    add_column &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:lft&lt;/span&gt;,       &lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;
    add_column &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:rgt&lt;/span&gt;,       &lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;

    add_index &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:parent_id&lt;/span&gt;
    add_index &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:lft&lt;/span&gt;
    add_index &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:rgt&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
マイグレーションを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Categoryモデルに&lt;code&gt;acts_as_nested_set&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  acts_as_nested_set
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
テストデータを追加しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ bin/rails c

&lt;span class=&quot;synComment&quot;&gt;# ルートノードを作成&lt;/span&gt;
root = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 子ノードを作成&lt;/span&gt;
child1 = root.children.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;child1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
child2 = root.children.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;child2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# ノードを作成し、子ノードに接続する&lt;/span&gt;
grandchild = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;grandchild1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
grandchild.move_to_child_of(child1)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
まず、Categories一覧画面でツリー状に表示するようにします。&lt;br /&gt;
&lt;code&gt;awesome_nested_set&lt;/code&gt;のビューヘルパーの&lt;code&gt;nested_set_options&lt;/code&gt;を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/categories/index.html.erb --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% nested_set_options(@categories) { |i| &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#{&#39;–&#39; * i.level} #{i.name}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; }.each do |&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;| %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Show&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, category_path(&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Edit&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_category_path(&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Destroy&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, category_path(&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;), &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :delete, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: { confirm: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Are you sure?&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; } %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;nested_set_options&lt;/code&gt;は次のようにソートされたカテゴリの名前とidの2次元配列を返します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;nested_set_options(&lt;span class=&quot;synIdentifier&quot;&gt;@categories&lt;/span&gt;) { |&lt;span class=&quot;synIdentifier&quot;&gt;i&lt;/span&gt;| &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;–&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; * i.level&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;i.name&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [[&amp;quot; root&amp;quot;, 1], [&amp;quot;– child1&amp;quot;, 2], [&amp;quot;–– grandchild1&amp;quot;, 4], [&amp;quot;– child2&amp;quot;, 3]]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面を表示して確認してみます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215110501.jpg&quot; alt=&quot;f:id:nipe880324:20150215110501j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215110501j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;次に、親ノードを更新できるように、親ノードを選択するセレクトボックスをフォームに追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/categories/_form.html.erb --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :parent_id %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :parent_id, nested_set_options(Category) {|i| &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#{&#39;-&#39; * i.level} #{i.name}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; }, { &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: @category.parent_id, include_blank: true } %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
CategoriesコントローラーのStrongParametersに&lt;code&gt;parent_id&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/categories_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;category_params&lt;/span&gt;
  params.require(&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:parent_id&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで親ノードを更新ができるようになりましたので、画面で確認してみます。&lt;br /&gt;
次にように親のカテゴリーを選択できます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215110831.jpg&quot; alt=&quot;f:id:nipe880324:20150215110831j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215110831j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;そして、登録すると一覧画面ではツリー状に追加されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215110841.jpg&quot; alt=&quot;f:id:nipe880324:20150215110841j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215110841j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;もちろん、更新もできます。&lt;/p&gt;&lt;p&gt;以上です。&lt;/p&gt;&lt;p&gt;jsTreeというインタラクティブにツリーの追加や移動、削除といった操作ができるjQueryプラグインをawesome_nested_setに追加する方法も説明しています。&lt;br /&gt;
&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150217/1424179269&quot; target=&quot;_blank&quot;&gt;Railsでawesome_nested_setとjsTreeでインタラクティブにツリー構造を操作する&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/collectiveidea/awesome_nested_set&quot;&gt;collectiveidea/awesome_nested_set &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://threebit.net/tutorials/nestedset/tutorial1.html&quot;&gt;A nested Set Implementation in Java and PostreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Mon, 16 Feb 2015 22:19:56 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450083747694</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでPaperTrailを使って取り消し機能を作成する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150214/1423923524</link>
          <description>&lt;p&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150214/20150214231605.jpg&quot; width=&quot;480&quot;&gt;&lt;br /&gt;
&lt;i&gt; Photo by &lt;a href=&quot;https://www.flickr.com/photos/scottrsmith/&quot;&gt;Flickr: Scott Smith (SRisonS)&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/airblade/paper_trail&quot; target=&quot;_blank&quot;&gt;PaperTrail&lt;/a&gt;とは、モデルの変更(作成/更新/削除)をトラックするgemです。&lt;br /&gt;
モデルが変更されたら逐一データを保存するので「監査やバージョン管理」に役立ちます。&lt;/p&gt;&lt;p&gt;今回は、次のように、モデルの作成/更新/削除の取り消しをできるようにします。&lt;br /&gt;
&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150214/20150214231220.jpg&quot; width=&quot;480&quot;&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;Ruby  2.2.1&lt;/li&gt;
&lt;li&gt;paper_trail 4.0.0.beta2&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#paper_trail_revert_install&quot;&gt;PaperTrailのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#paper_trail_revert_basic&quot;&gt;PaperTrailの基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#paper_trail_revert_implement&quot;&gt;PapterTrailで取消機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#paper_trail_revert_notice&quot;&gt;PaperTrailの使用時の注意点&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;paper_trail_revert_install&quot;&gt;1. PaperTrailaのインストール&lt;/h3&gt;Gemfileに&lt;code&gt;paper_trail&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;paper_trail&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;~&amp;gt; 4.0.0.bata&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
PaperTrailがモデルの変更データを記録するテーブルの&lt;code&gt;versions&lt;/code&gt;テーブルを作成するマイグレーションファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; rails g paper_trail:&lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
参考までに、次のようなマイグレーションファイルが作成されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/yyyymmddhhMMss_create_versions.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateVersions&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:versions&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.string   &lt;span class=&quot;synConstant&quot;&gt;:item_type&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:null&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
      t.integer  &lt;span class=&quot;synConstant&quot;&gt;:item_id&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;:null&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
      t.string   &lt;span class=&quot;synConstant&quot;&gt;:event&lt;/span&gt;,     &lt;span class=&quot;synConstant&quot;&gt;:null&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
      t.string   &lt;span class=&quot;synConstant&quot;&gt;:whodunnit&lt;/span&gt;
      t.text     &lt;span class=&quot;synConstant&quot;&gt;:object&lt;/span&gt;
      t.datetime &lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    add_index &lt;span class=&quot;synConstant&quot;&gt;:versions&lt;/span&gt;, [&lt;span class=&quot;synConstant&quot;&gt;:item_type&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:item_id&lt;/span&gt;]
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、マイグレーションを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;paper_trail_revert_basic&quot;&gt;2. PaperTrailの基本的な使い方&lt;/h3&gt;データの変更をトラックしたいモデルに、次のように&lt;code&gt;has_paper_trail&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_paper_trail
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;すると、様々なメソッドが使えるようになります。&lt;/p&gt;&lt;p&gt;&lt;code&gt;versions&lt;/code&gt; - モデルの変更履歴を取得する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;product = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.find(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
product.versions &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;lt;PaperTrail::Vesion&amp;gt;, &amp;lt;PaperTrail::Vesion&amp;gt;, ...]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
何が変更されたか確認する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;product = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.find(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 直近の更新を取得する&lt;/span&gt;
v = product.versions.last

&lt;span class=&quot;synComment&quot;&gt;# イベントを取得する&lt;/span&gt;
v.event      &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &#39;update&#39; (か &#39;create&#39; か &#39;destroy&#39;)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 更新したユーザーを取得する&lt;/span&gt;
v.whodunnit  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &#39;153&#39; (コントローラー内で更新され、コントローラーがcurrent_userメソッドをもっていて、current_userがidを返す場合)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 更新した時刻を取得する&lt;/span&gt;
v.created_at &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Sat, 14 Feb 2015 22:32:41 JST +09:00&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 更新/削除前のproductを取得する（作成時はnilを返す）&lt;/span&gt;
product = v.reify

&lt;span class=&quot;synComment&quot;&gt;# 次のversionを取得&lt;/span&gt;
next_version = v.next

&lt;span class=&quot;synComment&quot;&gt;# 前のversionを取得&lt;/span&gt;
previous_version = v.previous
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;paper_trail_revert_implement&quot;&gt;3. PaperTrailで取消機能を実装する&lt;/h3&gt;作成、変更、削除などを誤って実行してしまったときに、取り消しをできるように、PaperTrailを使って「取消機能」を実装します。&lt;/p&gt;&lt;p&gt;scaffoldでProductの簡単なCRUDを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g scaffold Product name price:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; public:boolean
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
取消機能を追加したいモデルに&lt;code&gt;has_paper_trail&lt;/code&gt;を追加し、データのトラッキングをできるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_paper_trail
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
取消リンクをflashメッセージに表示させるようにするので、Productコントローラーの&lt;code&gt;redirect_to&lt;/code&gt;のflashメッセージに取消リンク(&lt;code&gt;revert_link&lt;/code&gt;メソッド)を追加します。&lt;br /&gt;
&lt;i&gt;作成を取消したときに詳細画面に戻るとモデルがないためエラーになるので、createとupdateのリダイレクト先はindexにしています。また、showアクションは削除しました。&lt;/i&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/products_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ProductsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  before_action &lt;span class=&quot;synConstant&quot;&gt;:set_product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;only&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:update&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;]

  &lt;span class=&quot;synComment&quot;&gt;# GET /products&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# GET /products.json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.all
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# GET /products/new&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# GET /products/1/edit&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;edit&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# POST /products&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new(product_params)

    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.save
      redirect_to products_url, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Productを作成しました: &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;revert_link&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# PATCH/PUT /products/1&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;update&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.update(product_params)
      redirect_to products_url, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Productを更新しました: &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;revert_link&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      render &lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# DELETE /products/1&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;destroy&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.destroy
    redirect_to products_url, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Productを削除しました: &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;revert_link&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_product&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;product_params&lt;/span&gt;
      params.require(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:price&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:public&lt;/span&gt;)
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、取消リンクを作成するメソッドを追加します。&lt;br /&gt;
複数の画面で使えるようにするために、Applicationコントローラーに追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/application_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActionController&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  &lt;span class=&quot;synStatement&quot;&gt;protected&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;revert_link&lt;/span&gt;
      view_context.link_to(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;取消&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, revert_version_path(&lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.versions.last), &lt;span class=&quot;synConstant&quot;&gt;:method&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;)
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、レイアウトファイルにflashメッセージを表示するように追記します。&lt;br /&gt;
また、デフォルトでリンクがエスケープされてしまうので&lt;code&gt;raw&lt;/code&gt;メソッドでリンクを表示できるようにします。&lt;br /&gt;
&lt;i&gt;※ユーザー入力値をflashメッセージに表示すると、XSS脆弱性になるので気をつけて下さい。心配な場合は、flashのnoticeとalert以外のキーを用意して、それのみrawで表示するなど通常のメッセージと分けた方が良いかもしれません。&lt;/i&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/layouts/application.html.erb --&amp;gt;&lt;/span&gt;
...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% flash.each do |&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, msg| %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; content_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :div, raw(msg), :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt; name, :class =&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;alert&amp;quot; %&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、取消を実施するVersionsコントローラーを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g controller versions
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Versionsコントローラーに&lt;code&gt;revert&lt;/code&gt;メソッド(取消)を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/versios_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;VersionsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;revert&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@version&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;PaperTrail&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Version&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@version&lt;/span&gt;.reify
      &lt;span class=&quot;synIdentifier&quot;&gt;@version&lt;/span&gt;.reify.save!
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@version&lt;/span&gt;.item.destroy!
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    redirect_to &lt;span class=&quot;synConstant&quot;&gt;:back&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;@version&lt;/span&gt;.event&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; を取り消しました&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;更新/削除時は&lt;code&gt;@version.reify&lt;/code&gt;は更新/削除前(１つ前)のモデルを返すので、１つ前のモデルに更新します。&lt;br /&gt;
作成時は&lt;code&gt;@version.reify&lt;/code&gt;は&lt;code&gt;nil&lt;/code&gt;を返すので、削除を行っています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;最後に、取消(&lt;code&gt;revert&lt;/code&gt;)アクションのルーティングを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
post &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;versions/:id/revert&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;versions#revert&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:as&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;revert_version&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、&lt;code&gt;bin/rake s&lt;/code&gt;でサーバーを起動して動作を確認してみます。&lt;br /&gt;
ある商品を削除してみます。&lt;br /&gt;
&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150214/20150214231318.jpg&quot; width=&quot;480&quot;&gt;&lt;/p&gt;&lt;p&gt;そして、上記の「取消」リンクから取り消しを行うと、削除した商品が削除されていないことになりました。&lt;br /&gt;
&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150214/20150214231303.jpg&quot; width=&quot;480&quot;&gt; &lt;/p&gt;&lt;br /&gt;
&lt;p&gt;もちろん、商品の削除の取り消しだけでなく、商品の作成、更新の取り消しを行うことができます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;paper_trail_revert_notice&quot;&gt;4. PaperTrailの使用時の注意点&lt;/h3&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;古いデータを削除する&lt;/h4&gt;
    &lt;p&gt;使い続けるほどversionsテーブルのレコード数が多くなってしまうので、レコードをクーロンなどで定期的に削除するようにする。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 一週間以上経過したversionレコードを削除する&lt;/span&gt;
bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; rails runner &lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;PaperTrail::Version.delete_all [&#39;created_at &amp;lt; ?&#39;, 1.week.ago]&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
他にも監査するイベントやカラムを指定するなどいろいろなことができます。&lt;br /&gt;
困った場合は、&lt;a href=&quot;https://github.com/airblade/paper_trail&quot; target=&quot;_blank&quot;&gt;PaperTrail - GitHub&lt;/a&gt;を参照してください。&lt;/p&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/airblade/paper_trail&quot;&gt;airblade/paper_trail &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/255-undo-with-paper-trail?view=asciicast&quot;&gt;#255 Undo with Paper Trail - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sat, 14 Feb 2015 23:18:44 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450083704532</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>rails new時にアプリケーションテンプレートを使って簡単に初期設定をする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150208/1423391199</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150208/20150208191123.jpg&quot; alt=&quot;f:id:nipe880324:20150208191123j:plain:w480&quot; title=&quot;f:id:nipe880324:20150208191123j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/ny156uk/&quot;&gt;Flickr: ny156uk&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;前回の「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150204/1423055537&quot; target=&quot;_blank&quot;&gt;rails newしたときの開発を効率化するためにまず行いたい6つの設定まとめ&lt;/a&gt;」の記事を&lt;br /&gt;
Railsの機能の「アプリケーションテンプレート」を使って、簡単に設定できるようにしました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;対象バージョン&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.*&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;1. テンプレートの適用したRailsプロジェクトの作成&lt;/h3&gt;
    &lt;p&gt;まず、テンプレートファイルをGitHubから取得します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ git clone git@github.com:yanagi0324/rails-template.git
&lt;/pre&gt;&lt;p&gt;取得したテンプレートファイルを使って、Railsプロジェクトを新規に作成します。&lt;br /&gt;
&lt;i&gt;&lt;code&gt;-m&lt;/code&gt;オプションでテンプレートファイルを指定します。&lt;/i&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ rails new &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;your_app_name&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-m&lt;/span&gt; ./rails-template/template.rb
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;2. テンプレートの設定内容の修正&lt;/h3&gt;
    &lt;p&gt;テンプレートファイルの中身は次のようになっています。&lt;br /&gt;
&lt;a href=&quot;https://github.com/yanagi0324/rails-template/blob/master/template.rb&quot;&gt;rails-template/template.rb at master &amp;middot; nipe0324/rails-template &amp;middot; GitHub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;入れたいgemやいらない設定などを修正することで設定することができます。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/rails_application_templates.html&quot;&gt;Rails Application Templates &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nanapi.co.jp/blog/2015/01/27/rails-template/&quot;&gt;Rails Template&amp;#x3067;&amp;#x30D7;&amp;#x30ED;&amp;#x30B8;&amp;#x30A7;&amp;#x30AF;&amp;#x30C8;&amp;#x4F5C;&amp;#x6210;&amp;#x3092;&amp;#x697D;&amp;#x306B;&amp;#x3057;&amp;#x3088;&amp;#x3046; | nanapi TechBlog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sun, 08 Feb 2015 19:26:39 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450082854701</guid>
          
            <category>Rails中級</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>rails newしたときの開発を効率化するためにまず行いたい6つの設定まとめ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150204/1423055537</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150107/20150107013920.jpg&quot; alt=&quot;f:id:nipe880324:20150107013920j:plain:w620&quot; title=&quot;f:id:nipe880324:20150107013920j:plain:w620&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:620px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;よくRailsプロジェクトを作るので、Railsプロジェクトを作った後に最初にやっておきたい設定をまとめました。&lt;br /&gt;
主に、開発を効率化させるためにやることをまとめてますので、ざざっと眺めて取り入れそうな知識があったら開発効率を上げれるかもしれません。&lt;/p&gt;&lt;p&gt;&lt;i&gt;また、nanapiさんの次の記事もとても参考になります。&lt;a href=&quot;http://nanapi.co.jp/blog/2015/01/27/rails-template/&quot; target=&quot;_blank&quot;&gt;Rails Templateでプロジェクト作成を楽にしよう&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;mac os X 10&lt;/li&gt;
&lt;li&gt;rails 4.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;1. &lt;a href=&quot;#first-settings-create&quot;&gt;Railsプロジェクトの作成&lt;/a&gt;&lt;/h4&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;2. &lt;a href=&quot;#first-settings-git&quot;&gt;Gitにプロジェクトを登録&lt;/a&gt;&lt;/h4&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;3. &lt;a href=&quot;#first-settings-gems&quot;&gt;開発を効率化させるGemをがっつり導入&lt;/a&gt;&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;3.1. &lt;a href=&quot;#first-settings-install&quot;&gt;gemのインストール&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;3.2. &lt;a href=&quot;#first-settings-jquery&quot;&gt;jquery-turbolinksの設定&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;3.3. &lt;a href=&quot;#first-settings-efficiency&quot;&gt;開発を効率化する関連gemの設定&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;3.4. &lt;a href=&quot;#first-settings-maintainability&quot;&gt;保守性を上げる&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;3.5. &lt;a href=&quot;#first-settings-format&quot;&gt;表示整形関連(ログなど見やすくなる)&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;3.6. &lt;a href=&quot;#first-settings-test&quot;&gt;テスト関連&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4. &lt;a href=&quot;#first-settings-i18n&quot;&gt;言語設定&lt;/a&gt;&lt;/h4&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;5. &lt;a href=&quot;#first-settings-timezone&quot;&gt;タイムゾーン&lt;/a&gt;&lt;/h4&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;6. &lt;a href=&quot;#first-settings-after&quot;&gt;準備をしたその後&lt;/a&gt;&lt;/h4&gt;
    &lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;first-settings-create&quot;&gt;1. Railsプロジェクトの作成&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;rails new first_settings_test

&lt;span class=&quot;synComment&quot;&gt;# RSpecを使う場合は、-T で test ディレクトリを作成しないようにする&lt;/span&gt;
rails new first_settings_test &lt;span class=&quot;synSpecial&quot;&gt;-T&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 既にプロジェクトを作っている場合は、testディレクトリをがっつり削除&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-rf&lt;/span&gt; first_settings_test/&lt;span class=&quot;synStatement&quot;&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;first-settings-git&quot;&gt;2. Gitにプロジェクトを登録&lt;/h3&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;git init
git add .
git ci &lt;span class=&quot;synSpecial&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;initial commit&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;first-settings-gems&quot;&gt;3. 開発を効率化させるGemをがっつり導入&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;好きなgemだけ選んでインストールする方法でもよいと思います。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;first-settings-install&quot;&gt;3.1. gemのインストール&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;に記載し、gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# jqueryのイベントがturbolinkのせいで発火しなくなる問題を解消するgem&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;jquery-turbolinks&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 開発を効率化する関連&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;guard-livereload&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# ソースを修正するとブラウザが自動でロードされ、画面を作るときに便利&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails-erd&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;                        &lt;span class=&quot;synComment&quot;&gt;# rake-erdコマンドでActiveRecordからER図を作成できる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spring-commands-rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;            &lt;span class=&quot;synComment&quot;&gt;# bin/rspecコマンドを使えるようにし、rspecの起動を早めれる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;                           &lt;span class=&quot;synComment&quot;&gt;# n+1問題を発見&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 保守性を上げる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rubocop&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;          &lt;span class=&quot;synComment&quot;&gt;# コーディング規約の自動チェック&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# pry関連(デバッグなど便利)&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# rails cの対話式コンソールがirbの代わりにリッチなpryになる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-doc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;      &lt;span class=&quot;synComment&quot;&gt;# pry中に show-source [method名] でソース内を読める&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-byebug&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# binding.pryをソースに記載すると、ブレイクポイントとなりデバッグが可能になる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-stack_explorer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# pry中にスタックを上がったり下がったり行き来できる&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 表示整形関連(ログなど見やすくなる)&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hirb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;         &lt;span class=&quot;synComment&quot;&gt;# モデルの出力結果を表形式で表示する&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hirb-unicode&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# hirbの日本語などマルチバイト文字の出力時の出力結果がすれる問題に対応&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails-flog&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;flog&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# HashとSQLのログを見やすく整形&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;better_errors&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;     &lt;span class=&quot;synComment&quot;&gt;# 開発中のエラー画面をリッチにする&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;binding_of_caller&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 開発中のエラー画面にさらに変数の値を表示する&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;awesome_print&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;     &lt;span class=&quot;synComment&quot;&gt;# Rubyオブジェクトに色をつけて表示して見やすくなる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;quiet_assets&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;      &lt;span class=&quot;synComment&quot;&gt;# ログのassetsを表示しないようにし、ログを見やすくしてくれる&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# テスト関連&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rspec-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;        &lt;span class=&quot;synComment&quot;&gt;# rspec本体&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;shoulda-matchers&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# モデルのテストを簡易にかけるmatcherが使える&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;factory_girl_rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# テストデータ作成&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;           &lt;span class=&quot;synComment&quot;&gt;# エンドツーエンドテスト&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara-webkit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# エンドツーエンドテスト(javascript含む)&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;launchy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;            &lt;span class=&quot;synComment&quot;&gt;# capybaraのsave_and_open_pageメソッドの実行時に画面を開いてくれる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;database_cleaner&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# エンドツーエンドテスト時のDBをクリーンにする&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test-queue&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;         &lt;span class=&quot;synComment&quot;&gt;# テストを並列で実行する&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;faker&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;              &lt;span class=&quot;synComment&quot;&gt;# 本物っぽいテストデータの作成&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;faker-japanese&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;     &lt;span class=&quot;synComment&quot;&gt;# 本物っぽいテストデータの作成（日本語対応）&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;capybara-webkitがインストールできないというエラーが出た場合は、コメントアウトするか次のコマンドをMacの場合は、実行してください&lt;/i&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ brew update
$ brew &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt; qt4
&lt;span class=&quot;synComment&quot;&gt;# コンソールを開き直す&lt;/span&gt;
$ which qmake
/usr/&lt;span class=&quot;synStatement&quot;&gt;local&lt;/span&gt;/bin/qmake  &lt;span class=&quot;synComment&quot;&gt;# 何か出力されればインストールされていること&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;first-settings-jquery&quot;&gt;3.2. jquery-turbolinksの設定&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;jquery-turbolinks&lt;/code&gt;を有効にします。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/applicaiton.js&lt;/span&gt;
...

&lt;span class=&quot;synComment&quot;&gt;//= require jquery&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require jquery.turbolinks  // 追加&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require jquery_ujs&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;first-settings-efficiency&quot;&gt;3.3. 開発を効率化する関連gemの設定&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;guard-livereload&lt;/code&gt;のGuardfileを作成する&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; guard init livereload

&lt;span class=&quot;synComment&quot;&gt;# 次のコマンドでGuardをバックグラウンドで動かし、連携できます。&lt;/span&gt;
bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; guard
&lt;/pre&gt;&lt;p&gt;Guardの詳細な使い方は、 「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141016/1413389293&quot; target=&quot;_blank&quot;&gt;guard-livereloadを使ってRailsでブラウザのオートリロードをさせる&lt;/a&gt;」を参照ください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;RSpecにSpringを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/spring &lt;span class=&quot;synStatement&quot;&gt;stop&lt;/span&gt;
spring binstub &lt;span class=&quot;synSpecial&quot;&gt;--all&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# これで次のコマンドを実行できるようになり、rspecの起動が速くなる&lt;/span&gt;
bin/rspec
&lt;/pre&gt;&lt;p&gt;Springについて詳細を知りたい場合は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141026/1414289421&quot; target=&quot;_blank&quot;&gt;Springを使ってrailsのコマンド実行を早くする&lt;/a&gt;」を参照ください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;code&gt;bullet&lt;/code&gt;を有効にします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/environments/development.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  ...

  config.after_initialize &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Bullet&lt;/span&gt;.enable  = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# bullet を有効にする&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# 以下はN+1問題を発見した時のユーザーへの通知方法&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Bullet&lt;/span&gt;.alert   = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;        &lt;span class=&quot;synComment&quot;&gt;# ブラウザのJavaScriptアラート&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Bullet&lt;/span&gt;.bullet_logger = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# Rails.root/log/bullet.log&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Bullet&lt;/span&gt;.console = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;        &lt;span class=&quot;synComment&quot;&gt;# ブラウザの console.log の出力先&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Bullet.growl   = true      # Growl&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Bullet.xmpp = { :account  =&amp;gt; &#39;bullets_account@jabber.org&#39;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#                 :password =&amp;gt; &#39;bullets_password_for_jabber&#39;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#                 :receiver =&amp;gt; &#39;your_account@jabber.org&#39;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#                 :show_online_status =&amp;gt; true }&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Bullet.rails_logger = true # Railsのログ&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Bullet.bugsnag      = true # 総合デバッガツールbugsnag&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Bullet.airbrake     = true # Airbrake&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Bullet&lt;/span&gt;.raise        = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# Exceptionを発生させる&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Bullet&lt;/span&gt;.add_footer   = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# 画面の下部に表示(ajax時など非同期の場合は表示されない)&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# include paths with any of these substrings in the stack trace,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# even if they are not in your main app&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Bullet.stacktrace_includes = [ &#39;your_gem&#39;, &#39;your_middleware&#39; ]&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bulletのより詳細な使い方は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141109/1415522242&quot; target=&quot;_blank&quot;&gt;bulletでN+1問題を発見する&lt;/a&gt;」を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;first-settings-maintainability&quot;&gt;3.4. 保守性を上げる&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;次の&lt;code&gt;rubocop&lt;/code&gt;を実行するコマンドで、ソースコードがコーディング規約に準拠しているか確認できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; rubocop
&lt;/pre&gt;&lt;p&gt;デフォルトのコーディング規約については、「&lt;a href=&quot;https://github.com/fortissimo1997/ruby-style-guide/blob/japanese/README.ja.md&quot; target=&quot;_blank&quot;&gt;rubocopのコーディング規約 - GitHub&lt;/a&gt;」を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;first-settings-format&quot;&gt;3.5. 表示整形関連(ログなど見やすくなる)&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Hirb&lt;/code&gt;と&lt;code&gt;Awesome Print&lt;/code&gt;の設定ファイルを記載します。&lt;br /&gt;
Railsプロジェクトのルート配下に&lt;code&gt;.pryrc&lt;/code&gt;を作成し、次の内容をコピーします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# .pryrc&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# For hirb&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hirb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;LoadError&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Missing goodies, bummer&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;defined?&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Hirb&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Slightly dirty hack to fully support in-session Hirb.disable/enable toggling&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;Hirb&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;View&lt;/span&gt;.instance_eval &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;enable_output_method&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@output_method&lt;/span&gt; = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@old_print&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Pry&lt;/span&gt;.config.print
      &lt;span class=&quot;synType&quot;&gt;Pry&lt;/span&gt;.config.print = &lt;span class=&quot;synStatement&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |*&lt;span class=&quot;synIdentifier&quot;&gt;args&lt;/span&gt;|
        &lt;span class=&quot;synType&quot;&gt;Hirb&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;View&lt;/span&gt;.view_or_page_output(args[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]) || &lt;span class=&quot;synIdentifier&quot;&gt;@old_print&lt;/span&gt;.call(*args)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;disable_output_method&lt;/span&gt;
      &lt;span class=&quot;synType&quot;&gt;Pry&lt;/span&gt;.config.print = &lt;span class=&quot;synIdentifier&quot;&gt;@old_print&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@output_method&lt;/span&gt; = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synType&quot;&gt;Hirb&lt;/span&gt;.enable
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# For awesome_print&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;awesome_print&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;AwesomePrint&lt;/span&gt;.pry!
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;first-settings-test&quot;&gt;3.6. テスト関連&lt;/h4&gt;&lt;/p&gt;&lt;p&gt;RSpecの設定ファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;rails g rspec:&lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、RSpecの設定ファイルを修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/rails_helper.rb&lt;/span&gt;

...

&lt;span class=&quot;synComment&quot;&gt;# Add additional requires below this line. Rails is not loaded until this point!&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;### 追加箇所 ###&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Capybara&lt;/span&gt;.javascript_driver = &lt;span class=&quot;synConstant&quot;&gt;:webkit&lt;/span&gt;

...

&lt;span class=&quot;synComment&quot;&gt;### コメントアウトする ###&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Dir&lt;/span&gt;[&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.root.join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/support/**/*.rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)].each { |&lt;span class=&quot;synIdentifier&quot;&gt;f&lt;/span&gt;| &lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; f }

...

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;config&lt;/span&gt;|
  ...

  &lt;span class=&quot;synComment&quot;&gt;# If you&#39;re not using ActiveRecord, or you&#39;d prefer not to run each of your&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# examples within a transaction, remove the following line or assign false&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# instead of true.&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;### 修正箇所 true から falseにする ###&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# config.use_transactional_fixtures = true&lt;/span&gt;
  config.use_transactional_fixtures = &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;### 追加箇所 開始 ###&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# suite: RSpecコマンドでテストを実行する単位&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# all:  各テストファイル(xxx_spec.rb)単位&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# each: 各テストケース(it)単位&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:suite&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean_with &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# テスト開始時にDBをクリーンにする&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# js以外のテスト時は通常のtransactionでデータを削除する&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.strategy = &lt;span class=&quot;synConstant&quot;&gt;:transaction&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# jsのテスト時はtruncationで削除する&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;js&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.strategy = &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.start
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.after(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.after(&lt;span class=&quot;synConstant&quot;&gt;:all&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean_with &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# all時にDBをクリーンにする&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;### 追加箇所 終了 ###&lt;/span&gt;
  ...
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;FactoryGirl&lt;/code&gt;のシンタックスを省略できるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/support/factory_girl.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;config&lt;/span&gt;|
  config.include &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Syntax&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Methods&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;test-queue&lt;/code&gt;で並列でテストを実行するための設定をします。&lt;br /&gt;
まず、&lt;code&gt;bin/rspec-queue&lt;/code&gt;という名前の実行ファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] ||= &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.expand_path(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;../../config/environment&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;__FILE__&lt;/span&gt;)

&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test_queue&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test_queue/runner/rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# テストランナー&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Reference: https://github.com/tmm1/test-queue&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;MyAppRSpecRunner&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;TestQueue&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Runner&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# def prepare(concurrency)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;after_fork&lt;/span&gt;(num)
    &lt;span class=&quot;synComment&quot;&gt;# ワーカー別のデータベースを準備する。&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;.update(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TEST_ENV_NUMBER&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; num &amp;gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; ? num.to_s : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;.configurations[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;][&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TEST_ENV_NUMBER&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]
    &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tasks&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DatabaseTasks&lt;/span&gt;.create_current
    &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;.establish_connection(&lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt;)

    &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.load_tasks
    &lt;span class=&quot;synType&quot;&gt;Rake&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Task&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;db:reset&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].invoke
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# def around_filter(suite)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   $stats.timing(&amp;quot;test.#{suite}.runtime&amp;quot;) do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#     yield&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   end&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;MyAppRSpecRunner&lt;/span&gt;.new.execute
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
実行権限をつけます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;744&lt;/span&gt; bin/rspec-queue
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
並列実行時のデータベース番号をつけます。&lt;br /&gt;
他にも並列テスト時に分ける必要があるものは&lt;code&gt;ENV[&#39;TEST_ENV_NUMBER&#39;]&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/database.yml&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;lt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;*default&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; db/test.sqlite3&amp;lt;%= ENV[&#39;TEST_ENV_NUMBER&#39;] %&amp;gt;
&lt;/pre&gt;&lt;p&gt;次のコマンドで並列テストが実行できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;bin/rspec-queue spec
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;(TODO) コードカバレッジ計測。ある程度以下になったら通知し、テストを作る。100%にすることよりも、一定水準(80%など)以上あることを確認することが大切。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;first-settings-i18n&quot;&gt;4. 言語設定&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;application.rb&lt;/code&gt;で言語設定をを記載するとRailsのデフォルトの言語を設定できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/application.rb&lt;/span&gt;
...

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;FirstSettingsTest&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt;
    ...

    &lt;span class=&quot;synComment&quot;&gt;# The default locale is :en and all translations from config/locales/*.rb,yml are auto loaded.&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# config.i18n.load_path += Dir[Rails.root.join(&#39;my&#39;, &#39;locales&#39;, &#39;*.{rb,yml}&#39;).to_s]&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# config.i18n.default_locale = :de&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;### 追加箇所 ###&lt;/span&gt;
    config.i18n.default_locale = &lt;span class=&quot;synConstant&quot;&gt;:ja&lt;/span&gt;

    ...
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
基本的な値を日本語化するには、&lt;code&gt;config/locales&lt;/code&gt;配下にリンク先の「&lt;a href=&quot;https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ja.yml&quot; target=&quot;_blank&quot;&gt;ja.yml&lt;/a&gt;」の内容をコピーして配置します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;また、自分で定義したActiveRecordのモデルの日本語化は次のような形式で記載し、&lt;code&gt;config/locales&lt;/code&gt;配下に配置します。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/locales/ar_ja.yml&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;activerecord&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; 商品

    &lt;span class=&quot;synIdentifier&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;        商品名
        &lt;span class=&quot;synIdentifier&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; 商品説明
        &lt;span class=&quot;synIdentifier&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;       値段
        &lt;span class=&quot;synIdentifier&quot;&gt;released_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; 販売日

   &lt;span class=&quot;synComment&quot;&gt; # エイリアス&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synType&quot;&gt;*product&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;first-settings-timezone&quot;&gt;5. タイムゾーン&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;application.rb&lt;/code&gt;にタイムゾーンを記載するとRails全体のタイムゾーンを設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/application.rb&lt;/span&gt;
...

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;FirstSettingsTest&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt;
    ...

    &lt;span class=&quot;synComment&quot;&gt;# Set Time.zone default to the specified zone and make Active Record auto-convert to this zone.&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# Run &amp;quot;rake -D time&amp;quot; for a list of tasks for finding time zone names. Default is UTC.&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# config.time_zone = &#39;Central Time (US &amp;amp; Canada)&#39;&lt;/span&gt;
    
    &lt;span class=&quot;synComment&quot;&gt;### 追加箇所 ###&lt;/span&gt;
    config.time_zone = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Tokyo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

    ...
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;「ユーザー単位でタイムゾーンを設定したい」、「タイムゾーンの一覧を知りたい」場合などは、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141217/1418817120&quot; target=&quot;_blank&quot;&gt;Railsのタイムゾーンや時刻処理のまとめ&lt;/a&gt;」を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;first-settings-after&quot;&gt;6. 準備をしたその後&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;Railsで開発をしていくにあたりに一通りの設定ができました。この後は、自分が作りたいように作っていってください。&lt;br /&gt;
その前に、「認証機能」、「検索機能」、「デザイン」などよく必要になる機能へのリンクを貼っておきますので、必要なら参照して導入してみると良いかもしれません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;認証機能 =&gt; &lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140801/1406907000&quot; target=&quot;_blank&quot;&gt;ログイン認証Gemのdevise導入方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;検索機能 =&gt; &lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141008/1412774436&quot; target=&quot;_blank&quot;&gt;Ransackで便利な検索機能を作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;デザイン =&gt; &lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140801/1406818800&quot; target=&quot;_blank&quot;&gt;Twitter Bootstrapの導入方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 04 Feb 2015 22:12:17 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450079297252</guid>
          
            <category>Rails中級</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでAngularJSを使ってTodoアプリを作成 - 9. AngularJS + Railsでソート可能(Sortable)なリストを作成する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150127/1422357163</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112194806.png&quot; alt=&quot;f:id:nipe880324:20150112194806p:plain&quot; title=&quot;f:id:nipe880324:20150112194806p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;「RailsでAngularJSを使ってTodoアプリを作成」の連載9回目です。今回で最終回です。&lt;br /&gt;
RailsとAngularJSでAngularJSのコントローラー, ngディレクティブ、ng-resource、ng-route、Railsのransack, kaminariなどのgemとの連携などいろいろなことをやってきました。&lt;/p&gt;&lt;p&gt;今回は、&lt;a href=&quot;https://github.com/a5hik/ng-sortable&quot; target=&quot;_blank&quot;&gt;ng-sortable&lt;/a&gt;と&lt;a href=&quot;https://github.com/swanandp/acts_as_list&quot; target=&quot;_blank&quot;&gt;acts_as_list&lt;/a&gt;を使い「&lt;b&gt;Todoをソートできる&lt;/b&gt;」ようにして、終わりとします。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;連載記事一覧&lt;/h3&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150114/20150114203508.jpg&quot; alt=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; title=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;https://rails42-with-angularjs13.herokuapp.com&quot; target=&quot;_blank&quot;&gt;Demo - Todoアプリケーション&lt;/a&gt;&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150114/1421235346&quot;&gt;1. AngularJSのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150115/1421316461&quot;&gt;2. UI Bootstrapのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150116/1421407124&quot;&gt;3. AngularJSのコントローラーの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150119/1421666497&quot;&gt;4. ngResource + RailsでAPI作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150120/1421761471&quot;&gt;5. ngRouteでシングルページにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150122/1421904614&quot;&gt;6. AngularJS + Ransackで検索機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150123/1422016597&quot;&gt;7. AngularJS + Kaminariでページネーション機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150126/1422276839&quot;&gt;8. AngularJSで編集可能(Editable)なフィールドを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;9. AngularJS + Railsでソート可能(Sortable)なリストを作成する&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails        4.2.0&lt;/li&gt;
&lt;li&gt;AngularJS    1.3.8&lt;/li&gt;
&lt;li&gt;Bootstrap    3.3.1&lt;/li&gt;
&lt;li&gt;UI Bootstrap 0.12.0&lt;/li&gt;
&lt;li&gt;ransack  1.6.2&lt;/li&gt;
&lt;li&gt;kaminari 0.16.1&lt;/li&gt;
&lt;li&gt;mk-eitablespan 1.0.0&lt;/li&gt;
&lt;li&gt;ng-sortable    1.1.9&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-install&quot;&gt;ng-sortableのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-usage&quot;&gt;ng-sortableの使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-angularjs-sortable&quot;&gt;AngularJS側でソート操作をできるようにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-rails-acts_as_list&quot;&gt;Rails側でacts_as_listを追加し、ポジションを保持する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-angularjs-positions&quot;&gt;AngularJS側で各Todoのポジションを更新する&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-install&quot;&gt;1. ng-sortableのインストール&lt;/h3&gt;&lt;a href=&quot;https://github.com/a5hik/ng-sortable&quot; target=&quot;_blank&quot;&gt;ng-sortable - GitHub&lt;/a&gt;のreleasesから1.1.9のファイルを圧縮ファイルでダウンロードします。&lt;/p&gt;&lt;p&gt;解凍したファイルの&lt;code&gt;dist&lt;/code&gt;配下の次の2つのファイルをRailsプロジェクトに追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;cp ~/Downloads/ng-sortable-1.1.9/dist/ng-sortable.min.js vendor/assets/javascripts/.
cp ~/Downloads/ng-sortable-1.1.9/dist/ng-sortable.min.css vendor/assets/stylesheets/.
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、Railsがこれらのファイルをインポートするように&lt;code&gt;require&lt;/code&gt;を追記します。&lt;br /&gt;
&lt;code&gt;application.js&lt;/code&gt;に追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/application.js&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;//= require ng-sortable.min&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、&lt;code&gt;application.css&lt;/code&gt;にも追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;/* app/assets/stylesheets/application.css */&lt;/span&gt;

 &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt;= require ng-sortable&lt;span class=&quot;synIdentifier&quot;&gt;.min&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、AngularJSのdependencyにも追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/app.coffee&lt;/span&gt;

app = angular.module(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sampleApp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, [&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ui.bootstrap&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ngResource&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ngRoute&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;mk.editablespan&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ui.sortable&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;])
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで、&lt;code&gt;ng-sortable&lt;/code&gt;を追加することができました。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-usage&quot;&gt;2. ng-sortableの使い方&lt;/h3&gt;&lt;code&gt;ng-sortable&lt;/code&gt;を実際に使う前に簡単に使い方の説明をします。&lt;/p&gt;&lt;p&gt;&lt;code&gt;ng-sortable&lt;/code&gt;のディレクティブは次の3つを使う必要があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;as-sortable   - アイテムのリストの要素に指定する&lt;/li&gt;
&lt;li&gt;as-sortable-item  - ソートやドラッグをしたいアイテムの要素に指定する&lt;/li&gt;
&lt;li&gt;as-sortable-item-handle - アイテム内のドラッグを行いたい要素に指定する&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
具体的な例のHTMLは次のようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-as-sortable=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sortControlListeners&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-ng-model=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-ng-repeat=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item in items&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-as-sortable-item&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-as-sortable-item-handle&amp;gt;&lt;/span&gt;{{ item.name }}&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで、&lt;code&gt;div&lt;/code&gt;要素がドラッグ可能になり、ソートができるようになります。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;そして、&lt;code&gt;data-as-sortable&lt;/code&gt;で指定したオプションでコールバック関数やドラッグが可能かどうかを次のように設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$scope.dragControlListeners = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// アイテムがドラッグ可能かどうか制御したい場合オーバーライドして、 boolean値で返す（デフォルト値: true (ドラッグ可能)）&lt;/span&gt;
    accept: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; (sourceItemHandleScope, destSortableScope) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;// アイテムが別のリストにドラッグ&amp;amp;ドロップされた場合に呼び出されるコールバック関数（今回は使わない）&lt;/span&gt;
    itemMoved: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;//Do what you want},&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;// アイテムが同一のリストでドラッグ&amp;amp;ドロップ（ソート）された場合に呼び出されるコールバック関数&lt;/span&gt;
    orderChanged: &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;//Do what you want},&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-angularjs-sortable&quot;&gt;3. AngularJS側でソート操作をできるようにする&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;では、Todoをソートできるようにしていきます。&lt;/p&gt;&lt;p&gt;まずは、TodoリストのHTMLを修正します。HTMLの修正があった行に&lt;code&gt;*&lt;/code&gt;を追加しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/todo_list.html.erb --&amp;gt;&lt;/span&gt;
  ...
* &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-as-sortable=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sortListeners&amp;quot;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-ng-model=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list.todos&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
*    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-repeat=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo in list.todos&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{completed: todo.completed}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-as-sortable-item &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group-item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo-completed&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-model=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo.completed&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-click=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;toggleTodo(todo)&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
*      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo-description&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-as-sortable-item-handle&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;editablespan
&lt;span class=&quot;synIdentifier&quot;&gt;          model=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo.description&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;          on-ready=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todoDescriptionEdited(todo)&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;editablespan&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo-buttons pull-right&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;btn btn-danger btn-xs pull-right&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-click=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;deleteTodo(todo)&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;glyphicon glyphicon-ban-circle&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;ng-sortable&lt;/code&gt;の使い方に則り、TodoListCtrlにソートした時のコールバック関数(&lt;code&gt;orderChanged&lt;/code&gt;)を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.sortListeners = {
  &lt;span class=&quot;synConstant&quot;&gt;orderChanged&lt;/span&gt;: (event) -&amp;gt;
    console.log &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sorted: &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;event.dest.index&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、ここまででとりあえず動作確認をします。&lt;br /&gt;
ソートの動作ができるようになっていると思います。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150124/20150124181557.jpg&quot; alt=&quot;f:id:nipe880324:20150124181557j:plain:w480&quot; title=&quot;f:id:nipe880324:20150124181557j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;また、Javascriptコンソールにtodoの移動後のポジション番号が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150124/20150124181604.jpg&quot; alt=&quot;f:id:nipe880324:20150124181604j:plain:w480&quot; title=&quot;f:id:nipe880324:20150124181604j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;まだ、サーバーにデータを送っていないので、移動後のポジション番号を送るようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.positionChanged = (todo) -&amp;gt;
  &lt;span class=&quot;synComment&quot;&gt;# TodoサービスクラスでTodoを更新する&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# サーバーには、params = { &amp;quot;todo&amp;quot; =&amp;gt; {&amp;quot;target_position&amp;quot;=&amp;gt;2}, &amp;quot;todo_list_id&amp;quot;=&amp;gt;&amp;quot;1&amp;quot;, &amp;quot;id&amp;quot;=&amp;gt;&amp;quot;5&amp;quot;} が送られる。&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@todoService&lt;/span&gt;.update(todo, &lt;span class=&quot;synConstant&quot;&gt;target_position&lt;/span&gt;: todo.position)

&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.sortListeners = {

  &lt;span class=&quot;synConstant&quot;&gt;orderChanged&lt;/span&gt;: (event) -&amp;gt;
    &lt;span class=&quot;synComment&quot;&gt;# 移動後のポジション番号を取得&lt;/span&gt;
    newPosition   = event.dest.index + &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 移動させたTodoモデルを取得&lt;/span&gt;
    todo          = event.source.itemScope.modelValue
    &lt;span class=&quot;synComment&quot;&gt;# 移動させたTodoのpositionを更新（Angular内部）&lt;/span&gt;
    todo.position = newPosition
    &lt;span class=&quot;synComment&quot;&gt;# 移動させたTodoのpositionを更新（サーバーへ送信）&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.positionChanged(todo)
}
&lt;/pre&gt;&lt;p&gt;Todoサービスクラスの&lt;code&gt;update&lt;/code&gt;メソッドは既に実装してますので、AngularJS側での処理は終わりです。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-rails-acts_as_list&quot;&gt;4. Rails側でacts_as_listを追加し、ポジションを保持する&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/swanandp/acts_as_list&quot; target=&quot;_blank&quot;&gt;acts_as_list&lt;/a&gt;というリストのソートや順序付けを簡易にするgemをいれます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;acts_as_list&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、&lt;code&gt;acts_as_list&lt;/code&gt;は&lt;code&gt;position&lt;/code&gt;カラムを使い、順序番号を保持することを前提に動くので、&lt;code&gt;position&lt;/code&gt;カラムをTodoに追加するマイグレーションファイルを作成し、実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g migration add_position_to_todos position:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;もちろんモデル内で&lt;code&gt;acts_as_list&lt;/code&gt;を呼び出すときに&lt;code&gt;:column&lt;/code&gt;オプションを指定することで、別のカラム名を使うことも可能です&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;そして、モデルに&lt;code&gt;acts_as_list&lt;/code&gt;メソッドを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;# app/models/todo_list.rb&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# todosの順序をpositionの昇順にする(1, 2, 3, ...)&lt;/span&gt;
*   has_many &lt;span class=&quot;synConstant&quot;&gt;:todos&lt;/span&gt;, -&amp;gt; { order &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }, &lt;span class=&quot;synConstant&quot;&gt;dependent&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;

    validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


  &lt;span class=&quot;synComment&quot;&gt;# app/models/todo.rb&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Todo&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
    paginates_per &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;

    belongs_to &lt;span class=&quot;synConstant&quot;&gt;:todo_list&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# scope: :todo_list - todo_list内でTodoをリスト操作する&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# add_new_at: :top - 新規のTodoを一番上に追加する(defult: :bottom (一番下))&lt;/span&gt;
+   acts_as_list &lt;span class=&quot;synConstant&quot;&gt;scope&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:todo_list&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;add_new_at&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:top&lt;/span&gt;

    validates &lt;span class=&quot;synConstant&quot;&gt;:todo_list_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
    validates &lt;span class=&quot;synConstant&quot;&gt;:description&lt;/span&gt;,  &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;length&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;maximum&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;255&lt;/span&gt; }
    validates &lt;span class=&quot;synConstant&quot;&gt;:completed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;inclusion&lt;/span&gt;: { &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;] }

    &lt;span class=&quot;synComment&quot;&gt;# AngularJSからtarget_postionとして値が送られてくるのでゲッターメソッドを定義する&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 内部的には、acts_as_listのinsert_at(integer)メソッドを呼ぶ&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# insert_atメソッドはTodoをリスト内の特定の箇所に移動し、それ以外のTodoのpositionをいい感じに更新してくれる&lt;/span&gt;
+   &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;target_position=&lt;/span&gt;(value)
+     insert_at(value.to_i)
+   &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで、たくさんのpositionを自動的に更新してくれるメソッドが使えるようになります。&lt;br /&gt;
挙動を確認してみましょう。少し複雑なので理解できなくても問題ありません。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ bin/rails c -s
&lt;span class=&quot;synComment&quot;&gt;# リストを作成&lt;/span&gt;
list = &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sample todo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)


&lt;span class=&quot;synComment&quot;&gt;## 作成時の acts_as_listの挙動 ##&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 3つTodoを作成する&lt;/span&gt;
list.todos.create(&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todo1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;completed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
list.todos.create(&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todo2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;completed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
list.todos.create(&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todo3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;completed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# todoを確認する&lt;/span&gt;
list.todos
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;ActiveRecord::Associations::CollectionProxy&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   [#&amp;lt;Todo description: &amp;quot;todo3&amp;quot;, position: 1, ...&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#    #&amp;lt;Todo description: &amp;quot;todo2&amp;quot;, position: 2, ...&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#    #&amp;lt;Todo description: &amp;quot;todo1&amp;quot;, position: 3, ...&amp;gt;]&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 自動的に良い感じにpositionが更新されています。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# これは、createメソッドでTodoをINSERTする前に、acts_as_listが次のUPDATE文も実行しているためです。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# UPDATE &amp;quot;todos&amp;quot; SET position = (position + 1) WHERE (&amp;quot;todos&amp;quot;.&amp;quot;todo_list_id&amp;quot; = 1)&lt;/span&gt;



&lt;span class=&quot;synComment&quot;&gt;## 更新時の acts_as_listの挙動 ##&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 1番目(todo3)を3番目に移動させます&lt;/span&gt;
list.todos.first.insert_at(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# todoを確認する&lt;/span&gt;
list.todos
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;ActiveRecord::Associations::CollectionProxy&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   [#&amp;lt;Todo description: &amp;quot;todo2&amp;quot;, position: 1, ...&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#    #&amp;lt;Todo description: &amp;quot;todo1&amp;quot;, position: 2, ...&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#    #&amp;lt;Todo description: &amp;quot;todo3&amp;quot;, position: 3, ...&amp;gt;]&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# todo3のpositionが3になり、他の2つが1,2になっています。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# これも自動的にacts_as_listにより次のようなUPDATE文が走っているため、いい感じになっています。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# UPDATE &amp;quot;todos&amp;quot; SET position = (position - 1) WHERE (&amp;quot;todos&amp;quot;.&amp;quot;todo_list_id&amp;quot; = 1 AND position &amp;gt; 1 AND position &amp;lt;= 3)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;少しわかりづらいですが、&lt;code&gt;acts_as_list&lt;/code&gt;により自動的にpositionがいい感じに更新されるということです。&lt;br /&gt;
今回はこのぐらいしかメソッドを使わないので上記が理解できれば問題ありません。&lt;br /&gt;
他にも&lt;code&gt;acts_as_list&lt;/code&gt;にはメソッドがたくさん定義されているので気になる方は、&lt;a href=&quot;https://github.com/swanandp/acts_as_list&quot; target=&quot;_blank&quot;&gt;acts_as_list - GitHub&lt;/a&gt;を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;では、TodosControllerのStrongParmetersで&lt;code&gt;target_position&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/todos_controller.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;todo_params&lt;/span&gt;
  params.require(&lt;span class=&quot;synConstant&quot;&gt;:todo&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:description&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:completed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:target_position&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
最後にjbuilderでAnguarJSに返しているJSONの内容に&lt;code&gt;position&lt;/code&gt;も返すように追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/views/api/todo_lists/show.json.jbuilder&lt;/span&gt;
  json.id    &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.id
  json.name  &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.name
  json.todos &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.todos.page(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;todo&lt;/span&gt;|
    json.id          todo.id
    json.description todo.description
    json.completed   todo.completed
+   json.position    todo.position
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  json.totalTodos  &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.todos.count


&lt;span class=&quot;synComment&quot;&gt;# app/views/api/todo_lists/show.json.jbuilder&lt;/span&gt;
  json.name &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.name
  json.todos &lt;span class=&quot;synIdentifier&quot;&gt;@todos&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;todo&lt;/span&gt;|
    json.id          todo.id
    json.description todo.description
    json.completed   todo.completed
+   json.position    todo.position
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  json.totalTodos  &lt;span class=&quot;synIdentifier&quot;&gt;@total_todos&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;これで、クライアント側も、サーバー側も一通り実装ができましたので、動作確認をしましょう。&lt;br /&gt;
Todoのpositionの値がすべて0だと思いますので、一度&lt;code&gt;bin/rake db:migrate:reset&lt;/code&gt;などしてDBを綺麗な状態にしてから実施してください。&lt;/p&gt;&lt;p&gt;Todoをソートした後に、画面をリロードしてもソート順が保持されているのでうまくいっています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;i&gt;うまく動かない場合は、Javascriptコンソールを開き、AngularJS側でエラーが出ていないこと、サーバーのupdateメソッドにbyebugを記載し、paramsでtarget_positionが取得できて、Todoの更新に成功していることといった処理の流れを追いながら順に確認してみてください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-angularjs-positions&quot;&gt;5. AngularJS側で各Todoのポジションを更新する&lt;/h3&gt;見た目上はうまく更新できてましたが、実は問題があります。&lt;br /&gt;
画面にAngularJSのモデルの&lt;code&gt;position&lt;/code&gt;の値を表示させてみましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/todo_list.html.erb --&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo-buttons pull-right&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
+   ({{ todo.position }})
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ...&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
新規にTodoを追加したり、ソートさせたり、削除させたりすると、positionの値(右側の()の内容)が正しくないこと見てわかると思います。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150124/20150124181724.jpg&quot; alt=&quot;f:id:nipe880324:20150124181724j:plain:w480&quot; title=&quot;f:id:nipe880324:20150124181724j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;これは、サーバー側で&lt;code&gt;acts_as_list&lt;/code&gt;が&lt;code&gt;position&lt;/code&gt;の値をよしなに更新してますが、それをAngularJS側に返していないためです。&lt;br /&gt;
毎回サーバーからデータを返すと画面がちらつき動作ももっさりしてしまい、せっかくのAngularJSの良さが失われてしまうので、AngularJS側でもTodoの追加、ソート、削除のときに適切にpositionを更新するようにします。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;まずは、Todoの追加をやります。&lt;br /&gt;
作成前に全てのTodoのpositionを&lt;code&gt;+1&lt;/code&gt;します。そして、作成したTodoは一番上に追加されるので、positionを&lt;code&gt;1&lt;/code&gt;にセットします。（リストはpositionの昇順にならんでいる）&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.addTodo = (todoDescription) -&amp;gt;
  raisePositions(&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list)
  todo = &lt;span class=&quot;synIdentifier&quot;&gt;@todoService&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;: todoDescription, &lt;span class=&quot;synConstant&quot;&gt;completed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
  todo.position = &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list.todos.unshift(todo)
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.todoDescription = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;


raisePositions = (list) -&amp;gt;
  angular.forEach list.todos, (todo) -&amp;gt;
    todo.position += &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;動作確認すると、todoを追加した場合でも、positionの値がうまく更新されているがわかると思います。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;次に、Todo削除をやります。&lt;br /&gt;
削除前に、削除するTodoより下にあるTodosのpositionを&lt;code&gt;-1&lt;/code&gt;します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.deleteTodo = (todo) -&amp;gt;
  lowerPositionsBelow(&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list, todo)
  &lt;span class=&quot;synIdentifier&quot;&gt;@todoService&lt;/span&gt;.delete(todo)
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list.todos.splice(&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list.todos.indexOf(todo), &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# list内の指定したtodoより下のtodosのpositionを-1する&lt;/span&gt;
lowerPositionsBelow = (list, todo) -&amp;gt;
  angular.forEach todosBelow(list, todo), (todo) -&amp;gt;
    todo.position -= &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# list内の指定したtodoより下にあるtodosを取得する&lt;/span&gt;
todosBelow = (list, todo) -&amp;gt;
  list.todos.slice(list.todos.indexOf(todo), list.todos.length)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
動作確認すると、削除した場合でも、positionの値がうまく更新されていると思います。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;最後にソートを行います。&lt;br /&gt;
AngularJSのリスト(ng-repeat)は内部的にindexという値を持っているのでその値をソート後に使います。&lt;br /&gt;
具体的には、ソート後に全てのTodoのpositionにAnguarJSのアイテムのindex値+1(0から始まるので+1する)を設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.positionChanged = (todo) -&amp;gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@todoService&lt;/span&gt;.update(todo, &lt;span class=&quot;synConstant&quot;&gt;target_position&lt;/span&gt;: todo.position)
  updatePositions(&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list)

updatePositions = (list) -&amp;gt;
  angular.forEach list.todos, (todo, index) -&amp;gt;
    todo.position = index + &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;動作確認すると、ソートした場合でも、positionの値がうまく更新されていると思います。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;では、position確認用の次の記述を削除します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/todo_list.html.erb --&amp;gt;&lt;/span&gt;

- ({{ todo.position }})
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;&lt;p&gt;これで、この連載もおわりです。&lt;br /&gt;
長々とここまでお付き合いくださりありがとうございました。&lt;/p&gt;&lt;p&gt;これで、あなたは、RailsとAngularJSを使ってそこそこのアプリケーションを作れるようになったと思います。&lt;br /&gt;
あとは、公式ドキュメントやリファレンス本などで適宜知識を補っていけば良いのではないかと思います。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Tue, 27 Jan 2015 20:12:43 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450081244551</guid>
          
            <category>AngularJS</category>
          
            <category>Rails中級</category>
          
            <category>連載</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでAngularJSを使ってTodoアプリを作成 - 8. AngularJSで編集可能(Editable)なフィールドを作成する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150126/1422276839</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112194806.png&quot; alt=&quot;f:id:nipe880324:20150112194806p:plain&quot; title=&quot;f:id:nipe880324:20150112194806p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;「RailsでAngularJSを使ってTodoアプリを作成」の連載8回目です。&lt;br /&gt;
今回は、AngularJSで編集可能(Editable)なフィールドを作成し、Todoリスト名とTodoの内容を更新できるようにします。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;テキストをクリックすると変更可能になり、OK/キャンセルボタンで変更を確定/キャンセルできるようにします。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Editableなライブラリは幾つかあるのですが、マイナーですがUI的に&lt;code&gt;editablespan&lt;/code&gt;を使います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mkwidzinska/editablespan&quot; target=&quot;_blank&quot;&gt;editablespan&lt;/a&gt; - Angular用に作られているが、Star数やコミット数からマイナー。UIは悪くはない。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vitalets.github.io/angular-xeditable/&quot; target=&quot;_blank&quot;&gt;Angular-xeditable&lt;/a&gt; - Angualr用に作られているので、AngularJSで使いやすい。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;i&gt;仕事で使う場合は、&lt;code&gt;angularjs-xeditable&lt;/code&gt;など他のメジャーなものやコミュニティが活発なものを使い、UIはCSSで変えた方が良いです。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;連載記事一覧&lt;/h3&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150114/20150114203508.jpg&quot; alt=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; title=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;https://rails42-with-angularjs13.herokuapp.com&quot; target=&quot;_blank&quot;&gt;Demo - Todoアプリケーション&lt;/a&gt;&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150114/1421235346&quot;&gt;1. AngularJSのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150115/1421316461&quot;&gt;2. UI Bootstrapのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150116/1421407124&quot;&gt;3. AngularJSのコントローラーの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150119/1421666497&quot;&gt;4. ngResource + RailsでAPI作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150120/1421761471&quot;&gt;5. ngRouteでシングルページにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150122/1421904614&quot;&gt;6. AngularJS + Ransackで検索機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150123/1422016597&quot;&gt;7. AngularJS + Kaminariでページネーション機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;8. AngularJSで編集可能(Editable)なフィールドを作成する&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150127/1422357163&quot;&gt;9. AngularJS + Railsでソート可能(Sortable)なリストを作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails        4.2.0&lt;/li&gt;
&lt;li&gt;AngularJS    1.3.8&lt;/li&gt;
&lt;li&gt;Bootstrap    3.3.1&lt;/li&gt;
&lt;li&gt;UI Bootstrap 0.12.0&lt;/li&gt;
&lt;li&gt;ransack  1.6.2&lt;/li&gt;
&lt;li&gt;kaminari 0.16.1&lt;/li&gt;
&lt;li&gt;mk-eitablespan 1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-anguarljs-install&quot;&gt;mk-editablespanのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-anguarljs-usage&quot;&gt;mk-editablespanの使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-anguarljs-editable-list-name&quot;&gt;Todoリスト名を編集可能にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-anguarljs-editable-todo-desc&quot;&gt;Todo内容を編集可能にする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-anguarljs-install&quot;&gt;1. mk-editablespanのインストール&lt;/h3&gt;&lt;a href=&quot;https://github.com/mkwidzinska/editablespan&quot; target=&quot;_blank&quot;&gt;mk-editablespan - GitHub&lt;/a&gt;からソースを取得します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;curl https://raw.githubusercontent.com/mkwidzinska/editablespan/master/build/mk-editable-span.min.js &lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; vendor/assets/javascripts/mk-editable-span.min.js
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、Railsが&lt;code&gt;mk-eitable-span.min&lt;/code&gt;を読み込むようにします。&lt;br /&gt;
&lt;i&gt;依存関係により&lt;code&gt;angularjs.min&lt;/code&gt;より後ろであり、&lt;code&gt;app&lt;/code&gt;より前である必要があります。&lt;/i&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/application.js&lt;/span&gt;
...
&lt;span class=&quot;synComment&quot;&gt;//= require mk-editable-span.min&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、AngularJSの依存リストに&lt;code&gt;mk.editablespan&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/app.coffee&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# AngularJSの設定ファイル&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 依存ライブラリを記述する&lt;/span&gt;
app = angular.module(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sampleApp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, [&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ui.bootstrap&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ngResource&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ngRoute&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;mk.editablespan&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;])
...
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-anguarljs-usage&quot;&gt;2. mk-editablespanの使い方&lt;/h3&gt;実際に実装する前に、使い方や指定できる属性を確認します。&lt;/p&gt;&lt;p&gt;変更可能なinput要素を配置したい場所に次のようにHTMLを記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;editablespan
&lt;span class=&quot;synIdentifier&quot;&gt;  model=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item.description&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;  on-ready=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;onReady(item)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;info&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;  input-&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;info-input&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;  input-&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;editablespan&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
使える属性とその説明は次の通りです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;model - 表示したいテキストの変数名を指定&lt;/li&gt;
&lt;li&gt;on-ready - テキストを保存後に呼ばれるコールバック関数を指定（ENTERキーを押すと保存にされます）&lt;/li&gt;
&lt;li&gt;span-class - &lt;code&gt;span&lt;/code&gt;要素に適用されるCSSクラス名を指定&lt;/li&gt;
&lt;li&gt;input-class - &lt;code&gt;input&lt;/code&gt;要素に適用されるCSSクラス名を指定&lt;/li&gt;
&lt;li&gt;input-type - &lt;code&gt;input&lt;/code&gt;要素のtype属性の値をHTML5で指定（デフォルトは&lt;code&gt;text&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-anguarljs-editable-list-name&quot;&gt;3. Todoリスト名を編集可能にする&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;では、&lt;code&gt;mk-editablespan&lt;/code&gt;を使ってTodoリスト名を編集可能にします。&lt;br /&gt;
Todoリスト名({{list.name}})と記載されている箇所を&lt;code&gt;editablespan&lt;/code&gt;を使うように修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/todo_list.html.erb --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel panel-success&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel-heading&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
*    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;editablespan&lt;span class=&quot;synIdentifier&quot;&gt; model=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list.name&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; on-ready=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;listNameEdited(list.name)&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;editablespan&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Enterキーが押された(保存された)ときのイベントも定義しておきます。&lt;br /&gt;
一応なんの値が渡されるか確認するために、&lt;code&gt;console.log&lt;/code&gt;で&lt;code&gt;listName&lt;/code&gt;を表示するだけにしておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controlelrs/TodoListCtrl.coffee&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.listNameEdited = (listName) -&amp;gt;
  console.log(listName)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、Todoリスト画面を表示し、タイトルをクリックすると次のように編集ができます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150123/20150123232256.jpg&quot; alt=&quot;f:id:nipe880324:20150123232256j:plain:w480&quot; title=&quot;f:id:nipe880324:20150123232256j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Enterキーを押すと、&lt;code&gt;on-ready&lt;/code&gt;に指定したメソッドが呼ばれ、今の所は&lt;code&gt;console.log&lt;/code&gt;により、 &lt;b&gt;変更後のTodoリスト名&lt;/b&gt;がJavascriptコンソールに表示されます。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;では、実際にサーバーのDBを更新するようにしていきます。&lt;/p&gt;&lt;p&gt;まず、TodoListサービスクラスの&lt;code&gt;update&lt;/code&gt;メソッドを呼び出すようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controlelrs/TodoListCtrl.coffee&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.listNameEdited = (listName) -&amp;gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@todoListService&lt;/span&gt;.update(&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list, &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: listName)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
TodoListサービスクラスに&lt;code&gt;update&lt;/code&gt;メソッドの中身を実装します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/services/TodoListService.coffee&lt;/span&gt;
...
&lt;span class=&quot;synConstant&quot;&gt;update&lt;/span&gt;: (list, attrs) -&amp;gt;
  new &lt;span class=&quot;synIdentifier&quot;&gt;@service&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;todo_list&lt;/span&gt;: attrs).&lt;span class=&quot;synIdentifier&quot;&gt;$update&lt;/span&gt; {&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: list.id}, (-&amp;gt; null), &lt;span class=&quot;synIdentifier&quot;&gt;@errorHandler&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# attrs = { name: listName } なので、todo_list: attrs は { todo_list: { name: listName } } となる&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Controller側で params = { todo_list: { name: listName } } となる&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、Railsのコントローラーで&lt;code&gt;update&lt;/code&gt;メソッドを実装します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/todo_lists_controller.rb&lt;/span&gt;

before_action &lt;span class=&quot;synConstant&quot;&gt;:set_todo_list&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;only&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:update&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;]

...

&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;update&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.update(todo_list_params)
  render &lt;span class=&quot;synConstant&quot;&gt;nothing&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Railsの&lt;code&gt;todo_lists&lt;/code&gt;の&lt;code&gt;update&lt;/code&gt;のルーティングがないので、ルーティングを修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 変更前&lt;/span&gt;
resources &lt;span class=&quot;synConstant&quot;&gt;:todo_lists&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;only&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;] &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 変更後&lt;/span&gt;
resources &lt;span class=&quot;synConstant&quot;&gt;:todo_lists&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;except&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt;] &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、Todoリストを表示するときにtodo_listのIDを返していないので、IDを返すようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/views/api/todo_lists/show.json.jbuilder&lt;/span&gt;
json.id    &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.id
...
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;では、サーバーを再起動し、動作を確認します。&lt;br /&gt;
先ほどのようにTodoリストのタイトルが変更でき、画面を更新しても値が同じなので、値がサーバーのDBに保存されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150123/20150123232328.jpg&quot; alt=&quot;f:id:nipe880324:20150123232328j:plain:w480&quot; title=&quot;f:id:nipe880324:20150123232328j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-anguarljs-editable-todo-desc&quot;&gt;4. Todo内容を編集可能にする&lt;/h3&gt;Todoリスト名と同様にTodoの内容も編集可能にします。1度実施したのでサクッと行っていきます。&lt;/p&gt;&lt;p&gt;まずは、Todoリスト画面のHTMLを修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/todo_list.html.erb --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo-description&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
*  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;editablespan&lt;span class=&quot;synIdentifier&quot;&gt; model=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo.description&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; on-ready=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todoDescriptionEdited(todo)&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;editablespan&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、TodoListCtrl.coffeeにメソッドを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.todoDescriptionEdited = (todo) -&amp;gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@todoService&lt;/span&gt;.update(todo, &lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;: todo.description)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
TodoService.coffeeには既に&lt;code&gt;update&lt;/code&gt;メソッドが定義されており、RailsのTodosControllerにも&lt;code&gt;update&lt;/code&gt;メソッドが定義されているので完了です。&lt;/p&gt;&lt;p&gt;では、動作を確認してみます。&lt;br /&gt;
次のように、Todoの内容も編集可能になりました。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150123/20150123232414.jpg&quot; alt=&quot;f:id:nipe880324:20150123232414j:plain:w480&quot; title=&quot;f:id:nipe880324:20150123232414j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Mon, 26 Jan 2015 21:53:59 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450081190739</guid>
          
            <category>AngularJS</category>
          
            <category>Rails中級</category>
          
            <category>連載</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでAngularJSを使ってTodoアプリを作成 - 7. AngularJS + Kaminariでページネーション機能を実装</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150123/1422016597</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112194806.png&quot; alt=&quot;f:id:nipe880324:20150112194806p:plain&quot; title=&quot;f:id:nipe880324:20150112194806p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;「RailsでAngularJSを使ってTodoアプリを作成」の連載7回目です。&lt;br /&gt;
前回は、AngularJSと&lt;a href=&quot;https://github.com/activerecord-hackery/ransack&quot; target=&quot;_blank&quot;&gt;Ransack&lt;/a&gt;を一緒に使い検索機能を実装しました。&lt;/p&gt;&lt;p&gt;今回は、AngularJSと&lt;a href=&quot;https://github.com/amatsuda/kaminari&quot; target=&quot;_blank&quot;&gt;Kaminari&lt;/a&gt;を使い、ページネーションを実装します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;連載記事一覧&lt;/h3&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150114/20150114203508.jpg&quot; alt=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; title=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;https://rails42-with-angularjs13.herokuapp.com&quot; target=&quot;_blank&quot;&gt;Demo - Todoアプリケーション&lt;/a&gt;&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150114/1421235346&quot;&gt;1. AngularJSのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150115/1421316461&quot;&gt;2. UI Bootstrapのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150116/1421407124&quot;&gt;3. AngularJSのコントローラーの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150119/1421666497&quot;&gt;4. ngResource + RailsでAPI作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150120/1421761471&quot;&gt;5. ngRouteでシングルページにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150122/1421904614&quot;&gt;6. AngularJS + Ransackで検索機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;7. AngularJS + Kaminariでページネーション機能を実装する&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150126/1422276839&quot;&gt;8. AngularJSで編集可能(Editable)なフィールドを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150127/1422357163&quot;&gt;9. AngularJS + Railsでソート可能(Sortable)なリストを作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails        4.2.0&lt;/li&gt;
&lt;li&gt;AngularJS    1.3.8&lt;/li&gt;
&lt;li&gt;Bootstrap    3.3.1&lt;/li&gt;
&lt;li&gt;UI Bootstrap 0.12.0&lt;/li&gt;
&lt;li&gt;ransack  1.6.2&lt;/li&gt;
&lt;li&gt;kaminari 0.16.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-kaminari-install&quot;&gt;kaminariのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-kaminari-pagination&quot;&gt;ページネーションの実装&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-kaminari-install&quot;&gt;1. kaminariのインストール&lt;/h3&gt;&lt;a href=&quot;https://github.com/amatsuda/kaminari&quot; target=&quot;_blank&quot;&gt;Kaminari&lt;/a&gt;をインストールします。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;に&lt;code&gt;kaminari&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ページネーション機能を追加&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;kaminari&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;bundle install&lt;/code&gt;を実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-kaminari-pagination&quot;&gt;2. ページネーションの実装&lt;/h3&gt;Todoリスト画面の一番下にページネーションを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/todo_list.html.erb --&amp;gt;&lt;/span&gt;
     ...

     &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所　開始 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;pagination&lt;span class=&quot;synIdentifier&quot;&gt; total-items=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;totalTodos&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-model=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;currentPage&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-change=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;search()&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;pagination&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所　終了 --&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;dashboard&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;btn btn-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synUnderlined&quot;&gt;戻る&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;ページネーションには、UI Bootstrapを使っています。&lt;br /&gt;
&lt;code&gt;toal-items&lt;/code&gt;には「アイテムの合計数」、&lt;code&gt;currentPage&lt;/code&gt;には「現在のページ番号」、&lt;code&gt;ng-change&lt;/code&gt;は「番号がクリックされたときのイベント」を定義します。また、1ページあたり10アイテムがデフォルトになっています。&lt;/p&gt;&lt;p&gt;&lt;i&gt;詳細は、「&lt;a href=&quot;http://angular-ui.github.io/bootstrap/#/pagination&quot; target=&quot;_blank&quot;&gt;Pagination - UI Bootstrap&lt;/a&gt;」を参照してください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;次に、&lt;code&gt;totalTodos&lt;/code&gt;(アイテムの合計値)をサーバー側から取得し、設定するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 初期データを用意するメソッド&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.init = -&amp;gt;
    ....
    &lt;span class=&quot;synComment&quot;&gt;# データを取得する(GET /api/todo_lists/:id =&amp;gt; Api::TodoLists#show)&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list = &lt;span class=&quot;synIdentifier&quot;&gt;@todoListService&lt;/span&gt;.find(&lt;span class=&quot;synIdentifier&quot;&gt;$routeParams&lt;/span&gt;.list_id, (res)-&amp;gt; &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.totalTodos = res.totalTodos)
 ...
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;find&lt;/code&gt;メソッドの第2引数にコールバック関数を記載することで、&lt;code&gt;totalTodos&lt;/code&gt;に値を設定しています。&lt;br /&gt;
これは、ng-resourceのメソッドはサーバーからの結果をまたず次の処理を行うように設計されているので、ng-resourceのブロック内で処理を行わないと正しい値が設定されないためです。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;次にkaminariの１ページのアイテム数のデフォルトが&lt;b&gt;25&lt;/b&gt;ですが、UI Bootstrapのページネーションのデフォルトの&lt;b&gt;10&lt;/b&gt;と合わせておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/todo.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Todo&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  paginates_per &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;page&lt;/code&gt;メソッドを呼び出し１ページのアイテム（10件）しか返さないようにします。&lt;br /&gt;
また、&lt;code&gt;totalTodos&lt;/code&gt;というキーで「アイテムの合計数」も返すようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/views/api/todo_lists/show.json.jbuilder&lt;/span&gt;
json.name  &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.name
json.todos &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.todos.page(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;todo&lt;/span&gt;|
  json.id          todo.id
  json.description todo.description
  json.completed   todo.completed
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
json.totalTodos  &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.todos.count
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;今度は、検索メソッドを修正します。検索ボタンを押したときだけでなく、ページネーションのリンクをクリックしたときも呼ばれるので、サーバー側に現在のページ番号(currentPage)を送信するようにしておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.search = -&amp;gt;
    &lt;span class=&quot;synComment&quot;&gt;# Ransackに対応したparamsを作成する&lt;/span&gt;
    params = {
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;q[description_cont]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.descriptionCont,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;q[completed_true]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;   : &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.completedTrue,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;                : &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.currentPage
    }

    &lt;span class=&quot;synComment&quot;&gt;# init()と同様にtotalTodosに正しい値が入るように第2引数にコールバック関数を渡す&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list = &lt;span class=&quot;synIdentifier&quot;&gt;@todoService&lt;/span&gt;.all(params, (res)-&amp;gt; &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.totalTodos = res.totalTodos)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
上記でコールバック関数を渡しているので、Todoサービスクラスの&lt;code&gt;all&lt;/code&gt;メソッドにハンドラーを追加しておきます。&lt;br /&gt;
また、&lt;code&gt;all&lt;/code&gt;メソッド内の&lt;code&gt;query&lt;/code&gt;メソッドが配列を返さないようになるので、&lt;code&gt;isArray: false&lt;/code&gt;も追加する必要があります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/services/TodoService.coffee&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;constructor&lt;/span&gt;: (todoListId, errorHandler) -&amp;gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@service&lt;/span&gt; = &lt;span class=&quot;synIdentifier&quot;&gt;$resource&lt;/span&gt;(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/api/todo_lists/:todo_list_id/todos/:id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
    { &lt;span class=&quot;synConstant&quot;&gt;todo_list_id&lt;/span&gt;: todoListId },
    { &lt;span class=&quot;synConstant&quot;&gt;query&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;isArray&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; }, &lt;span class=&quot;synConstant&quot;&gt;update&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;PUT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }})
   &lt;span class=&quot;synIdentifier&quot;&gt;@errorHandler&lt;/span&gt; = errorHandler

&lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: (params, successHandler) -&amp;gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@service&lt;/span&gt;.query(params,((list)-&amp;gt;
    successHandler?(list)
    list),
    &lt;span class=&quot;synIdentifier&quot;&gt;@errorHandler&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、TodosControllerのindexメソッドの修正をします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/todos_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@q&lt;/span&gt;            = &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.todos.ransack(params[&lt;span class=&quot;synConstant&quot;&gt;:q&lt;/span&gt;]).result &lt;span class=&quot;synComment&quot;&gt;# ransackの検索&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@todos&lt;/span&gt;        = &lt;span class=&quot;synIdentifier&quot;&gt;@q&lt;/span&gt;.page(params[&lt;span class=&quot;synConstant&quot;&gt;:page&lt;/span&gt;])  &lt;span class=&quot;synComment&quot;&gt;# kaminariのページネーション&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@total_todos&lt;/span&gt;  = &lt;span class=&quot;synIdentifier&quot;&gt;@q&lt;/span&gt;.count
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;index.josn.jbuilder&lt;/code&gt;を作成し、アイテムの合計数を&lt;code&gt;totalTodos&lt;/code&gt;で返すようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/views/api/todos/index.json.jbuilder&lt;/span&gt;
json.name &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.name
json.todos &lt;span class=&quot;synIdentifier&quot;&gt;@todos&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;todo&lt;/span&gt;|
  json.id          todo.id
  json.description todo.description
  json.completed   todo.completed
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
json.totalTodos  &lt;span class=&quot;synIdentifier&quot;&gt;@total_todos&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、サーバーを起動して、動作を確認します。&lt;br /&gt;
10件以上だとページネーションが分けられています。検索やページネーションのリンクを押しても問題なく動きます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150123/20150123213547.jpg&quot; alt=&quot;f:id:nipe880324:20150123213547j:plain:w480&quot; title=&quot;f:id:nipe880324:20150123213547j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Fri, 23 Jan 2015 21:36:37 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450081183050</guid>
          
            <category>AngularJS</category>
          
            <category>Rails中級</category>
          
            <category>連載</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでAngularJSを使ってTodoアプリを作成 - 6. AngularJS + Ransackで検索機能を実装</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150122/1421904614</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112194806.png&quot; alt=&quot;f:id:nipe880324:20150112194806p:plain&quot; title=&quot;f:id:nipe880324:20150112194806p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;「RailsでAngularJSを使ってTodoアプリを作成」の連載６回目です。&lt;br /&gt;
前回は、&lt;code&gt;ng-route&lt;/code&gt;をいれることで、複数のビューファイルをシングルページとして遷移できるようにします。&lt;br /&gt;
前回までで、Todoアプリの基本的な最低限の機能は作成できたので、今回からは使いやすさを改善するための機能を追加していきます。&lt;/p&gt;&lt;p&gt;今回は、検索機能を追加するRansackというgemを使って、AngularJSを使ったTodoの検索機能を追加します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;連載記事一覧&lt;/h3&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150114/20150114203508.jpg&quot; alt=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; title=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;https://rails42-with-angularjs13.herokuapp.com&quot; target=&quot;_blank&quot;&gt;Demo - Todoアプリケーション&lt;/a&gt;&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150114/1421235346&quot;&gt;1. AngularJSのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150115/1421316461&quot;&gt;2. UI Bootstrapのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150116/1421407124&quot;&gt;3. AngularJSのコントローラーの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150119/1421666497&quot;&gt;4. ngResource + RailsでAPI作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150120/1421761471&quot;&gt;5. ngRouteでシングルページにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;6. AngularJS + Ransackで検索機能を実装する&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150123/1422016597&quot;&gt;7. AngularJS + Kaminariでページネーション機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150126/1422276839&quot;&gt;8. AngularJSで編集可能(Editable)なフィールドを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150127/1422357163&quot;&gt;9. AngularJS + Railsでソート可能(Sortable)なリストを作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails        4.2.0&lt;/li&gt;
&lt;li&gt;AngularJS    1.3.8&lt;/li&gt;
&lt;li&gt;Bootstrap    3.3.1&lt;/li&gt;
&lt;li&gt;UI Bootstrap 0.12.0&lt;/li&gt;
&lt;li&gt;ransack 1.6.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-ransack-install&quot;&gt;ransackのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-ransack-form&quot;&gt;検索フォームとイベントの追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-ransack-api&quot;&gt;Rails側で検索APIを実装&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-ransack-install&quot;&gt;1. ransackのインストール&lt;/h3&gt;まず、&lt;a href=&quot;https://github.com/activerecord-hackery/ransack&quot; target=&quot;_blank&quot;&gt;ransack&lt;/a&gt;をインストールします。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;に&lt;code&gt;ransack&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ransack&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;bundle install&lt;/code&gt;を実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-ransack-form&quot;&gt;2. 検索フォームとイベントの追加&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;次に、検索フォームを作成します。TodoのDescriptionと完了/未完了で検索できる入力フィールドを追加します。&lt;br /&gt;
AnguarJSのControllerから各入力フィールドの値を取得するため、&lt;code&gt;ng-model&lt;/code&gt;を追加しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/todo_list.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-init=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;init()&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-cloak&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Todo リスト&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所　開始 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel panel-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel-body&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; role=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-horizontal&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-submit=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;search()&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-sm-2 control-label&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Description:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-sm-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-model=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;descriptionCont&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-control&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;completed&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-sm-2 control-label&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Completed:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-sm-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-model=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;completedTrue&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;completed&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-sm-offset-2 col-sm-10&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;btn btn-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Search&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所　終了 --&amp;gt;&lt;/span&gt;


  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel panel-success&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel-heading&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;{{list.name}}&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;検索フォームの検索ボタンを押したときに呼ばれる、&lt;code&gt;search()&lt;/code&gt;メソッドをAngularJSのControllerに定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.search = -&amp;gt;
  &lt;span class=&quot;synComment&quot;&gt;# Ransackに対応したparamsを作成する&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# description_cont =&amp;gt; descriptionカラムが特定の値を含む(like句に変換される)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# completed_true   =&amp;gt; completedカラムがtrueか&lt;/span&gt;
  params = {
    &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;q[description_cont]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.descriptionCont,
    &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;q[completed_true]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;   : &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.completedTrue
  }

  &lt;span class=&quot;synComment&quot;&gt;# 検索結果を $scope.list.todos にセットする&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list.todos = &lt;span class=&quot;synIdentifier&quot;&gt;@todoService&lt;/span&gt;.all(params)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、TodoServiceクラスに&lt;code&gt;all&lt;/code&gt;メソッドを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/services/TodoService.coffee&lt;/span&gt;

&lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: (params)-&amp;gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@service&lt;/span&gt;.query(params, (-&amp;gt; null), &lt;span class=&quot;synIdentifier&quot;&gt;@errorHandler&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-ransack-api&quot;&gt;3. Rails側で検索APIを実装&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;AngularJSのTodoServiceの&lt;code&gt;all&lt;/code&gt;メソッドに対応したRailsの検索APIを追加します。&lt;/p&gt;&lt;p&gt;まずは、ルートを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
...
namespace &lt;span class=&quot;synConstant&quot;&gt;:api&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;defaults&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:json&lt;/span&gt; } &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  resources &lt;span class=&quot;synConstant&quot;&gt;:todo_lists&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;only&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;] &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# except: [:index] を削除する&lt;/span&gt;
    resources &lt;span class=&quot;synConstant&quot;&gt;:todos&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;except&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;]
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;ransack&lt;/code&gt;のgemを入れると、各モデルに&lt;code&gt;ransack&lt;/code&gt;メソッド(別名で&lt;code&gt;search&lt;/code&gt;メソッドもある)が追加されます。&lt;br /&gt;
そのため、TodosControllerに&lt;code&gt;index&lt;/code&gt;メソッドを追加し、その中で&lt;code&gt;ransack&lt;/code&gt;メソッドを使うようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/todos_controller.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
  render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.todos.ransack(params[&lt;span class=&quot;synConstant&quot;&gt;:q&lt;/span&gt;]).result
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ransack&lt;/code&gt;メソッドにハッシュでカラム名と値を渡すことでransackの検索モデルが生成されます。&lt;br /&gt;
そして、&lt;code&gt;result&lt;/code&gt;メソッドで検索が実行され、その結果がActiveRecord::Relationで返されます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;挙動がわかりづらい場合は次のようにいろいろとコンソールから実行してみることをお勧めします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# ransack - ransackの検索モデルを作成する&lt;/span&gt;
&amp;gt; &lt;span class=&quot;synType&quot;&gt;Todo&lt;/span&gt;.ransack(&lt;span class=&quot;synConstant&quot;&gt;description_cont&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todo 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; Ransack::Search&amp;lt;class: Todo, base: Grouping &amp;lt;conditions: [Condition &amp;lt;attributes: [&amp;quot;description&amp;quot;], predicate: cont, values: [&amp;quot;todo 1&amp;quot;]&amp;gt;], combinator: and&amp;gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# result - ransackで検索を実施する&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Todo&lt;/span&gt;.ransack(&lt;span class=&quot;synConstant&quot;&gt;description_cont&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todo 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).result
&lt;span class=&quot;synComment&quot;&gt;#  Todo Load (0.5ms)  SELECT &amp;quot;todos&amp;quot;.* FROM &amp;quot;todos&amp;quot; WHERE (&amp;quot;todos&amp;quot;.&amp;quot;description&amp;quot; LIKE &#39;%todo 1%&#39;)&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;ActiveRecord::Relation [#&amp;lt;Todo id: 9, todo_list_id: 10, description: &amp;quot;todo 1&amp;quot;, completed: true, created_at: &amp;quot;2015-01-14 10:10:01&amp;quot;, updated_at: &amp;quot;2015-01-14 10:10:09&amp;quot;&amp;gt;, #&amp;lt;Todo id: 18, todo_list_id: 10, description: &amp;quot;todo 10&amp;quot;,  ...]&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# to_sql - 検索で発行されるSQLを確認することができます。&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Todo&lt;/span&gt;.ransack(&lt;span class=&quot;synConstant&quot;&gt;description_cont&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todo 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).result.to_sql
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;SELECT \&amp;quot;todos\&amp;quot;.* FROM \&amp;quot;todos\&amp;quot; WHERE (\&amp;quot;todos\&amp;quot;.\&amp;quot;description\&amp;quot; LIKE &#39;%todo 1%&#39;)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
より詳しく&lt;code&gt;ransack&lt;/code&gt;について知りたい場合は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141008/1412774436&quot; target=&quot;_blank&quot;&gt;ransackを使って検索機能を作成&lt;/a&gt;」を参考にしてみてください。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;では、動作を確認します。&lt;br /&gt;
サーバーを起動し、TodoList画面を開きます。検索フォームが追加されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150120/20150120235606.jpg&quot; alt=&quot;f:id:nipe880324:20150120235606j:plain:w480&quot; title=&quot;f:id:nipe880324:20150120235606j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;そして、検索フォームに適当に値を入力し、「検索」ボタンを押すと、検索結果が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150120/20150120235607.jpg&quot; alt=&quot;f:id:nipe880324:20150120235607j:plain:w480&quot; title=&quot;f:id:nipe880324:20150120235607j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Thu, 22 Jan 2015 14:30:14 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450080886605</guid>
          
            <category>Rails中級</category>
          
            <category>AngularJS</category>
          
            <category>連載</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでAngularJSを使ってTodoアプリを作成 - 5. ngRouteでシングルページにする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150120/1421761471</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112194806.png&quot; alt=&quot;f:id:nipe880324:20150112194806p:plain&quot; title=&quot;f:id:nipe880324:20150112194806p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;「RailsでAngularJSを使ってTodoアプリを作成」の連載５回目です。&lt;br /&gt;
前回は、RailsでAPIを作成し、AngularJSの&lt;code&gt;ngResource&lt;/code&gt;を使い、そのAPIにアクセスし、Todoリストを作成/更新/削除を永続化できるようにしました。&lt;/p&gt;&lt;p&gt;今回は、&lt;code&gt;ng-route&lt;/code&gt;をいれることで、複数のビューファイルをシングルページとして遷移できるようにします。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;連載記事一覧&lt;/h3&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150114/20150114203508.jpg&quot; alt=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; title=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;https://rails42-with-angularjs13.herokuapp.com&quot; target=&quot;_blank&quot;&gt;Demo - Todoアプリケーション&lt;/a&gt;&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150114/1421235346&quot;&gt;1. AngularJSのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150115/1421316461&quot;&gt;2. UI Bootstrapのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150116/1421407124&quot;&gt;3. AngularJSのコントローラーの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150119/1421666497&quot;&gt;4. ngResource + RailsでAPI作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5. ngRouteでシングルページにする&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150122/1421904614&quot;&gt;6. AngularJS + Ransackで検索機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150123/1422016597&quot;&gt;7. AngularJS + Kaminariでページネーション機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150126/1422276839&quot;&gt;8. AngularJSで編集可能(Editable)なフィールドを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150127/1422357163&quot;&gt;9. AngularJS + Railsでソート可能(Sortable)なリストを作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails        4.2.0&lt;/li&gt;
&lt;li&gt;AngularJS    1.3.8&lt;/li&gt;
&lt;li&gt;Bootstrap    3.3.1&lt;/li&gt;
&lt;li&gt;UI Bootstrap 0.12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    &lt;p&gt;&lt;a href=&quot;#rails-with-angularjs-ng-route-dashboard&quot;&gt;ダッシュボード画面を作成する&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#rails-with-angularjs-ng-route-install&quot;&gt;ng-routeをインストールする&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#rails-with-angularjs-ng-route-single-page&quot;&gt;ダッシュボード画面とTodoリスト画面をシングルページにする&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#rails-with-angularjs-ng-route-kwsk&quot;&gt;ng-routeとRailsの処理の流れを詳しく&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-ng-route-dashboard&quot;&gt;ダッシュボード画面を作成する&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;3回目の記事と4回目の記事の復習も兼ねて、全てのTodoリストを表示するダッシュボード画面を作成します。&lt;br /&gt;
（本来は、ユーザーモデルを作成し、ユーザーごとにダッシュボードを用意するのが普通です。）&lt;/p&gt;&lt;p&gt;まず、ルートを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;

get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/templates/dashboard&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;templates#dashboard&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/templates/todo_list&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;templates#todo_list&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
root &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;templates#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、このルートから呼ばれる、viewファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;  app/views/templates/task_list.html.erb&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;  仮でhtmlを作成しておく&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;This is index.html.erb&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;



&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;  app/views/templates/task_list.html.erb&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;  templates/index.html.erb の内容ををごそっと移動させる&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;--&amp;gt;&lt;/span&gt;

... templates/index.html.erb



&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;  app/views/templates/task_list.html.erb&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;  ダッシュボード画面を作成する&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-controller=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;DashboardCtrl&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-init=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;init()&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;ダッシュボード - Dashboard&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel panel-success dashboard-list&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel-heading&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;すべての Todoリスト&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-show=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;lists == 0&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group-item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        リストはまだ作成されていません
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;new_list&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-submit=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;createList(listName)&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;input-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todoDescription&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-control input-lg&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; autofocus=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;autofocus&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; placeholder=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;リスト名&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;maxlength&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;255&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-model=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;listName&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;input-group-btn&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;btn btn-success btn-lg&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;作成&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group-item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-repeat=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list in lists&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo-list-description&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/todo_lists/{{ list.id }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synUnderlined&quot;&gt;            {{ list.name }}&lt;/span&gt;
&lt;span class=&quot;synUnderlined&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo-list-buttons pull-right&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;btn btn-danger btn-xs pull-right&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-click=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;deleteList(list, $index)&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;glyphicon glyphicon-ban-circle&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- /.panel.panel-success.dashboard-list --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に&lt;code&gt;DashboardCtrl&lt;/code&gt;を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/DashboardCtrl.coffee&lt;/span&gt;

angular.module(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sampleApp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).controller &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;DashboardCtrl&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;) -&amp;gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.init = -&amp;gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@listsService&lt;/span&gt; = new TodoList(serverErrorHandler)
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.lists = &lt;span class=&quot;synIdentifier&quot;&gt;@listsService&lt;/span&gt;.all()

  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.createList = (listName) -&amp;gt;
    list = &lt;span class=&quot;synIdentifier&quot;&gt;@listsService&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: listName)
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.lists.push(list)
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.listName = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.deleteList = (list, index) -&amp;gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; confirm &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;リストを削除しますか?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@listsService&lt;/span&gt;.delete(list)
      &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.lists.splice(index, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)

  serverErrorHandler = -&amp;gt;
    alert(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;サーバーでエラーが発生しました。画面を更新し、もう一度試してください。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;AngularJSのTodoListサービスクラスに&lt;code&gt;all, create, delete&lt;/code&gt;メソッドを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/services/TodoListService.coffee&lt;/span&gt;

angular.module(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sampleApp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).factory &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TodoList&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, (&lt;span class=&quot;synIdentifier&quot;&gt;$resource&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;$http&lt;/span&gt;) -&amp;gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;constructor&lt;/span&gt;: (errorHandler) -&amp;gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@service&lt;/span&gt; = &lt;span class=&quot;synIdentifier&quot;&gt;$resource&lt;/span&gt;(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/api/todo_lists/:id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
        { &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;@id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; },
        { &lt;span class=&quot;synConstant&quot;&gt;update&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;PUT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }})
      &lt;span class=&quot;synIdentifier&quot;&gt;@errorHandler&lt;/span&gt; = errorHandler

    &lt;span class=&quot;synConstant&quot;&gt;all&lt;/span&gt;: -&amp;gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@service&lt;/span&gt;.query((-&amp;gt; null), &lt;span class=&quot;synIdentifier&quot;&gt;@errorHandler&lt;/span&gt;)

    &lt;span class=&quot;synConstant&quot;&gt;find&lt;/span&gt;: (id, successHandler) -&amp;gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@service&lt;/span&gt;.get(&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: id, ((list)-&amp;gt;
        successHandler?(list)
        list),
        &lt;span class=&quot;synIdentifier&quot;&gt;@errorHandler&lt;/span&gt;)

    &lt;span class=&quot;synConstant&quot;&gt;create&lt;/span&gt;: (attrs) -&amp;gt;
      new &lt;span class=&quot;synIdentifier&quot;&gt;@service&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;todo_list&lt;/span&gt;: attrs).&lt;span class=&quot;synIdentifier&quot;&gt;$save&lt;/span&gt; ((list) -&amp;gt; attrs.id = list.id), &lt;span class=&quot;synIdentifier&quot;&gt;@errorHandler&lt;/span&gt;
      attrs

    &lt;span class=&quot;synConstant&quot;&gt;delete&lt;/span&gt;: (list) -&amp;gt;
      new &lt;span class=&quot;synIdentifier&quot;&gt;@service&lt;/span&gt;().&lt;span class=&quot;synIdentifier&quot;&gt;$delete&lt;/span&gt; { &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: list.id }, (-&amp;gt; null), &lt;span class=&quot;synIdentifier&quot;&gt;@errorHandler&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次は、TodoListサービスからアクセスするAPIをRails側で作成します。&lt;br /&gt;
&lt;code&gt;routes.rb&lt;/code&gt;に&lt;code&gt;index, create, destroy&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;

namespace &lt;span class=&quot;synConstant&quot;&gt;:api&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;defaults&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:json&lt;/span&gt; } &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  resources &lt;span class=&quot;synConstant&quot;&gt;:todo_lists&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;only&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;] &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    resources &lt;span class=&quot;synConstant&quot;&gt;:todos&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;except&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;]
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;TodoListsController&lt;/code&gt;にメソッドを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/todo_lists_controller.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TodoListsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
    before_action &lt;span class=&quot;synConstant&quot;&gt;:set_todo_list&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;only&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;]

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
      render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;.all
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
      list = &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;.create!(todo_list_params)
      render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: list, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;201&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;destroy&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.destroy
      render &lt;span class=&quot;synConstant&quot;&gt;nothing&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;

      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_todo_list&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt; ||= &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;todo_list_params&lt;/span&gt;
        params.require(&lt;span class=&quot;synConstant&quot;&gt;:todo_list&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;)
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;では、動作確認をします。ダッシュボードが表示され、TodoListの追加と削除ができることを確認してください。&lt;br /&gt;
img 2&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-ng-route-install&quot;&gt;ng-routeをインストールする&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;AngularJSでシングルページのルーティングを行うには、&lt;code&gt;ng-route&lt;/code&gt;モジュールが必要です。まずは、プロジェクトにインストールしていきます。&lt;/p&gt;&lt;p&gt;まず、&lt;a href=&quot;https://angularjs.org/&quot; target=&quot;_blank&quot;&gt;AngularJS 公式ページ&lt;/a&gt;から以下の２つのファイルをダウンロードし、&lt;code&gt;vendor/assets/javascripts/&lt;/code&gt;配下に配置します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;angular-route.min.js&lt;/li&gt;
&lt;li&gt;angular-route.min.js.map&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;curl https://ajax.googleapis.com/ajax/libs/angularjs/1.3.8/angular-route.min.js &lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; vendor/assets/javascripts/angular-route.min.js
curl https://ajax.googleapis.com/ajax/libs/angularjs/1.3.8/angular-route.min.js.map &lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; vendor/assets/javascripts/angular-route.min.js.map
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、&lt;code&gt;application.js&lt;/code&gt;の&lt;code&gt;angular-resource.min&lt;/code&gt;の後に、下記&lt;code&gt;angular-route.min&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;# app/assets/javascripts/application.js

&lt;span class=&quot;synComment&quot;&gt;//= require angular-route.min&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;sampleApp&lt;/code&gt;の依存関係に&lt;code&gt;ngResource&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;# app/assets/javascripts/app.coffee

# AngularJSの設定ファイル
# 依存ライブラリを記述する
app = angular.module(&lt;span class=&quot;synConstant&quot;&gt;&#39;sampleApp&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;ui.bootstrap&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;ngResource&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;ngRoute&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;)

...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
モジュールが正しくインクルードされていることを確認するために、画面を開き、JavaScriptコンソールにエラーが表示されていないことを確認してください。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150114/20150114195415.jpg&quot; alt=&quot;f:id:nipe880324:20150114195415j:plain:w480&quot; title=&quot;f:id:nipe880324:20150114195415j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-ng-route-single-page&quot;&gt;ダッシュボード画面とTodoリスト画面をシングルページにする&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;では、&lt;code&gt;ngRoute&lt;/code&gt;を使い、「ダッシュボード画面」と「Todoリスト画面」をシングルページにしていきます。&lt;/p&gt;&lt;p&gt;まず、&lt;a href=&quot;https://docs.angularjs.org/api/ngRoute/provider/$routeProvider&quot; target=&quot;_blank&quot;&gt;$routeProvidor&lt;/a&gt;でルートの設定を記載します&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;# app/assets/javascripts/app.coffee
...

# ルートの設定
app.config ($routeProvider, $locationProvider) -&amp;gt;
  # html5モードを有効にする
  # / にアクセスすると、 /dashboard にリダイレクトする
  # /dashboard にアクセスすると、 /templates/dashboard.html を表示する（合わせてDashboardCtrlを読み込む)
  # /todo_lists/:list_id にアクセスすると、 /templates/task_list.html を表示する（合わせてTodoListCtrlを読み込む)
  $locationProvider.html5Mode &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  $routeProvider.when &lt;span class=&quot;synConstant&quot;&gt;&#39;/&#39;&lt;/span&gt;,                    redirectTo:  &lt;span class=&quot;synConstant&quot;&gt;&#39;/dashboard&#39;&lt;/span&gt;
  $routeProvider.when &lt;span class=&quot;synConstant&quot;&gt;&#39;/dashboard&#39;&lt;/span&gt;,           templateUrl: &lt;span class=&quot;synConstant&quot;&gt;&#39;/templates/dashboard.html&#39;&lt;/span&gt;, controller: &lt;span class=&quot;synConstant&quot;&gt;&#39;DashboardCtrl&#39;&lt;/span&gt;
  $routeProvider.when &lt;span class=&quot;synConstant&quot;&gt;&#39;/todo_lists/:list_id&#39;&lt;/span&gt;, templateUrl: &lt;span class=&quot;synConstant&quot;&gt;&#39;/templates/todo_list.html&#39;&lt;/span&gt;, controller: &lt;span class=&quot;synConstant&quot;&gt;&#39;TodoListCtrl&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
html5Modeをtrueにした場合、&lt;code&gt;base&lt;/code&gt;タグが必要になるので、&lt;code&gt;bash href=&quot;/&quot;&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/layouts/application.html.erb

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-app=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sampleApp&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;AngularjsTest&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  ...&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に&lt;code&gt;index.html.erb&lt;/code&gt;に&lt;a href=&quot;https://docs.angularjs.org/api/ngRoute/directive/ngView&quot; target=&quot;_blank&quot;&gt;ng-view&lt;/a&gt;ディレクティブを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-view&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ng-view&lt;/code&gt;をメインの(&lt;code&gt;index.html&lt;/code&gt;)ファイルに記載することで、上記の&lt;code&gt;$routeProvider&lt;/code&gt;で設定したルート通りのテンプレートが表示されたり、リダイレクトが行われたりするようになります&lt;br /&gt;
&lt;code&gt;ng-view&lt;/code&gt;と&lt;code&gt;$routeProvider&lt;/code&gt;はAngularJSでシングルページアプリとしてルーティングするには必須の機能ですので忘れないようにしといてください。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;では、今度はAngularJSが&lt;code&gt;$routeProvider&lt;/code&gt;での設定に則って、&lt;code&gt;templateUrl&lt;/code&gt;のHTMLにアクセスできるようにRailsのルーティングを修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.routes.draw &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  namespace &lt;span class=&quot;synConstant&quot;&gt;:api&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;defaults&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:json&lt;/span&gt; } &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    resources &lt;span class=&quot;synConstant&quot;&gt;:todo_lists&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;only&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;] &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      resources &lt;span class=&quot;synConstant&quot;&gt;:todos&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;except&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;]
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 修正箇所 開始&lt;/span&gt;
  get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/dashboard&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;      =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;templates#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/todo_lists/:id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;templates#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/templates/:path.html&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;templates#template&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;constraints&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;path&lt;/span&gt;: /.+/ }
  &lt;span class=&quot;synComment&quot;&gt;# 修正箇所 終了&lt;/span&gt;

  root &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;templates#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、Templatesコントローラーに&lt;code&gt;template&lt;/code&gt;メソッドを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/templates_controller.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TemplatesController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  ...

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;template&lt;/span&gt;
    render &lt;span class=&quot;synConstant&quot;&gt;template&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;templates/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params[&lt;span class=&quot;synConstant&quot;&gt;:path&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;layout&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ダッシュボート画面とTodoリスト画面から&lt;code&gt;ng-contoller&lt;/code&gt;ディレクティブを削除します。&lt;br /&gt;
(&lt;code&gt;$routeProvider&lt;/code&gt;によりコントローラーを既に指定しているので画面で指定しなくてもよいため。)&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/dashboard.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-init=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;init()&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;ダッシュボード - Dashboard&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...


&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/todo_list.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-init=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;init()&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Todo リスト&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
最後に、Todoリスト画面の一番下に「戻る」ボタンを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/todo_list.html.erb --&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;dashboard&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;btn btn-default&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synUnderlined&quot;&gt;戻る&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 一番下のdiv要素 --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では画面を確認してみましょう。&lt;br /&gt;
&lt;code&gt;http://localhost:3000/&lt;/code&gt;にアクセスすると、自動的に&lt;code&gt;http://localhost:30000/dashboard&lt;/code&gt;にリダイレクトされ、ダッシュボード画面が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150114/20150114195434.jpg&quot; alt=&quot;f:id:nipe880324:20150114195434j:plain:w480&quot; title=&quot;f:id:nipe880324:20150114195434j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;そして、todoリストのリンクをクリックすると、&lt;code&gt;http://localhost:30000/todo_lists/:id&lt;/code&gt;に遷移し、Todoリスト画面が表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150114/20150114195446.jpg&quot; alt=&quot;f:id:nipe880324:20150114195446j:plain:w480&quot; title=&quot;f:id:nipe880324:20150114195446j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;下にある「戻る」ボタンを押せば、ダッシュボード画面に戻れます。&lt;br /&gt;
この間、画面のリロードは行われていないので、シングルページで実装できました。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-ng-route-kwsk&quot;&gt;ng-routeとRailsの処理の流れを詳しく&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;上記でダッシュボード画面、Todoリスト画面と画面遷移を確認できましたので、これが裏側でどうなっているかを詳しく流れを追ってみます。&lt;br /&gt;
まず、&lt;code&gt;config/routes.rb&lt;/code&gt;で&lt;code&gt;/, /dashboard, /todo_list/:id&lt;/code&gt;といったこのアプリで使うURLほとんどのURLを&lt;code&gt;tempaltes/index.html.erb&lt;/code&gt;に遷移するようにしています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;

root &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;templates#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/dashboard&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;      =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;templates#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/todo_lists/:id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;templates#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/templates/:path.html&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;templates#template&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;constraints&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;path&lt;/span&gt;: /.+/ }
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;/&lt;/code&gt;にアクセスすると、&lt;code&gt;templates#index.html.erb&lt;/code&gt;が表示されます。&lt;br /&gt;
ここには、&lt;code&gt;ng-view&lt;/code&gt;ディレクティブが記載されていて、これは、&lt;code&gt;$routeProvider&lt;/code&gt;で設定したルートに合わせた画面を表示します(templateToで指定したhtmlファイルを表示したり、redirectToで指定したURLにリダイレクトする)&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-view&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;/&lt;/code&gt;の場合は、&lt;code&gt;/dashboard&lt;/code&gt;にリダイレクトされると記載されているので、自動的に&lt;code&gt;/dashboard&lt;/code&gt;にリダイレクトされます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;# app/assets/javascripts/app.coffee

app.config ($routeProvider, $locationProvider) -&amp;gt;
  $locationProvider.html5Mode &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  $routeProvider.when &lt;span class=&quot;synConstant&quot;&gt;&#39;/&#39;&lt;/span&gt;,                    redirectTo:  &lt;span class=&quot;synConstant&quot;&gt;&#39;/dashboard&#39;&lt;/span&gt;
  $routeProvider.when &lt;span class=&quot;synConstant&quot;&gt;&#39;/dashboard&#39;&lt;/span&gt;,           templateUrl: &lt;span class=&quot;synConstant&quot;&gt;&#39;/templates/dashboard.html&#39;&lt;/span&gt;, controller: &lt;span class=&quot;synConstant&quot;&gt;&#39;DashboardCtrl&#39;&lt;/span&gt;
  $routeProvider.when &lt;span class=&quot;synConstant&quot;&gt;&#39;/todo_lists/:list_id&#39;&lt;/span&gt;, templateUrl: &lt;span class=&quot;synConstant&quot;&gt;&#39;/templates/todo_list.html&#39;&lt;/span&gt;, controller: &lt;span class=&quot;synConstant&quot;&gt;&#39;TodoListCtrl&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
すると、&lt;code&gt;config/routes.rb&lt;/code&gt;により、また、&lt;code&gt;templates#index.html.erb&lt;/code&gt;が表示されます。&lt;br /&gt;
その中の&lt;code&gt;ng-view&lt;/code&gt;と&lt;code&gt;$routeProvider&lt;/code&gt;の設定により、AngularJSは&lt;code&gt;/templates/dashboard.html&lt;/code&gt;を表示しようとします。&lt;/p&gt;&lt;p&gt;ここで、&lt;code&gt;config/routes.rb&lt;/code&gt;に記載して、次のルートとコントローラーによりより、&lt;code&gt;dashboard.html.erb&lt;/code&gt;が画面に表示されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/templates/:path.html&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;templates#template&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;constraints&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;path&lt;/span&gt;: /.+/ }

&lt;span class=&quot;synComment&quot;&gt;# app/controllers/templates_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;template&lt;/span&gt;
  render &lt;span class=&quot;synConstant&quot;&gt;template&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;templates/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;params[&lt;span class=&quot;synConstant&quot;&gt;:path&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;layout&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
というように、&lt;code&gt;ng-view&lt;/code&gt;と&lt;code&gt;$routeProvider&lt;/code&gt;の設定により基本的なシングルページのアクセスを行い、そこからのアクセスのために、Railsの&lt;code&gt;config/routes.rb&lt;/code&gt;でルートを通しておくという流れになると思います。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;&lt;p&gt;本連載で、RailsにAngularJSをインストールする箇所から、Controller、Service、ルーティングとAngularJSの機能を一通り使ってきました。&lt;br /&gt;
また、filter, directiveの作成というところはやっていませんが、RailsとAngularJSをどう使ったら良いかというのが少しでもわかっていただけたら幸いです。&lt;/p&gt;&lt;p&gt;他にも良く使うディレクティブがありますので、リファレンスなどを眺めて便利な機能を確認すると良いと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://js.studio-kingdom.com/angularjs&quot;&gt;AngularJS 1.2 &amp;#x65E5;&amp;#x672C;&amp;#x8A9E;&amp;#x30EA;&amp;#x30D5;&amp;#x30A1;&amp;#x30EC;&amp;#x30F3;&amp;#x30B9; | js STUDIO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS &amp;mdash; Superheroic JavaScript MVW Framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 20 Jan 2015 22:44:31 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450080235956</guid>
          
            <category>Rails中級</category>
          
            <category>AngularJS</category>
          
            <category>連載</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでAngularJSを使ってTodoアプリを作成 - 4. ngResource + Rails API化</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150119/1421666497</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112194806.png&quot; alt=&quot;f:id:nipe880324:20150112194806p:plain&quot; title=&quot;f:id:nipe880324:20150112194806p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;「RailsでAngularJSを使ってTodoアプリを作成」の連載４回目です。&lt;br /&gt;
前回はAngularJSのコントローラーを作成することで、タスクの追加、削除、完了をしました。&lt;/p&gt;&lt;p&gt;今回は、RailsでAPIを作成します。(モデルやコントローラーなどの作成)&lt;br /&gt;
そして、AngularJSの&lt;code&gt;ngResource&lt;/code&gt;を使い、そのAPIにアクセスし、Todoリストを作成/更新/削除を永続化できるようにします。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt; * 連載記事一覧&lt;/p&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150114/20150114203508.jpg&quot; alt=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; title=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;https://rails42-with-angularjs13.herokuapp.com&quot; target=&quot;_blank&quot;&gt;Demo - Todoアプリケーション&lt;/a&gt;&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150114/1421235346&quot;&gt;1. AngularJSのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150115/1421316461&quot;&gt;2. UI Bootstrapのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150116/1421407124&quot;&gt;3. AngularJSのコントローラーの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4. ngResource + RailsでAPI作成&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150120/1421761471&quot;&gt;5. ngRouteでシングルページにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150122/1421904614&quot;&gt;6. AngularJS + Ransackで検索機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150123/1422016597&quot; target=&quot;_blank&quot;&gt;7. AngularJS + Kaminariでページネーション機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150126/1422276839&quot;&gt;8. AngularJSで編集可能(Editable)なフィールドを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150127/1422357163&quot;&gt;9. AngularJS + Railsでソート可能(Sortable)なリストを作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails        4.2.0&lt;/li&gt;
&lt;li&gt;AngularJS    1.3.8&lt;/li&gt;
&lt;li&gt;Bootstrap    3.3.1&lt;/li&gt;
&lt;li&gt;UI Bootstrap 0.12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;#rails-with-angularjs-api&quot;&gt;1. RailsでTodoリストのAPIを作成する&lt;/a&gt;&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#rails-with-angularjs-api-model&quot;&gt;1.1. モデルの追加&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#rails-with-angularjs-api-route&quot;&gt;1.2. ルーティングの追加&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#rails-with-angularjs-api-todo_list&quot;&gt;1.3. TodoListの名前とTodoの一覧取得API&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#rails-with-angularjs-api-todo&quot;&gt;1.4. Todoの追加/更新/削除API&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;#rails-with-angularjs-ng-route&quot;&gt;2. AngularJSからAPIにアクセスする&lt;/a&gt;&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#rails-with-angularjs-ng-route-install&quot;&gt;2.1. ng-resourceのインストール&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#rails-with-angularjs-ng-route-service&quot;&gt;2.2. RailsのAPIにアクセスするサービスクラス(factory)の作成&lt;/a&gt;&lt;/h5&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#rails-with-angularjs-ng-route-controller&quot;&gt;2.3. AngularJSのコントローラーからServiceクラスを使う&lt;/a&gt;&lt;/h5&gt;
    &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-api&quot;&gt;1. RailsでTodoリストのAPIを作成する&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;まずTodoリストのAPIで必要となる機能を洗い出します。&lt;/p&gt;&lt;p&gt;&lt;tabel&gt;&lt;br /&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;概要&lt;/th&gt;&lt;th&gt;API URL&lt;/th&gt;&lt;th&gt;Railsのコントローラー名#アクション名&lt;/th&gt;&lt;th&gt;対応するAngularJSのメソッド&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;&lt;br /&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TodoListの名前とTodoの一覧取得API&lt;/td&gt;&lt;td&gt;GET /api/todo_lists/:id&lt;/td&gt;&lt;td&gt;TodoLists#show&lt;/td&gt;&lt;th&gt;init()&lt;/th&gt;
      &lt;td&gt;Todoの追加API&lt;/td&gt;&lt;td&gt;POST /api/todo_lists/:todo_list_id/todos&lt;/td&gt;&lt;td&gt;Todos#create&lt;/td&gt;&lt;th&gt;addTodo(todoDescription)&lt;/th&gt;
      &lt;td&gt;Todoの削除API&lt;/td&gt;&lt;td&gt;DELETE /api/todo_lists/:todo_list_id/todo/:id&lt;/td&gt;&lt;td&gt;Todos#destroy&lt;/td&gt;&lt;th&gt;deleteTodo(todo)&lt;/th&gt;
      &lt;td&gt;Todoの更新API(completedなどを更新)&lt;/td&gt;&lt;td&gt;PATCH /api/todo_lists/:todo_list_id/todo/:id&lt;/td&gt;&lt;td&gt;Todos#update&lt;/td&gt;&lt;th&gt;toggleTodo(todo)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;&lt;br /&gt;
&lt;/tabel&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;toggleTodo&lt;/code&gt;メソッド以外は、第3回目で作ったメソッドと対応しています。後ほど、&lt;code&gt;toggleTodo&lt;/code&gt;は作成します。&lt;/p&gt;&lt;p&gt;では、これらを実装していきます。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-api-model&quot;&gt;1.1. モデルの追加&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;では、TodoListモデルとTodoモデルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g model TodoList name
bin/rails g model Todo todo_list_id:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; description completed:boolean
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
NOT NULL制約とデフォルト値を設定してきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/yyyymmddhhMMss_create_todo_lists.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateTodoLists&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:todo_lists&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.string &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;null&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# NOT NULL制約を追加&lt;/span&gt;

      t.timestamps &lt;span class=&quot;synConstant&quot;&gt;null&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# db/migrate/yyyymmddhhMMss_create_todos.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateTodos&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:todos&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.integer &lt;span class=&quot;synConstant&quot;&gt;:todo_list_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;null&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# NOT NULL制約を追加&lt;/span&gt;
      t.string &lt;span class=&quot;synConstant&quot;&gt;:description&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;null&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# NOT NULL制約を追加&lt;/span&gt;
      t.boolean &lt;span class=&quot;synConstant&quot;&gt;:completed&lt;/span&gt;,    &lt;span class=&quot;synConstant&quot;&gt;null&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# NOT NULL制約とデフォルト値を追加&lt;/span&gt;

      t.timestamps &lt;span class=&quot;synConstant&quot;&gt;null&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
マイグレートを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、モデルファイルに「&lt;b&gt;リレーション&lt;/b&gt;」と「&lt;b&gt;バリデーション&lt;/b&gt;」を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/todo_list.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Todoの作成日の新しい順に取得する&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:todos&lt;/span&gt;, -&amp;gt; { order &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at DESC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }, &lt;span class=&quot;synConstant&quot;&gt;dependent&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;

  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# app/models/todo.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Todo&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:todo_list&lt;/span&gt;

  validates &lt;span class=&quot;synConstant&quot;&gt;:todo_list_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:description&lt;/span&gt;,  &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;length&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;maximum&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;255&lt;/span&gt; }
  validates &lt;span class=&quot;synConstant&quot;&gt;:completed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;inclusion&lt;/span&gt;: { &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;] }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-api-route&quot;&gt;1.2. ルーティングの追加&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;APIのルーティングを追加します。&lt;br /&gt;
APIなので、ネームスペースに&lt;code&gt;api&lt;/code&gt;にし、デフォルトのフォーマットも&lt;code&gt;json&lt;/code&gt;を指定しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/rouets.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.routes.draw &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;templates/index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

  namespace &lt;span class=&quot;synConstant&quot;&gt;:api&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;defaults&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:json&lt;/span&gt; } &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    resources &lt;span class=&quot;synConstant&quot;&gt;:todo_lists&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;only&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      resources &lt;span class=&quot;synConstant&quot;&gt;:todos&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;except&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;]
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
上記の設定で作成されたルートを&lt;code&gt;bin/rake routes&lt;/code&gt;で確認します。&lt;br /&gt;
&lt;code&gt;/api/&lt;/code&gt;配下のURIパターンになっていることが確認できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ bin/rake routes
             Prefix Verb   URI Pattern                                       Controller#Action
    templates_index GET    /templates/index&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.:format&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;                        templates#index
api_todo_list_todos POST   /api/todo_lists/:todo_list_id/todos&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.:format&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;     api/todos#create &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;=&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:json&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
 api_todo_list_todo PATCH  /api/todo_lists/:todo_list_id/todos/:id&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.:format&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; api/todos#update &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;=&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:json&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
                    PUT    /api/todo_lists/:todo_list_id/todos/:id&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.:format&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; api/todos#update &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;=&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:json&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
                    DELETE /api/todo_lists/:todo_list_id/todos/:id&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.:format&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; api/todos#destroy &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;=&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:json&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
      api_todo_list GET    v&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.:format&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;                     api/todo_lists#show &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;=&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:json&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-api-todo_list&quot;&gt;1.3. TodoListの名前とTodoの一覧取得API&lt;/h3&gt;&lt;code&gt;Api::TodoListsController&lt;/code&gt;の&lt;code&gt;show&lt;/code&gt;アクションを作成します。&lt;br /&gt;
&lt;i&gt;ファイルの配置場所は&lt;code&gt;api&lt;/code&gt;ディレクトリ配下であること、コントローラーのソースは&lt;code&gt;module Api&lt;/code&gt;内であることに注意してください。&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/todo_lists_controller.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# &lt;/span&gt;&lt;span class=&quot;synTodo&quot;&gt;NOTE&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt; 本来はApi::BaseControllerのようなAPIの共通コントローラーを継承すべき&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TodoListsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に&lt;a href=&quot;https://github.com/rails/jbuilder&quot; target=&quot;_blank&quot;&gt;jbuilder&lt;/a&gt;を使ってshowアクションのJSONを実装します。&lt;br /&gt;
JSONの階層構造は、次のように&lt;code&gt;list&lt;/code&gt;に代入する値を返す必要があります。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$scope.init = -&amp;gt;
  $scope.list = &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;&#39;name&#39;&lt;/span&gt;  : &lt;span class=&quot;synConstant&quot;&gt;&#39;Todoリスト1&#39;&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;&#39;todos&#39;&lt;/span&gt; : &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&#39;description&#39;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&#39;todo description1&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;completed&#39;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&#39;description&#39;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;&#39;todo description2&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;completed&#39;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;app/views/api/todo_lists/show.json.jbuilder&lt;/code&gt;を作成し、下記を追加してください。(idだけ新たに追加しています)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;json.name  &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.name
json.todos &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.todos &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;todo&lt;/span&gt;|
  json.id          todo.id
  json.description todo.description
  json.completed   todo.completed
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、テストのために、&lt;code&gt;bin/rails c&lt;/code&gt;でTodoListとTodoを1つずつ作成しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ bin/rails c
&amp;gt; &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;.create &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;first todo list&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# id: 1&lt;/span&gt;
&amp;gt; &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;.first.todos.create &lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todo desc 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;completed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
サーバーを再起動し、&lt;code&gt;localhost:3000/api/todo_lists/1&lt;/code&gt;にアクセスすると次のようにJSONを取得できます。（initメソッドで定義しているデータと同じ階層構造）&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150113/20150113213057.jpg&quot; alt=&quot;f:id:nipe880324:20150113213057j:plain:w480&quot; title=&quot;f:id:nipe880324:20150113213057j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-api-todo&quot;&gt;1.4. Todoの追加/更新/削除API&lt;/h3&gt;&lt;code&gt;TodoListsContoller&lt;/code&gt;と同じように、&lt;code&gt;TodosController&lt;/code&gt;を作成します。&lt;br /&gt;
Todosコントローラーには、Todoの追加/更新/削除を行うために、&lt;code&gt;create / update / destroy&lt;/code&gt;メソッドを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/todos_controller.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TodosController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:todo_list_id&lt;/span&gt;])
      todo = &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.todos.create!(todo_params)
      render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: todo, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;201&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;update&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:todo_list_id&lt;/span&gt;])
      todo = &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.todos.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
      todo.update!(todo_params)
      render &lt;span class=&quot;synConstant&quot;&gt;nothing&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;204&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;destroy&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:todo_list_id&lt;/span&gt;])
      todo = &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.todos.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
      todo.destroy
      render &lt;span class=&quot;synConstant&quot;&gt;nothing&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;204&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;safe_params&lt;/span&gt;
      params.require(&lt;span class=&quot;synConstant&quot;&gt;:todo&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:description&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:completed&lt;/span&gt;)
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;重複しているコードがあるので、リファクタリングをします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TodosController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
    before_action &lt;span class=&quot;synConstant&quot;&gt;:set_todo_list&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
      todo = &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.todos.create!(todo_params)
      render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: todo, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;201&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;update&lt;/span&gt;
      todo.update!(todo_params)
      render &lt;span class=&quot;synConstant&quot;&gt;nothing&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;204&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;destroy&lt;/span&gt;
      todo.destroy
      render &lt;span class=&quot;synConstant&quot;&gt;nothing&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;204&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_todo_list&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:todo_list_id&lt;/span&gt;])
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;todo&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@todo&lt;/span&gt; = &lt;span class=&quot;synIdentifier&quot;&gt;@todo_list&lt;/span&gt;.todos.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;todo_params&lt;/span&gt;
      params.require(&lt;span class=&quot;synConstant&quot;&gt;:todo&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:description&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:completed&lt;/span&gt;)
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで一通りAPIが実装できました。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-ng-route&quot;&gt;2. AngularJSからAPIにアクセスする&lt;/h3&gt;では、今作成したRailsのAPIにAngularJSからアクセスするようにします。&lt;br /&gt;
&lt;code&gt;angular-resource&lt;/code&gt;というモジュールを使うことで、AngularJSから比較的簡単にAPIにアクセスすることが可能になります。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-ng-route-install&quot;&gt;2.1. ng-resourceのインストール&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://angularjs.org/&quot; target=&quot;_blank&quot;&gt;AngularJS 公式ページ&lt;/a&gt;から以下の２つのファイルをダウンロードし、&lt;code&gt;vendor/assets/javascripts/&lt;/code&gt;配下に配置します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;angular-resource.min.js&lt;/li&gt;
&lt;li&gt;angular-resource.min.js.map&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;curl https://ajax.googleapis.com/ajax/libs/angularjs/1.3.8/angular-resource.min.js &lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; vendor/assets/javascripts/angular-resource.min.js
curl https://ajax.googleapis.com/ajax/libs/angularjs/1.3.8/angular-resource.min.js.map &lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; vendor/assets/javascripts/angular-resource.min.js.map
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、&lt;code&gt;application.js&lt;/code&gt;の&lt;code&gt;angular.min&lt;/code&gt;の後に、下記&lt;code&gt;angular-resource.min&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;# app/assets/javascripts/application.js

&lt;span class=&quot;synComment&quot;&gt;//= require angular-resource.min&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;sampleApp&lt;/code&gt;の依存関係に&lt;code&gt;ngResource&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;# app/assets/javascripts/app.coffee

# AngularJSの設定ファイル
# 依存ライブラリを記述する
app = angular.module(&lt;span class=&quot;synConstant&quot;&gt;&#39;sampleApp&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;ui.bootstrap&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;&#39;ngResource&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;)

...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、&lt;code&gt;http://localhost:3000/templates/index&lt;/code&gt;を開き、JavaScriptコンソールでエラーメッセージが発生していないか確認してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-ng-route-service&quot;&gt;2.2. RailsのAPIにアクセスするサービスクラス(factory)の作成&lt;/h3&gt;RailsのTodoListとTodoのAPIにアクセスするサービスクラスを作成します。&lt;br /&gt;
サービスクラスの作り方には3種類ほどあり、今回はその中の1つのfactoryメソッドを使って作ります。&lt;/p&gt;&lt;p&gt;サービスクラスは、&lt;code&gt;app/assets/javascripts/services/&lt;/code&gt;配下に作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;mkdir&lt;/span&gt; app/assets/javascripts/services
&lt;span class=&quot;synStatement&quot;&gt;touch&lt;/span&gt; app/assets/javascripts/services/TodoListService.coffee
&lt;span class=&quot;synStatement&quot;&gt;touch&lt;/span&gt; app/assets/javascripts/services/TodoService.coffee
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
まずは、TodoListクラス(TodoListのAPIにアクセスするサービスクラス)を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/services/TodoListService.coffee&lt;/span&gt;

angular.module(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sampleApp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).factory &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TodoList&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, (&lt;span class=&quot;synIdentifier&quot;&gt;$resource&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;$http&lt;/span&gt;) -&amp;gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;constructor&lt;/span&gt;: (errorHandler) -&amp;gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@service&lt;/span&gt; = &lt;span class=&quot;synIdentifier&quot;&gt;$resource&lt;/span&gt;(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/api/todo_lists/:id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
        { &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;@id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; },
        { &lt;span class=&quot;synConstant&quot;&gt;update&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;PUT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }})
      &lt;span class=&quot;synIdentifier&quot;&gt;@errorHandler&lt;/span&gt; = errorHandler

    &lt;span class=&quot;synConstant&quot;&gt;find&lt;/span&gt;: (id, successHandler) -&amp;gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@service&lt;/span&gt;.get(&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: id, ((list)-&amp;gt;
        successHandler?(list)
        list),
        &lt;span class=&quot;synIdentifier&quot;&gt;@@errorHandler&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、Todoクラス（TodoのAPIにアクセスするサービスクラス）を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/services/TodoService.coffee&lt;/span&gt;

angular.module(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sampleApp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).factory &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, (&lt;span class=&quot;synIdentifier&quot;&gt;$resource&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;$http&lt;/span&gt;) -&amp;gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Todo&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;constructor&lt;/span&gt;: (todoListId, errorHandler) -&amp;gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@service&lt;/span&gt; = &lt;span class=&quot;synIdentifier&quot;&gt;$resource&lt;/span&gt;(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/api/todo_lists/:todo_list_id/todos/:id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
        { &lt;span class=&quot;synConstant&quot;&gt;todo_list_id&lt;/span&gt;: todoListId },
        { &lt;span class=&quot;synConstant&quot;&gt;update&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;PUT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }})
      &lt;span class=&quot;synIdentifier&quot;&gt;@errorHandler&lt;/span&gt; = errorHandler

    &lt;span class=&quot;synConstant&quot;&gt;create&lt;/span&gt;: (attrs) -&amp;gt;
      new &lt;span class=&quot;synIdentifier&quot;&gt;@service&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;todo&lt;/span&gt;: attrs).&lt;span class=&quot;synIdentifier&quot;&gt;$save&lt;/span&gt; ((todo) -&amp;gt; attrs.id = todo.id), &lt;span class=&quot;synIdentifier&quot;&gt;@errorHandler&lt;/span&gt;
      attrs

    &lt;span class=&quot;synConstant&quot;&gt;delete&lt;/span&gt;: (todo) -&amp;gt;
      new &lt;span class=&quot;synIdentifier&quot;&gt;@service&lt;/span&gt;().&lt;span class=&quot;synIdentifier&quot;&gt;$delete&lt;/span&gt; { &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: todo.id }, (-&amp;gt; null), &lt;span class=&quot;synIdentifier&quot;&gt;@errorHandler&lt;/span&gt;

    &lt;span class=&quot;synConstant&quot;&gt;update&lt;/span&gt;: (todo, attrs) -&amp;gt;
      new &lt;span class=&quot;synIdentifier&quot;&gt;@service&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;todo&lt;/span&gt;: attrs).&lt;span class=&quot;synIdentifier&quot;&gt;$update&lt;/span&gt; {&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: todo.id}, (-&amp;gt; null), &lt;span class=&quot;synIdentifier&quot;&gt;@errorHandler&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;ngResouce&lt;/code&gt;モジュールをインクルードすると、&lt;code&gt;$resouce&lt;/code&gt;メソッドが使えるようになります。&lt;br /&gt;
&lt;code&gt;$resouce&lt;/code&gt;にはURLを指定します。すると、メソッドの返り値では、次のメソッドが使えます。各メソッドを呼ぶと、&lt;code&gt;$resouce&lt;/code&gt;で指定したURLを元にしたRESTfulなHTTPメソッドとURLでアクセスしてくれます。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&#39;get&#39;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;method:&lt;span class=&quot;synConstant&quot;&gt;&#39;GET&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,   &lt;span class=&quot;synComment&quot;&gt;// Railsのshow&lt;/span&gt;
 &lt;span class=&quot;synConstant&quot;&gt;&#39;save&#39;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;method:&lt;span class=&quot;synConstant&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;,  &lt;span class=&quot;synComment&quot;&gt;// Railsのcreate&lt;/span&gt;
 &lt;span class=&quot;synConstant&quot;&gt;&#39;query&#39;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;method:&lt;span class=&quot;synConstant&quot;&gt;&#39;GET&#39;&lt;/span&gt;, isArray:&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;synComment&quot;&gt;// Railsのindex&lt;/span&gt;
 &lt;span class=&quot;synConstant&quot;&gt;&#39;remove&#39;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;method:&lt;span class=&quot;synConstant&quot;&gt;&#39;DELETE&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;synComment&quot;&gt;// Railsのdelete&lt;/span&gt;
 &lt;span class=&quot;synConstant&quot;&gt;&#39;delete&#39;&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;method:&lt;span class=&quot;synConstant&quot;&gt;&#39;DELETE&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;; &lt;span class=&quot;synComment&quot;&gt;// Railsのdelete&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// Railsのupdateに対応するメソッドは定義されていないので、&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// $resouceの第3引数に次のようにしていることで使えるようになる。&lt;/span&gt;
 &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; update: &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; method: &lt;span class=&quot;synConstant&quot;&gt;&#39;PUT&#39;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;}}&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
詳細については、&lt;a href=&quot;http://js.studio-kingdom.com/angularjs/ngresource_service/$resource&quot; target=&quot;_blank&quot;&gt;ng-resource v1.2 - 公式ドキュメント(日本語)&lt;/a&gt;を参照ください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-ng-route-controller&quot;&gt;2.3. AngularJSのコントローラーからServiceクラスを使う&lt;/h3&gt;まずは、&lt;code&gt;init&lt;/code&gt;メソッドを修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# コントローラーを定義する。今はこのように記載すると覚えておけば良い。&lt;/span&gt;
angular.module(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sampleApp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).controller &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TodoListCtrl&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Todo&lt;/span&gt;) -&amp;gt;

  &lt;span class=&quot;synComment&quot;&gt;# 初期データを用意するメソッド&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.init = -&amp;gt;
    &lt;span class=&quot;synComment&quot;&gt;# TodoListとTodoのサービスオブジェクトを作成&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# &lt;/span&gt;&lt;span class=&quot;synTodo&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt; todo_listのidを動的に取得する(次の連載記事で対処)&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@todoListService&lt;/span&gt; = new TodoList()
    &lt;span class=&quot;synIdentifier&quot;&gt;@todoService&lt;/span&gt;     = new Todo(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
    &lt;span class=&quot;synComment&quot;&gt;# データを取得する(GET /api/todo_lists/:id =&amp;gt; Api::TodoLists#show)&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list = &lt;span class=&quot;synIdentifier&quot;&gt;@todoListService&lt;/span&gt;.find(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)

  ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
一番上の行の&lt;code&gt;TodoListCtrl&lt;/code&gt;のmodule定義の、依存するモジュールを記載する箇所に&lt;code&gt;TodoList&lt;/code&gt;と&lt;code&gt;Todo&lt;/code&gt;を追加します。&lt;br /&gt;
そして、&lt;code&gt;init&lt;/code&gt;メソッド内で、サービスオブジェクトを作成し、サーバーからデータを取得しています。&lt;/p&gt;&lt;p&gt;では、動作を確認してみましょう。&lt;br /&gt;
&lt;code&gt;rails c&lt;/code&gt;で作成したデータが表示されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150113/20150113213217.jpg&quot; alt=&quot;f:id:nipe880324:20150113213217j:plain:w480&quot; title=&quot;f:id:nipe880324:20150113213217j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;他のメソッドも修正する前に、エラーハンドラを追加しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# コントローラーを定義する。今はこのように記載すると覚えておけば良い。&lt;/span&gt;
angular.module(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sampleApp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).controller &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TodoListCtrl&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Todo&lt;/span&gt;) -&amp;gt;

  &lt;span class=&quot;synComment&quot;&gt;# 初期データを用意するメソッド&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.init = -&amp;gt;
    &lt;span class=&quot;synComment&quot;&gt;# Todoサービスクラスを作成&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# &lt;/span&gt;&lt;span class=&quot;synTodo&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt; todo_listのidを動的に取得する&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@todoListService&lt;/span&gt; = new TodoList(serverErrorHandler)
    &lt;span class=&quot;synIdentifier&quot;&gt;@todoService&lt;/span&gt;     = new Todo(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, serverErrorHandler)
    ...

  ...

  serverErrorHandler = -&amp;gt;
    alert(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;サーバーでエラーが発生しました。画面を更新し、もう一度試してください。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
このエラーハンドラは、サービスクラス内で呼ばれており、サーバーへのアクセスが失敗した時に、アラートを表示するようにしています。&lt;br /&gt;
[&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150113/20150113213314.jpg&quot; alt=&quot;f:id:nipe880324:20150113213314j:plain&quot; title=&quot;f:id:nipe880324:20150113213314j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;:380]&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;code&gt;addTodo&lt;/code&gt;と&lt;code&gt;deleteTodo&lt;/code&gt;メソッドを修正します。&lt;br /&gt;
修正箇所はサービスオブジェクトを使って、サーバーにもアクセスするようにしただけです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# コントローラーを定義する。今はこのように記載すると覚えておけば良い。&lt;/span&gt;
angular.module(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sampleApp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).controller &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TodoListCtrl&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Todo&lt;/span&gt;) -&amp;gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.init = -&amp;gt;
    ...

  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.addTodo = (todoDescription) -&amp;gt;
    &lt;span class=&quot;synComment&quot;&gt;# todoを追加する(POST /api/todo_lists/:todo_lsit_id/todos =&amp;gt; Api::Todo#destroy)&lt;/span&gt;
    todo = &lt;span class=&quot;synIdentifier&quot;&gt;@todoService&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;: todoDescription, &lt;span class=&quot;synConstant&quot;&gt;completed&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
    &lt;span class=&quot;synComment&quot;&gt;# initメソッドで用意したtodosの一番最初にtodoを追加する&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list.todos.unshift(todo)
    &lt;span class=&quot;synComment&quot;&gt;# todo入力テキストフィールドを空にする&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.todoDescription = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;


  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.deleteTodo = (todo) -&amp;gt;
    &lt;span class=&quot;synComment&quot;&gt;# todoをサーバーから削除する(DELETE /api/todo_lists/todo_list_id/todos/:id =&amp;gt; Api::Todo#destroy)&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@todoService&lt;/span&gt;.delete(todo)
    &lt;span class=&quot;synComment&quot;&gt;# todoをangularjsのlistデータから削除する(indexOfメソッドでtodoのindexを探し、spliceメソッドで削除する)&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list.todos.splice(&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list.todos.indexOf(todo), &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)

  ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、動作確認をしてみましょう。&lt;br /&gt;
Todoの追加やTodoの削除ができると思います。&lt;br /&gt;
また、画面を更新しても、表示され続けています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;最後に、Todoを完了にさせます。&lt;br /&gt;
チェックボタンをクリックした時に、&lt;code&gt;toggleTodo&lt;/code&gt;メソッドを呼ぶように、&lt;code&gt;ng-click&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/index.html.erb --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo-completed&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-model=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo.completed&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-click=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;toggleTodo(todo)&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;コントローラー内で&lt;code&gt;toggleTodo&lt;/code&gt;を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;

angular.module(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sampleApp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).controller &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TodoListCtrl&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;TodoList&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Todo&lt;/span&gt;) -&amp;gt;

  ...

  &lt;span class=&quot;synComment&quot;&gt;# todoの完了カラムをON/OFFするメソッド&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.toggleTodo = (todo) -&amp;gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@todoService&lt;/span&gt;.update(todo, &lt;span class=&quot;synConstant&quot;&gt;completed&lt;/span&gt;: todo.completed)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで、完了のON/OFFも永続化されるようになりました。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150113/20150113213353.jpg&quot; alt=&quot;f:id:nipe880324:20150113213353j:plain:w480&quot; title=&quot;f:id:nipe880324:20150113213353j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;今回は、RailsのAPIを作成、AngularJSでサービスクラスの作成と、コントローラーの修正をしたので長くなりました。&lt;br /&gt;
Rails with AngularJSのメインとなる山場なので是非ここは理解出来るようにしてください。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
          <pubDate>Mon, 19 Jan 2015 20:21:37 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450080150234</guid>
          
            <category>Rails中級</category>
          
            <category>AngularJS</category>
          
            <category>連載</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでAngularJSを使ってTodoアプリを作成 - 3. AngularJSのコントローラーの作成</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150116/1421407124</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112194806.png&quot; alt=&quot;f:id:nipe880324:20150112194806p:plain&quot; title=&quot;f:id:nipe880324:20150112194806p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;「RailsでAngularJSを使ってTodoアプリを作成」の連載３回目です。&lt;br /&gt;
前回までは、RailsにAngularJSを導入したり、UI Bootstrapの導入を行いました。&lt;/p&gt;&lt;p&gt;これから本格的にTodoアプリを作っていきます。&lt;br /&gt;
今回は、AngularJSのコントローラーを作成することで、Todoの追加、削除、完了機能を作成します。&lt;br /&gt;
&lt;i&gt;（データの永続化はRailsのAPIと連携する必要があるので、第４回目で説明します）&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt; * 連載記事一覧&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150114/20150114203508.jpg&quot; alt=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; title=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;https://rails42-with-angularjs13.herokuapp.com&quot; target=&quot;_blank&quot;&gt;Demo - Todoアプリケーション&lt;/a&gt;&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150114/1421235346&quot;&gt;1. AngularJSのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150115/1421316461&quot;&gt;2. UI Bootstrapのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3. AngularJSのコントローラーの作成&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150119/1421666497&quot;&gt;4. ngResource + RailsでAPI作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150120/1421761471&quot;&gt;5. ngRouteでシングルページにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150122/1421904614&quot;&gt;6. AngularJS + Ransackで検索機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150123/1422016597&quot; target=&quot;_blank&quot;&gt;7. AngularJS + Kaminariでページネーション機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150126/1422276839&quot;&gt;8. AngularJSで編集可能(Editable)なフィールドを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150127/1422357163&quot;&gt;9. AngularJS + Railsでソート可能(Sortable)なリストを作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails        4.2.0&lt;/li&gt;
&lt;li&gt;AngularJS    1.3.8&lt;/li&gt;
&lt;li&gt;Bootstrap    3.3.1&lt;/li&gt;
&lt;li&gt;UI Bootstrap 0.12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-controller-html&quot;&gt;Todoリストの雛形を作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-controller-controller&quot;&gt;AngularJSのコントローラーの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-controller-add_todo&quot;&gt;Todoの追加機能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-controller-remove_todo&quot;&gt;Todoの削除機能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-controller-complete_todo&quot;&gt;Todoの完了機能&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-controller-html&quot;&gt;1. Todoリストの雛形を作成&lt;/h3&gt;では、まず、Todoリストの雛形となるHTMLを作成していきます。&lt;code&gt;index.html.erb&lt;/code&gt;をごそっと下記の内容と入れ替えます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-controller=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;TodoListCtrl&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-init=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;init()&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Todo リスト&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel panel-success&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;panel-heading&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;{{list.name}}&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;new_todo&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;input-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todoDescription&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-control input-lg&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; autofocus=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;autofocus&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;maxlength&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;255&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;btn btn-success btn-lg&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;追加&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group-item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-repeat=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo in list.todos&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo-completed&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo-description&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;{{todo.description}}&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo-buttons pull-right&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;btn btn-danger btn-xs pull-right&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;glyphicon glyphicon-ban-circle&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ng-controller&lt;/code&gt;ディレクティブは、AngularJSのコントローラーとHTML要素を紐づけることができます。ここでは、&lt;code&gt;TodoListCtrl&lt;/code&gt;とこのHTMLを紐付けています。&lt;br /&gt;
&lt;code&gt;ng-init&lt;/code&gt;は、ページがロードされたときに呼ばれます。TodoListCtrl内の&lt;code&gt;init()&lt;/code&gt;メソッドを呼ぶように設定しています。&lt;br /&gt;
&lt;code&gt;ng-repeta&lt;/code&gt;は、配列などを繰り返しすることができます。&lt;code&gt;li&lt;/code&gt;要素内を&lt;code&gt;list.todos&lt;/code&gt;分だけ繰り返し作成します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;デザインも追加しておきます。&lt;code&gt;app/assets/stylesheets/todo_list.sass&lt;/code&gt;を作成し、以下の内容をコピーします。&lt;/p&gt;
&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;#new_todo&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;.input-group&lt;/span&gt;
    width: 100%
    display: inline-flex

  &lt;span class=&quot;synIdentifier&quot;&gt;.form-control&lt;/span&gt;:&lt;span class=&quot;synPreProc&quot;&gt;focus&lt;/span&gt;
    z-index: 2

  &lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;type&lt;span class=&quot;synSpecial&quot;&gt;=&lt;/span&gt;text&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;
    height: auto
    border-radius: 0

  &lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;type&lt;span class=&quot;synSpecial&quot;&gt;=&lt;/span&gt;submit&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;
    width: 140px
    border-radius: 0

&lt;span class=&quot;synIdentifier&quot;&gt;.list-group-item&lt;/span&gt;
  width: 100%
  display: inline-flex

  &amp;amp;:&lt;span class=&quot;synPreProc&quot;&gt;first-child&lt;/span&gt;
    border-top-left-radius: 0
    border-top-right-radius: 0

  &amp;amp;&lt;span class=&quot;synIdentifier&quot;&gt;.completed&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;.todo-description&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;
      color: &lt;span class=&quot;synIdentifier&quot;&gt;#a9a9a9&lt;/span&gt;
      &lt;span class=&quot;synType&quot;&gt;text-decoration&lt;/span&gt;: line-through

  &lt;span class=&quot;synIdentifier&quot;&gt;.todo-completed&lt;/span&gt;
    display: inline-block
    &lt;span class=&quot;synType&quot;&gt;vertical-align&lt;/span&gt;: top
    margin-top: 7px

  &lt;span class=&quot;synIdentifier&quot;&gt;.todo-list-description&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;.todo-description&lt;/span&gt;
    width: 90%
    margin-left: 10px
    &lt;span class=&quot;synType&quot;&gt;line-height&lt;/span&gt;: 2&lt;span class=&quot;synSpecial&quot;&gt;.&lt;/span&gt;45em

  &lt;span class=&quot;synIdentifier&quot;&gt;.todo-list-buttons&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;.todo-buttons&lt;/span&gt;
    margin-top: 5px
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-controller-controller&quot;&gt;2. AngularJSのコントローラーの作成&lt;/h3&gt;次にAngularJSのコントローラーを作成します。&lt;br /&gt;
まず、&lt;code&gt;app/assets/javascripts/controllers&lt;/code&gt;というフォルダを作成します。&lt;br /&gt;
そして、&lt;code&gt;TodoListCtrl.coffee&lt;/code&gt;というファイルを作ります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# コントローラーを定義する。今はこのように記載すると覚えておけば良い。&lt;/span&gt;
angular.module(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sampleApp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).controller &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TodoListCtrl&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;) -&amp;gt;

  &lt;span class=&quot;synComment&quot;&gt;# 初期データを用意するメソッド&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# $scope.list.name  としてアクセスできる&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# $scope.list.todos としてアクセスできる&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.init = -&amp;gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list = {
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;  : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Todoリスト1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : [
        { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todo description1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;},
        { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todo description2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;}
      ]
    }
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、ここで画面を表示してみましょう。&lt;br /&gt;
&lt;code&gt;init&lt;/code&gt;メソッドで定義したTodoリスト名(list.name)とTodoの概要(list.todos[x].description)が表示されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112204901.jpg&quot; alt=&quot;f:id:nipe880324:20150112204901j:plain:w480&quot; title=&quot;f:id:nipe880324:20150112204901j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-controller-add_todo&quot;&gt;3. Todoの追加機能&lt;/h3&gt;では、この調子でコントローラーにメソッドを定義していきましょう。&lt;br /&gt;
テキストフィールドにTodo概要を入力し、「追加」ボタンを押すとTodoをリストに追加するようにします。&lt;/p&gt;&lt;p&gt;まず、Todo概要を&lt;code&gt;ng-model&lt;/code&gt;に紐付け、「追加」ボタンが押された時にTodoListCtrlのメソッドを呼び出すように&lt;code&gt;ng-submit&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/index.html.erb --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;new_todo&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-submit=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;addTodo(todoDescription)&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;input-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todoDescription&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-control input-lg&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; autofocus=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;autofocus&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;maxlength&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;255&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-model=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todoDescription&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;btn btn-success btn-lg&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;追加&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;ng-submit&lt;/code&gt;はフォームのサブミットボタン（今回は追加ボタン）が押された時に設定しているメソッドが呼び出されるAngularJSのディレクティブです。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;では、TodoListCtrlに&lt;code&gt;ng-submit&lt;/code&gt;によって呼ばれる&lt;code&gt;addTodo(todoDescription)&lt;/code&gt;を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;

angular.module(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sampleApp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).controller &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TodoListCtrl&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;) -&amp;gt;

  &lt;span class=&quot;synComment&quot;&gt;# 初期データを用意するメソッド&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# $scope.list.name  としてアクセスできる&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# $scope.list.todos としてアクセスできる&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.init = -&amp;gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list = {
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;  : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Todoリスト1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : [
        { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todo description1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;},
        { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todo description2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;}
      ]
    }


  &lt;span class=&quot;synComment&quot;&gt;# todoを追加する&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.addTodo = (todoDescription) -&amp;gt;
    &lt;span class=&quot;synComment&quot;&gt;# 新しいtodoを作成する&lt;/span&gt;
    todo = { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : todoDescription }

    &lt;span class=&quot;synComment&quot;&gt;# initメソッドで用意したtodosの一番最初にtodoを追加する&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list.todos.unshift(todo)

    &lt;span class=&quot;synComment&quot;&gt;# Todo入力テキストフィールドを空にする&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.todoDescription = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、Todoを追加できることを確認します。&lt;br /&gt;
テキストフィールドにTodo概要を入力します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112204858.jpg&quot; alt=&quot;f:id:nipe880324:20150112204858j:plain:w480&quot; title=&quot;f:id:nipe880324:20150112204858j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;そして、「追加」ボタンを押すと、リストにTodoが追加されました。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112204859.jpg&quot; alt=&quot;f:id:nipe880324:20150112204859j:plain:w480&quot; title=&quot;f:id:nipe880324:20150112204859j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-controller-remove_todo&quot;&gt;4. Todoの削除機能&lt;/h3&gt;今度は、Todoの削除を行います。&lt;br /&gt;
各Todoの右側の赤いボタンを押すとTodoを削除するようにします。&lt;br /&gt;
Todoの追加と同じで、HTMLにディレクティブを追加し、コントローラーにメソッドを追加していきます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;削除ボタン（各Todoの右側の赤いボタン）に&lt;code&gt;ng-click&lt;/code&gt;ディレクティブを追記します。&lt;br /&gt;
これは、&lt;code&gt;ng-submit&lt;/code&gt;のように、リンクやボタンを押した時に、設定したメソッドを呼び出します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/index.html.erb --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;btn btn-danger btn-xs pull-right&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-click=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;deleteTodo(todo)&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;glyphicon glyphicon-ban-circle&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、TodoListCtrlに&lt;code&gt;ng-click&lt;/code&gt;によって呼ばれる&lt;code&gt;deleteTodo(todo)&lt;/code&gt;を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;

angular.module(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sampleApp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).controller &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TodoListCtrl&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;) -&amp;gt;

  &lt;span class=&quot;synComment&quot;&gt;# 初期データを用意するメソッド&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.init = -&amp;gt;
    ...

  &lt;span class=&quot;synComment&quot;&gt;# todoを追加する&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.addTodo = (todoDescription) -&amp;gt;
    ...

  &lt;span class=&quot;synComment&quot;&gt;# todoを削除する&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.deleteTodo = (todo) -&amp;gt;
    &lt;span class=&quot;synComment&quot;&gt;# indexOfメソッドでtodoのindexを探し、spliceメソッドで削除する&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list.todos.splice(&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list.todos.indexOf(todo), &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、Todoを削除できることを確認します。&lt;br /&gt;
削除ボタンを押すとTodoが削除されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112204856.jpg&quot; alt=&quot;f:id:nipe880324:20150112204856j:plain:w480&quot; title=&quot;f:id:nipe880324:20150112204856j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-controller-complete_todo&quot;&gt;5. Todoの完了機能&lt;/h3&gt;次はTodoの完了機能を実装していきます。&lt;br /&gt;
Doneチェック(各Todoの左側のチェックボックス)をクリックすることでTodoの完了のON/OFF(表示が変わる)をできるようにします。&lt;/p&gt;&lt;p&gt;チェックボックスに&lt;code&gt;ng-model=&quot;todo.completed&quot;&lt;/code&gt;を追加し、&lt;code&gt;todo.completed&lt;/code&gt;の値とチェックのON/OFFが紐づくようにします。(ON = true, OFF = false)&lt;br /&gt;
そして、&lt;code&gt;ng-class=&quot;{completed: todo.completed}&quot;&lt;/code&gt;により、&lt;code&gt;todo.compled&lt;/code&gt;の値が&lt;code&gt;true&lt;/code&gt;の場合、&lt;code&gt;completed&lt;/code&gt;というclass属性が追加され、&lt;code&gt;false&lt;/code&gt;のときになくなります。&lt;br /&gt;
ちなみに、既に&lt;code&gt;completed&lt;/code&gt;というclass属性にTodoが完了したスタイリングをしています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/templates/index.html.erb --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;list-group-item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-repeat=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo in list.todos&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{completed: todo.completed}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo-completed&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-model=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;todo.completed&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、TodoListCtrlで作成しているTodoに&lt;code&gt;completed&lt;/code&gt;という属性を&lt;code&gt;false&lt;/code&gt;という値で追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/controllers/TodoListCtrl.coffee&lt;/span&gt;

angular.module(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sampleApp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).controller &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TodoListCtrl&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;) -&amp;gt;

  &lt;span class=&quot;synComment&quot;&gt;# 初期データを用意するメソッド&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.init = -&amp;gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.list = {
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;  : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Todoリスト1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : [
        { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todo description1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; },
        { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;todo description2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; }
      ]
    }

  &lt;span class=&quot;synIdentifier&quot;&gt;$scope&lt;/span&gt;.addTodo = (todoDescription) -&amp;gt;
    &lt;span class=&quot;synComment&quot;&gt;# todoを作成する&lt;/span&gt;
    todo = { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : todoDescription, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; }
    ...

  ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、Todoを完了できることを確認します。&lt;br /&gt;
チェックボックスを押すと、Todoが完了になります（スタイリングが変化します）&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112204855.jpg&quot; alt=&quot;f:id:nipe880324:20150112204855j:plain:w480&quot; title=&quot;f:id:nipe880324:20150112204855j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Fri, 16 Jan 2015 20:18:44 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450080047064</guid>
          
            <category>AngularJS</category>
          
            <category>Rails中級</category>
          
            <category>連載</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでAngularJSを使ってTodoアプリを作成 - 2. UI Bootstrapのインストール方法</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150115/1421316461</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112194806.png&quot; alt=&quot;f:id:nipe880324:20150112194806p:plain&quot; title=&quot;f:id:nipe880324:20150112194806p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;「RailsでAngularJSを使ってTodoアプリを作成」の連載２回目です。&lt;br /&gt;
Todoアプリを作成していく前に、&lt;a href=&quot;http://angular-ui.github.io/bootstrap/&quot; target=&quot;_blank&quot;&gt;AngularJS用のBootstrap(UI Bootstrap)&lt;/a&gt;を導入しましょう。&lt;/p&gt;&lt;p&gt;これを導入することで、タブ、モーダル、ページネーションなどの&lt;b&gt;Bootstrapが提供している機能がAngularJSで使いやすく&lt;/b&gt;なります。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt; * 連載記事一覧&lt;/p&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150114/20150114203508.jpg&quot; alt=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; title=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;https://rails42-with-angularjs13.herokuapp.com&quot; target=&quot;_blank&quot;&gt;Demo - Todoアプリケーション&lt;/a&gt;&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150114/1421235346&quot;&gt;1. AngularJSのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2. UI Bootstrapのインストール方法&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150116/1421407124&quot;&gt;3. AngularJSのコントローラーの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150119/1421666497&quot;&gt;4. ngResource + RailsでAPI作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150120/1421761471&quot;&gt;5. ngRouteでシングルページにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150122/1421904614&quot;&gt;6. AngularJS + Ransackで検索機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150123/1422016597&quot; target=&quot;_blank&quot;&gt;7. AngularJS + Kaminariでページネーション機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150126/1422276839&quot;&gt;8. AngularJSで編集可能(Editable)なフィールドを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150127/1422357163&quot;&gt;9. AngularJS + Railsでソート可能(Sortable)なリストを作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails        4.2.0&lt;/li&gt;
&lt;li&gt;AngularJS    1.3.8&lt;/li&gt;
&lt;li&gt;Bootstrap    3.3.1&lt;/li&gt;
&lt;li&gt;UI Bootstrap 0.12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-ui-bootstrap-install&quot;&gt;UI Bootstrap のインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-ui-bootstrap-test&quot;&gt;UI Bootstrap の動作確認&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-ui-bootstrap-install&quot;&gt;UI Bootstrap のインストール方法&lt;/h3&gt;UI Bootstrapを入れるためには、AngularJSとBootstrap CSSが必要です。&lt;br /&gt;
AngularJSは導入済みのため、Bootstrap CSSを取得します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;curl https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css &lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; vendor/assets/stylesheets/bootstrap.min.css
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
RailsからBootstrap CSSを読み込むようにするために、&lt;code&gt;application.css&lt;/code&gt;に&lt;code&gt;Bootstrap CSS&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;# app/assets/stylesheets/application&lt;span class=&quot;synIdentifier&quot;&gt;.css&lt;/span&gt;
 &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt;= require bootstrap&lt;span class=&quot;synIdentifier&quot;&gt;.min&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
BootstrapのGlyphiconsも使えるようにしたいので、&lt;a href=&quot;http://getbootstrap.com/getting-started/#download&quot; target=&quot;_blank&quot;&gt;Bootstrap - Download&lt;/a&gt;からzip形式でファイルをダウンロードし、&lt;code&gt;dist/font&lt;/code&gt;を&lt;code&gt;vendor/assets/&lt;/code&gt;に配置します。&lt;/p&gt;&lt;p&gt;そして、&lt;code&gt;applciation.css&lt;/code&gt;に下記を追加します。こうすることで、BootstrapのGlyphiconsが使えるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;# app/assets/stylesheets/application&lt;span class=&quot;synIdentifier&quot;&gt;.css&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;@font-face&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;font-family&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&#39;Glyphicons Halflings&#39;&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;src&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;url(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;/assets/glyphicons-halflings-regular.eot&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;)&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;src&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;url(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;/assets/glyphicons-halflings-regular.eot?#iefix&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;format(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;embedded-opentype&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;url(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;/assets/glyphicons-halflings-regular.woff&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;format(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;woff&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;url(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;/assets/glyphicons-halflings-regular.ttf&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;format(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;truetype&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;url(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;/assets/glyphicons-halflings-regular.svg#glyphicons_halflingsregular&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;format(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;svg&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、UI Bootstrapファイルを取得します。&lt;br /&gt;
UI Bootstrapには、２つのファイルが用意されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ui-bootstrap-[version].min.js      - 表示をカスタマイズする必要がある場合。テンプレートを別途用意する必要がある。&lt;/li&gt;
&lt;li&gt;ui-bootstrap-tpls-[version].min.js - 表示をカスタマイズする必要がない場合。Bootstrapのデフォルトのテンプレートが同梱されている。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;今回は、カスタマイズをしなくて良いので、&lt;code&gt;ui-bootstrap-tpls-[version].min.js&lt;/code&gt;を取得します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;curl https://raw.githubusercontent.com/angular-ui/bootstrap/gh-pages/ui-bootstrap-tpls-0.12.0.min.js &lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; vendor/assets/javascripts/ui-bootstrap-tpls-0.12.0.min.js
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
こちらも、RailsからUI Bootstrapを読み込むようにするために、&lt;code&gt;application.js&lt;/code&gt;に&lt;code&gt;ui-bootstrap-tpls-0.12.0.min&lt;/code&gt;を追加します。&lt;br /&gt;
（順番が重要です。AngularJSに依存しているので、angular.minの後ろであり、appに依存されているので appの前である必要があります。）&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;# app/assets/javascripts/application.js
...
&lt;span class=&quot;synComment&quot;&gt;//= require angular.min&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require ui-bootstrap-tpls-0.12.0.min&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require app&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require_tree .&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
アプリがUI Bootstrapを読み込むようにするために、&lt;code&gt;app.coffee&lt;/code&gt;に&lt;code&gt;ui.bootstrap&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;# app/assets/javascripts/app.coffee
app = angular.module(&lt;span class=&quot;synConstant&quot;&gt;&#39;sampleApp&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;ui.bootstrap&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;]&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;BootstrapとAngularJSで競合があり、CSSのスタイリングが適用されない問題があるので、次のスタイリングを&lt;code&gt;application.css&lt;/code&gt;に追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;# app/assets/stylesheets/application&lt;span class=&quot;synIdentifier&quot;&gt;.css&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;.nav&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;.pagination&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;.carousel&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;.panel-title&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;cursor&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;pointer&lt;/span&gt;; &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-ui-bootstrap-test&quot;&gt;UI Bootstrap の動作確認&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;動作確認として、ツールチップを使ってみます。&lt;br /&gt;
ページネーション、モーダルなどその他のUI Bootstrapの機能の使い方は、&lt;a href=&quot;http://angular-ui.github.io/bootstrap/&quot; target=&quot;_blank&quot;&gt;UI Bootstrap - 公式ページ&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/templates/index.html.erb
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Templates#index&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-horizontal&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; label_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;テキスト&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-md-3 control-label&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-md-5&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; text_field_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ng-model&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt; &amp;quot;text&amp;quot;, class: &amp;quot;form-control&amp;quot; %&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; label_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :tooltipText, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ツールチップのテキスト&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-md-3 control-label&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;col-md-5&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; text_field_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :tooltipText, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ng-model&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt; &amp;quot;tooltipText&amp;quot;, class: &amp;quot;form-control&amp;quot; %&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; tooltip=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{{tooltipText}}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;control-label&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synUnderlined&quot;&gt;{{text}}&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
「文字列」と「ツールチップの文字列」を動的にできます。それぞれテキストフィールドに入力した値を表示するようにしています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112195029.jpg&quot; alt=&quot;f:id:nipe880324:20150112195029j:plain:w480&quot; title=&quot;f:id:nipe880324:20150112195029j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Thu, 15 Jan 2015 19:07:41 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450079862500</guid>
          
            <category>Rails中級</category>
          
            <category>AngularJS</category>
          
            <category>連載</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでAngularJSを使ってTodoアプリを作成 - 1. AngularJSのインストール方法</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150114/1421235346</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112194806.png&quot; alt=&quot;f:id:nipe880324:20150112194806p:plain&quot; title=&quot;f:id:nipe880324:20150112194806p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;「RailsでAngularJSを使ってTodoアプリを作成」する連載記事を書いてみました。&lt;/p&gt;&lt;p&gt;「RailsでAngularJSを使ってTodoアプリを作成」の連載１回目です。&lt;br /&gt;
まずは、Getting Startedとして、RailsプロジェクトにAngularJSを導入する方法を説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;連載記事一覧&lt;/h3&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150114/20150114203508.jpg&quot; alt=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; title=&quot;f:id:nipe880324:20150114203508j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;a href=&quot;https://rails42-with-angularjs13.herokuapp.com&quot; target=&quot;_blank&quot;&gt;Demo - Todoアプリケーション&lt;/a&gt;&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;1. AngularJSのインストール方法&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150115/1421316461&quot;&gt;2. UI Bootstrapのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150116/1421407124&quot;&gt;3. AngularJSのコントローラーの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150119/1421666497&quot;&gt;4. ngResource + RailsでAPI作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150120/1421761471&quot;&gt;5. ngRouteでシングルページにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150122/1421904614&quot;&gt;6. AngularJS + Ransackで検索機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150123/1422016597&quot; target=&quot;_blank&quot;&gt;7. AngularJS + Kaminariでページネーション機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150126/1422276839&quot;&gt;8. AngularJSで編集可能(Editable)なフィールドを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150127/1422357163&quot;&gt;9. AngularJS + Railsでソート可能(Sortable)なリストを作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;AngularJSのディレクティブ、コントローラー、データバインティングなどついて基本的なことを知っていることが前提です。&lt;br /&gt;
もし、AngularJSについて何もわからない場合は、次のサイトを軽くみてAngularJSについて簡単に学んでください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dotinstall.com/lessons/basic_angularjs&quot;&gt;AngularJS&amp;#x5165;&amp;#x9580; (&amp;#x5168;12&amp;#x56DE;) - &amp;#x30D7;&amp;#x30ED;&amp;#x30B0;&amp;#x30E9;&amp;#x30DF;&amp;#x30F3;&amp;#x30B0;&amp;#x306A;&amp;#x3089;&amp;#x30C9;&amp;#x30C3;&amp;#x30C8;&amp;#x30A4;&amp;#x30F3;&amp;#x30B9;&amp;#x30C8;&amp;#x30FC;&amp;#x30EB;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://js.studio-kingdom.com/angularjs/guide/introduction&quot;&gt;AngularJS&amp;#x5165;&amp;#x9580; | AngularJS 1.2 &amp;#x65E5;&amp;#x672C;&amp;#x8A9E;&amp;#x30EA;&amp;#x30D5;&amp;#x30A1;&amp;#x30EC;&amp;#x30F3;&amp;#x30B9; | js STUDIO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails          4.2.0&lt;/li&gt;
&lt;li&gt;AngularJS 1.3.8&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-getting-started-install&quot;&gt;AngularJSの導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rails-with-angularjs-getting-started-test&quot;&gt;動作確認&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-getting-started-install&quot;&gt;AngularJSの導入&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;まず、Railsプロジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;rails new angualrjs_test
&lt;span class=&quot;synStatement&quot;&gt;cd&lt;/span&gt; angualrjs_test
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、&lt;a href=&quot;https://angularjs.org/&quot; target=&quot;_blank&quot;&gt;AngularJS - 公式ページ&lt;/a&gt;からAngularJSの本体のファイル(angular.min.js)を取得し、&lt;code&gt;vendor/assets/javascripts/&lt;/code&gt;に配置&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;curl https://ajax.googleapis.com/ajax/libs/angularjs/1.3.8/angular.min.js &lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; vendor/assets/javascripts/angular.min.js
curl https://ajax.googleapis.com/ajax/libs/angularjs/1.3.8/angular.min.js.map &lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; vendor/assets/javascripts/angular.min.js.map
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
AngularJSの設定ファイルとなる&lt;code&gt;app.coffee&lt;/code&gt;を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/app.coffee&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# AngularJSの設定ファイル&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 依存ライブラリを記述する&lt;/span&gt;
app = angular.module(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sampleApp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, [])

&lt;span class=&quot;synComment&quot;&gt;# CSRFのトークンを設定するようにする&lt;/span&gt;
app.config (&lt;span class=&quot;synIdentifier&quot;&gt;$httpProvider&lt;/span&gt;) -&amp;gt;
  authToken = &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;meta[name=\&amp;quot;csrf-token\&amp;quot;]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).attr(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
  &lt;span class=&quot;synIdentifier&quot;&gt;$httpProvider&lt;/span&gt;.defaults.headers.common[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;X-CSRF-TOKEN&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] = authToken

&lt;span class=&quot;synComment&quot;&gt;# AngularJSがturbolinksと一緒に動くようにする&lt;/span&gt;
&lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;document).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;page:load&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, -&amp;gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;[ng-app]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).each -&amp;gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; = &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;this).attr(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ng-app&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
    angular.bootstrap(this, [&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt;])
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
jqueryとturbolinksも一緒に動くようにするために、&lt;code&gt;jquery-turbolinks&lt;/code&gt;を入れます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;jquery-turbolinks&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;jquery.turbolinks&lt;/code&gt;、&lt;code&gt;angular.min&lt;/code&gt;、&lt;code&gt;app&lt;/code&gt;を&lt;code&gt;application.js&lt;/code&gt;に追記します。&lt;br /&gt;
（Railsが記載したjsファイルを読み込むようになります）&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;# app/assets/javascripts/application.js
&lt;span class=&quot;synComment&quot;&gt;//= require jquery&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require jquery.turbolinks&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require jquery_ujs&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require turbolinks&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require angular.min&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require app&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require_tree .&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;application.html.erb&lt;/code&gt;に&lt;code&gt;ng-app&lt;/code&gt;ディレクティブを追加します。&lt;br /&gt;
（&lt;code&gt;ng-app&lt;/code&gt;ディレクティブ内がAngularJSにより解析されるので、その中でAngularJSが使えるようになります）&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/layouts/application.html.erb
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app.coffee の戦闘のangular.moduleで宣言した名前にする --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ng-app=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sampleApp&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Railsはproducton環境の場合、アセットをコンパイルすることによりAngularJSが動かなくなります。そのため、&lt;code&gt;production.rb&lt;/code&gt;に&lt;code&gt;config.assets.js_compressor = Uglifier.new(mangle: false)&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/developments/production.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Compress JavaScripts and CSS.&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# config.assets.js_compressor = :uglifier&lt;/span&gt;
config.assets.js_compressor = &lt;span class=&quot;synType&quot;&gt;Uglifier&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;mangle&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# config.assets.css_compressor = :sass&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rails-with-angularjs-getting-started-test&quot;&gt;2. 動作確認&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;では、動作確認のために、コントローラーを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;rails g controller &lt;span class=&quot;synType&quot;&gt;Templates&lt;/span&gt; index --skip-assets
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次のように記載します。&lt;br /&gt;
テキストフィールドに&lt;code&gt;ng-model&lt;/code&gt;で&lt;code&gt;name&lt;/code&gt;を定義し、それを、&lt;code&gt;{{name}}&lt;/code&gt;でデータバインティングして動的に表示するようにしています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/templates/index.html.erb
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Templates#index&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; label_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :naem, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;名前&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; text_field_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ng-model&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt; &amp;quot;name&amp;quot; %&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;こんにちは、「{{name}}」さん。&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
テキストフィールドに値をいれると、&lt;b&gt;{{}}で囲んだ箇所&lt;/b&gt;が動的に変化することがわかるとおもいます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112194833.jpg&quot; alt=&quot;f:id:nipe880324:20150112194833j:plain:w480&quot; title=&quot;f:id:nipe880324:20150112194833j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;もし、うまく動かない場合は、JavaScriptコンソール(Chromeの場合)を開き、エラーが発生していないか確認してください。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150112/20150112194844.jpg&quot; alt=&quot;f:id:nipe880324:20150112194844j:plain:w480&quot; title=&quot;f:id:nipe880324:20150112194844j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Wed, 14 Jan 2015 20:35:46 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450079854340</guid>
          
            <category>Rails中級</category>
          
            <category>AngularJS</category>
          
            <category>連載</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでAPI作成とAPIのテストのまとめ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150108/1420675366</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150108/20150108014534.jpg&quot; alt=&quot;f:id:nipe880324:20150108014534j:plain:w560&quot; title=&quot;f:id:nipe880324:20150108014534j:plain:w560&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:560px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
Photo by &lt;a href=&quot;https://www.flickr.com/photos/gonzalobaeza/&quot;&gt;Gonzalo Baeza | Flickr - Photo Sharing!&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を返す&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を作成し、また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のテスト方法も説明します。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を返す&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveSupport&quot;&gt;ActiveSupport&lt;/a&gt;より拡張された&lt;code&gt;to_json&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;とDMMが開発した&lt;a href=&quot;https://github.com/rails/jbuilder&quot;&gt;jbuilder&lt;/a&gt;というGemを使います。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のテストにはおなじみの&lt;code&gt;RSpec3&lt;/code&gt;を使います。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;        4.1.7&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/jbuilder&quot;&gt;jbuilder&lt;/a&gt;     2.2.6&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rspec&quot;&gt;rspec&lt;/a&gt;-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt;  3.1.0&lt;/li&gt;
&lt;li&gt;factory_girl 4.5.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;1. &lt;a href=&quot;#api-jbuilder-rspec-pre&quot;&gt;前提条件&lt;/a&gt;&lt;/h4&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;2. &lt;a href=&quot;#api-jbuilder-rspec-implement&quot;&gt;APIの作成&lt;/a&gt;&lt;/h4&gt;
    &lt;p&gt;2.1. &lt;a href=&quot;#api-jbuilder-rspec-implement-respond_to&quot;&gt;1つのコントローラーでHTMLやJSONを返すAPI&lt;/a&gt;&lt;br /&gt;
2.2. &lt;a href=&quot;#api-jbuilder-rspec-implement-api&quot;&gt;JSONのみを返すAPI&lt;/a&gt;&lt;br /&gt;
2.3. &lt;a href=&quot;#api-jbuilder-rspec-implement-api-versioning&quot;&gt;APIのバージョニング&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;3. &lt;a href=&quot;#api-jbuilder-rspec-test&quot;&gt;APIのテスト&lt;/a&gt;&lt;/h4&gt;
    &lt;p&gt;3.1. &lt;a href=&quot;#api-jbuilder-rspec-test-pre&quot;&gt;テストファイルの準備&lt;/a&gt;&lt;br /&gt;
3.2. &lt;a href=&quot;#api-jbuilder-rspec-test-index&quot;&gt;一覧(index)APIのテスト&lt;/a&gt;&lt;br /&gt;
3.3. &lt;a href=&quot;#api-jbuilder-rspec-test-show&quot;&gt;詳細(show)APIのテスト&lt;/a&gt;&lt;br /&gt;
3.4. &lt;a href=&quot;#api-jbuilder-rspec-test-create&quot;&gt;作成(create)/更新(update)APIのテスト&lt;/a&gt;&lt;br /&gt;
3.5. &lt;a href=&quot;#api-jbuilder-rspec-test-destroy&quot;&gt;削除(destroy)APIのテスト&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;api-jbuilder-rspec-pre&quot;&gt;1. 前提条件&lt;/h3&gt;次のコントローラー、モデル、ビューを前提に話を進めていきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;rails g scaffold &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; name&lt;span class=&quot;synConstant&quot;&gt;:string&lt;/span&gt; price&lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt; category_id&lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;
rails g model &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; name

&lt;span class=&quot;synComment&quot;&gt;# app/models/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;api-jbuilder-rspec-implement&quot;&gt;2. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の作成&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;では、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt;に&lt;code&gt;to_json&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;が定義されているので基本的にはこれを使えば&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を返すことが可能です。&lt;br /&gt;
URLや関連先の値も&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;形式で返したい場合は、&lt;a href=&quot;https://github.com/rails/jbuilder&quot; target=&quot;_blnak&quot;&gt;jbuilder&lt;/a&gt;というgemをつかいます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;api-jbuilder-rspec-implement-respond_to&quot;&gt;2.1. 1つのコントローラーでHTMLや&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を返す&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;&lt;/h3&gt;1つのコントローラーでHTMLや&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を返すには、コントローラーで&lt;code&gt;respond_to&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使います。&lt;/p&gt;&lt;p&gt;まず、通常通り&lt;code&gt;resouces&lt;/code&gt;でルーティングを設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.routes.draw &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  resources &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# ルーティング結果&lt;/span&gt;
$ bin/rake routes
      &lt;span class=&quot;synType&quot;&gt;Prefix&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Verb&lt;/span&gt;   &lt;span class=&quot;synType&quot;&gt;URI&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Pattern&lt;/span&gt;                  &lt;span class=&quot;synType&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#Action&lt;/span&gt;
    products &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;          products#index&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;             POST   &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;products(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)          products&lt;span class=&quot;synComment&quot;&gt;#create&lt;/span&gt;
 new_product &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/ne&lt;/span&gt;w(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      products&lt;span class=&quot;synComment&quot;&gt;#new&lt;/span&gt;
edit_product &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;/edit(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;) products&lt;span class=&quot;synComment&quot;&gt;#edit&lt;/span&gt;
     product &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      products&lt;span class=&quot;synComment&quot;&gt;#show&lt;/span&gt;
             &lt;span class=&quot;synType&quot;&gt;PATCH&lt;/span&gt;  &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      products&lt;span class=&quot;synComment&quot;&gt;#update&lt;/span&gt;
             &lt;span class=&quot;synType&quot;&gt;PUT&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      products&lt;span class=&quot;synComment&quot;&gt;#update&lt;/span&gt;
             &lt;span class=&quot;synType&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      products&lt;span class=&quot;synComment&quot;&gt;#destroy&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
その後、コントローラー内で&lt;code&gt;respond_to&lt;/code&gt;を使い、フォーマットに応じたレスポンスを返します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;ProductsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.all
    respond_to &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;|
      format.html &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 通常のURLの場合、index.html.erb が返される&lt;/span&gt;
      format.json { render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt; } &lt;span class=&quot;synComment&quot;&gt;# URLが.jsonの場合、@products.to_json が返される&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;デフォルトのフォーマットは、htmlであり、&lt;code&gt;/products.json&lt;/code&gt;などURLの最後に&lt;code&gt;.json&lt;/code&gt;をつければ&lt;code&gt;format.json&lt;/code&gt;のブロック内の値が返されます。&lt;br /&gt;
&lt;code&gt;format.json&lt;/code&gt;のブロック内では、&lt;code&gt;render&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;により、&lt;code&gt;@products&lt;/code&gt;の値が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;形式で返されます。（内部的には、@products.to_&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/json&quot;&gt;json&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;が呼ばれます)&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;code&gt;to_json&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;は、簡易に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;形式に変換できるので便利な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;ですが、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のモデルが絡んだり、URLを返すなど複雑な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を返す場合は扱いずらいです。&lt;br /&gt;
そのため、&lt;code&gt;jbuilder&lt;/code&gt;を使い、返したい&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;の内容を、ビューファイルに記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/views/products/index.json.jbuilder&lt;/span&gt;
json.array!(&lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;product&lt;/span&gt;|
  json.extract! product, &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:price&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:publised_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;
  json.url product_url(product, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:json&lt;/span&gt;)
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;コントローラーでは、&lt;code&gt;format.json&lt;/code&gt;を修正し、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/jbuilder&quot;&gt;jbuilder&lt;/a&gt;のindexファイルを呼ぶようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;respond_to &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;|
  format.html &lt;span class=&quot;synComment&quot;&gt;# app/views/products/index.html.erb&lt;/span&gt;
  format.json &lt;span class=&quot;synComment&quot;&gt;# app/views/products/index.json.jbuilder&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、ブラウザから&lt;code&gt;/products.json&lt;/code&gt;へアクセスすると次のように&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/jbuilder&quot;&gt;jbuilder&lt;/a&gt;で定義した&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;が返されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150103/20150103220854.png&quot; alt=&quot;f:id:nipe880324:20150103220854p:plain&quot; title=&quot;f:id:nipe880324:20150103220854p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/jbuilder&quot;&gt;jbuilder&lt;/a&gt;の細かな使い方は、&lt;a href=&quot;https://github.com/rails/jbuilder&quot;&gt;jbuilder - GitHub公式ページ&lt;/a&gt;を確認してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;api-jbuilder-rspec-implement-api&quot;&gt;2.2. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;のみを返す&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;のみを返す&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を作成する方法を説明します。&lt;br /&gt;
まず、ルーティング設定で&lt;code&gt;namespace :api, { format: &#39;json&#39; }&lt;/code&gt;に囲みます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.routes.draw &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  namespace &lt;span class=&quot;synConstant&quot;&gt;:api&lt;/span&gt;, { &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; } &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    resources &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  resources &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
  root &lt;span class=&quot;synConstant&quot;&gt;to&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;products#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;



&lt;span class=&quot;synComment&quot;&gt;# ルーティング結果&lt;/span&gt;
$ rake routes
          &lt;span class=&quot;synType&quot;&gt;Prefix&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Verb&lt;/span&gt;   &lt;span class=&quot;synType&quot;&gt;URI&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Pattern&lt;/span&gt;                      &lt;span class=&quot;synType&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#Action&lt;/span&gt;
    api_products &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;products(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)          api/products&lt;span class=&quot;synComment&quot;&gt;#index {:format=&amp;gt;&amp;quot;json&amp;quot;}&lt;/span&gt;
                 &lt;span class=&quot;synType&quot;&gt;POST&lt;/span&gt;   &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;products(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)          api/products&lt;span class=&quot;synComment&quot;&gt;#create {:format=&amp;gt;&amp;quot;json&amp;quot;}&lt;/span&gt;
 new_api_product &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;products/new(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      api/products&lt;span class=&quot;synComment&quot;&gt;#new {:format=&amp;gt;&amp;quot;json&amp;quot;}&lt;/span&gt;
edit_api_product &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;products/&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;/edit(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;) api/products&lt;span class=&quot;synComment&quot;&gt;#edit {:format=&amp;gt;&amp;quot;json&amp;quot;}&lt;/span&gt;
     api_product &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;products/&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      api/products&lt;span class=&quot;synComment&quot;&gt;#show {:format=&amp;gt;&amp;quot;json&amp;quot;}&lt;/span&gt;
                 &lt;span class=&quot;synType&quot;&gt;PATCH&lt;/span&gt;  &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;products/&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      api/products&lt;span class=&quot;synComment&quot;&gt;#update {:format=&amp;gt;&amp;quot;json&amp;quot;}&lt;/span&gt;
                 &lt;span class=&quot;synType&quot;&gt;PUT&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;products/&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      api/products&lt;span class=&quot;synComment&quot;&gt;#update {:format=&amp;gt;&amp;quot;json&amp;quot;}&lt;/span&gt;
                 &lt;span class=&quot;synType&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;products/&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      api/products&lt;span class=&quot;synComment&quot;&gt;#destroy {:format=&amp;gt;&amp;quot;json&amp;quot;}&lt;/span&gt;
                 .....
&lt;/pre&gt;&lt;p&gt;このようにネームスペースを通常のコントローラーと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のコントローラーで分けるのが一般的です。&lt;br /&gt;
また、デフォルトのフォーマットを&lt;code&gt;json&lt;/code&gt;に定義しているので、&lt;code&gt;/products&lt;/code&gt;のようにURLの最後に&lt;code&gt;.json&lt;/code&gt;をつけない場合でも、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;形式でレスポンスを返すようになります。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;次に、コントローラーを定義します。ネームスペースをつけたので、&lt;code&gt;api&lt;/code&gt;フォルダ配下に作成します。&lt;br /&gt;
また、&lt;code&gt;Api&lt;/code&gt;モジュール内にコントローラーを定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/products_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ProductsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.all
      render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;api-jbuilder-rspec-implement-api-versioning&quot;&gt;2.3. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のバージョニング&lt;/h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を外部に公開する場合は、v1やv2などバージョニングすることが必要です。&lt;/p&gt;&lt;p&gt;次のように&lt;code&gt;namespace :v1&lt;/code&gt;や&lt;code&gt;namespace :v2&lt;/code&gt;を追加することでバージョニングを行えます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Store&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Applicaition&lt;/span&gt;.routes.draw &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  namespace &lt;span class=&quot;synConstant&quot;&gt;:api&lt;/span&gt;, { &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; } &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    namespace &lt;span class=&quot;synConstant&quot;&gt;:v1&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; 
      resources &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    namespace &lt;span class=&quot;synConstant&quot;&gt;:v2&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      resources &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# v2のリソース宣言 ...&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  resouces &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
  root &lt;span class=&quot;synConstant&quot;&gt;to&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;products#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;



&lt;span class=&quot;synComment&quot;&gt;# ルーティング結果&lt;/span&gt;
$ rake routes
             &lt;span class=&quot;synType&quot;&gt;Prefix&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Verb&lt;/span&gt;   &lt;span class=&quot;synType&quot;&gt;URI&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Pattern&lt;/span&gt;                         &lt;span class=&quot;synType&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#Action&lt;/span&gt;
    api_v1_products &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;v1/products(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)          api/v1/products&lt;span class=&quot;synComment&quot;&gt;#index {:format=&amp;gt;&amp;quot;json&amp;quot;}&lt;/span&gt;
    ....
    api_v2_products &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;v2/products(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)          api/v2/products&lt;span class=&quot;synComment&quot;&gt;#index {:format=&amp;gt;&amp;quot;json&amp;quot;}&lt;/span&gt;
    ....
&lt;/pre&gt;&lt;p&gt;コントローラーもネームスペースに合わせて&lt;code&gt;module V1&lt;/code&gt;を追加する必要があります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/v1/products_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;V1&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ProductsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;

      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.all
        render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    ...
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;api-jbuilder-rspec-test&quot;&gt;3. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のテスト&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;api-jbuilder-rspec-test-pre&quot;&gt;3.1. テ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%C8%A5%D5%A5%A1%A5%A4&quot;&gt;ストファイ&lt;/a&gt;ルの準備&lt;/h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のテストは、&lt;code&gt;spec/requests&lt;/code&gt;を使います。&lt;br /&gt;
これは、&lt;code&gt;spec/controllers&lt;/code&gt;では、コントローラーのみでコントローラー(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;)からの返り値(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;など)を検証するのが大変であり、&lt;code&gt;spec/features&lt;/code&gt;では、CapybaraやPoltergistを起動させてテスト実行時間を無駄に長くしてしまうためです。&lt;/p&gt;&lt;p&gt;次のコマンドでrequestsファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;rails g rspec:integration Product
   identical  spec/requests/products_spec.rb
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;api-jbuilder-rspec-test-index&quot;&gt;3.2. 一覧(index)&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のテスト&lt;/h3&gt;一覧&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のテストは、「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%BF%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ステータスコード&lt;/a&gt;」と「結果の件数」を確認する。&lt;br /&gt;
詳細&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のテストと重複している場合は、詳細な値の確認は省略してもよい。&lt;/p&gt;&lt;p&gt;テスト対象（一覧&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;）&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# コントローラー&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/controllers/products_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ProductsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# GET /products&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# GET /products.json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.all
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# index.json.jbuilder&lt;/span&gt;
json.array!(&lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;product&lt;/span&gt;|
  json.extract! product, &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:price&lt;/span&gt;
  json.url product_url(product, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:json&lt;/span&gt;)
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
テ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%C8%A5%D5%A5%A1%A5%A4&quot;&gt;ストファイ&lt;/a&gt;ル（一覧&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;）&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/requests/products_spec.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:request&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;

  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;GET /products.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    before { &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;.create_list(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;) }

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;一覧情報を取得できること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# GET /products.json にアクセスする&lt;/span&gt;
      get products_path &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:json&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# ステータスコードの確認&lt;/span&gt;
      expect(response.status).to eq &lt;span class=&quot;synConstant&quot;&gt;200&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# JSONの確認&lt;/span&gt;
      json = &lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;.parse(response.body)
      expect(json.size).to     eq &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt;.count
      expect(json[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]).to eq &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt;[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;].id
      expect(json[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]).to eq &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;].id

      &lt;span class=&quot;synComment&quot;&gt;# 詳細の値の確認は省略&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;api-jbuilder-rspec-test-show&quot;&gt;3.3. 詳細(show)&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のテスト&lt;/h3&gt;詳細&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のテストは「各項目が取得できていること」を確認します。&lt;/p&gt;&lt;p&gt;テスト対象(詳細&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# コントローラー&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/controllers/products_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ProductsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# GET /product/1&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# GET /product/1.json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# show.json.jbuilder&lt;/span&gt;
json.extract! &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:price&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:publised_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:updated_at&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
テ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%C8%A5%D5%A5%A1%A5%A4&quot;&gt;ストファイ&lt;/a&gt;ル(詳細&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/requests/products_spec.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:request&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;

  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;GET /product/:id.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    before { &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;) }

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;詳細情報を取得できること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# GET /product/:id.json にアクセスする&lt;/span&gt;
      get product_path(&lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.id, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:json&lt;/span&gt;)

      &lt;span class=&quot;synComment&quot;&gt;# ステータスコードの確認&lt;/span&gt;
      expect(response.status).to eq &lt;span class=&quot;synConstant&quot;&gt;200&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# JSONの各項目の確認&lt;/span&gt;
      json = &lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;.parse(response.body)
      expect(json[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]).to    eq &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.id
      expect(json[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]).to  eq &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.name
      expect(json[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]).to eq &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.price
      &lt;span class=&quot;synComment&quot;&gt;# ... その他の項目&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;api-jbuilder-rspec-test-create&quot;&gt;3.4. 作成(create)/更新(update)&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のテスト&lt;/h3&gt;作成/更新&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のテストは「作成/更新できていること」を確認します。&lt;br /&gt;
また、エラー時には「エラーコードが返ってくること」を確認します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;テスト対象ファイル(作成&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# コントローラー&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/controllers/products_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ProductsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# POST /products&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# POST /products.json&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new(product_params)

      respond_to &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;|
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.save
          format.html { redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Product was successfully created.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
          format.json { render &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:created&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;location&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; }
        &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
          format.html { render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt; }
          format.json { render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.errors, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:unprocessable_entity&lt;/span&gt; }
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;product_params&lt;/span&gt;
      params.require(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:price&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:publised_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;)
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
end

&lt;span class=&quot;synComment&quot;&gt;# show.json.jbuilder&lt;/span&gt;
json.extract! &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:price&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:publised_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:updated_at&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
テ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%C8%A5%D5%A5%A1%A5%A4&quot;&gt;ストファイ&lt;/a&gt;ル(作成&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;)&lt;br /&gt;
※更新&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;は作成&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;とほぼ同様のため省略します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/requests/products_spec.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:request&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;

  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;POST /products.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品情報が作成されること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      params = { &lt;span class=&quot;synConstant&quot;&gt;product&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;.attributes_for(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;) }
      &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {:product=&amp;gt;{:name=&amp;gt;&amp;quot;MyString&amp;quot;, :price=&amp;gt;1, :publised_at=&amp;gt;&amp;quot;2014-12-29 23:40:30&amp;quot;, :category_id=&amp;gt;1}}&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# 商品数が1増えることを確認&lt;/span&gt;
      expect {
        &lt;span class=&quot;synComment&quot;&gt;# POST /products.json にアクセスする&lt;/span&gt;
        post products_path(&lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:json&lt;/span&gt;), params
      }.to change { &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.count }.by(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)

      &lt;span class=&quot;synComment&quot;&gt;# ステータスコードの確認&lt;/span&gt;
      expect(response.status).to eq &lt;span class=&quot;synConstant&quot;&gt;201&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# JSONの各値の確認&lt;/span&gt;
      json = &lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;.parse(response.body)
      expect(json[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]).to  eq &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyString&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      expect(json[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]).to eq &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# ... その他のカラム&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# locationが作成したProductの詳細画面のURLであることを確認&lt;/span&gt;
      expect(response.location).to eq product_url(&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.last)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品情報が作成されないこと&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# バリデーションエラーなどで作成されないようにし、帰り値を確認する&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;api-jbuilder-rspec-test-destroy&quot;&gt;3.5. 削除(destroy)&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のテスト&lt;/h3&gt;削除&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のテストは「削除されていること」を確認します。&lt;/p&gt;&lt;p&gt;テスト対象ファイル(削除&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# コントローラー&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/controllers/products_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ProductsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# DELETE /products/1&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# DELETE /products/1.json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;destroy&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
    &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.destroy
    respond_to &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;|
      format.html { redirect_to products_url, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Product was successfully destroyed.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
      format.json { head &lt;span class=&quot;synConstant&quot;&gt;:no_content&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
テ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%C8%A5%D5%A5%A1%A5%A4&quot;&gt;ストファイ&lt;/a&gt;ル(削除&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;)&lt;br /&gt;
※更新&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;は作成&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;とほぼ同様のため省略します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/requests/products_spec.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:request&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;

  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;DELETE /products/:id.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    before { &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;) }

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品情報が削除されること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# Productの数が-1されること&lt;/span&gt;
      expect {
        &lt;span class=&quot;synComment&quot;&gt;# DELETE /products/:id.json にアクセスする&lt;/span&gt;
        delete product_path(&lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.id, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:json&lt;/span&gt;)
      }.to change { &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.count }.by(&lt;span class=&quot;synConstant&quot;&gt;-1&lt;/span&gt;)

      &lt;span class=&quot;synComment&quot;&gt;# ステータスコードの確認&lt;/span&gt;
      expect(response.status).to eq &lt;span class=&quot;synConstant&quot;&gt;204&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rails/jbuilder&quot;&gt;rails/jbuilder &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/350-rest-api-versioning&quot;&gt;#350 REST API Versioning - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 08 Jan 2015 09:02:46 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450078385620</guid>
          
            <category>テスト</category>
          
            <category>Rails API</category>
          
            <category>Rails中級</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsのRSpecテストを速くする方法まとめ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150106/1420545920</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150106/20150106210347.jpg&quot; alt=&quot;f:id:nipe880324:20150106210347j:plain:w480&quot; title=&quot;f:id:nipe880324:20150106210347j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/huddleston/&quot;&gt;Flickr: chief_huddleston&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Railsの規模が大きくなると自動テストの実行時間もだんだんと長くなっていきます。素早く開発していくにはテストの実行時間を短くすることが大切です。&lt;br /&gt;
RSpecのテストを速くする方法をまとめましたので参考にしてください。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;rspec-rails 3.1.0&lt;/li&gt;
&lt;li&gt;test-queue 0.2.9&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;1.   &lt;a href=&quot;#fast-test-profile&quot;&gt;RSpecのパフォーマンス測定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.   &lt;a href=&quot;#fast-test-test-queue&quot;&gt;test-queueで並列でテストを実行する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.   &lt;a href=&quot;#fast-test-rspec-guard&quot;&gt;rspec-guardを使って更新したファイルを自動的にテストする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.   &lt;a href=&quot;#fast-test-spring&quot;&gt;Springを使ってテストのロード時間を短くする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5.   &lt;a href=&quot;#fast-test-log-level&quot;&gt;ログレベルを変える&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;6.   &lt;a href=&quot;#fast-test-deffered-gc&quot;&gt;GCを実行を抑える&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;7.   &lt;a href=&quot;#fast-test-refactorings&quot;&gt;RSpecファイルのリファクタリングをする&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;7.1. &lt;a href=&quot;#fast-test-reduce-it&quot;&gt;&lt;code&gt;it&lt;/code&gt;を少なくする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;7.2. &lt;a href=&quot;#fast-test-create-to-build_stubbed&quot;&gt;&lt;code&gt;create&lt;/code&gt;よりも&lt;code&gt;build_stubbed&lt;/code&gt;を使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;8. &lt;a href=&quot;#fast-test-ideas&quot;&gt;WIP その他のアイデア&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;fast-test-profile&quot;&gt;1. RSpecのパフォーマンス測定&lt;/h3&gt;まず、RSpecの「&lt;b&gt;テスト実行の総実行時間&lt;/b&gt;」と「&lt;b&gt;どのテストが遅いテストか&lt;/b&gt;」を把握する必要があります。&lt;br /&gt;
&lt;code&gt;rspec&lt;/code&gt;コマンドに&lt;code&gt;-p&lt;/code&gt;オプションを使うことで、遅いテストサンプルとグループが10件(デフォルト)表示されます。&lt;/p&gt;&lt;p&gt;テストの総実行時間は、&lt;code&gt;Finished in XXX seconds&lt;/code&gt;に記載されています。&lt;br /&gt;
また、&lt;code&gt;Top 10 slowest examples&lt;/code&gt;に遅いテストサンプル、&lt;code&gt;Top 10 slowest example groups&lt;/code&gt;が遅いテストサンプルグループが遅い順に記載されます。&lt;br /&gt;
これらの、遅いテストケースを解消することを重点的にやることにより、テスト総実行時間が大幅に短くなりやすいです。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ rspce &lt;span class=&quot;synSpecial&quot;&gt;-p&lt;/span&gt;

...

Finished &lt;span class=&quot;synError&quot;&gt;in&lt;/span&gt; 0.67808 seconds &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;files took 2.55 seconds to load&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;

Top &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt; slowest examples &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;0.27127 seconds, 40.0% of total &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;:
  UsersController routing routes to &lt;span class=&quot;synComment&quot;&gt;#show&lt;/span&gt;
    0.05689 seconds ./spec/routing/users_routing_spec.rb:&lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt;
  orders/edit renders the edit order form

...

Top &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt; slowest example groups:
orders/edit
  0.05224 seconds average &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;0.05224 seconds / &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; example&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; ./spec/views/orders/edit.html.erb_spec.rb:&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;
products/edit
  0.02615 seconds average &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;0.02615 seconds / &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; example&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; ./spec/views/products/edit.html.erb_spec.rb:&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;

...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;--pforile&lt;/code&gt;オプションの使い方&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;-p, &lt;span class=&quot;synSpecial&quot;&gt;--[no-]profile&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;COUNT&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;       サンプルをプロファイルし、最も遅いサンプルを表示する（デフォルト：&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;件）
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;fast-test-test-queue&quot;&gt;2. test-queueで並列でテストを実行する&lt;/h3&gt;&lt;code&gt;test-queue&lt;/code&gt;というgemを入れることで、１マシン上でCPUのコア数分だけRSpecテストを並列実行できます。&lt;br /&gt;
もし、8コアある場合は、理論的には8分かかっていたものは1分で実行できるようになります。（並列テストの準備やローダー実行などがあるので実際の値はもう少しかかります）&lt;/p&gt;&lt;p&gt;では、&lt;code&gt;test-queue&lt;/code&gt;をRailsプロジェクトに導入していきます。&lt;br /&gt;
まず、Gemfileに追記します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test-queue&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;bin/rspec-queue&lt;/code&gt;という実行ファイルを作成します。&lt;br /&gt;
内容は次の通りです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] ||= &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.expand_path(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;../../config/environment&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;__FILE__&lt;/span&gt;)

&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test_queue&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test_queue/runner/rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# テストランナー&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Reference: https://github.com/tmm1/test-queue&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;MyAppRSpecRunner&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;TestQueue&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Runner&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# def prepare(concurrency)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;after_fork&lt;/span&gt;(num)
    &lt;span class=&quot;synComment&quot;&gt;# ワーカー別のデータベースを準備する。&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;.update(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TEST_ENV_NUMBER&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; num &amp;gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; ? num.to_s : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;.configurations[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;][&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TEST_ENV_NUMBER&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]
    &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tasks&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;DatabaseTasks&lt;/span&gt;.create_current
    &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;.establish_connection(&lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt;)

    &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.load_tasks
    &lt;span class=&quot;synType&quot;&gt;Rake&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Task&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;db:reset&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].invoke
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# def around_filter(suite)&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   $stats.timing(&amp;quot;test.#{suite}.runtime&amp;quot;) do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#     yield&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;#   end&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;MyAppRSpecRunner&lt;/span&gt;.new.execute
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;test-queue&lt;/code&gt;では、ワーカー毎にデータベースを必要とするため、データベース名に番号をつけます。&lt;br /&gt;
他にも、ファイル作成などテスト環境を分ける必要があるものは&lt;code&gt;ENV[&#39;TEST_ENV_NUMBER&#39;]&lt;/code&gt;をつけます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;config/database.yml

test:
  &amp;lt;&amp;lt;: *default
  &lt;span class=&quot;synConstant&quot;&gt;database&lt;/span&gt;: db/test.sqlite3&amp;lt;%= &lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;TEST_ENV_NUMBER&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;] %&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;bin/rspec-queue&lt;/code&gt;に実行権限をつけます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;+x&lt;/span&gt; bin/rspec-queue
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;bin/rspec-queue&lt;/code&gt;を実行します。すると、コア数分だけ並列にテストが行われます。&lt;br /&gt;
テスト実行後に、&lt;code&gt;.test_queue_stats&lt;/code&gt;というファイルが作成されますが、これは、テストの実行時間を保存しており、次回&lt;code&gt;rspec-queue&lt;/code&gt;を実行するときに、各ワーカーでテスト実行時間を標準化させるために使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ bin/rspec-queue spec

Starting &lt;span class=&quot;synStatement&quot;&gt;test&lt;/span&gt;-queue master &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/tmp/test_queue_97612_70155795430020.sock&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;==&amp;gt;&lt;/span&gt; Summary &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; workers in 1.5298s&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;                          &lt;span class=&quot;synConstant&quot;&gt;21&lt;/span&gt; examples, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; failures, &lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt; pending         &lt;span class=&quot;synConstant&quot;&gt;9&lt;/span&gt; suites &lt;span class=&quot;synError&quot;&gt;in&lt;/span&gt; 1.4998s      &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;pid &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;98021&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;                          &lt;span class=&quot;synConstant&quot;&gt;32&lt;/span&gt; examples, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; failures, &lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt; pending         &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt; suites &lt;span class=&quot;synError&quot;&gt;in&lt;/span&gt; 1.5024s      &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;pid &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;98019&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;                                      &lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt; examples, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; failures         &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt; suites &lt;span class=&quot;synError&quot;&gt;in&lt;/span&gt; 1.5059s      &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;pid &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;98020&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;                          &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; examples, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; failures, &lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt; pending         &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt; suites &lt;span class=&quot;synError&quot;&gt;in&lt;/span&gt; 1.5247s      &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;pid &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;98022&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;fast-test-rspec-guard&quot;&gt;3. rspec-guardを使って更新したファイルを自動的にテストする&lt;/h3&gt;毎回少しのファイルを変更するたびに全件テストを実行していたらバカになりません。（そんな人はいないと思いますが）&lt;br /&gt;
少なくとも次のように、ファイル単位やサンプル単位で実行していると思います。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# ファイル単位でrspecを実行する&lt;/span&gt;
$ bin/rspec spec/features/users_spec.rb

&lt;span class=&quot;synComment&quot;&gt;# 行指定(120行目)にマッチしたrspecのテストを実行する&lt;/span&gt;
$ bin/rspec spec/features/users_spec.rb:&lt;span class=&quot;synConstant&quot;&gt;120&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これを、ファイルを変更するたびに、何度もコマンドを実行するのはめんどくさいので、&lt;code&gt;rspec-guard&lt;/code&gt;を使うことで自動的にテストをするようにできます。&lt;br /&gt;
副次的な効果として、ファイルを保存するたびに、&lt;code&gt;rspec-guard&lt;/code&gt;により細かくテストをしてくれるので、どこでテストがこけたかがすぐに分かるのでどのコードがいけないのかすぐにわかります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rspec-guardの導入方法や使い方については、&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141021/1413819783&quot; target=&quot;_blank&quot;&gt;コチラ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;fast-test-spring&quot;&gt;4. Springを使ってテストのロード時間を短くする&lt;/h3&gt;Railsが大規模になるほど、依存ライブラリやファイル数が増えるのでrspecコマンド実行時のロード時間が長くなる。&lt;br /&gt;
プリローダーのSpringを使うことで、ロード時間を短くすることができます。&lt;br /&gt;
10秒が3秒ぐらいになるなどそこまで効果はないですが、何回もコマンドを実行すると思えば、チリも積もれば山となるということで入れておくのをお勧めします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Springの導入方法、RSpecコマンド + Springを使う方法については、&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141026/1414289421&quot; target=&quot;_blank&quot;&gt;コチラ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;fast-test-log-level&quot;&gt;5. ログレベルを変える&lt;/h3&gt;&lt;code&gt;development&lt;/code&gt;環境と&lt;code&gt;test&lt;/code&gt;環境では、デフォルトのログレベルが&lt;code&gt;:debug&lt;/code&gt;になっています。&lt;br /&gt;
&lt;code&gt;test&lt;/code&gt;環境では、ログを確認するケースは少ないので、ログレベルを&lt;code&gt;:error&lt;/code&gt;に設定し、I/O出力を減らします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/environments/test.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Setting of a Log Level&lt;/span&gt;
config.log_level = &lt;span class=&quot;synConstant&quot;&gt;:error&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;fast-test-deffered-gc&quot;&gt;6. GCを実行を抑える&lt;/h3&gt;RSpec実行中のGCの実行を抑えることで、テスト時間を早くさせるハックです。&lt;br /&gt;
Rubyのバージョンも上がり、GCの性能が良くなってきたので、むしろ遅くなる可能性もありますのでご注意ください。&lt;/p&gt;&lt;p&gt;GCを実行するクラスのファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/supports/deferred_garbage_collection.rb&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# http://ariejan.net/2011/09/24/rspec-speed-up-by-tweaking-ruby-garbage-collection&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Usage:&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# DEFER_GC=10 rspec spec/&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# DEFER_GC=10 cucumber features/&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# put it to spec/support/deferred_garbage_collection_all_in_one.rb&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#        or feature/support/hooks.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;DeferredGarbageCollection&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;DEFERRED_GC_THRESHOLD&lt;/span&gt; = (&lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;DEFER_GC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;] || &lt;span class=&quot;synConstant&quot;&gt;-1&lt;/span&gt;).to_f

  &lt;span class=&quot;synIdentifier&quot;&gt;@last_gc_run&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;start&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;GC&lt;/span&gt;.disable &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;DEFERRED_GC_THRESHOLD&lt;/span&gt; &amp;gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;reconsider&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;DEFERRED_GC_THRESHOLD&lt;/span&gt; &amp;gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now - &lt;span class=&quot;synIdentifier&quot;&gt;@last_gc_run&lt;/span&gt; &amp;gt;= &lt;span class=&quot;synType&quot;&gt;DEFERRED_GC_THRESHOLD&lt;/span&gt;
      &lt;span class=&quot;synType&quot;&gt;GC&lt;/span&gt;.enable
      &lt;span class=&quot;synType&quot;&gt;GC&lt;/span&gt;.start
      &lt;span class=&quot;synType&quot;&gt;GC&lt;/span&gt;.disable
      &lt;span class=&quot;synIdentifier&quot;&gt;@last_gc_run&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、specの設定ファイルに下記を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/rails_helper.rb&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;config&lt;/span&gt;|
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:all&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DeferredGarbageCollection&lt;/span&gt;.start
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.after(&lt;span class=&quot;synConstant&quot;&gt;:all&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DeferredGarbageCollection&lt;/span&gt;.reconsider
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;fast-test-refactorings&quot;&gt;7. RSpecファイルのリファクタリングをする&lt;/h3&gt;&lt;h4 id=&quot;fast-test-reduce-it&quot;&gt;7.1. &lt;code&gt;it&lt;/code&gt;を少なくする&lt;/h4&gt;テストの基本として、1テストあたりで確認することは1つという考えがあります。こうすることで、失敗したテストから、ソースコードの悪い箇所を特定しやすいためです。&lt;br /&gt;
しかし、1テスト(&lt;code&gt;it&lt;/code&gt;)を多くすると、テスト実行時間という観点からはテストの前準備処理が何度も実行されるので、テストの実行時間が長くなります。&lt;br /&gt;
そのため、「テストの可読性/保守性」と「テストの実行時間」というトレードオフをうまく考えながら&lt;code&gt;it&lt;/code&gt;をまとめていく必要があります。&lt;/p&gt;&lt;p&gt;個人的な考えとしては次のようなように考えています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;モデルやコントローラーの単体テストでは、前準備の処理も軽く、ここの事象を確認するので&lt;code&gt;it&lt;/code&gt;は細くて良い&lt;/li&gt;
&lt;li&gt;Featuresなどのエンドツーエンドテストでは、前準備の処理も時間がかかるので、可読性と保守性を損ねない程度に&lt;code&gt;it&lt;/code&gt;をまとめる&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;次は、&lt;code&gt;it&lt;/code&gt;をまとめる前後のサンプルのRSpecのテストコードです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 商品管理のFeatures 修正前&lt;/span&gt;
describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品管理&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品を登録する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      visit products_path
      click_link &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;新規商品を登録&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;新規商品登録画面が表示されること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      within(&lt;span class=&quot;synConstant&quot;&gt;:h1&lt;/span&gt;) { expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;新規商品登録&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;有効な商品情報を入力した場合&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# itのたびにこのbeforeブロックが繰り返される&lt;/span&gt;
      before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        fill_in &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品名&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;パソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
        fill_in &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;値段&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100_000&lt;/span&gt;
        click_button &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品詳細画面が表示されること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        within(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) { expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品詳細&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録した商品情報が表示されること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        within(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
          expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;パソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
          expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;100,000&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録した商品情報がDBに登録されていること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        result = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.last
        expect(result.name).to  have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;パソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
        expect(result.price).to have_content &lt;span class=&quot;synConstant&quot;&gt;100_000&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;無効な商品情報を入力した場合&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# Do something ...&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
極力可能なものは&lt;code&gt;it&lt;/code&gt;をまとめます。見易さという点では修正前の方がよいですが、テスト実行時間は減ります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 商品管理のFeatures 修正後&lt;/span&gt;
describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品管理&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:feature&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品を登録する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      visit products_path
      click_link &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;新規商品を登録&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;新規商品登録画面が表示されること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      within(&lt;span class=&quot;synConstant&quot;&gt;:h1&lt;/span&gt;) { expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;新規商品登録&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;有効な商品情報を入力した場合&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# itの数が3から1に減ったので、このbeforeブロックの実行回数も3から1へ減る&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# すなわち、テスト実行時間も減る&lt;/span&gt;
      before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        fill_in &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品名&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;パソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
        fill_in &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;値段&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100_000&lt;/span&gt;
        click_button &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録した商品情報が登録されること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;synComment&quot;&gt;# 商品詳細画面が表示されること&lt;/span&gt;
        within(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) { expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品詳細&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }

        &lt;span class=&quot;synComment&quot;&gt;# 登録した商品情報が表示されること&lt;/span&gt;
        within(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
          expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;パソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
          expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;100,000&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;synComment&quot;&gt;# 登録した商品情報がDBに登録されていること&lt;/span&gt;
        result = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.last
        expect(result.name).to  have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;パソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
        expect(result.price).to have_content &lt;span class=&quot;synConstant&quot;&gt;100_000&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;無効な商品情報を入力した場合&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# Do something ...&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;fast-test-create-to-build_stubbed&quot;&gt;7.2. &lt;code&gt;create&lt;/code&gt;よりも&lt;code&gt;build_stubbed&lt;/code&gt;を使う&lt;/h4&gt;テスト実行時間の大部分を占めているものの１つにデータをDBに登録するという処理があります。&lt;br /&gt;
これは、ディスクへのI/O書き込みが発生するので、メモリに比べて遅くなるのはいたしかたありません。&lt;/p&gt;&lt;p&gt;そのため、主にモデルのテストで、&lt;code&gt;FactoryGirl&lt;/code&gt;の&lt;code&gt;create&lt;/code&gt;でデータを作成するよりも、&lt;code&gt;build_stubbed&lt;/code&gt;でスタブを作成してテストを実行させることにより、DBへの書き込みを少なくさせてテストを早くするという方法です。&lt;/p&gt;&lt;p&gt;&lt;code&gt;let&lt;/code&gt;内で&lt;code&gt;create&lt;/code&gt;メソッドを使ってテストデータを毎回作成しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 注文明細(line_item)のモデルSpecファイル 修正前&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synType&quot;&gt;LineItem&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:model&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#total_price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    let(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;)   { create(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;)}
    let(&lt;span class=&quot;synConstant&quot;&gt;:line_item&lt;/span&gt;) { create(&lt;span class=&quot;synConstant&quot;&gt;:line_item&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;product&lt;/span&gt;: product, &lt;span class=&quot;synConstant&quot;&gt;quantity&lt;/span&gt;: quantity) }

    subject { line_item.total_price }

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;quantity = 0&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      let(&lt;span class=&quot;synConstant&quot;&gt;:quantity&lt;/span&gt;) { &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; }
      it { is_expected.to eq &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;quantity = 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      let(&lt;span class=&quot;synConstant&quot;&gt;:quantity&lt;/span&gt;) { &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; }
      it { is_expected.to eq &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;quantity = 2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      let(&lt;span class=&quot;synConstant&quot;&gt;:quantity&lt;/span&gt;) { &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; }
      it { is_expected.to eq &lt;span class=&quot;synConstant&quot;&gt;200&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
変更は簡単で&lt;code&gt;build_stubbed&lt;/code&gt;に変更するだけです。&lt;br /&gt;
DBにデータを書き込まないので、DBからSELECTでデータを取得する処理では使えません。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 注文明細(line_item)のモデルSpecファイル 修正後&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synType&quot;&gt;LineItem&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:model&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#total_price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    let(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;)   { build_stubbed(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;)}
    let(&lt;span class=&quot;synConstant&quot;&gt;:line_item&lt;/span&gt;) { build_stubbed(&lt;span class=&quot;synConstant&quot;&gt;:line_item&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;product&lt;/span&gt;: product, &lt;span class=&quot;synConstant&quot;&gt;quantity&lt;/span&gt;: quantity) }

    ...

  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;fast-test-ideas&quot;&gt;WIP その他のアイデア&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SOA的な感じでシステムを分けてテストを少なくさせる&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wayneye.com/Blog/12-Tips-To-Boost-RSpec-And-Cucumber&quot;&gt;12 tips to boost RSpect and Cucumber - Wayne&amp;#39;s Geek Life&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 06 Jan 2015 21:05:20 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450077080960</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Test</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでJasmineを使ってJavascriptの単体テストをする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150105/1420465062</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150105/20150105223634.png&quot; alt=&quot;f:id:nipe880324:20150105223634p:plain&quot; title=&quot;f:id:nipe880324:20150105223634p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Railsで&lt;a href=&quot;http://jasmine.github.io/2.0/introduction.html&quot; target=&quot;_blank&quot;&gt;Jasmine&lt;/a&gt;を使ってJavascriptの単体テストを実行する方法を説明します。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://jasmine.github.io/2.0/introduction.html&quot; target=&quot;_blank&quot;&gt;Jasmine&lt;/a&gt;はJavascriptの単体テストを行うためのテスティングフレームワークです。そして、RailsでJasmineを使うために、&lt;a href=&quot;https://github.com/searls/jasmine-rails&quot; target=&quot;_blank&quot;&gt;jasmine-rails&lt;/a&gt;というgemが提供されています。&lt;/p&gt;&lt;p&gt;Railsでは&lt;code&gt;capybara-webkit&lt;/code&gt;や&lt;code&gt;poltergist&lt;/code&gt;などでエンドツーエンドレベルでのJavascriptのテストができます。しかし、エンドツーエンドなので仮想ブラウザを起動させてテストを行うので時間がかかるというデメリットがあります。そのため、Javascriptの単体テストは&lt;a href=&quot;http://jasmine.github.io/2.0/introduction.html&quot; target=&quot;_blank&quot;&gt;Jasmine&lt;/a&gt;を使ってテストするという住み分けが必要です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.1.1&lt;/li&gt;
&lt;li&gt;Rails 4.1.7&lt;/li&gt;
&lt;li&gt;jasmine-core  2.1.3&lt;/li&gt;
&lt;li&gt;jasmine-rails 0.10.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#jasmine-install&quot;&gt;jasmine-railsのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jasmine-usage&quot;&gt;RailsでのJasmineの初歩的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jasmine-matchers&quot;&gt;Jasmineで使えるMatcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jasmine-jquery-for-dom&quot;&gt;(WIP) DOMを検査する&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jasmine-install&quot;&gt;jasmine-railsのインストール&lt;/h3&gt;まず、Gemfileに&lt;code&gt;jasmine-rails&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;jasmine-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、RailsジェネレーターでJasmineの初期ファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;rails g jasmine_rails:&lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
   identical  spec/javascripts/support/jasmine.yml
       route  mount JasmineRails::Engine &lt;span class=&quot;synStatement&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/specs&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if &lt;/span&gt;defined?&lt;span class=&quot;synStatement&quot;&gt;(&lt;/span&gt;JasmineRails&lt;span class=&quot;synStatement&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Jasmineの設定ファイルは、&lt;code&gt;spec/javascripts/support/jasmine.yml&lt;/code&gt;に作成されます。&lt;br /&gt;
設定ファイル内では、Railsの規約に合わせた、Javascriptのソースファイルパス、Jasmineでのテストファイルパスなどがデフォルトで記載されています。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jasmine-usage&quot;&gt;RailsでのJasmineの初歩的な使い方&lt;/h3&gt;簡単な例を使って、RailsでのJasmineの初歩的な使い方を説明します。&lt;/p&gt;&lt;p&gt;まず、Javascriptのテストファイルを作成します。&lt;br /&gt;
RSpec3と文法はほとんど同じです。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;# spec/javascripts/foo_spec.js.coffee

describe &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Foo&amp;quot;&lt;/span&gt;, -&amp;gt;
  beforeEach -&amp;gt;
    @foo = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; Foo(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Taro&amp;quot;&lt;/span&gt;)

  it &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;is first test&amp;quot;&lt;/span&gt;, -&amp;gt;
    expect(@foo.greet()).toBe &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Hello, Taro&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次にソースファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;# app/assets/javascripts/foo.js.coffee
&lt;span class=&quot;synStatement&quot;&gt;class&lt;/span&gt; @Foo
  constructor: (name) -&amp;gt;
    @name = name

  greet: -&amp;gt;
    &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Hello, #{@name}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、Javascriptのテストを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;RAILS_ENV&lt;/span&gt;=&lt;span class=&quot;synStatement&quot;&gt;test&lt;/span&gt; bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; rake spec:javascript

...

Finished
-----------------
&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; spec, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; failures &lt;span class=&quot;synError&quot;&gt;in&lt;/span&gt; 0.003s.
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jasmine-matchers&quot;&gt;Jasmineで使えるMatcher&lt;/h3&gt;&lt;a href=&quot;http://jasmine.github.io/2.0/introduction.html&quot;&gt;introduction.js&lt;/a&gt;を参照&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;jasmine-jquery-for-dom&quot;&gt;(WIP) DOMを検査する&lt;/h3&gt;テキストフィールドに入力し、動的にバリデーションメッセージを出すなどのDOMを操作するJavascriptのテストを実施したい場合は、&lt;code&gt;jasmine-jquery&lt;/code&gt;を使うと楽らしい&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jasmine.github.io/2.0/introduction.html&quot;&gt;introduction.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/searls/jasmine-rails&quot;&gt;searls/jasmine-rails &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/261-testing-javascript-with-jasmine-revised&quot;&gt;#261 Testing JavaScript with Jasmine (revised) - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Mon, 05 Jan 2015 22:37:42 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450077055396</guid>
          
            <category>Rails Test</category>
          
            <category>Javascript</category>
          
            <category>Rails中級</category>
          
        </item>
      
    
      
      
        <item>
          <title>RSpec3 / Capybara / Capybara-Webkit チートシート</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150103/1420280252</link>
          <description>&lt;p&gt;Railsの有名なテストフレームワークのRSpec、エンドツーエンドテスト用のフレームワークのCapybara、エンドツーエンドテストのJavascript(Ajaxなど)部分のテスト用のCapybara-webkitのチートシートです。&lt;br /&gt;
基本的な使い方を知っていることを前提に、Railsでの使い方をまとめました。&lt;/p&gt;&lt;p&gt;その他参考になるサイトです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150101/1420093487&quot; target=&quot;_blank&quot;&gt;RSpec/Capybaraの導入方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150102/1420174315&quot; target=&quot;_blank&quot;&gt;FactoryGrilのチートシート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails           4.1.7&lt;/li&gt;
&lt;li&gt;rspec-rails     3.1.0&lt;/li&gt;
&lt;li&gt;capybara        2.4.1&lt;/li&gt;
&lt;li&gt;capybara-webkit 1.3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-cheat-matcher&quot;&gt;RSpec Matcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-cheat-original&quot;&gt;独自RSpec Matcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-cheat-mock&quot;&gt;RSpec Mock(モック/スタブ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-cheat-shoulda-macher&quot;&gt;Shoulda-Macher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-cheat-capybara&quot;&gt;Capybara&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-cheat-capybara-webkit&quot;&gt;JSのテスト(with Capybara-WebKit)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rspec-cheat-matcher&quot;&gt;RSpec Matcher&lt;/h3&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;値が等しい(eq, not_to eq)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(actual).to     eq expected
expect(actual).not_to eq not_expected
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;同じオブジェクト(be)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(actual).to be expected

&lt;span class=&quot;synComment&quot;&gt;# それぞれString型のインスタンスが作成されるため同じオブジェクトではない&lt;/span&gt;
expect(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).to be &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; Failure/Error&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;比較(&gt;, &gt;=, &lt;=, &lt;, be_within)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(actual).to be &amp;gt;  expected
expect(actual).to be &amp;gt;= expected
expect(actual).to be &amp;lt;= expected
expect(actual).to be &amp;lt;  expected
expect(actual).to be_within(delta).of(expected)

&lt;span class=&quot;synComment&quot;&gt;# 例：1.05は1から0.1以内の範囲&lt;/span&gt;
expect(&lt;span class=&quot;synConstant&quot;&gt;1.05&lt;/span&gt;).to be_within(&lt;span class=&quot;synConstant&quot;&gt;0.1&lt;/span&gt;).of(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;正規表現(match)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(actual).to match(&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;インスタンスのクラスやタイプタイプ&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# あるクラスのインスタンスか確認する&lt;/span&gt;
expect(actual).to be_an_instance_of(expected)

&lt;span class=&quot;synComment&quot;&gt;# 例：&amp;quot;str&amp;quot;はStringクラスのインスタンス&lt;/span&gt;
expect(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).to be_an_instance_of &lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# あるクラス階層(継承関係もたどる)のインスタンスか確認する&lt;/span&gt;
expect(actual).to be_a  expected
expect(actual).to be_an expected        &lt;span class=&quot;synComment&quot;&gt;# be_a のエイリアス&lt;/span&gt;
expect(actual).to be_a_kind_of expected &lt;span class=&quot;synComment&quot;&gt;# be_a の別のエイリアス&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 例： 1.11は継承関係も含むObjectクラスのインスタンス&lt;/span&gt;
expect(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1.11&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).to be_an &lt;span class=&quot;synType&quot;&gt;Object&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;真偽値、nil&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(actual).to be &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
expect(actual).to be &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
expect(actual).to be_nil
expect(actual).to_not be_nil
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;例外(Exception)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect { 処理 }.to raise_error
expect { 処理 }.to raise_error &lt;span class=&quot;synType&quot;&gt;ErrorClass&lt;/span&gt;
expect { 処理 }.to raise_error &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
expect { 処理 }.to raise_error(&lt;span class=&quot;synType&quot;&gt;ErrorClass&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 例：ActiveRecord::RecordNotFound例外が発生することを確認&lt;/span&gt;
expect { &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.find(&lt;span class=&quot;synConstant&quot;&gt;-1&lt;/span&gt;) }.to raise_error &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RecordNotFound&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;predicateマッチャ&lt;/h4&gt;
    &lt;p&gt;アプリ内の&lt;code&gt;xxx?&lt;/code&gt;メソッドをRSpec内で&lt;code&gt;be_xxx&lt;/code&gt;Macherとして記載ができる。（例：&lt;code&gt;include?&lt;/code&gt; =&gt; &lt;code&gt;be_include&lt;/code&gt;）&lt;br /&gt;
また、同様に&lt;code&gt;has_xxx?&lt;/code&gt;メソッドを&lt;code&gt;have_xxx&lt;/code&gt;として記載ができる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(actual).to be_xxx
expect(actual).to have_xxx(&lt;span class=&quot;synConstant&quot;&gt;:arg&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;範囲(ruby &gt;= 1.9の場合)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;).to cover(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
expect(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;).not_to cover(&lt;span class=&quot;synConstant&quot;&gt;-1&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;数の変化(change, by, from, to)&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 商品の総数が1増加することを確認&lt;/span&gt;
expect {
  &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.create &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyProduct&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
}.to change { &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.count }.by(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 商品の総数が1増加することを確認&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.create &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyProduct&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
expect {
  &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.first.destroy
}.to change { &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.count }.by(&lt;span class=&quot;synConstant&quot;&gt;-1&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 商品の総数が1から3個へなったことを確認&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.create &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyProduct&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
expect {
  &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;.times { product.create &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyProduct&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
}.to change { &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.count }.from(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;).to(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;配列、文字列に含む&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 含む&lt;/span&gt;
expect(actual).to &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt;(expected)

&lt;span class=&quot;synComment&quot;&gt;# 開始する、終了する&lt;/span&gt;
expect(actual).to start_with(expected)
expect(actual).to end_with(expected)

&lt;span class=&quot;synComment&quot;&gt;# 配列がマッチするか確認する&lt;/span&gt;
expect(actual).to match_array(expected_array) &lt;span class=&quot;synComment&quot;&gt;# 上記と同様&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 例&lt;/span&gt;
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;)
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to start_with(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to start_with(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;)
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to end_with(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to end_with(&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
expect({&lt;span class=&quot;synConstant&quot;&gt;:a&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;}).to &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;:a&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
expect(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;this string&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).to &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt;(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;is str&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
expect(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;this string&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).to start_with(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
expect(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;this string&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).to end_with(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ring&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to contain_exactly(&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
expect([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]).to match_array([&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;])
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-cheat-original&quot;&gt;独自RSpec Matcher&lt;/h3&gt;&lt;code&gt;RSpec::Matchers.define&lt;/code&gt;で定義します。定義場所は、&lt;code&gt;spec/support&lt;/code&gt;配下に個別の名前をつけて作成すると良いでしょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# spec/support/have_flash_message.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Matchers&lt;/span&gt;.define &lt;span class=&quot;synConstant&quot;&gt;:have_flash_message&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;message&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;type&lt;/span&gt;|
  match &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;page&lt;/span&gt;|
    expect(page).to have_selector(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;div.alert.alert-&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;type&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: message)
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 利用&lt;/span&gt;
expect(page).to have_flash_message &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;更新に失敗しました&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;danger&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
CanCanCanのAbilityの状況を確認するリッチなカスタムマッチャ&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Examples&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# @user.should have_ability(:create, for: Post.new)&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# @user.should have_ability([:create, :read], for: Post.new)&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# @user.should have_ability(&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   {create: true, read: false, update: false, destroy: true}, for: Post.new)&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Matchers&lt;/span&gt;.define &lt;span class=&quot;synConstant&quot;&gt;:have_ability&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;ability_hash&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;options&lt;/span&gt; = {}|
  match &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;user&lt;/span&gt;|
    ability = &lt;span class=&quot;synType&quot;&gt;Ability&lt;/span&gt;.new(user)
    target = options[&lt;span class=&quot;synConstant&quot;&gt;:for&lt;/span&gt;]
    &lt;span class=&quot;synIdentifier&quot;&gt;@ability_result&lt;/span&gt; = {}
    ability_hash = { ability_hash =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; ability_hash.is_a? &lt;span class=&quot;synType&quot;&gt;Symbol&lt;/span&gt;
    ability_hash = ability_hash.reduce({}) { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;e&lt;/span&gt;| a.merge(e =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;) } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt;
      ability_hash.is_a? &lt;span class=&quot;synType&quot;&gt;Array&lt;/span&gt;
    ability_hash.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;action&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;_true_or_false&lt;/span&gt;|
      &lt;span class=&quot;synIdentifier&quot;&gt;@ability_result&lt;/span&gt;[action] = ability.can?(action, target)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    ability_hash == &lt;span class=&quot;synIdentifier&quot;&gt;@ability_result&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  failure_message &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;user&lt;/span&gt;|
    ability_hash, options = expected
    ability_hash = { ability_hash =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; ability_hash.is_a? &lt;span class=&quot;synType&quot;&gt;Symbol&lt;/span&gt;
    ability_hash = ability_hash.reduce({}) { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;e&lt;/span&gt;| a.merge(e =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;) } &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt;
      ability_hash.is_a? &lt;span class=&quot;synType&quot;&gt;Array&lt;/span&gt;
    target = options[&lt;span class=&quot;synConstant&quot;&gt;:for&lt;/span&gt;]
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;expected User:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;user&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; to have ability:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;ability_hash&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; for &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;target&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; \
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;but actual result is &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;@ability_result&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# clean up output of RSpec Documentation format&lt;/span&gt;
  description &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; ability_hash.length == &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;have ability &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;expected.to_s.match(&lt;span class=&quot;synSpecial&quot;&gt;/(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;[^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;]*)/&lt;/span&gt;)[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; \
      &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;expected.to_s.match(&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;([^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;]*)/&lt;/span&gt;)[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;have abilities &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;expected.to_s.match(&lt;span class=&quot;synSpecial&quot;&gt;/\[(\[[^\]]*\])&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;)[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; \
      &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;expected.to_s.match(&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;([^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;]*)/&lt;/span&gt;)[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-cheat-mock&quot;&gt;RSpec Mock(モック/スタブ)&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;モック/スタブの基本&lt;/h4&gt;
    &lt;p&gt;RSpecでは、&lt;code&gt;allow&lt;/code&gt;、&lt;code&gt;receive&lt;/code&gt;、&lt;code&gt;and_return&lt;/code&gt;を使うことで、モックのクラスメソッドやインスタンスメソッドを作成できる。&lt;br /&gt;
&lt;b&gt;モック化するメソッドは、空メソッドでも良いので&lt;code&gt;def&lt;/code&gt;で定義しておく必要がある。&lt;/b&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# インスタンスメソッド(product.name)のリターン値を&amp;quot;Mock Name&amp;quot;と定義している&lt;/span&gt;
product = build(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;)
allow(product).to receive(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;).and_return(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Mock Name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
puts product.name &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;Mock Name&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# and_returnではなく、ブロックでも同様&lt;/span&gt;
allow(product).to receive(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;) { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Mock Name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }


&lt;span class=&quot;synComment&quot;&gt;# クラスメソッド(Product.count)のリターン値を 5 と定義している&lt;/span&gt;
allow(&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;).to receive(&lt;span class=&quot;synConstant&quot;&gt;:count&lt;/span&gt;).and_return(&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;)
puts &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 5&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;連続的なリターン値&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;and_return&lt;/code&gt;に複数値を渡すと、呼び出すたびに値を変更することができる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;allow(&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;).to receive(&lt;span class=&quot;synConstant&quot;&gt;:increment&lt;/span&gt;).and_return(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
puts &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.increment &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
puts &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.increment &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
puts &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.increment &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
puts &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.increment &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
puts &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.increment &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;例外を返す&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;allow(double).to receive(&lt;span class=&quot;synConstant&quot;&gt;:msg&lt;/span&gt;).and_raise(error)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-cheat-shoulda-macher&quot;&gt;Shoulda-Macher&lt;/h3&gt;主にモデルのバリデーションのテストを簡単にかける&lt;br /&gt;
&lt;a href=&quot;http://thoughtbot.github.io/shoulda-matchers/v2.7.0/&quot;&gt;File: README &amp;mdash; Documentation by YARD 0.8.7.3&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-cheat-capybara&quot;&gt;Capybara&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;操作 - 遷移する&lt;/h4&gt;
    &lt;p&gt;URL指定(&quot;/projects&quot;)でも、パス指定(xxx_path)でも指定が可能。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;visit &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/projects&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
visit post_comments_path(post)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;操作 - リンクやボタンを押す&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;click_link   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;お問い合わせ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# リンク(aタグ)を押す。リンクテキストかIDを引数にする&lt;/span&gt;
click_button &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# ボタンを押す。ボタンのvalue値(ボタンの表示文字)を引数にする&lt;/span&gt;
click_on &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;        &lt;span class=&quot;synComment&quot;&gt;# ボタンかリンクを押す&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;操作 - フォーム入力&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# テキストフィールド/テキストエリア入力&lt;/span&gt;
fill_in &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;入力フィールド&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;入力値&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# namd属性、id属性、ラベルで入力フィールドを指定できる&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ラジオボタンを選択&lt;/span&gt;
choose  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ラジオボタン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# namd属性、id属性、ラベルで入力フィールドを指定できる&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# チェックボックスのチェックをつける、チェックを外す&lt;/span&gt;
check   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;チェックボックス&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# namd属性、id属性、ラベルで入力フィールドを指定できる&lt;/span&gt;
uncheck &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;チェックボックスを外す&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ファイルアップロード&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 第一引数は、namd属性、id属性、ラベルで入力フィールドを指定できる&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 第二引数は、ファイルのパスを指定&lt;/span&gt;
attach_file &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ファイル入力&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/path/to/image.jpg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# セレクトボックスの選択&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 第一引数は、セレクトするOption属性の値&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 第二引数のfromオプションは、セレクトボックスのid属性, name属性, ラベルを指定する&lt;/span&gt;
select  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;form&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;select box&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;検証 - 現在のパスを確認&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;current_path&lt;/code&gt;メソッドにより、現在のパスを検証できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(current_path).to eq post_comments_path(post)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;検証 - 画面表示文字の存在を確認&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
expect(page).to have_no_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;検証 - CSS、XPathの存在を確認&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(page).to have_css   &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;table tr.foo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
expect(page).to have_xpath &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;//table/tr&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;検証 - 特定の値の表示有無を確認&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;find_link(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).visible?
expect(find(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#navigation&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)).to have_button(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Sign out&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;特定のスコープで操作、検証&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;whithin&lt;/code&gt;により、入力、検証の範囲を指定することができる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# CSS, XPathなどで指定することが可能&lt;/span&gt;
within &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;li#employee&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  fill_in &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:with&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Jimmy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

within &lt;span class=&quot;synConstant&quot;&gt;:xpath&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;//div[contains(., &amp;quot;bar&amp;quot;)]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  ...
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

within &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;リストテキスト&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  ...
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;別のウインドウを操作、検証&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;window_opend_by&lt;/code&gt;と&lt;code&gt;within_window&lt;/code&gt;で別のウインドウの操作、検証を行うことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# いいねボタンを押すと、Facebookのログイン用のウインドウが開かれる&lt;/span&gt;
facebook_window = window_opened_by &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  click_button &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;いいね&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Facebookのログイン用のウインドウで情報を登録してログインしている&lt;/span&gt;
within_window facebook_window &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  find(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#login_email&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).set(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;a@example.com&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
  find(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#login_password&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).set(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;qwerty&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
  click_button &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ログイン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;デバッグ&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;tmp/capybara&lt;/code&gt;配下にスナップショットのHTMLファイルを作成する&lt;br /&gt;
(CSS適用や入力フィールドが入力されていないので注意)&lt;br /&gt;
&lt;a href=&quot;https://github.com/copiousfreetime/launchy&quot; target=&quot;_blank&quot;&gt;launchy&lt;/a&gt;というgemを入れるとテスト実行時に自動的にブラウザで開いてくれる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;save_and_open_page
&lt;/pre&gt;&lt;p&gt;画像ファイルとして画面を表示する(CSSや入力フィールドは入力されている)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;page.save_screenshot &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;screenshot.png&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
HTMLのbody要素の中身を確認する&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;puts page.body     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; HTMLボディの内容 ...&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-cheat-capybara-webkit&quot;&gt;JSのテスト(with Capybara-WebKit)&lt;/h3&gt;Javascriptをテストする場合、&lt;code&gt;js: true&lt;/code&gt;を追加する。&lt;br /&gt;
&lt;code&gt;rails_helper.rb&lt;/code&gt;での、通常時とJS True時のDatabase Cleanerの削除方式が違うので注意が必要。&lt;/p&gt;&lt;p&gt;Driverがサポートしている場合、モーダルを操作できる。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;操作 - JSのalert, confirmダイアログのボタンを押す&lt;/h4&gt;
    &lt;p&gt;CapybaraとCapybara-Webkitを使うことで、Javascriptの&lt;code&gt;alert()&lt;/code&gt;や&lt;code&gt;confirm&lt;/code&gt;で呼ばれたダイアログのボタンを押せます。&lt;br /&gt;
Todo alert画像&lt;/p&gt;&lt;p&gt;注意点として、下記のメソッドは結果に関わらず次へ進んでしまうらしいので、メッセージ取得などの結果を確実に取得したい場合はsleepなどを入れる必要がある&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# OKボタンを押す&lt;/span&gt;
page.driver.browser.accept_js_confirms

&lt;span class=&quot;synComment&quot;&gt;# NOボタンを押す&lt;/span&gt;
page.driver.browser.dismiss_js_confirms

&lt;span class=&quot;synComment&quot;&gt;# メッセージを取得する&lt;/span&gt;
page.driver.browser.alert_messages
page.driver.browser.confirm_messages
page.driver.browser.console_messages
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;エラー(404, 500など)のテスト&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;rescue_from&lt;/code&gt;でエラーを定義した時に、404や500エラーを意図的に発生させたいことがあると思います。&lt;br /&gt;
RSpecやCapybaraの機能を使うこと簡単にテストすることができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;### アプリケーションコード ###&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActionController&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  protect_from_forgery &lt;span class=&quot;synConstant&quot;&gt;:with&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:exception&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 例外ハンドル&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# NOTICE: rescue_from は下から評価される&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.env.development?
    rescue_from &lt;span class=&quot;synType&quot;&gt;Exception&lt;/span&gt;,                        &lt;span class=&quot;synConstant&quot;&gt;:with&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:render_500&lt;/span&gt;
    rescue_from &lt;span class=&quot;synType&quot;&gt;ActionController&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RoutingError&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;:with&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:render_404&lt;/span&gt;
    rescue_from &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;RecordNotFound&lt;/span&gt;,     &lt;span class=&quot;synConstant&quot;&gt;:with&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:render_404&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;### テストコード ###&lt;/span&gt;
describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;404エラー&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;RoutingError&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      visit &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/undefined_routing_path&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 存在しないパスにアクセスする&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;404エラーページに遷移すること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      expect(page).to have_content(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;404 File not found&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ステータスコードが404であること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      expect(page.status_code).to eq &lt;span class=&quot;synConstant&quot;&gt;404&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;RecordNotFound&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      visit admin_shop_path(&lt;span class=&quot;synConstant&quot;&gt;1000000&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# 存在しないレコードのIDにアクセスする&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;404エラーページに遷移すること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      expect(page).to have_content(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;404 File not found&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ステータスコードが404であること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      expect(page.status_code).to eq &lt;span class=&quot;synConstant&quot;&gt;404&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;


describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;500エラー&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 一覧画面に遷移したら例外を発生させる&lt;/span&gt;
    expect_any_instance_of(&lt;span class=&quot;synType&quot;&gt;ProductsController&lt;/span&gt;).to receive(&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;).and_throw(&lt;span class=&quot;synType&quot;&gt;Exception&lt;/span&gt;)

    visit products_path
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;500エラーページに遷移すること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;500 Internal Server Error&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ステータスコードが500であること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    expect(page.status_code).to equal(&lt;span class=&quot;synConstant&quot;&gt;500&lt;/span&gt;)
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
          <pubDate>Sat, 03 Jan 2015 19:17:32 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450077047919</guid>
          
            <category>Rails Test</category>
          
            <category>Rails中級</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>Factory Girl Railsのチートシート</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150102/1420174315</link>
          <description>&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のテストで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のオブジェクトの作成を簡易に行えるFactoryGirl。&lt;br /&gt;
FactoryGirlについて基本的なことを知っていることを前提に、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でFactoryGirlを使うよく使う機能やTipsをまとめました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.1.7&lt;/li&gt;
&lt;li&gt;Factory Girl 4.4.0&lt;/li&gt;
&lt;li&gt;Factory Girl &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_install&quot;&gt;1. Factory Girlのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_syntax&quot;&gt;2. FactoryGirlシンタックスの省略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_usage&quot;&gt;3. FactoryGirlの使い方あれこれ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_basic&quot;&gt;3.1. オブジェクトのビルド、作成、スタブ作成、属性取得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_create&quot;&gt;3.2. 特定の値を指定してオブジェクトを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_block&quot;&gt;3.3. ブロックを渡すことで細かな処理を記載可能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_list&quot;&gt;3.4. 一度に複数のレコードを作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_define&quot;&gt;4. Factory定義のあれこれ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_dependent&quot;&gt;4.1. 他の属性に依存する属性を定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_hierarchy&quot;&gt;4.2. factoryの階層構造で定義をDRYにしたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_trait&quot;&gt;4.3. 特徴をわかりやすくする。グループ化させる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_sequence&quot;&gt;4.4. 呼び出しのたびに作成するデータを変える&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_belongs_to_association&quot;&gt;4.5. &lt;code&gt;belongs_to&lt;/code&gt;の関連を定義&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_has_many_association&quot;&gt;4.6. &lt;code&gt;has_many&lt;/code&gt;の関連を定義&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_samples&quot;&gt;5. Factoryのサンプル集&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#factory_girl_cheat_samples1&quot;&gt;5.1. transientとinitialize_with&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;factory_girl_cheat_install&quot;&gt;1. Factory Girlのインストール&lt;/h3&gt;&lt;code&gt;Gemfile&lt;/code&gt;に&lt;code&gt;factory_girl_rails&lt;/code&gt;を追加する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;factory_girl_rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# その他必要に応じて&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rspec-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-byebug&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  ...
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Bundlerを実行する&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;factory_girl_cheat_syntax&quot;&gt;2. FactoryGirl&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9&quot;&gt;シンタックス&lt;/a&gt;の省略&lt;/h3&gt;&lt;code&gt;include FactoryGirl::Syntax::Methods&lt;/code&gt;を追加することで、次のように&lt;code&gt;FactoryGirl&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9&quot;&gt;シンタックス&lt;/a&gt;を省略できるのでタイプ数が減り便利です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# シンタックス省略前&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Userモデルを作成&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# シンタックス省略後&lt;/span&gt;
create(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Userモデルを作成&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;FactoryGirl&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9&quot;&gt;シンタックス&lt;/a&gt;を省略する設定&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;### RSpecの場合 ###&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# spec/support/factory_girl.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;config&lt;/span&gt;|
  config.include &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Syntax&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Methods&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# rails_helper.rb&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# コメントアウトを外す&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Dir&lt;/span&gt;[&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.root.join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec/support/**/*.rb&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)].each { |&lt;span class=&quot;synIdentifier&quot;&gt;f&lt;/span&gt;| &lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; f }



&lt;span class=&quot;synComment&quot;&gt;### MiniTestの場合 ###&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;MiniTest&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Unit&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;TestCase&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Syntax&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Methods&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;### MiniTest::Specの場合 ###&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;MiniTest&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Spec&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Syntax&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Methods&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;### minitest-railsの場合 ###&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;MiniTest&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;ActiveSupport&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;TestCase&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Syntax&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Methods&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;factory_girl_cheat_usage&quot;&gt;3. FactoryGirlの使い方あれこれ&lt;/h3&gt;&lt;h4 id=&quot;factory_girl_cheat_basic&quot;&gt;3.1. オブジェクトのビルド、作成、スタブ作成、属性取得&lt;/h4&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 次のFactoryが定義されている前提&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# spec/factories/users.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;.define &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  factory &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    name &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyString&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    sex &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;male&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    age &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Userインスタンスを返す(DBに保存されていない)&lt;/span&gt;
user = build(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;User id: nil, name: &amp;quot;MyString&amp;quot;, sex: &amp;quot;male&amp;quot;, age: 1, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Userインスタンスを返す(DBに保存されている)&lt;/span&gt;
user = create(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;User id: 1, name: &amp;quot;MyString&amp;quot;, sex: &amp;quot;male&amp;quot;, age: 1, created_at: &amp;quot;2014-12-09 12:50:05&amp;quot;, updated_at: &amp;quot;2014-12-09 12:50:05&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# すべての定義された属性が格納されたスタブ化されたオブジェクトを返す&lt;/span&gt;
stub = build_stubbed(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;User id: 1001, name: &amp;quot;MyString&amp;quot;, sex: &amp;quot;male&amp;quot;, age: 1, screated_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 通常のnew, create, updateに渡せる属性のハッシュを返す&lt;/span&gt;
attrs = attributes_for(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; {:name=&amp;gt;&amp;quot;MyString&amp;quot;, :sex=&amp;gt;&amp;quot;male&amp;quot;, :age=&amp;gt;1}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;factory_girl_cheat_create&quot;&gt;3.2. 特定の値を指定してオブジェクトを作成&lt;/h4&gt;上記すべての&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の第2引数にハッシュで属性名と値を渡すことで、特定の値を設定してオブジェクトを作成できる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# name属性を&amp;quot;Tom&amp;quot;, age属性を30で作成&lt;/span&gt;
user = build(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Tom&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;30&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;User id: nil, name: &amp;quot;Tom&amp;quot;, sex: &amp;quot;male&amp;quot;, age: 30, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;factory_girl_cheat_block&quot;&gt;3.3. ブロックを渡すことで細かな処理を記載可能&lt;/h4&gt;上記のすべての&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;でブロックが使える&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# userオブジェクトとそれに紐づくpostオブジェクトを作成(+DB保存)している&lt;/span&gt;
create(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;user&lt;/span&gt;|
  user.posts.create(attributes_for(&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;))
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;factory_girl_cheat_list&quot;&gt;3.4. 一度に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のレコードを作成する&lt;/h4&gt;上記のすべての&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に&lt;code&gt;_list&lt;/code&gt;を追加することで、一度に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のオブジェクトの生成ができる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 25ユーザーを作成(DBに未保存)&lt;/span&gt;
build_users   = build_list(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;25&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 25ユーザーを作成(DBに保存済)&lt;/span&gt;
created_users = create_list(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;25&lt;/span&gt;)

build_stubbed_list(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;25&lt;/span&gt;)
attributes_for_list(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;25&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 特定の値を設定して、複数のオブジェクト作成することも可能&lt;/span&gt;
twenty_years_olds = create_list(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;factory_girl_cheat_define&quot;&gt;4. Factory定義のあれこれ&lt;/h3&gt;&lt;h4 id=&quot;factory_girl_cheat_dependent&quot;&gt;4.1. 他の属性に依存する属性を定義する&lt;/h4&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;.define &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  factory &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 名前にageの値も入れる&lt;/span&gt;
    name { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyString-&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;age&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; }
    sex &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;male&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    age &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 利用&lt;/span&gt;
create(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;User id: 1, name: &amp;quot;MyString-1&amp;quot;, age: 1, sex: &amp;quot;male&amp;quot;, created_at: &amp;quot;...&amp;quot;, updated_at: &amp;quot;...&amp;quot; &amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;factory_girl_cheat_hierarchy&quot;&gt;4.2. factoryの階層構造で定義をDRYにしたい&lt;/h4&gt;Factoryを階層構造にすることでDRYに様々なFactoryを作成できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;.define &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  factory &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    name { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyString-&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;age&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; }
    sex &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;male&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    age &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# name属性だけ設定&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# それ以外は上位階層の値を設定&lt;/span&gt;
    factory &lt;span class=&quot;synConstant&quot;&gt;:tom&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      name &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Tom&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 利用&lt;/span&gt;
build(&lt;span class=&quot;synConstant&quot;&gt;:tom&lt;/span&gt;)
=&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#&amp;lt;User id: nil, name: &amp;quot;Tom&amp;quot;, sex: &amp;quot;male&amp;quot;, age: 1, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;factory_girl_cheat_trait&quot;&gt;4.3. 特徴をわかりやすくする。グループ化させる&lt;/h4&gt;Trait(呼び方:トレイ、意味:特色/特性/特徴)を使うことで属性定義をわかりやすくできます。&lt;br /&gt;
また、Traitsを使うことで、Traitをグループ化することがdけいます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;.define &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  factory &lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    name &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;My Awesome Product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

    trait &lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      published &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
      published_at &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.zone.now
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    trait &lt;span class=&quot;synConstant&quot;&gt;:unpublished&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      published &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
      published_at &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    trait &lt;span class=&quot;synConstant&quot;&gt;:week_long_publishing&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      start_at { &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.week.ago }
      end_at   { &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    trait &lt;span class=&quot;synConstant&quot;&gt;:month_long_publishing&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      start_at { &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.month.ago }
      end_at   { &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# traitsでグループ化する&lt;/span&gt;
    factory &lt;span class=&quot;synConstant&quot;&gt;:week_long_published_story&lt;/span&gt;,    &lt;span class=&quot;synConstant&quot;&gt;traits&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:week_long_publishing&lt;/span&gt;]
    factory &lt;span class=&quot;synConstant&quot;&gt;:month_long_published_story&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;traits&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:month_long_publishing&lt;/span&gt;]
    factory &lt;span class=&quot;synConstant&quot;&gt;:week_long_unpublished_story&lt;/span&gt;,  &lt;span class=&quot;synConstant&quot;&gt;traits&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:unpublished&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:week_long_publishing&lt;/span&gt;]
    factory &lt;span class=&quot;synConstant&quot;&gt;:month_long_unpublished_story&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;traits&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:unpublished&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:month_long_publishing&lt;/span&gt;]
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;### 使用 ###&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 第2引数にtraitのシンボルを渡すことで値を設定できる&lt;/span&gt;
build(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;Product id: nil, name: &amp;quot;My Awesome Product&amp;quot;, published: true, published_at: &amp;quot;2014-12-09 13:27:36&amp;quot;, start_at: nil, end_at: nil, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# factoryで定義したシンボル名でオブジェクトを作成できる&lt;/span&gt;
build(&lt;span class=&quot;synConstant&quot;&gt;:week_long_published_product&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;Product id: nil, name: &amp;quot;My Awesome Product&amp;quot;, published: true, published_at: &amp;quot;2014-12-09 13:29:35&amp;quot;, start_at: &amp;quot;2014-12-02 13:30:29&amp;quot;, end_at: &amp;quot;2014-12-09 13:30:29&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;factory_girl_cheat_sequence&quot;&gt;4.4. 呼び出しのたびに作成するデータを変える&lt;/h4&gt;&lt;code&gt;sequence&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使うことで作成するデータを変えることができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;.define &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  factory &lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    sequence(&lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;)   { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyString&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; }
    sequence(&lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;) { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyText&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;   }
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 使用&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 呼び出すたびにオートインクリメントされる(1, 2, 3, ...)&lt;/span&gt;
build(&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;Post id: nil, user_id: nil, title: &amp;quot;MyString1&amp;quot;, content: &amp;quot;MyText1&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
build(&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;Post id: nil, user_id: nil, title: &amp;quot;MyString2&amp;quot;, content: &amp;quot;MyText2&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;factory_girl_cheat_belongs_to_association&quot;&gt;4.5. &lt;code&gt;belongs_to&lt;/code&gt;の関連を定義&lt;/h4&gt;factory名(関連名)と同じ名前を指定することで関連先のモデルも一緒に作成できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# クラス定義&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:posts&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# ファクトリー定義&lt;/span&gt;
factory &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

factory &lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# authorモデルも一緒に作成する&lt;/span&gt;
  author

  &lt;span class=&quot;synComment&quot;&gt;# 関連先のオブジェクトに値を設定できる&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# association :user, name: &amp;quot;Marin&amp;quot;, sex: &amp;quot;female&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# 使用&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# postオブジェクトとそれに関連するuserモデルも作成する&lt;/span&gt;
post = &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;Post id: 2, user_id: 4, title: &amp;quot;MyString3&amp;quot;, content: &amp;quot;MyText3&amp;quot;, created_at: &amp;quot;2014-12-09 13:37:14&amp;quot;, updated_at: &amp;quot;2014-12-09 13:37:14&amp;quot;&amp;gt;&lt;/span&gt;
post.user
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;User id: 4, name: &amp;quot;MyString-1&amp;quot;, age: 1, created_at: &amp;quot;2014-12-09 13:37:14&amp;quot;, updated_at: &amp;quot;2014-12-09 13:37:14&amp;quot;, sex: &amp;quot;male&amp;quot;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;factory_girl_cheat_has_many_association&quot;&gt;4.6. &lt;code&gt;has_many&lt;/code&gt;の関連を定義&lt;/h4&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# クラス定義&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:posts&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# ファクトリー定義&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;.define &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  factory &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    name &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyString&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

    factory &lt;span class=&quot;synConstant&quot;&gt;:user_with_posts&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# ignoreブロックでDBの属性とは関係ない属性を定義&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# FactoryGirl 4.5以降はignoreではなくtransientを使う&lt;/span&gt;
      ignore &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        posts_count &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# userに関連したpostを作成する&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#   user - 作成されたuserインスタンス自身&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#   evaluator - ignore(transient)内の属性を含むファクトリのすべての属性を保持&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#   create_listの第2引数は、作成する関連をもったレコードの数を指定する&lt;/span&gt;
      after(&lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;user&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;evaluator&lt;/span&gt;|
        create_list(&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;, evaluator.posts_count, &lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;: user)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# 使い方&lt;/span&gt;
create(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;).posts.length            &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 0&lt;/span&gt;
create(&lt;span class=&quot;synConstant&quot;&gt;:user_with_posts&lt;/span&gt;).posts.length &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 5&lt;/span&gt;
create(&lt;span class=&quot;synConstant&quot;&gt;:user_with_posts&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;posts_count&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt;).posts.length &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 15&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
FactoryGirlでは`after(:create)`を含め以下4つのコールバックがあります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;after(&lt;span class=&quot;synConstant&quot;&gt;:build&lt;/span&gt;)      &lt;span class=&quot;synComment&quot;&gt;# FactoryGirl.build, FactoryGirl.createでのbuild後に呼ばれる&lt;/span&gt;
before(&lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# FactoryGirl.createで保存される前に呼ばれる&lt;/span&gt;
after(&lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;)    &lt;span class=&quot;synComment&quot;&gt;# FactoryGirl.createで保存される後に呼ばれる&lt;/span&gt;
after(&lt;span class=&quot;synConstant&quot;&gt;:stub&lt;/span&gt;)       &lt;span class=&quot;synComment&quot;&gt;# FactoryGirl.build_stubbedでスタブされた後に呼ばれる&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;factory_girl_cheat_samples&quot;&gt;5. Factoryのサンプル集&lt;/h3&gt;&lt;h4 id=&quot;factory_girl_cheat_samples1&quot;&gt;5.1. transientとinitialize_with&lt;/h4&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Factory定義&lt;/span&gt;
factory &lt;span class=&quot;synConstant&quot;&gt;:region&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  transient { continent &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt; }

  code &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  name &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Comunidad de Madrid&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

  country &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; continent
      &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;:country&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;continent&lt;/span&gt;: continent)
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;:country&lt;/span&gt;)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# Regionをcodeとcountryで検索する、存在しない場合は作成する&lt;/span&gt;
  initialize_with &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;Region&lt;/span&gt;.find_or_initialize_by(&lt;span class=&quot;synConstant&quot;&gt;code&lt;/span&gt;: code, &lt;span class=&quot;synConstant&quot;&gt;country&lt;/span&gt;: country)
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/factory_girl&quot;&gt;thoughtbot/factory_girl &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md&quot;&gt;factory_girl/GETTING_STARTED.md at master &amp;middot; thoughtbot/factory_girl &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Fri, 02 Jan 2015 13:51:55 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450076592597</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Test</category>
          
        </item>
      
    
      
      
        <item>
          <title>RSpec/Capybara/Capybara-Webkitの導入方法</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150101/1420093487</link>
          <description>&lt;p&gt;RSpecの基本について理解している人を対象に、「&lt;b&gt;RSpecのテストに必要なGem、モデル、コントローラー、Feature(Capybare)、JavaScriptなどの基本的なテストの書き方&lt;/b&gt;」についてまとめました。&lt;/p&gt;&lt;p&gt;下記のサイトも参考になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150102/1420174315&quot; target=&quot;_blank&quot;&gt;Factory Girl Rails のチートシート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150103/1420280252&quot; target=&quot;_blank&quot;&gt;RSpec/Capybara/Capybara-Webkit のレシピ集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作環境&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Mac OS X 10&lt;/li&gt;
&lt;li&gt;Ruby 2.1&lt;/li&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;rspec-rails 3.1.0&lt;/li&gt;
&lt;li&gt;shoulda-matchers 2.6.2&lt;/li&gt;
&lt;li&gt;factory_girl_rails 4.4.1&lt;/li&gt;
&lt;li&gt;capybara   2.4.1&lt;/li&gt;
&lt;li&gt;Phantomjs  1.9.8&lt;/li&gt;
&lt;li&gt;poltergeist 1.5.1&lt;/li&gt;
&lt;li&gt;capybara-webkit 1.3.0&lt;/li&gt;
&lt;li&gt;database_cleaner 1.3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-preapre-ut-to-e2e&quot;&gt;UTからE2Eテストのための準備（RSpec, FactoryGirlなど）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-model&quot;&gt;Modelのテスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-controller&quot;&gt;Controllerのテスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-helper&quot;&gt;Helperのテスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-api&quot;&gt;APIのテスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-e2e-features&quot;&gt;E2E(Features)のテスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-prepare-capybara-webkit&quot;&gt;E2Eテスト(JavaScript)のための準備（Capybara-Webkitなど）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rspec-prepare-javascript-poltergist&quot;&gt;E2Eテスト(JavaScript)のための準備（PhantomJS, Poltergistなど）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;rspec-preapre-ut-to-e2e&quot;&gt;1. UTからE2Eテストのための準備（RSpec, FactoryGirlなど）&lt;/h3&gt;&lt;code&gt;Gemfile&lt;/code&gt;に以下を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# デバッグに便利なGem&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# rails console(もしくは、rails c)でirbの代わりにpryを使われる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-doc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# methodを表示&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-byebug&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# デバッグを実施(Ruby 2.0以降で動作する)&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-stack_explorer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# スタックをたどれる&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# RSpecの基本的なGem&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rspec-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;shoulda-matchers&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;factory_girl_rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# E2Eテストを実施するために必要&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;rspecの設定ファイルを作成する&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install
rails g rspec:install&lt;/pre&gt;&lt;p&gt;設定ファイルに設定をする(&lt;code&gt;Add&lt;/code&gt;を記載している)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/rails_helper.rb&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# This file is copied to spec/ when you run &#39;rails generate rspec:install&#39;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] ||= &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.expand_path(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;../../config/environment&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;__FILE__&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rspec/rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Add additional requires below this line. Rails is not loaded until this point!&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# Add&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# Add&lt;/span&gt;


&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;config&lt;/span&gt;|
  &lt;span class=&quot;synComment&quot;&gt;# FactoryGirl でレシーバ無しでFactoryGirlのメソッド呼び出しを可能にする&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Ex: FactoryGirl.create(:post) =&amp;gt; create(:post)&lt;/span&gt;
  config.include &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Syntax&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Methods&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# Add&lt;/span&gt;
  ...
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-model&quot;&gt;2. Modelのテスト&lt;/h3&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;基本&lt;/h5&gt;
    
&lt;ul&gt;
&lt;li&gt;ビジネスロジックが集まる箇所なので、基本的にはテストを書く。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attr_accessor&lt;/code&gt;、&lt;code&gt;presence: true&lt;/code&gt;などバグが入る可能性が少ない箇所はテストは書かない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;ModelとFactoryの生成&lt;/h5&gt;
    &lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ rails g rspec:model post
      create  spec/models/post_spec.rb
      invoke  factory_girl
      create    spec/factories/posts.rb&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;モデルのテストの作成&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# テスト対象のモデルファイル&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/models/post.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;uniquness&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;length&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;maximum&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;500&lt;/span&gt; }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# テストファイル&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# spec/models/post_spec.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:model&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#title&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    it { is_expected.to validate_presence_of(&lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;) }
    it { is_expected.to validate_uniqueness_of(&lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;) }
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    it { is_expected.to validate_presence_of(&lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;) }
    it { is_expected.to ensure_length_of(&lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;) }
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;参照：&lt;a href=&quot;http://thoughtbot.github.io/shoulda-matchers/v2.7.0/&quot; target=&quot;_blank&quot;&gt;Shoulda Matcherの公式ドキュメント v2.7.0&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-controller&quot;&gt;3. Controllerのテスト&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;基本&lt;/h5&gt;
    
&lt;ul&gt;
&lt;li&gt;E2E(Features)と重複するので、画面入力で制御されていてその異常パラメーターがこないなどの異常系をテストする&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;コントローラーのテストで検証すること&lt;/h5&gt;
    &lt;p&gt; - レスポンスのステータス&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(response).to be_success
expect(response[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Contetn-Type&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;]).to =~ &lt;span class=&quot;synSpecial&quot;&gt;%r^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;text/html!&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ビューに渡されるインスタンス変数&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(assins(&lt;span class=&quot;synConstant&quot;&gt;:entries&lt;/span&gt;)).to == &lt;span class=&quot;synType&quot;&gt;Entry&lt;/span&gt;.all
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;描画したテンプレート&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;expect(response).to render_template(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
expect(response).to redirect_to(entries_url)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;ModelとFactoryの生成&lt;/h5&gt;
    &lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g rspec:controller post
      create  spec/controllers/post_controller_spec.rb&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;コントローラーのテスト作成&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# テスト対象のコントローラーファイル&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/controllers/posts_controller.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# POST /posts&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# POST /posts.json&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.new(post_params)

  respond_to &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;|
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;.save
      format.html { redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Post was successfully created.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
      format.json { render &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:created&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;location&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      format.html { render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt; }
      format.json { render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;.errors, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:unprocessable_entity&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# テストファイル&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# spec/controllers/posts_controller_spec.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synType&quot;&gt;PostsController&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:controller&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;valid_attributes&lt;/span&gt;
    { &lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;invalid_attributes&lt;/span&gt;
    { &lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; }
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;POST create&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;with valid params&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;creates a new Post&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        expect {
          post &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;, {&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt; =&amp;gt; valid_attributes}
        }.to change(&lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:count&lt;/span&gt;).by(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;assigns a newly created post as @post&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        post &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;, {&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt; =&amp;gt; valid_attributes}
        expect(assigns(&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;)).to be_a(&lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;)
        expect(assigns(&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;)).to be_persisted
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;redirects to the created post&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        post &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;, {&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt; =&amp;gt; valid_attributes}
        expect(response).to redirect_to(&lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.last)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;with invalid params&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;assigns a newly created but unsaved post as @post&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        post &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;, {&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt; =&amp;gt; invalid_attributes}
        expect(assigns(&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;)).to be_a_new(&lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

      it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;re-renders the &#39;new&#39; template&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        post &lt;span class=&quot;synConstant&quot;&gt;:create&lt;/span&gt;, {&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt; =&amp;gt; invalid_attributes}
        expect(response).to render_template(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;参照：&lt;a href=&quot;http://thoughtbot.github.io/shoulda-matchers/v2.7.0/&quot; target=&quot;_blank&quot;&gt;Shoulda Matcherの公式ドキュメント v2.7.0&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-helper&quot;&gt;4. Heloperのテスト&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;基本&lt;/h5&gt;
    
&lt;ul&gt;
&lt;li&gt;ヘルパーはロジックをがっつり記載する箇所なので基本的にテストをする&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;helper_specの生成&lt;/h5&gt;
    &lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g rspec:helper application
      create  spec/helpers/application_helper_spec.rb&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;ヘルパーのテストの作成&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# テスト対象のヘルパーファイル&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/helpers/application_helper.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;active_if_current&lt;/span&gt;(path)
    &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; current_page?(path)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# テストファイル&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# spec/helpers/application_helper_spec.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synType&quot;&gt;ApplicationHelper&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:helper&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;active_if_current&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    subject { helper.active_if_current(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/any_path&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) }

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;現在のページが引数のパスと等しい場合&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      it &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        allow(helper).to receive(&lt;span class=&quot;synConstant&quot;&gt;:current_page?&lt;/span&gt;).and_return(&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
        expect(subject).to eq &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    context &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;現在のページが引数のパスと等しくない場合&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      it &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
        allow(helper).to receive(&lt;span class=&quot;synConstant&quot;&gt;:current_page?&lt;/span&gt;).and_return(&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
        expect(subject).to be_nil
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-api&quot;&gt;5. APIのテスト&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;基本&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;APIのテストには、requestsを使います。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;詳細は次の記事を参照してください。&lt;br /&gt;
&lt;iframe src=&quot;http://ruby-rails.hatenadiary.com/embed/20150108/1420675366&quot; title=&quot;RailsでAPI作成とAPIのテストのまとめ - Rails Webook&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150108/1420675366&quot;&gt;RailsでAPI作成とAPIのテストのまとめ - Rails Webook&lt;/a&gt;&lt;/iframe&gt;&lt;br /&gt;
&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150108/1420675366&quot;&gt;Rails&amp;#x3067;API&amp;#x4F5C;&amp;#x6210;&amp;#x3068;API&amp;#x306E;&amp;#x30C6;&amp;#x30B9;&amp;#x30C8;&amp;#x306E;&amp;#x307E;&amp;#x3068;&amp;#x3081; - Rails Webook&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-e2e-features&quot;&gt;6. E2E(Features)のテスト&lt;/h3&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;基本&lt;/h5&gt;
    
&lt;ul&gt;
&lt;li&gt;E2E(Features)でルート、コントローラー、ビュー、モデルのつながりの１機能のテストをする&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;Feature Specの生成&lt;/h5&gt;
    &lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g rspec:feature post
      create  spec/features/posts_spec.rb&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;Feature Specのテストの作成&lt;/h5&gt;
    &lt;p&gt;テスト対象のファイル(ルート、コントローラー、ビュー、モデルファイル)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config/routes.rb&lt;/li&gt;
&lt;li&gt;app/models/post.rb&lt;/li&gt;
&lt;li&gt;app/controllers/posts_controller.rb (new, createメソッド)&lt;/li&gt;
&lt;li&gt;app/views/posts/new.html.erb&lt;/li&gt;
&lt;li&gt;app/views/posts/show.html.erb&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
テストファイルのサンプルです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/features/post_spec.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:feature&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;新規登録&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    before &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      visit posts_path      &lt;span class=&quot;synComment&quot;&gt;# 一覧画面に遷移&lt;/span&gt;
      click_link &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;New Post&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# &amp;quot;New Post&amp;quot;リンクを押す&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;投稿新規作成画面が表示されること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      expect(page.current_path).to eq new_post_path
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;投稿を新規作成できること&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# テキストフィールドに値を入力する&lt;/span&gt;
      fill_in &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;タイトル&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      fill_in &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;本文&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      click_button &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create Post&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# 画面に&amp;quot;Post was ...&amp;quot;と表示されていることを確認&lt;/span&gt;
      expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Post was successfully created.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;タイトル&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      expect(page).to have_content &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;本文&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# データベースに登録された内容を確認(必要に応じて確認)&lt;/span&gt;
      post = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.last
      expect(post.title).to eq &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;タイトル&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      expect(post.content).to eq &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;本文&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;CapybaraのDSL：&lt;a href=&quot;https://github.com/jnicklas/capybara#the-dsl&quot; blank=&quot;_blank&quot;&gt;CapybaraのDSL&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-prepare-capybara-webkit&quot;&gt;7. E2Eテスト(JavaScript)のための準備（Capybara-Webkitなど）&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/thoughtbot/capybara-webkit/wiki/Installing-Qt-and-compiling-capybara-webkit&quot;&gt;QTツールのインストール方法&lt;/a&gt;を見て、QTツールをインストールする。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;にJSをテストするためのドライバーの&lt;b&gt;Capybara-Webkit&lt;/b&gt;を追加する。&lt;br /&gt;
ドライバは別プロセスで実行されるので、テスト毎にデータベースを元の状態に戻せないので、元に戻せるようにするために&lt;b&gt;Database Cleaner&lt;/b&gt;も追加する。&lt;br /&gt;
&lt;i&gt;Linuxの場合は、&lt;code&gt;headless&lt;/code&gt;というgemと、&lt;code&gt;xvfb-run&lt;/code&gt;というユーティリティのインストールが必要かもしれない。&lt;br /&gt;
参照: &lt;a href=&quot;https://github.com/thoughtbot/capybara-webkit#ci&quot; target=&quot;_blank&quot;&gt;capybara-webkit on CI&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
group &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# E2Eテスト(JavaScript)を実施するために必要&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara-webkit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;database_cleaner&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、DatabaseCleanerを利用するように設定を行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/rails_helper.rb&lt;/span&gt;

...

&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 追加箇所 JavascriptのDriverをwebkitにする&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Capybara&lt;/span&gt;.javascript_driver = &lt;span class=&quot;synConstant&quot;&gt;:webkit&lt;/span&gt;

...

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;config&lt;/span&gt;|

  &lt;span class=&quot;synComment&quot;&gt;# If you&#39;re not using ActiveRecord, or you&#39;d prefer not to run each of your&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# examples within a transaction, remove the following line or assign false&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# instead of true.&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# config.use_transactional_fixtures = true&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 追加箇所 trueからfalseにする&lt;/span&gt;
  config.use_transactional_fixtures = &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 追加箇所 開始&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# suite: RSpecコマンドでテストを実行する単位&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# all:  各テストファイル(xxx_spec.rb)単位&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# each: 各テストケース(it)単位&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:suite&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean_with &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# テスト開始時にDBをクリーンにする&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# js以外のテスト時は通常のtransactionでデータを削除する&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.strategy = &lt;span class=&quot;synConstant&quot;&gt;:transaction&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# jsのテスト時はtruncationで削除する&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;js&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.strategy = &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.start
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.after(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.after(&lt;span class=&quot;synConstant&quot;&gt;:all&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean_with &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# all時にDBをクリーンにする&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 追加箇所 終了&lt;/span&gt;

  ...
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで、Specファイル内に次ように&lt;code&gt;js: true&lt;/code&gt;と追記すればJavaScriptのテストが可能になります。&lt;br /&gt;
&lt;code&gt;js: true&lt;/code&gt;を渡したブロック内がJavaScript用のドライバを利用してテストされます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;describe &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;JavaScriptのテスト&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;js&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# JavaScriptがつかわれている箇所のテスト&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

...

it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;JavaScriptのテスト&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;js&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# JavaScriptがつかわれている箇所のテスト&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;rspec-prepare-javascript-poltergist&quot;&gt;8. E2Eテスト(JavaScript)のための準備（PhantomJS, Poltergistなど）&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;E2E(JavaScript)でE2Eと一緒に、AjaxなどのJavaScriptのテストを行う&lt;/li&gt;
&lt;li&gt;ドライバーはseleniumなどあるが実行時間がかかり、画面が必要なのでCIなどで実行しにくいので、capybara-webkitかpoltergeistが採用されている&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://phantomjs.org/&quot; target=&quot;_blank&quot;&gt;PhantomJS&lt;/a&gt;をインストールする。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;にJSをテストするためのドライバーの&lt;b&gt;Poltergeist&lt;/b&gt;を追加する。&lt;br /&gt;
ドライバは別プロセスで実行されるので、テスト毎にデータベースを元の状態に戻せないので、元に戻せるようにするために&lt;b&gt;Database Cleaner&lt;/b&gt;も追加する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
group &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# E2Eテスト(JavaScript)を実施するために必要&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;poltergeist&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;database_cleaner&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Gemをインストールします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、DatabaseCleanerを利用するように設定を行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# spec/rails_helper.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# This file is copied to spec/ when you run &#39;rails generate rspec:install&#39;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] ||= &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;spec_helper&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.expand_path(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;../../config/environment&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;__FILE__&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rspec/rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Add additional requires below this line. Rails is not loaded until this point!&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/rspec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;capybara/poltergeist&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# Add&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;Capybara&lt;/span&gt;.javascript_driver = &lt;span class=&quot;synConstant&quot;&gt;:poltergeist&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# Add&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Requires supporting ruby files with custom matchers and macros, etc, in&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# spec/support/ and its subdirectories. Files matching `spec/**/*_spec.rb` are&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# run as spec files by default. This means that files in spec/support that end&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# in _spec.rb will both be required and run as specs, causing the specs to be&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# run twice. It is recommended that you do not name files matching this glob to&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# end with _spec.rb. You can configure this pattern with the --pattern&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# option on the command line or in ~/.rspec, .rspec or `.rspec-local`.&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# The following line is provided for convenience purposes. It has the downside&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# of increasing the boot-up time by auto-requiring all files in the support&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# directory. Alternatively, in the individual `*_spec.rb` files, manually&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# require only the support files necessary.&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Dir[Rails.root.join(&amp;quot;spec/support/**/*.rb&amp;quot;)].each { |f| require f }&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Checks for pending migrations before tests are run.&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# If you are not using ActiveRecord, you can remove this line.&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;.maintain_test_schema!

&lt;span class=&quot;synType&quot;&gt;RSpec&lt;/span&gt;.configure &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;config&lt;/span&gt;|
  &lt;span class=&quot;synComment&quot;&gt;# FactoryGirl でレシーバ無しでFactoryGirlのメソッド呼び出しを可能にする&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Ex: FactoryGirl.create(:post) =&amp;gt; create(:post)&lt;/span&gt;
  config.include &lt;span class=&quot;synType&quot;&gt;FactoryGirl&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Syntax&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Methods&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# Remove this line if you&#39;re not using ActiveRecord or ActiveRecord fixtures&lt;/span&gt;
  config.fixture_path = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.root&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/spec/fixtures&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# If you&#39;re not using ActiveRecord, or you&#39;d prefer not to run each of your&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# examples within a transaction, remove the following line or assign false&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# instead of true.&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# config.use_transactional_fixtures = true&lt;/span&gt;
  config.use_transactional_fixtures = &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# Change&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# Add Begin&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# suite: RSpecコマンドでテストを実行する単位&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# all:  各テストファイル(xxx_spec.rb)単位&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# each: 各テストケース(it)単位&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:suite&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean_with &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# テスト開始時にDBをクリーンにする&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# js以外のテスト時は通常のtransactionでデータを削除する&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.strategy = &lt;span class=&quot;synConstant&quot;&gt;:transaction&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# jsのテスト時はtruncationで削除する&lt;/span&gt;
  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;js&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.strategy = &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.before(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.start
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.after(&lt;span class=&quot;synConstant&quot;&gt;:each&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

  config.after(&lt;span class=&quot;synConstant&quot;&gt;:all&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;DatabaseCleaner&lt;/span&gt;.clean_with &lt;span class=&quot;synConstant&quot;&gt;:truncation&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# all時にDBをクリーンにする&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# Add End&lt;/span&gt;

  ...
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rspec/rspec-rails&quot; target=&quot;_blank&quot;&gt;RSpec-RailsのGitHubページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://thoughtbot.github.io/shoulda-matchers/v2.7.0/&quot; target=&quot;_blank&quot;&gt;Shoulda Matcherの公式ドキュメント v2.7.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jnicklas/capybara#the-dsl&quot; target=&quot;_blank&quot;&gt;CapybaraのDSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/teampoltergeist/poltergeist&quot; target=&quot;_blank&quot;&gt;PoltergeistのGitHubページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/capybara-webkit&quot; target=&quot;_blank&quot;&gt;Capybara-WebkitのGitHubページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/teampoltergeist/poltergeist&quot; blank=&quot;_blank&quot;&gt;PoltergeistのGitHubページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 01 Jan 2015 15:24:47 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450078648794</guid>
          
            <category>Rails中級</category>
          
            <category>まとめ</category>
          
            <category>Rails Test</category>
          
        </item>
      
        <item>
          <title>Ruby 2.1 / Rails4.1 の意外に忘れられている便利なメソッド</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150101/1420049679</link>
          <description>&lt;p&gt;Ruby 2.1 / Rails4.1 での意外に忘れらている便利なメソッドを集めました。&lt;/p&gt;&lt;p&gt;RubyやRailsでは有用なメソッドがたくさん実装されており、車輪の再発明にならないように、それらを覚えて適切な箇所で使うだけで生産性はあがります。&lt;/p&gt;&lt;p&gt;&lt;i&gt;（大雑把に書いたので、まだまとまってないので、随時修正します）&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.1.2&lt;/li&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveSupport 4.1.7&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-ruby-basic&quot;&gt;Rubyの基本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;代入、範囲、正規表現、%記法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-meta-programming&quot;&gt;メタプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;文字列からクラスを作成 constantize&lt;br /&gt;
動的にメソッドを定義 class_eval&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-object&quot;&gt;Object&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;nilや空を判定する(present?, blank?)、nilや空以外の値を取得(present)、nilを扱う(try)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-string&quot;&gt;String&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;複数行の文字列(ヒアドキュメント)、文字列を含む(include?, index)、パターンにマッチする(match, =~)&lt;br /&gt;
パターンで置換する(gsub)、文字列で分割し配列にする(split)&lt;br /&gt;
1行ずつ取り出す(each_line)、1文字ずつ取り出す(each_char)、部分文字列を取り出す(slice)&lt;br /&gt;
文字列を削除(delete)、空白を除く(strip)、改行文字除く(chomp)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-array&quot;&gt;Array&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;長さ(length, size), 空かどうか(empty?), 値が含まれるか(include?)&lt;br /&gt;
繰り返し(each, each_with_index, reverse_each)&lt;br /&gt;
連結(+)、追加(&lt;&lt;)&lt;br /&gt;
１要素の検索(find), 複数要素の検索(select, reject), 最大値、最小値(max, min)、各要素を処理(collect, map)&lt;br /&gt;
すべて◯◯か(all?), どれか◯◯か(any?)&lt;br /&gt;
各要素を結合(join)、合計を計算(sum)&lt;br /&gt;
ソート(sort)、重複除去(uniq)、ランダムに要素を取得(sample)&lt;br /&gt;
&lt;a href=&quot;http://ref.xaio.jp/ruby/classes/array&quot;&gt;その他のArrayクラスのメソッド&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-hash&quot;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;要素の取り出しと設定(&lt;span data-unlink&gt;, &lt;/span&gt;=)、キーを配列で取得(keys)、値を配列で取得(values)、値の数(length)&lt;br /&gt;
空かどうか(empty?)、キーが含まれるか(has_key?)、値が含まれるか(has_value?)&lt;br /&gt;
繰り返し(each)、値の取得(select, collect, map)&lt;br /&gt;
ハッシュを統合(merge)、差を取得する(diff)&lt;br /&gt;
&lt;a href=&quot;http://ref.xaio.jp/ruby/classes/hash&quot;&gt;その他のHashクラスのメソッド&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-activerecord&quot;&gt;ActiveRecord&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;指定した要素を配列で取得(pluck)&lt;br /&gt;
変更を確認する(changes, changed?)&lt;br /&gt;
カラム値の存在有無を確認(カラム名+?)&lt;br /&gt;
DBに保存されていないか(new_record?)、DBに保存されているか(persisted?)&lt;br /&gt;
DBに存在しない場合作成(find_or_create_by)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#useful-methods-of-controller&quot;&gt;コントローラー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;コントローラーのメソッドをビューで使う（helper_method）&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-ruby-basic&quot;&gt;Rubyの基本&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;代入&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 多重代入&lt;/span&gt;
a, b = &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;
a &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
b &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;

a, b = [&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]
a &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
b &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;

a, *b = [&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]
a &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
b &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [2, 3]&lt;/span&gt;

a, b, c = [&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;]
a &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
b &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
c &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; nil&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 入れ替え&lt;/span&gt;
a, b = b, a

&lt;span class=&quot;synComment&quot;&gt;# 自己代入&lt;/span&gt;
a += &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# a = a + 1&lt;/span&gt;
b ||= &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# b = b || 2&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;範囲&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&gt;ruby|&lt;br /&gt;
(1..5).include?(5)  # =&gt; true  (5も含む)&lt;br /&gt;
(1...5).include?(5) # =&gt; false (5は含まない)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;%記法&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Alice Bob Chrlie&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Alice&amp;quot;, &amp;quot;Bob&amp;quot;, &amp;quot;Chrlie&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-ruby-basic&quot;&gt;Rubyの基本&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;文字列からクラスを作成(constantize)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.constantize &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Userクラスが作成される&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.constantize.new
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; #&amp;lt;User id: nil, name: nil, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 応用: URLから動的にモデルのレコードを読み出す&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# URL例(request.path): /events/:id/comments, /articles/:id/comments&lt;/span&gt;
resource, id = request.path.split(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;# resource = events か articles&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@commentable&lt;/span&gt; = resource.singularize.classify.constantize.find(id)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-meta-programming&quot;&gt;メタプログラミング&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メソッドを動的に定義する(class_eval, module_eval)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Cクラスを定義&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;C&lt;/span&gt;; &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# class_evalメソッドで、Cクラスにmメソッドを定義&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;C&lt;/span&gt;.class_eval &lt;span class=&quot;synSpecial&quot;&gt;%Q{&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  def m&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;    puts &amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  end&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# mメソッドを実行&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;C&lt;/span&gt;.new.m
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; hello&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-object&quot;&gt;Object&lt;/h3&gt;nilや空文字など空でないか確認(present?)&lt;br /&gt;
&#39;&#39;, &#39; &#39;, nil, [], {}など空っぽいもの以外の場合、trueを返す&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, [], {}].each { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;| p a.present? }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# ... （全て false)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;nilや空文字など空であるか確認(blank?)&lt;br /&gt;
&#39;&#39;, &#39; &#39;, &quot;&quot;, &quot; &quot;, nil, [], {}などの空ぽいものの場合、trueを返す&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, [], {}].each { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;| p a.blank? }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# ... （全て true)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;nilや空文字など空でない値を取得(present)&lt;br /&gt;
&#39;&#39;, &#39; &#39;, nil, [], {}など空っぽいもの以外の場合、値を返す。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;.presence &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;a&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&#39;&#39;&lt;/span&gt;.presence  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; nil&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;tryメソッド(nilの場合、nilを返す)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;@person&lt;/span&gt; ? &lt;span class=&quot;synIdentifier&quot;&gt;@pserson&lt;/span&gt;.name : &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# をtryで次のように書き換えれる&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;@poerson&lt;/span&gt;.try(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 引数やブロックも渡せる&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.try(&lt;span class=&quot;synConstant&quot;&gt;:includes?&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-string&quot;&gt;String&lt;/h3&gt;複数行に渡る文字列(ヒアドキュメント)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;str = &amp;lt;&amp;lt;&lt;span class=&quot;synSpecial&quot;&gt;TEXT&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;1行目&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;2行目&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;3行目&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;TEXT&lt;/span&gt;

str &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;1行目\n2行目\n3行目\n&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
指定した文字列を含んでいるか(include?)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.include?(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.include?(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;zy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
指定した文字列を含んでいれば、その開始位置を整数で返す(index)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcdefg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.index(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcdefg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.index(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;zy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
パターンにマッチする(=~, match)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;html = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
html.match(&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(\w)&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;m&lt;/span&gt;|
  p match[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]
  p match[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;&amp;lt;p&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;p&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
パターンで置換(gsub)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;html = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hello,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\r\n&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 改行コードを&amp;lt;br /&amp;gt;に置き換える&lt;/span&gt;
html.gsub(&lt;span class=&quot;synSpecial&quot;&gt;/(\r\n|\r|\n)/&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;br /&amp;gt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;hello,&amp;lt;br /&amp;gt;world&amp;lt;br /&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
指定した文字列で分割し、配列にする(split)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Alice,Bob,Charlie&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.split(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Alice&amp;quot;, &amp;quot;Bob&amp;quot;, &amp;quot;Charlie&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
1行ずつ取り出す(each_line)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&amp;quot;&lt;/span&gt;.each_line { |&lt;span class=&quot;synIdentifier&quot;&gt;line&lt;/span&gt;| p line }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;1行目\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;2行目\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;3行目\n&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
1文字ずつ取り出す(each_char)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.each_char { |&lt;span class=&quot;synIdentifier&quot;&gt;ch&lt;/span&gt;| p ch }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;a&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;b&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
部分文字列を取り出す(slice)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcdefg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.slice(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# 2番目から3文字分&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;bcd&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcdefg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.slice(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# 1文字目から3文字目まで&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;bcd&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcdefg&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.slice(&lt;span class=&quot;synSpecial&quot;&gt;/\w+/&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# 正規表現&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;abcdefg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
指定した文字列を削除(delete)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.delete(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;abe&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.delete(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;xy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;abcde&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
先頭と末尾の空白を取り除く(strip)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; hi &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; “.strip # =&amp;gt; “hi”&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
文字列の末尾の改行文字を除く(chomp)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\r\n&amp;quot;&lt;/span&gt;.chomp  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; “hi”&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&amp;quot;&lt;/span&gt;.chomp    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;hi&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\r&amp;quot;&lt;/span&gt;.chomp    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;hi&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3行目&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&amp;quot;&lt;/span&gt;.chomp &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;1行目\n2行目\n3行目&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-array&quot;&gt;Array&lt;/h3&gt;長さ(length, size)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[].length &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 0&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].length &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 3&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].size   &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 3&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
空かどうか(empty?)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[].empty?  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Railsの場合、ActiveSupportで拡張されたblank?の方が都合が良い場合が多い&lt;/span&gt;
[].blank?  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
値が含まれるか(include?)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].include?(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].include?(&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
繰り返し(each, each_with_index, reverse_each)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].each { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;| p a }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].each_with_index { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;i&lt;/span&gt;| p &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;i&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;番目:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;a&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;0番目:1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;1番目:2&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;2番目:3&amp;quot;&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].reverse_each { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;| p a }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
配列の連結(+)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;] + [&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [1, 2, 3, 4, 5, 6]&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;] + []        &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [1, 2, 3]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
要素の追加(&lt;&lt;)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;      &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [1, 2, 3, 4]&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;] &amp;lt;&amp;lt; [&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [1, 2, 3, [4, 5]]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
１要素の検索(find)、複数要素の検索(select, reject),&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;].find { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n % &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;].find { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n % &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; nil (条件に当てはまらないとnilを返す)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# selectはブロック内の条件に当てはまる要素を返す&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;].select { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n % &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; }
=&amp;gt; [&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;]
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;].select { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n % &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt; }
=&amp;gt; [] (条件に当てはまらないと[]を返す)

&lt;span class=&quot;synComment&quot;&gt;# rejectはブロック内の条件に当てはまらない要素を返す&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;].reject { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n % &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; }
=&amp;gt; [&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;]
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
最大値、最小値(max, min)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;].min  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 1&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;].max &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 10&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
各要素を処理する(collect, map)&lt;br /&gt;
collectもmapも別名で同じ処理をする。ブロックに与えた処理を行ったあとに、それらを配列で返す&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;].map { |&lt;span class=&quot;synIdentifier&quot;&gt;str&lt;/span&gt;| str.capitalize } &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Ruby&amp;quot;, &amp;quot;Rails&amp;quot;]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 別の書き方もできる&lt;/span&gt;
[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;].map(&amp;amp;&lt;span class=&quot;synConstant&quot;&gt;:capitalize&lt;/span&gt;)            &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Ruby&amp;quot;, &amp;quot;Rails&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
すべて◯◯か(all?), どれか◯◯か(any?)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;].all?      &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].all?     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].any?     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].any?   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].one?    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].one?     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;].none?  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ブロックを渡して条件判定ができる&lt;/span&gt;
[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abc tomato&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;xyz tomato&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;123 tomato&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].all? { |&lt;span class=&quot;synIdentifier&quot;&gt;a&lt;/span&gt;| a.include?(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tomato&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
各要素を指定した文字列で結合して文字列で返す(join)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ABC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;DEF&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;GHI&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
=&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ABC,DEF,GHI&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
[].join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
=&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
合計を計算(sum)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].sum             &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 6&lt;/span&gt;
[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ghi&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].sum &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;abcdefghi&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ソート(sort)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;].sort &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [1, 2, 3, 8, 9]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
重複する要素を除去する(uniq)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;].uniq &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [3, 1, 2, 4]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ランダムに要素を取得する(sample)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;].sample &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 5&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;].sample &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-hash&quot;&gt;Hash&lt;/h3&gt;要素の取り出しと設定(&lt;span data-unlink&gt;, &lt;/span&gt;=)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;hash = { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;taro&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;chika&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; } }

&lt;span class=&quot;synComment&quot;&gt;# 要素の取り出し&lt;/span&gt;
hash[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;taro&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;20 }&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 要素の設定&lt;/span&gt;
hash[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] = { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tom&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;25&lt;/span&gt; }
hash
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;1&amp;quot;=&amp;gt;{&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;taro&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;20}, &amp;quot;2&amp;quot;=&amp;gt;{&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;chika&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;18}, &amp;quot;3&amp;quot;=&amp;gt;{&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;tom&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;25}}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;キーを配列で取得(keys)、値を配列で取得(values)、値の数(length)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;hash = { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;taro&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;chika&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; } }

hash.keys   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;]&lt;/span&gt;
hash.values &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [{&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;taro&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;20}, {&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;chika&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;18}]&lt;/span&gt;
hash.length &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;空かどうか(empty?)、キーが含まれるか(has_key?)、値が含まれるか(has_value?)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;hash = { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:tom&lt;/span&gt; }
hash.empty?           &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
hash.has_key?(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;)  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
hash.has_value?(&lt;span class=&quot;synConstant&quot;&gt;:tom&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;

hash = {}
hash.empty?           &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
hash.has_key?(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;)  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
hash.has_value?(&lt;span class=&quot;synConstant&quot;&gt;:tom&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
繰り返し(each)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;hash = { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;taro&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;chika&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; } }

hash.each { |&lt;span class=&quot;synIdentifier&quot;&gt;k&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;v&lt;/span&gt;| p &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;k&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;v&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;1:{\&amp;quot;username\&amp;quot;=&amp;gt;\&amp;quot;taro\&amp;quot;, \&amp;quot;age\&amp;quot;=&amp;gt;20}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;2:{\&amp;quot;username\&amp;quot;=&amp;gt;\&amp;quot;chika\&amp;quot;, \&amp;quot;age\&amp;quot;=&amp;gt;18}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;値の取得(select, collect, map)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;select ... ブロックの条件に合致するハッシュを返す&lt;/li&gt;
&lt;li&gt;collect(map) ... 各要素に対して、処理を行った結果を配列で返す&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;hash = { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;taro&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;chika&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; } }

&lt;span class=&quot;synComment&quot;&gt;# ageが20以上のハッシュを取得する&lt;/span&gt;
hash.select { |&lt;span class=&quot;synIdentifier&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;v&lt;/span&gt;| v[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].to_i &amp;gt;= &lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;1&amp;quot;=&amp;gt;{&amp;quot;username&amp;quot;=&amp;gt;&amp;quot;taro&amp;quot;, &amp;quot;age&amp;quot;=&amp;gt;20}}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ageを配列で取得する&lt;/span&gt;
hash.collect { |&lt;span class=&quot;synIdentifier&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;v&lt;/span&gt;| v[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].to_i }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [20, 18]&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# mapとcollectのエイリアスであるため挙動は同じ&lt;/span&gt;
hash.map { |&lt;span class=&quot;synIdentifier&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;v&lt;/span&gt;| v[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].to_i }
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [20, 18]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ハッシュを統合(merge)&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;h1 = { &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt; }
h2 = { &lt;span class=&quot;synConstant&quot;&gt;published&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; }
h1.merge(h2) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {:price=&amp;gt;100, :published=&amp;gt;false}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 同じ値の場合は、後のハッシュが優先になる&lt;/span&gt;
h1 = { &lt;span class=&quot;synConstant&quot;&gt;published&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;  }
h2 = { &lt;span class=&quot;synConstant&quot;&gt;published&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; }
h1.merge(h2) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {:published=&amp;gt;false}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-activerecord&quot;&gt;ActiveRecord&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;指定した要素を配列で取得(pluck)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.all.pluck(&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#(0.2ms)  SELECT &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot;, &amp;quot;users&amp;quot;.&amp;quot;name&amp;quot; FROM &amp;quot;users&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [[1, nil], [2, &amp;quot;田中&amp;quot;]]&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;変更を確認する(changes, changed?)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;u = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.first

&lt;span class=&quot;synComment&quot;&gt;# 変更された要素を取得する&lt;/span&gt;
u.changes       &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {}&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# すべての要素が変更されたかbooleanで取得&lt;/span&gt;
u.changed?      &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# nameカラムが変更されたかbooleanで取得&lt;/span&gt;
u.name_changed? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;

u.name = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

u.changes       &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; {&amp;quot;name&amp;quot;=&amp;gt;[nil, &amp;quot;test&amp;quot;]}&lt;/span&gt;
u.changed?      &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
u.name_changed? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;カラムの存在有無を確認する(カラム名+?)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;boolean値のカラム&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;u = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.first

&lt;span class=&quot;synComment&quot;&gt;# nil, &amp;quot;&amp;quot;, {}, [], falseなどの場合、falseを返す&lt;/span&gt;
u.name  = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
u.name  = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
u.name = {}
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
u.name = []
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
u.name = &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

u.name = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
u.name? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;DBに保存されていないか(new_record?)、DBに保存されているか(persisted?)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# DBに保存されていない値&lt;/span&gt;
u = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.new
u.new_record? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
u.persisted?  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DBに保存されている値&lt;/span&gt;
u = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.first
u.new_record? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;
u.persisted?  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;DBに存在しない場合作成(find_or_create_by)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# DBに存在する場合、レコードを取得&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find_or_create_by(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;User id: 1, name: &amp;quot;test&amp;quot;, created_at: &amp;quot;2014-11-29 09:02:15&amp;quot;, updated_at: &amp;quot;2014-11-30 10:49:04&amp;quot;, active: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DBに存在しない場合、レコードを作成&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find_or_create_by(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;u&lt;/span&gt;|
  &lt;span class=&quot;synComment&quot;&gt;# 引数で指定した値は自動的に設定される&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ブロック内でその他の値を設定する&lt;/span&gt;
  u.active = &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;User id: 4, name: &amp;quot;test3&amp;quot;, created_at: &amp;quot;2014-11-30 10:51:45&amp;quot;, updated_at: &amp;quot;2014-11-30 10:51:45&amp;quot;, active: false&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;useful-methods-of-controller&quot;&gt;コントローラー&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コントローラーのメソッドをビューで使う（helper_method）&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Controller&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# ビューでcurrent_userメソッドが利用できる&lt;/span&gt;
  helper_method &lt;span class=&quot;synConstant&quot;&gt;:current_user&lt;/span&gt;

  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;current_user&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@_current_user&lt;/span&gt; ||= &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find(session[&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;])
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
end

&lt;span class=&quot;synComment&quot;&gt;# View&lt;/span&gt;
ユーザー名: &amp;lt;%= current_user.name %&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot;&gt;Ruby on Rails API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ref.xaio.jp/ruby&quot;&gt;Ruby&amp;#x30EA;&amp;#x30D5;&amp;#x30A1;&amp;#x30EC;&amp;#x30F3;&amp;#x30B9;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 01 Jan 2015 03:14:39 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075660675</guid>
          
            <category>Ruby</category>
          
            <category>Rails中級</category>
          
            <category>まとめ</category>
          
            <category>リファレンス</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでVirtual Attributes(仮想的な属性)をする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141229/1419856433</link>
          <description>&lt;p&gt;Virtual Attributesとは、モデルのDBに存在しない仮想的な属性のことです。&lt;br /&gt;
モデルにVirtual Attributesを追加することで、DBを変更しないでフォームを変更することができるようになります。&lt;/p&gt;&lt;p&gt;言葉ではいまいち分かりづらいので、次のような、「名前」の入力フィールドと「グループ」のセレクトボックスがある画面を、&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141206/20141206212234.png&quot; alt=&quot;f:id:nipe880324:20141206212234p:plain:w420&quot; title=&quot;f:id:nipe880324:20141206212234p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Virtual Attributesを使って、DBのカラムを変更しないで、「名前」が「苗字」と「氏名」に分かれ、グループを追加する入力フィールドを追加できます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141206/20141206212239.png&quot; alt=&quot;f:id:nipe880324:20141206212239p:plain:w420&quot; title=&quot;f:id:nipe880324:20141206212239p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Virtual Attributesの使いどころとして、DBをマイグレートするのが大変、その他なんらかの理由によりDBをいじれない場合に、モデルにVirtual Attributesを追加することでフォームの内容を変更することが可能です。&lt;br /&gt;
もちろん、バリデーションも行えます。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveRecord 4.1.7&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#virtual-attributes-first-last-name&quot;&gt;名前入力欄を苗字と氏名入力欄に分ける&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#virtual-attributes-new-group-name&quot;&gt;新規グループ入力欄を追加する&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;virtual-attributes-first-last-name&quot;&gt;1. 名前入力欄を苗字と氏名入力欄に分ける&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;まず、フォームを修正し、「苗字」と「氏名」の入力フィールドを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# users/_form.html.erb

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 変更前&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;  &amp;lt;%= f.label :name %&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;  &amp;lt;%= f.text_field :name %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;--&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 変更後 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :last_name, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;苗字&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :last_name %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :first_name, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;氏名&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :first_name %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
この状態で画面にアクセスすると、&lt;code&gt;undefined method `last_name&#39; for User&lt;/code&gt;という例外が発生します。&lt;br /&gt;
そのため、モデルにVirtual Attributes(仮想的な属性)として、&lt;code&gt;last_name&lt;/code&gt;と&lt;code&gt;first_name&lt;/code&gt;を追加します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フォームからの first_name と last_name という入力を、結合し、DBのnameカラムに保存しています。&lt;/li&gt;
&lt;li&gt;また、DBのnameカラムを取得し、分割し、フォームの first_name と last_name として返しています。&lt;/li&gt;
&lt;li&gt;あとは、バリデーションエラー時の新規画面(new.html.erb)を再表示した際にデータを保持しておく必要があるので、インスタンス変数の値を使っています。&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:group&lt;/span&gt;

  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;,       &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 追加箇所開始&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# セッターを定義。new, create, updateなどのときに設定される&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;attr_writer&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;:last_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:first_name&lt;/span&gt;

  validates &lt;span class=&quot;synConstant&quot;&gt;:last_name&lt;/span&gt;,  &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:first_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

  before_validation &lt;span class=&quot;synConstant&quot;&gt;:set_name&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 画面表示時に呼ばれる&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;last_name&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@last_name&lt;/span&gt; || &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.split(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).first &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.present?
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 画面表示時に呼ばれる&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;first_name&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@first_name&lt;/span&gt; || &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.split(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).last &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.present?
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# DBのカラムはnameのため、last_nameとfirst_nameを&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# バリデーションの前に結合させて、設定しておく必要がある&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_name&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name = [&lt;span class=&quot;synIdentifier&quot;&gt;@last_name&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;@first_name&lt;/span&gt;].join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 追加箇所終了&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで、例外は発生しなくなりました。&lt;br /&gt;
では、コントローラのStrongParametersで&lt;code&gt;last_name&lt;/code&gt;と&lt;code&gt;first_name&lt;/code&gt;の入力を許可させます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;user_params&lt;/span&gt;
  params.require(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:last_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:first_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:group_id&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、サーバーを起動して動作を確認します。&lt;br /&gt;
「苗字」や「氏名」が入力されていないとバリデーションエラーになります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141206/20141206213818.png&quot; alt=&quot;f:id:nipe880324:20141206213818p:plain:w420&quot; title=&quot;f:id:nipe880324:20141206213818p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;もちろん、「苗字」と「氏名」を入力すれば、「苗字」と「氏名」を結合した値が名前(name)としてDBに保存され、画面に表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141206/20141206213934.png&quot; alt=&quot;f:id:nipe880324:20141206213934p:plain:w420&quot; title=&quot;f:id:nipe880324:20141206213934p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;virtual-attributes-new-group-name&quot;&gt;2. 新規グループ入力欄を追加する&lt;/h3&gt;次は、新規グループの入力欄を追加します。&lt;br /&gt;
まずは、フォームに入力欄を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/users/_form.html.erb

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :group_id %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :group_id, Group.order(:&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;).map { |g| [g.&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, g.&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;] }, include_blank: true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所 開始 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :new_group_name, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;グループを追加:&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :new_group_name %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所 終了 --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
この状態で画面にアクセスすると、&lt;code&gt;undefined method `new_group_name&#39; for User&lt;/code&gt;という例外が発生します。&lt;br /&gt;
そのため、モデルにVirtual Attributes(仮想的な属性)として&lt;code&gt;new_group_name&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;attr_writer&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;:last_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:first_name&lt;/span&gt;

  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:group&lt;/span&gt;

  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;,       &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:last_name&lt;/span&gt;,  &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:first_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

  before_validation &lt;span class=&quot;synConstant&quot;&gt;:set_name&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;last_name&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@last_name&lt;/span&gt; || &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.split(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).first &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.present?
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;first_name&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@first_name&lt;/span&gt; || &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.split(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).last &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.present?
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_name&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name = [&lt;span class=&quot;synIdentifier&quot;&gt;@last_name&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;@first_name&lt;/span&gt;].join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 追加箇所 開始&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# データの変換は必要ないので単純にattr_accessorで読み書きを可能にしている&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;:new_group_name&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# バリデーション前にグループのバリデーションをする&lt;/span&gt;
  before_validation &lt;span class=&quot;synConstant&quot;&gt;:build_group&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;build_group&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# new_group_nameが設定されたいない場合は、グループを作成しない&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# ため、アーリーリターンをする&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; new_group_name.blank?

    &lt;span class=&quot;synIdentifier&quot;&gt;@group&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Group&lt;/span&gt;.new &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: new_group_name
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@group&lt;/span&gt;.valid?
      &lt;span class=&quot;synComment&quot;&gt;# グループのバリデーションエラーが発生しなかった場合、&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# 値を設定しておく。Userを保存するときにグループも一緒に作成される &lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.group = &lt;span class=&quot;synIdentifier&quot;&gt;@group&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# グループのバリデーションエラーが発生した場合、&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# グループのバリデーションエラーのメッセージをUserモデルに設定&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@group&lt;/span&gt;.errors.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;message&lt;/span&gt;|
        errors.add &lt;span class=&quot;synConstant&quot;&gt;:new_group_name&lt;/span&gt;, message
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 追加箇所 終了&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


ちなみに、グループ(&lt;span class=&quot;synType&quot;&gt;Group&lt;/span&gt;)のバリデーションは次のようになっています。
&amp;gt;|ruby|
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Group&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:users&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;uniqueness&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、StrongParametersで&lt;code&gt;new_group_name&lt;/code&gt;を許可するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;user_params&lt;/span&gt;
  params.require(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:last_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:first_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:group_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:new_group_name&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、動作確認をします。既に登録済みのグループ名を追加しようとするとバリデーションエラーが発生します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141206/20141206220312.png&quot; alt=&quot;f:id:nipe880324:20141206220312p:plain:w420&quot; title=&quot;f:id:nipe880324:20141206220312p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;登録されていないグループ名を入力し、登録すると、新規でグループが作成され、そのグループが設定されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141206/20141206220403.png&quot; alt=&quot;f:id:nipe880324:20141206220403p:plain:w420&quot; title=&quot;f:id:nipe880324:20141206220403p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/16-virtual-attributes&quot;&gt;#16 Virtual Attributes - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/16-virtual-attributes-revised&quot;&gt;#16 Virtual Attributes (revised) - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Mon, 29 Dec 2014 21:33:53 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450076313013</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
            <category>Rails View</category>
          
        </item>
      
    
  </channel>
</rss>
