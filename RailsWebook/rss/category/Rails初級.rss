<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>Rails初級 - Rails Webook</title>
    <link>http://ruby-rails.hatenadiary.com/category/Rails%E5%88%9D%E7%B4%9A</link>
    <description>自社のECを開発している会社で働いています。Rails情報やサービスを成長させる方法を書いていきます</description>
    <lastBuildDate>Fri, 18 Dec 2015 02:44:31 +0900</lastBuildDate>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <generator>Hatena::Blog</generator>
    
      
      
        <item>
          <title>いまさらながらRails4.1から導入されたEnumが便利なのでまとめてみた</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150710/1436461745</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150710/20150710020807.jpg&quot; alt=&quot;f:id:nipe880324:20150710020807j:plain:w360&quot; title=&quot;f:id:nipe880324:20150710020807j:plain:w360&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:360px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;&lt;a href=&quot;https://www.flickr.com/photos/21561428@N03/&quot;&gt;las - initially (Lori Semprevio) | Flickr - Photo Sharing!&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Rails4.1から導入されたEnumの挙動について忘れることがあるので簡単にまとめました。&lt;br /&gt;
enumの定義、enumを定義したことにより使える便利なメソッドなどをまとめました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#ar-enum-define&quot;&gt;enumのスキーマ定義&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ar-enum-method&quot;&gt;enumで使えるメソッド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ar-enum-search&quot;&gt;enumの値を検索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ar-enum-notice&quot;&gt;enumの注意点&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.3&lt;/li&gt;
&lt;li&gt;Ruby 2.2.2&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;h3 id=&quot;ar-enum-define&quot;&gt;enumの定義&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;次のように、&lt;code&gt;enum&lt;/code&gt;、属性名、属性の値（ハッシュ）で指定することでEnumを定義することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# enumの定義（キーと数字のハッシュを渡す。数字がDBカラムに設定される）&lt;/span&gt;
  enum &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;draft&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;published&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
DBカラムのデフォルト値をenumの初期値と合わせておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateArticles&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.integer &lt;span class=&quot;synConstant&quot;&gt;:status&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;null&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;

      t.timestamps &lt;span class=&quot;synConstant&quot;&gt;null&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    add_index &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:status&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;ar-enum-method&quot;&gt;enumで使えるメソッド&lt;/h3&gt;enumで定義したハッシュの&lt;code&gt;キー名+?&lt;/code&gt;でそのキーの値が設定されているかどうかを返します。&lt;br /&gt;
また、&lt;code&gt;キー名+!&lt;/code&gt;で値を設定し、DBに保存します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; #&amp;lt;Article id: nil, status: 0, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

article.status &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;draft&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# statusがdraftか確認&lt;/span&gt;
article.draft? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# statusがpublishedか確認&lt;/span&gt;
article.published? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# statusをpublishedに設定&lt;/span&gt;
article.published!
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; INSERT INTO &amp;quot;articles&amp;quot; (&amp;quot;status&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;updated_at&amp;quot;) VALUES (?, ?, ?)  [[&amp;quot;status&amp;quot;, 1], [&amp;quot;created_at&amp;quot;, &amp;quot;2015-07-09 ...&amp;quot;], [&amp;quot;updated_at&amp;quot;, &amp;quot;2015-07-09 ...&amp;quot;]]&lt;/span&gt;

article.status &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;published&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
enumで指定した属性名の複数形のメソッドを呼び出すと、enumで指定したハッシュを取得できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# enumの属性名の複数形でハッシュを取得できる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.statuses &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; {&amp;quot;draft&amp;quot;=&amp;gt;0, &amp;quot;published&amp;quot;=&amp;gt;1}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ハッシュとしてアクセスできる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.statuses[&lt;span class=&quot;synConstant&quot;&gt;:draft&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 0&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
enumで定義したハッシュの値以外を設定しようとするとexceptionが発生します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# キー値で設定できる&lt;/span&gt;
article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;)
article.published? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# バリューでも設定できる&lt;/span&gt;
article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.statuses[&lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;])
article.published? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ハッシュで定義されていない値を設定しようとするとエラーが発生します&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;90&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; ArgumentError: &#39;90&#39; is not a valid status&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:hoge&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; ArgumentError: &#39;hoge&#39; is not a valid status&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;ar-enum-search&quot;&gt;Enumの値を検索&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;enumのキーをスコープとして使うことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.published.where(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at &amp;gt; ?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,  &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;.days.ago)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; SELECT &amp;quot;articles&amp;quot;.* FROM &amp;quot;articles&amp;quot; WHERE &amp;quot;articles&amp;quot;.&amp;quot;status&amp;quot; = ? AND (created_at &amp;gt; &#39;2015-07-06 ...&#39;)  [[&amp;quot;status&amp;quot;, 1]]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# また、複数のキーを指定することもできますが、ANDなので検索結果は必ず0になってしまいます&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.draft.published
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; SELECT &amp;quot;articles&amp;quot;.* FROM &amp;quot;articles&amp;quot; WHERE &amp;quot;articles&amp;quot;.&amp;quot;status&amp;quot; = ? AND &amp;quot;articles&amp;quot;.&amp;quot;status&amp;quot; = ?  [[&amp;quot;status&amp;quot;, 0], [&amp;quot;status&amp;quot;, 1]]&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; #&amp;lt;ActiveRecord::Relation []&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
検索するときは次のようにもできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.where(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;status &amp;lt;&amp;gt; ?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.statuses[&lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;])
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; SELECT &amp;quot;articles&amp;quot;.* FROM &amp;quot;articles&amp;quot; WHERE (status &amp;lt;&amp;gt; 1)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;ar-enum-notice&quot;&gt;Enumの注意点&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;enumを次のように配列でも定義できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  enum &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:draft&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;]
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;その場合、DBの値は、配列の添え字と同じ値になります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.create
article.status &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; draft&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# DB値は 0&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そのため、値の追加、削除をしたときに、配列の追加場所を気にしないと、DBの値とenumのカラムの意味が異なり、バグが発生してしまいます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# judgedを追加。judgedの値は配列の添え字の1になるので、&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# publishedだった記事がjudgedとして判断されてしまう&lt;/span&gt;
  enum &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:draft&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:judged&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;]
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.statuses[&lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;])
article.status     &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;published&amp;quot; (statusが1として登録される)&lt;/span&gt;
article.published? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# enumの定義を更新する(judgedが1になる)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 先ほど登録したArticleのstatusを確認するとjudged(1)になる&lt;/span&gt;
article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.last
article.status  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;judged&amp;quot;&lt;/span&gt;
article.judged? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/blob/master/activerecord/lib/active_record/enum.rb&quot;&gt;rails/enum.rb at master &amp;middot; rails/rails &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sugamasao.hatenablog.com/entry/2014/03/26/110759&quot;&gt;Rails 4.1&amp;#x306E;enum&amp;#x306E;&amp;#x6319;&amp;#x52D5; - &amp;#x3059;&amp;#x304C;&amp;#x30D6;&amp;#x30ED;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Fri, 10 Jul 2015 02:09:05 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450100885818</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>フォーム画面でページから離れるときにJavascript(JS)の警告を出す</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150607/1433652441</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150607/20150607133236.jpg&quot; alt=&quot;f:id:nipe880324:20150607133236j:plain&quot; title=&quot;f:id:nipe880324:20150607133236j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;上記のように、フォーム画面でページから離れるときにJavascript(JS)の警告を出す方法を説明します。&lt;/p&gt;&lt;p&gt;実際の動作は次のリンクから確認できます。&lt;br /&gt;
&lt;a href=&quot;https://jsfiddle.net/nipe0324/h0gutn6k/11/embedded/result/&quot; target=&quot;_blank&quot;&gt;ページを離れる時に警告を出す - jsfiddle&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;jQuery 2.1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;JSの内容&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;beforeunload&lt;/code&gt;イベントを使うことでこの動作を再現します。&lt;br /&gt;
&lt;code&gt;beforeunload&lt;/code&gt;は、ウインドウ(window)、ドキュメント(document)がアンロードされる前に発火するイベントです。&lt;br /&gt;
（あまりテストを行っていないのでバグがあるかもしれません。）&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&amp;lt;script type=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&amp;gt;


$(&lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;).ready(&lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;synComment&quot;&gt;// 値が変更されたとき(input要素、select要素が変更された場合)に&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// ブラウザの戻るや更新ボタン、タブを閉じるときに&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 警告をだすようにする&lt;/span&gt;
  $(&lt;span class=&quot;synConstant&quot;&gt;&#39;input, textarea, select&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;keyup change&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    $(&lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;beforeunload&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;このページを離れると、入力したデータが削除されます。本当に移動しますか。&amp;quot;&lt;/span&gt;;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

  &lt;span class=&quot;synComment&quot;&gt;// 戻るリンクや送信ボタンなどの通常の方法で画面遷移した場合は、&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;// 通常通りアラートは表示されずに遷移する&lt;/span&gt;
  $(&lt;span class=&quot;synConstant&quot;&gt;&#39;a, input[type=submit]&#39;&lt;/span&gt;).on(&lt;span class=&quot;synConstant&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt;(e) &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    $(&lt;span class=&quot;synStatement&quot;&gt;window&lt;/span&gt;).off(&lt;span class=&quot;synConstant&quot;&gt;&#39;beforeunload&#39;&lt;/span&gt;);
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;);

&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;HTML&lt;/h3&gt;
    &lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;フォーム画面&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;入力値が変更された時にブラウザの戻るや更新ボタン、タブを閉じるなどしたときにJavascriptのアラートを出す。&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;送信ボタンや戻るボタンの遷移時にはアラートを出さない。&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;値を変更して、リロード(F5)、ブラウザの戻るボタンなどを押してみてください&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt;|html|
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Value1&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Value2&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Value3&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; チェックボックス
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;commit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;送信&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synUnderlined&quot;&gt;戻る&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.koikikukan.com/archives/2013/03/11-005555.php&quot;&gt;&amp;#x30DA;&amp;#x30FC;&amp;#x30B8;&amp;#x3092;&amp;#x79FB;&amp;#x52D5;&amp;#xFF08;&amp;#x96E2;&amp;#x8131;&amp;#xFF09;&amp;#x3059;&amp;#x308B;&amp;#x3068;&amp;#x304D;&amp;#x306B;jQuery&amp;#x3067;&amp;#x8B66;&amp;#x544A;&amp;#x3092;&amp;#x51FA;&amp;#x3059;&amp;#x65B9;&amp;#x6CD5;: &amp;#x5C0F;&amp;#x7C8B;&amp;#x7A7A;&amp;#x9593;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload&quot;&gt;beforeunload - Event reference | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sun, 07 Jun 2015 13:47:21 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450096771313</guid>
          
            <category>Javascript</category>
          
            <category>Rails初級</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsのi18nの基本的な使い方まとめ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150226/1424937175</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226164508.jpg&quot; alt=&quot;f:id:nipe880324:20150226164508j:plain:w480&quot; title=&quot;f:id:nipe880324:20150226164508j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/m-i-k-e/&quot;&gt;Michael Kappel | Flickr - Photo Sharing!&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;での国際化（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/i18n&quot;&gt;i18n&lt;/a&gt;: Internationalization）の方法をまとめています。&lt;br /&gt;
デフォルトのlocale設定、基本的な翻訳の流れ、翻訳ファイルの作成、localeを動的に変更する方法を説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;  2.2.0&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.2.0&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/i18n&quot;&gt;i18n&lt;/a&gt; 0.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;1. &lt;a href=&quot;#i18n-default_locale_and_read_traslation_files&quot;&gt;デフォルトのlocaleの設定と翻訳ファイルの読み込み&lt;/a&gt;&lt;/h4&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;2. &lt;a href=&quot;#i18n-basic_usage&quot;&gt;i18nの翻訳の基本&lt;/a&gt;&lt;/h4&gt;
    
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;3. &lt;a href=&quot;#i18n-create_translation_files&quot;&gt;翻訳ファイルの作成&lt;/a&gt;&lt;/h4&gt;
    &lt;p&gt;3.1.  &lt;a href=&quot;#i18n-directory&quot;&gt;翻訳ファイルのディレクトリ構成&lt;/a&gt;&lt;br /&gt;
3.2.  &lt;a href=&quot;#i18n-template_translation_files&quot;&gt;各言語の基本的な翻訳テンプレートファイル&lt;/a&gt;&lt;br /&gt;
3.3.  &lt;a href=&quot;#i18n-lazy_lookup&quot;&gt;遅延参照（lazy lookup）&lt;/a&gt;&lt;br /&gt;
3.4.  &lt;a href=&quot;#i18n-interpolation&quot;&gt;式展開&lt;/a&gt;&lt;br /&gt;
3.5.  &lt;a href=&quot;#i18n-use_htmol&quot;&gt;翻訳ファイル内でのHTMLの使用&lt;/a&gt;&lt;br /&gt;
3.6.  &lt;a href=&quot;#i18n-translate_active_record&quot;&gt;ActiveRecordの翻訳&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4. &lt;a href=&quot;#i18n-locale_from_url&quot;&gt;URLによるlocaleの設定方法&lt;/a&gt;&lt;/h4&gt;
    &lt;p&gt;4.1.  &lt;a href=&quot;#i18n-locale_from_subdomain&quot;&gt;サブドメイン名からlocaleを設定&lt;/a&gt;&lt;br /&gt;
4.2.  &lt;a href=&quot;#i18n-locale_from_subdirectory&quot;&gt;URLのサブディレクトリからlocaleを取得&lt;/a&gt;&lt;br /&gt;
4.3.  &lt;a href=&quot;#i18n-locale_from_url_parameter&quot;&gt;URLパラメータからlocaleを取得&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-default_locale_and_read_traslation_files&quot;&gt;1. デフォルトのlocaleの設定と翻訳ファイルの読み込み&lt;/h3&gt;デフォルトのlocaleは暗黙的に&lt;code&gt;:en&lt;/code&gt;です。他のlocaleを設定したい場合は、明示的に指定する必要があります。&lt;br /&gt;
また、翻訳ファイルは&lt;code&gt;config/locales/*.rb,yml&lt;/code&gt;に配置し、自動的にロードされるようになっています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;デフォルトのlocaleの設定や翻訳ファイルのディレクトリの追加をしたい場合、&lt;code&gt;application.rb&lt;/code&gt;を修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/application.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# デフォルトのlocaleを日本語(:ja)にする&lt;/span&gt;
config.i18n.default_locale = &lt;span class=&quot;synConstant&quot;&gt;:ja&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 翻訳ファイルのディレクトを追加する場合は、次の行のコメントを外しパスを追加してください。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# config.i18n.load_path += Dir[Rails.root.join(&#39;my&#39;, &#39;locales&#39;, &#39;*.{rb,yml}&#39;).to_s]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
設定できるlocaleは次の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で確認できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.available_locales
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [:en, :&amp;quot;de-AT&amp;quot;, :&amp;quot;de-CH&amp;quot;, :de, :&amp;quot;en-au-ocker&amp;quot;, :&amp;quot;en-AU&amp;quot;, :&amp;quot;en-BORK&amp;quot;, :&amp;quot;en-CA&amp;quot;, :&amp;quot;en-GB&amp;quot;, ...]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;I18n.load_path&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で現在ロードしている翻訳ファイルの一覧を表示することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.load_path
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#[&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/2.2.0/gems/activesupport-4.2.0/lib/active_support/locale/en.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/activemodel-4.2.0/lib/active_model/locale/en.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/activerecord-4.2.0/lib/active_record/locale/en.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/actionview-4.2.0/lib/action_view/locale/en.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/faker-1.4.3/lib/locales/de-AT.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/faker-1.4.3/lib/locales/de-CH.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/faker-1.4.3/lib/locales/de.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/faker-1.4.3/lib/locales/en-au-ocker.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/faker-1.4.3/lib/locales/en-AU.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;quot;/.../gems/faker-1.4.3/lib/locales/en-BORK.yml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  ...&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-basic_usage&quot;&gt;2. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/i18n&quot;&gt;i18n&lt;/a&gt;の翻訳の基本&lt;/h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/i18n&quot;&gt;i18n&lt;/a&gt;は、現在のlocaleに応じて、読み込んだ翻訳ファイルから適切な翻訳文を取得し、表示します。&lt;/p&gt;&lt;p&gt;翻訳ファイルは次のようになっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/locales/ja.yml&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;こんにちは&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;formats&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&#39;%Y/%m/%d %H:%M:%S&#39;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# config/locales/es.yml&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hola mundo&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;formats&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&#39;%A, %d de %B de %Y %H:%M:%S %z&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
変換には「翻訳(translate)を行う&lt;code&gt;t&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;」と「DateやTimeをlocalizeする&lt;code&gt;l&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;」を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails c

&lt;span class=&quot;synComment&quot;&gt;# localeを日本語(:ja)に設定し、翻訳した文字を表示する&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale = &lt;span class=&quot;synConstant&quot;&gt;:ja&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.t &lt;span class=&quot;synConstant&quot;&gt;:hello&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;こんにちは&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.l &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;2015/02/24 14:53:03&amp;quot;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# localeをスペイン語(:es)に設定し、翻訳した文字を表示する&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale = &lt;span class=&quot;synConstant&quot;&gt;:es&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.t &lt;span class=&quot;synConstant&quot;&gt;:hello&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;hola mundo&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.l &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;martes, 24 de febrero de 2015 14:57:17 +0900&amp;quot;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# localeを指定して、設定されていない文字を表示できる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; :es&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.t &lt;span class=&quot;synConstant&quot;&gt;:hello&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;locale&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:ja&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;こんにちは&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-create_translation_files&quot;&gt;3. 翻訳ファイルの作成&lt;/h3&gt;&lt;h3 id=&quot;i18n-directory&quot;&gt;3.1. 翻訳ファイルのディレクトリ構成&lt;/h3&gt;１つの翻訳に管理するのが難しくなってしまうので、プロジェクト規模に応じて、次のように&lt;code&gt;config/locales/&lt;/code&gt;配下のディレクトリ構成を行うとよいです。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;config/locales/
├─ defaults
│  ├─ ja.rb
│  └─ en.rb
├── models
│   └─ product
│      ├─ ja.rb
│      └─ en.rb
└─ views
   ├─ defaults
   │  ├─ ja.rb
   │  └─ en.rb
   ├─ products
   │  ├─ ja.rb
   │  └─ en.rb
   └─ navigation
      ├─ ja.rb
      └─ en.rb&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;i18n-template_translation_files&quot;&gt;3.2. 各言語の基本的な翻訳テンプレートファイル&lt;/h3&gt;各言語の基本的な翻訳ファイルは「&lt;a href=&quot;https://github.com/svenfuchs/rails-i18n/tree/master/rails/locale&quot;&gt;https://github.com/svenfuchs/rails-i18n/tree/master/rails/locale&lt;/a&gt;」から取得できます。&lt;br /&gt;
日付、時刻、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt;のバリデーションエラー文言、数字などの基本的な翻訳が記載されていまので、上記でいう、&lt;code&gt;config/locales/defaults/&lt;/code&gt;配下に配置するようなファイルを取得できます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-lazy_lookup&quot;&gt;3.3. 遅延参照（lazy lookup）&lt;/h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のビューファイルのディレクトリ構造と翻訳ファイルの階層構造を合わせることで、ビューに長ったらしくを書かなくてもよくなります。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;projects&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt; # app/views/projectsを表す&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt; # app/views/projects/index.html.erb&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;プロジェクト一覧&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;deadlines&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt; # app/views/_deadlines.html.erb&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;due_date&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;期限&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/projects/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- t &#39;projects.index.title&#39; を t &#39;.title&#39; と短くかける --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; t&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;.title&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;  # =&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;プロジェクト一覧&amp;quot;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/projects/_deadlines.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- t &#39;projects.deadlines.due_date&#39; を t &#39;.due_date&#39; と短くかける --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; t&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;.due_date&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;  # =&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;期限&amp;quot;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;i18n-interpolation&quot;&gt;3.4. 式展開&lt;/h3&gt;翻訳文内で式展開を行うことができます。&lt;/p&gt;&lt;p&gt;翻訳ファイル内で&lt;code&gt;%{}&lt;/code&gt;で変数名を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&#39;こんにちは %{name}&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、&lt;code&gt;t&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;でKey-Valueで変数に値を設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; t&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :hello, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;太郎&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt; # =&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;こんにちは 太郎&amp;quot;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;i18n-use_htmol&quot;&gt;3.5. 翻訳ファイル内でのHTMLの使用&lt;/h3&gt;翻訳ファイル内でHTMLを使用するには、キーに「&lt;code&gt;_html&lt;/code&gt;で終わる」か「&lt;code&gt;html&lt;/code&gt;というキー名」の場合、HTMLはエスケープされません。そのため、記載したHTMLが解釈されて表示されます。&lt;/p&gt;&lt;p&gt;翻訳ファイル内で&lt;code&gt;_html&lt;/code&gt;で終わるキー名にします。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;hello_html&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;b&amp;gt;こんにちは %{name}&amp;lt;/b&amp;gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、&lt;code&gt;t&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で表示します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; t&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :hello_html, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;太郎&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt; #=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; 太字になった「こんにち　太郎」が表示される
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次のように&lt;code&gt;hello_html&lt;/code&gt;の値にHTMLセーフでない文字を入力するとそれが表示されてしまうので注意してください。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;hello_html&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&#39;こんにちは %{name} &amp;lt;script&amp;gt;alert(&amp;quot;alertが表示される&amp;quot;);&amp;lt;/script&amp;gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
逆に、式展開の&lt;code&gt;%{}&lt;/code&gt;のHTMLはエスケープされます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; t&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :hello_html, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;script&amp;gt;alert(&amp;quot;太郎&amp;quot;);&amp;lt;/script&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt; #=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;こんにちは &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;太郎&amp;quot;&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&amp;quot;と表示される
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;i18n-translate_active_record&quot;&gt;3.6. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt;/ActiveModelの翻訳&lt;/h3&gt;&lt;code&gt;activerecord/activemodel.models&lt;/code&gt;と&lt;code&gt;activerecord/activemodel.attributes&lt;/code&gt;を使うことで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt;の翻訳を行えます。&lt;/p&gt;&lt;p&gt;次の翻訳ファイルは、&lt;code&gt;Product&lt;/code&gt;モデルの翻訳例です。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;activerecord&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;&amp;amp;activerecord&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;商品&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;search_form&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;検索フォーム&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;商品名&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;値段&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;released_on&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;発売日&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;search_form&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;検索フィールド&amp;quot;&lt;/span&gt;

 &lt;span class=&quot;synComment&quot;&gt; # activemodelの翻訳もactiverecordに記載している&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;activemodel&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;lt;&amp;lt;:&lt;/span&gt; activerecord
&lt;/pre&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/YAML&quot;&gt;YAML&lt;/a&gt;を開いて適切な設定になっているか確認できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;YAML&lt;/span&gt;.load_file(&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.root.join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;config/locales/ja.yml&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
モジュールなどで階層構造の翻訳ファイルを書くときには、`/`で区切って階層構造を表します。&lt;br /&gt;
次のようなモジュールが入れ子の構造の場合、&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Forms&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ProductForm&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;attributesの下位階層でモジュールを/で区切って表す(`forms/product_form`)&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;activemodel&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;forms/product_form&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;synConstant&quot;&gt;&#39;商品名&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;次のようにして、ビューファイル内で利用します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- tメソッドでアクセスできます --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; t&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;activerecord.models.product&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;          #=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;商品&amp;quot;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; t&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;activerecord.attributes.product.name&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt; #=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;商品名&amp;quot;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 次のようにしてもアクセスできます --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; Product.model_name.human&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;                 #=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;商品&amp;quot;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; Product.human_attribute_name(&#39;name&#39;)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;     #=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;商品名&amp;quot;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; Forms::ProductForm.human_attribute_name(&#39;name&#39;)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;     #=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;商品名&amp;quot;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-locale_from_url&quot;&gt;4. URLによるlocaleの設定方法&lt;/h3&gt;他言語のサイト（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のlocaleのサイト）を作成するには、「URLからlocaleを取得する方法」が推奨です。&lt;br /&gt;
「URLからlocaleを取得する方法」は次のとおりです。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226164143.jpg&quot; alt=&quot;f:id:nipe880324:20150226164143j:plain:w560&quot; title=&quot;f:id:nipe880324:20150226164143j:plain:w560&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:560px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;詳細は、&lt;a href=&quot;https://support.google.com/webmasters/answer/182192?hl=ja&quot;&gt;&amp;#x591A;&amp;#x5730;&amp;#x57DF;&amp;#x3001;&amp;#x591A;&amp;#x8A00;&amp;#x8A9E;&amp;#x306E;&amp;#x30B5;&amp;#x30A4;&amp;#x30C8; - Search Console &amp;#x30D8;&amp;#x30EB;&amp;#x30D7;&lt;/a&gt;を参照してください。&lt;br /&gt;
他地域、他言語のサイトを作成するときに、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SEO&quot;&gt;SEO&lt;/a&gt;的にどうすれば良いかといったヒントが書かれています。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-locale_from_subdomain&quot;&gt;4.1. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B5%A5%D6%A5%C9%A5%E1%A5%A4%A5%F3&quot;&gt;サブドメイン&lt;/a&gt;名からlocaleを設定&lt;/h3&gt;次のように&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B5%A5%D6%A5%C9%A5%E1%A5%A4%A5%F3&quot;&gt;サブドメイン&lt;/a&gt;名からlocaleを設定するようにしてみます。&lt;br /&gt;
&lt;a href=&quot;https://support.google.com/webmasters/answer/182192?hl=ja&quot; target=&quot;_blank&quot;&gt;Googleの他地域、他言語のサイト&lt;/a&gt;では「gTLD を使用した&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B5%A5%D6%A5%C9%A5%E1%A5%A4%A5%F3&quot;&gt;サブドメイン&lt;/a&gt;」に対応します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;example.com      &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; デフォルトのlocale&lt;/span&gt;
ja.example.com   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 日本のlocale&lt;/span&gt;
en.example.com   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 英語のlocale&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
まず、&lt;code&gt;applicaiton_controller.rb&lt;/code&gt;にlocaleを設定する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を追記します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/application_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActionController&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  before_action &lt;span class=&quot;synConstant&quot;&gt;:set_locale&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_locale&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale = extract_locale_from_tld || &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.default_locale
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# サブドメインからlocaleを取得する&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 有効なlocaleが見つからない場合は、nilを返す&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;extract_locale_from_tld&lt;/span&gt;
    parsed_locale = request.subdomains.first
    &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.available_locales.map(&amp;amp;&lt;span class=&quot;synConstant&quot;&gt;:to_s&lt;/span&gt;).include?(parsed_locale) ? parsed_locale : &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;application.html.erb&lt;/code&gt;などのビューファイルで次のように言語を変更するリンクを追加することで、言語を変更できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to_if&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; request.subdomains.first != &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;ja&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;日本語&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;,   &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;http://ja.example.com:3000#{request.path}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;%&amp;gt;&lt;/span&gt; |
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to_if&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; request.subdomains.first != &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;English&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;http://en.example.com:3000#{request.path}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;URL部分は簡易的に直書きをしていますが、設定ファイルからの値を取得することをお勧めします。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;code&gt;http://ja.example.com:3000/...&lt;/code&gt;にアクセスすると、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のlocaleは、ja(日本語)になるので、日本語で画面に表示されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226163943.jpg&quot; alt=&quot;f:id:nipe880324:20150226163943j:plain:w320&quot; title=&quot;f:id:nipe880324:20150226163943j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://en.example.com:3000/...&lt;/code&gt;にアクセスすると、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のlocaleは、en(英語)になるので、英語で画面に表示されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226164013.jpg&quot; alt=&quot;f:id:nipe880324:20150226164013j:plain:w320&quot; title=&quot;f:id:nipe880324:20150226164013j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-locale_from_subdirectory&quot;&gt;4.2. URLのサブディレクトリからlocaleを取得&lt;/h3&gt;&lt;a href=&quot;https://support.google.com/webmasters/answer/182192?hl=ja&quot; target=&quot;_blank&quot;&gt;Googleの他地域、他言語のサイト&lt;/a&gt;では「gTLD を使用したサブディレクトリ」に対応します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;次のようにサブディレクトリ名からlocaleを設定するようにしてみます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;example.com/     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; デフォルトのlocale&lt;/span&gt;
example.com/ja/  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 日本のlocale&lt;/span&gt;
example.com/en/  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 英語のlocale&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
まず、ルートに&lt;code&gt;scoope&lt;/code&gt;で&lt;code&gt;:locale&lt;/code&gt;を追加します。かっこがあることで、存在しない場合は、デフォルトのlocaleが使われます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
scope &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;(:locale)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  resources &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
URLの&lt;code&gt;locale&lt;/code&gt;は、&lt;code&gt;parmas[:locale]&lt;/code&gt;で取得できるので次のようにします。&lt;br /&gt;
また、&lt;code&gt;default_url_options&lt;/code&gt;をオーバーライドすることで、すべてのリンクに現在のlocaleを設定することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/application_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActionController&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...
  before_action &lt;span class=&quot;synConstant&quot;&gt;:set_locale&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_locale&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale = params[&lt;span class=&quot;synConstant&quot;&gt;:locale&lt;/span&gt;] || &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.default_locale
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;default_url_options&lt;/span&gt;(options = {})
    { &lt;span class=&quot;synConstant&quot;&gt;locale&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale }.merge options
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;application.html.erb&lt;/code&gt;などのビューファイルで次のように言語を変更するリンクを追加することで、言語を変更できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to_if&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; params[:locale].present?, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;日本語&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;,  url_for(controller: controller.controller_name, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: controller.action_name, locale: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt; |
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to_if&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; params[:locale] != &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;,  &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;English&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;,  url_for(controller: controller.controller_name, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: controller.action_name, locale: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
URLに&lt;code&gt;locale&lt;/code&gt;がない場合は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のlocaleは、デフォルトのlocaleの日本語なので、日本語で表示されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226164033.jpg&quot; alt=&quot;f:id:nipe880324:20150226164033j:plain:w320&quot; title=&quot;f:id:nipe880324:20150226164033j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;「English」リンクを押すことで、URLに&lt;code&gt;en&lt;/code&gt;が追加され、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のlocaleが英語になるので、英語表示になります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226164041.jpg&quot; alt=&quot;f:id:nipe880324:20150226164041j:plain:w320&quot; title=&quot;f:id:nipe880324:20150226164041j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;i18n-locale_from_url_parameter&quot;&gt;4.3. URLパラメータからlocaleを取得&lt;/h3&gt;次のようにURLパタメータにlocaleを設定することでlocaleを設定するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;example.com           &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; デフォルトのlocale&lt;/span&gt;
example.com?locale=ja &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 日本語(ja)のlocale&lt;/span&gt;
example.com?locale=es &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; スペイン語(es)のlocale&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://support.google.com/webmasters/answer/182192?hl=ja&quot; target=&quot;_blank&quot;&gt;Googleの他地域、他言語のサイト&lt;/a&gt;によると、非推奨の方法です。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;まず、&lt;code&gt;applicaiton_controller.rb&lt;/code&gt;にlocaleを設定する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を追記します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/application_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActionController&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  before_action &lt;span class=&quot;synConstant&quot;&gt;:set_locale&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_locale&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale = params[&lt;span class=&quot;synConstant&quot;&gt;:locale&lt;/span&gt;] || &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.default_locale
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# link_toなどのすべてのURLにlocaleパラメータを設定するようにする&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;default_url_options&lt;/span&gt;(options = {})
    { &lt;span class=&quot;synConstant&quot;&gt;locale&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;I18n&lt;/span&gt;.locale }.merge options
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、&lt;code&gt;application.html.erb&lt;/code&gt;などのビューファイルで次のように言語を変更するリンクを追加することで、言語を変更できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to_if&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; params[:locale].present?, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;日本語&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#{request.path}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt; |
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to_if&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; params[:locale] != &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;English&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#{request.path}?locale=en&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
URLに&lt;code&gt;locale&lt;/code&gt;がない場合は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のlocaleは、デフォルトのlocaleの日本語なので、日本語で表示されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226164100.jpg&quot; alt=&quot;f:id:nipe880324:20150226164100j:plain:w320&quot; title=&quot;f:id:nipe880324:20150226164100j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;「English」リンクを押すことで、&lt;code&gt;locale=en&lt;/code&gt;がURLに追加され、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のlocaleが英語になるので、英語表示になります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150226/20150226164106.jpg&quot; alt=&quot;f:id:nipe880324:20150226164106j:plain:w320&quot; title=&quot;f:id:nipe880324:20150226164106j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/i18n.html&quot;&gt;Rails Internationalization (I18n) API &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://morizyun.github.io/blog/i18n-english-rails-ruby-many-languages/&quot;&gt;Rails&amp;#x306E;&amp;#x591A;&amp;#x8A00;&amp;#x8A9E;&amp;#x5316;&amp;#x5BFE;&amp;#x5FDC; i18n&amp;#x306E;&amp;#x3084;&amp;#x308A;&amp;#x65B9;&amp;#x3092;&amp;#x6574;&amp;#x7406;&amp;#x3057;&amp;#x3066;&amp;#x307F;&amp;#x305F;&amp;#xFF01;&amp;#x3010;&amp;#x56FD;&amp;#x969B;&amp;#x5316;/&amp;#x82F1;&amp;#x8A9E;&amp;#x5316;&amp;#x3011; - &amp;#x9152;&amp;#x3068;&amp;#x6CEA;&amp;#x3068;Ruby&amp;#x3068;Rails&amp;#x3068;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 26 Feb 2015 16:52:55 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450085563841</guid>
          
            <category>Rails初級</category>
          
            <category>i18n</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでCron設定をソース管理する!?wheneverを使ってCronを設定する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150224/1424776132</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150222/20150222115950.jpg&quot; alt=&quot;f:id:nipe880324:20150222115950j:plain&quot; title=&quot;f:id:nipe880324:20150222115950j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/whoshotya/&quot;&gt;Flickr: nicadlr&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Cron設定を行えるgemの&lt;a href=&quot;https://github.com/javan/whenever&quot; target=&quot;_blank&quot;&gt;whenever&lt;/a&gt;をRailsに導入する方法を説明します。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/javan/whenever&quot; target=&quot;_blank&quot;&gt;whenever&lt;/a&gt;はRubyコードでCronの設定を行えるgemです。&lt;br /&gt;
これを使うことで、アプリケーションコードとCron設定を一緒にでき、ソース管理ができるのでCron設定の管理が楽になります。&lt;br /&gt;
他には、Chefなどのプロビジョニングツールを使いcrontabを設定する方法もあります。&lt;/p&gt;&lt;p&gt;使い分けとしては、Railsアプリケーションに依存するCron設定は「&lt;a href=&quot;https://github.com/javan/whenever&quot; target=&quot;_blank&quot;&gt;whenever&lt;/a&gt;」、アプリケーションに依存しないCron設定（例：ログローテート）は「プロビジョニングツール」に分けて記載するのがいいと思います。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;Ruby  2.2.0&lt;/li&gt;
&lt;li&gt;whenever 0.9.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#whenever-install&quot;&gt;wheneverのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#whenever-basic_usage&quot;&gt;wheneverの基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#whenever-schedule_rb_sample&quot;&gt;schedule.rbのサンプル&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;whenever-install&quot;&gt;wheneverのインストール&lt;/h3&gt;Gemfileに追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;whenever&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:require&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
バンドルを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;whenever&lt;/code&gt;でCronの設定を記載するファイル(&lt;code&gt;/config/schedule.rb&lt;/code&gt;)を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; wheneverize
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;add&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; writing &lt;span class=&quot;synSpecial&quot;&gt;`./config/schedule.rb&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  [done] wheneverized!&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;whenever-basic_usage&quot;&gt;wheneverの基本的な使い方&lt;/h3&gt;作成した&lt;code&gt;schedule.rb&lt;/code&gt;にCronの設定を記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/schedule.rb&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# コマンドの出力先を設定（デフォルトはなし）&lt;/span&gt;
set &lt;span class=&quot;synConstant&quot;&gt;:output&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;path&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/log/cron.log&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# コマンドを実行するシェルを設定する（デフォルトはbash -l -c &#39;:job&#39;）&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# set :job_template, &amp;quot;zsh &#39;:job&#39;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# RAILS_ENVを設定する（デフォルトはproduction）&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# set :environment, &amp;quot;development&amp;quot;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# 毎日の午前1時30分に実行する&lt;/span&gt;
every &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.day, &lt;span class=&quot;synConstant&quot;&gt;at&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1:30 am&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  command &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/usr/bin/some_great_command&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  runner &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyModel.some_method&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  rake &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;some:great:rake:task&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 毎日曜日の昼の12時に実行する&lt;/span&gt;
every &lt;span class=&quot;synConstant&quot;&gt;:sunday&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;at&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;12pm&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  runner &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;AnotherModel.prune_old_records&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;記載は難しくなく、&lt;code&gt;every&lt;/code&gt;メソッドで時間を指定し、ブロック内で実行するコマンドを記載します。&lt;br /&gt;
実行するコマンドは、「コマンドを実行する&lt;code&gt;command&lt;/code&gt;」、「rails runnderを実行する&lt;code&gt;runnder&lt;/code&gt;」、「Rakeタスクを実行する&lt;code&gt;rake&lt;/code&gt;」があります。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;では、&lt;code&gt;whenever&lt;/code&gt;コマンドを実行して、&lt;code&gt;crontab&lt;/code&gt;の設定をします。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;// schedule.rb をcrontabの文法に変換する（crontabへの書き込みは行わない）
$ bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; whenever
&lt;span class=&quot;synConstant&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; * * * /bin/bash &lt;span class=&quot;synSpecial&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/usr/bin/some_great_command &amp;gt;&amp;gt; /Users/nipe/GoogleDrive/rails/rails_samples/cron_test/log/cron.log 2&amp;gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synConstant&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; * * * /bin/bash &lt;span class=&quot;synSpecial&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;cd /Users/nipe/GoogleDrive/rails/rails_samples/cron_test &amp;amp;&amp;amp; bin/rails runner -e production &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&#39;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyModel.some_method&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&#39;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &amp;gt;&amp;gt; /Users/nipe/GoogleDrive/rails/rails_samples/cron_test/log/cron.log 2&amp;gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synConstant&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; * * * /bin/bash &lt;span class=&quot;synSpecial&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;cd /Users/nipe/GoogleDrive/rails/rails_samples/cron_test &amp;amp;&amp;amp; RAILS_ENV=production bundle exec rake some:great:rake:task --silent &amp;gt;&amp;gt; /Users/nipe/GoogleDrive/rails/rails_samples/cron_test/log/cron.log 2&amp;gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt; * * &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; /bin/bash &lt;span class=&quot;synSpecial&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;cd /Users/nipe/GoogleDrive/rails/rails_samples/cron_test &amp;amp;&amp;amp; bin/rails runner -e production &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&#39;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;AnotherModel.prune_old_records&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&#39;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &amp;gt;&amp;gt; /Users/nipe/GoogleDrive/rails/rails_samples/cron_test/log/cron.log 2&amp;gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;## [message] Above is your schedule file converted to cron syntax; your crontab file was not updated.&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;## [message] Run `whenever --help&#39; for more options.&lt;/span&gt;


// crontabを更新する（既に書かれているcron設定は消えない）
$ bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; whenever &lt;span class=&quot;synSpecial&quot;&gt;-i&lt;/span&gt;


// crontabを上書きする（既に書かれているcron設定は消える）
$ bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; whenever &lt;span class=&quot;synSpecial&quot;&gt;-w&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;whenever-schedule_rb_sample&quot;&gt;schedule.rbのサンプル&lt;/h3&gt;&lt;code&gt;schedule.rb&lt;/code&gt;のcron設定の記載方法のサンプルです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;every &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;.hours &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  runner &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyModel.some_process&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  rake &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;my:rake:task&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  command &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/usr/bin/my_great_command&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

every &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.day, &lt;span class=&quot;synConstant&quot;&gt;:at&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4:30 am&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  runner &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;MyModel.task_to_run_at_four_thirty_in_the_morning&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

every &lt;span class=&quot;synConstant&quot;&gt;:hour&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 他にも :hour, :day, :month, :year, :rebootが使えます&lt;/span&gt;
  runner &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;SomeModel.ladeeda&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

every &lt;span class=&quot;synConstant&quot;&gt;:sunday&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:at&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;12pm&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 他の曜日(:mondayなど）、:weekend、:weekdayが使えます&lt;/span&gt;
  runner &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Task.do_something_great&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

every &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;0 0 27-31 * *&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# 通常のcronの文法も使えます&lt;/span&gt;
  command &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;echo &#39;you can use raw cron syntax too&#39;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Capistranoの:appロールのみで実行されます&lt;/span&gt;
every &lt;span class=&quot;synConstant&quot;&gt;:day&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:at&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;12:20am&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:roles&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;synConstant&quot;&gt;:app&lt;/span&gt;] &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  rake &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;app_server:task&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;他には、&lt;a href=&quot;https://github.com/javan/whenever#capistrano-v3-integration&quot;&gt;capistrano3と連携してcronの設定を行う&lt;/a&gt;方法などもあります。&lt;/p&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/javan/whenever&quot;&gt;javan/whenever &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 24 Feb 2015 20:08:52 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450084710387</guid>
          
            <category>Rails初級</category>
          
            <category>Rails gem</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsのlink_toにパラメータを追加する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150114/1421161200</link>
          <description>&lt;p&gt;link_toメソッドの&lt;code&gt;_path&lt;/code&gt;メソッドの引数にハッシュを渡すことで、URLにパラメータ（クエリストリング）を付与することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# ビューファイル&lt;/span&gt;
&amp;lt;%= link_to  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;プロフィール&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, profile_path(&lt;span class=&quot;synIdentifier&quot;&gt;@profile&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;q1&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;q2&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)  %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;a href=&amp;quot;/profiles/1?q1=some&amp;amp;q2=thing&amp;quot;&amp;gt;プロフィール&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;また、&lt;code&gt;format&lt;/code&gt;オプションと値に&lt;code&gt;:json&lt;/code&gt;、&lt;code&gt;:xls&lt;/code&gt;などを渡すことで、JSONリクエスト(.json)やXLSリクエスト(.xls)になります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# ビューファイル&lt;/span&gt;
&amp;lt;%= link_to  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;プロフィール&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, profile_path(&lt;span class=&quot;synIdentifier&quot;&gt;@profile&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;q1&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;q2&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:json&lt;/span&gt;)  %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;a href=&amp;quot;/profiles/1.json?q1=some&amp;amp;q2=thing&amp;quot;&amp;gt;プロフィール&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;
</description>
          <pubDate>Wed, 14 Jan 2015 00:00:00 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450086939651</guid>
          
            <category>Rails初級</category>
          
            <category>Rails View</category>
          
            <category>Rails Tips</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsのビューヘルパー(View Helper)のまとめ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150113/1421149061</link>
          <description>&lt;p&gt;&lt;a href=&quot;https://farm2.staticflickr.com/1005/1425536855_d705f747f8_b.jpg&quot; title=&quot;Columbus Flickr Meet Group Photo&quot;&gt;&lt;img alt=&quot;Columbus Flickr Meet Group Photo&quot; class=&quot;http-image&quot; src=&quot;https://farm2.staticflickr.com/1005/1425536855_d705f747f8_b.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/fensterbme/1425536855/in/photolist-4GjFfV-o8sHC9-a9MFqY-eo2tW8-eo2nBV-7eCWtP-3aYfrD-fQLPNz-6Lof3x-dkuUeM-52MkHD-6TjTGD-p8Hi6u-4vzm4e-9Tqmhn-5iT1Ch-bGDA3F-8nhsjA-dqSdfA-5dTjjS-ohvPL-62p3Xn-oaQ9Y4-aHY6ZB-3iXbZj-oFqJYW-4rFX1-5d918i-bB1wTW-o2FLCg-7tvtzy-4qTqmm-4nj2u6-gW5TTo-8ucrbd-ffNHdp-dpv9hC-9a4xLx-4mxMUW-ieBgZL-nadtga-6hpuGV-3RFkS-dLeXTM-oM5hzK-5U2YhL-aDCc3Z-eTiq5S-8EQy76-7FCaAs&quot;&gt;Columbus Flickr Meet Group Photo | Flickr - Photo Sharing!&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Railsのよく忘れるプルダウン(select), チェックボックス(check_box), ラジオボタン(radio_button)などビューヘルパーをまとめました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ビューでの表示形式の変換ヘルパーは、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140802/1406969793&quot;&gt;Rails&amp;#x306E;&amp;#x30C6;&amp;#x30AD;&amp;#x30B9;&amp;#x30C8;&amp;#x3001;&amp;#x6570;&amp;#x5024;&amp;#x3001;&amp;#x65E5;&amp;#x4ED8;/&amp;#x65E5;&amp;#x6642;&amp;#x95A2;&amp;#x9023;&amp;#x306E;&amp;#x30D5;&amp;#x30A9;&amp;#x30FC;&amp;#x30DE;&amp;#x30C3;&amp;#x30C8;&amp;#x30D8;&amp;#x30EB;&amp;#x30D1;&amp;#x30FC; - Rails Webook&lt;/a&gt;」を参照してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    &lt;p&gt; 1. &lt;a href=&quot;#view-helpers-link_to&quot;&gt;リンク - &lt;code&gt;link_to&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 2. &lt;a href=&quot;#view-helpers-image_tag&quot;&gt;画像 - &lt;code&gt;image_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 3. &lt;a href=&quot;#view-helpers-form&quot;&gt;フォーム - &lt;code&gt;form_for / form_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 4. &lt;a href=&quot;#view-helpers-fileds_for&quot;&gt;関連モデルのフォームを作成 - &lt;code&gt;fields_for&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 5. &lt;a href=&quot;#view-helpers-label&quot;&gt;ラベル - &lt;code&gt;label / label_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 6. &lt;a href=&quot;#view-helpers-text&quot;&gt;テキストフィールド - &lt;code&gt;text_field / test_field_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 7. &lt;a href=&quot;#view-helpers-datetime&quot;&gt;日付/時刻の入力フィールド - &lt;code&gt;date_field / time_field / datetime_field&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 8. &lt;a href=&quot;#view-helpers-datetime-select&quot;&gt;日付/時刻の選択フィールド - &lt;code&gt;date_select / time_select / datetime_select&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
 9. &lt;a href=&quot;#view-helpers-file&quot;&gt;ファイルアップロードフィールド - &lt;code&gt;file_field / file_field_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
10. &lt;a href=&quot;#view-helpers-text_area&quot;&gt;テキストエリア - &lt;code&gt;text_area / text_area_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
11. &lt;a href=&quot;#view-helpers-select&quot;&gt;プルダウン/セレクトボックス - &lt;code&gt;select / select_tag / collection_select&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
12. &lt;a href=&quot;#view-helpers-check_box&quot;&gt;チェックボックス - &lt;code&gt;check_box / check_box_tag / collection_check_boxes&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
13. &lt;a href=&quot;#view-helpers-radio_button&quot;&gt;ラジオボタン - &lt;code&gt;radio_button, radio_button_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
14. &lt;a href=&quot;#view-helpers-hidden&quot;&gt;hiddenフィールド - &lt;code&gt;hidden_field / hidden_field_tag&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
15. &lt;a href=&quot;#view-helpers-submit&quot;&gt;サブミットボタン - &lt;code&gt;submit / submit_tag&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-link_to&quot;&gt; 1. リンク - &lt;code&gt;link_to&lt;/code&gt;&lt;/h3&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;基本的な使い方&lt;/h4&gt;
    &lt;p&gt;リンク(aタグ）を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;link_to(name = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, options = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, html_options = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;, &amp;amp;block)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;optionsに指定できるオプション&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt; ... &lt;code&gt;:get&lt;/code&gt;, &lt;code&gt;:post&lt;/code&gt;, &lt;code&gt;:patch&lt;/code&gt;, &lt;code&gt;:delete&lt;/code&gt; を指定することで、リンクのGET, POSTなどのHTTPメソッドを定義できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remote: true&lt;/code&gt; ... Ajaxリクエストをサーバーに送る（デフォルト値：false）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data: { confirm: &#39;削除しますか？&#39; }&lt;/code&gt; ... &quot;削除しますか？&quot;という表示される確認ダイアログを表示する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data: { disable_with: &#39;更新中...&#39; }&lt;/code&gt; ... ボタンを押した後に、ボタンを押せなくし、&quot;更新中...&quot;とボタンに表示する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;link_to の良くある使い方&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# HTML属性を指定する&lt;/span&gt;
link_to &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;プロフィール&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, profile_path(&lt;span class=&quot;synIdentifier&quot;&gt;@profile&lt;/span&gt;), &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;btn btn-large&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;@profile&lt;/span&gt;.id&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;a class=&amp;quot;btn btn-large&amp;quot; href=&amp;quot;/profiles/1&amp;quot; id=&amp;quot;profile1&amp;quot;&amp;gt;プロフィール&amp;lt;/a&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# クエリストリング(?=xxx)を追加する&lt;/span&gt;
link_to &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;プロフィール&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, profile_path(&lt;span class=&quot;synIdentifier&quot;&gt;@profile&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;q&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;a href=&amp;quot;/profiles/1?q=list&amp;quot;&amp;gt;プロフィール&amp;lt;/a&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# CSV, JSONなどリンクのフォーマットを指定する。&lt;/span&gt;
link_to &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;プロフィール&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, profile_path(&lt;span class=&quot;synIdentifier&quot;&gt;@profile&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;a href=&amp;quot;/profiles/1.csv&amp;quot;&amp;gt;プロフィール&amp;lt;/a&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# ブロックで特定要素を囲む&lt;/span&gt;
link_to &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;プロフィール&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;@profile&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &amp;lt;strong&amp;gt;&amp;lt;%= &lt;span class=&quot;synIdentifier&quot;&gt;@profile&lt;/span&gt;.name %&amp;gt;&amp;lt;/strong&amp;gt;さんのプロフィール
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;a href=&amp;quot;/profiles/1&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;鈴木&amp;lt;/strong&amp;gt;さんのプロフィール&amp;lt;/a&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# 条件によりリンクの表示有無を変える&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 管理者の場合、リンクを表示する。&lt;/span&gt;
link_to_if(current_user.admin?, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;管理者用リンク&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, admin_path)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-image_tag&quot;&gt; 2. 画像 - &lt;code&gt;image_tag&lt;/code&gt;&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;基本的な使い方&lt;/h4&gt;
    &lt;p&gt;画像（&lt;code&gt;img&lt;/code&gt;タグ）を表示するために使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;image_tag(source, options={})
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;オプション&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt; ... 絶対パスと相対パスのどちらでも指定可能。また、ファイルだけ指定した場合、assets/imagesフォルダからのパスとなる。&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;例: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; image_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;picture.png&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
#=&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/images/picture.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Picture&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alt&lt;/code&gt; ... imgタグのalt属性（目の不自由な方のためなどの画像の代替文字列）を指定する。指定しない場合は、拡張子無しのファイル名が自動で設定される。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt; ... &quot;{幅}x{高さ}&quot; か &quot;{数}&quot; のどちらかで指定する。&quot;30x50&quot;の場合、width=&quot;30&quot; height=&quot;50&quot;となる。&quot;30&quot;の場合、width=&quot;30&quot; height=&quot;30&quot;になる。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;その他、HTMLのclassやid属性も追加することが可能&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;例: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; image_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;picture.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;main_img&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;iamge_tag のサンプル&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;image_tag(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;picture&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;img alt=&amp;quot;Picture&amp;quot; src=&amp;quot;/images/picture&amp;quot; /&amp;gt;&lt;/span&gt;

image_tag(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;picture.png&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;img alt=&amp;quot;Picture&amp;quot; src=&amp;quot;/images/picture.png&amp;quot; /&amp;gt;&lt;/span&gt;

image_tag(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;picture.png&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;50x40&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;alt&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Home Image&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;img src=&amp;quot;/images/picture.png&amp;quot; width=&amp;quot;50&amp;quot; height=&amp;quot;40&amp;quot; alt=&amp;quot;Home Image&amp;quot; /&amp;gt;&lt;/span&gt;

image_tag(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/gallery/picture.png&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;img src=&amp;quot;/gallery/picture.png&amp;quot; width=&amp;quot;200&amp;quot; height=&amp;quot;200&amp;quot; alt=&amp;quot;Picture&amp;quot; /&amp;gt;&lt;/span&gt;

image_tag(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;picture.png&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;menu_img&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;img alt=&amp;quot;Picture&amp;quot; class=&amp;quot;main_img&amp;quot; src=&amp;quot;/images/picture.png&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-form&quot;&gt; 3. フォーム - &lt;code&gt;form_for / form_tag&lt;/code&gt;&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;基本的な使い方(form_for と form_tag の使い分け方)&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;form_for&lt;/code&gt;は、&lt;b&gt;モデルの作成や更新などモデルに紐付いたフォームを作成するため&lt;/b&gt;に使います。モデルに紐付いているので、バリデーションエラー時にエラーメッセージとエラー箇所を表示することなどができます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;form_tag&lt;/code&gt;は、&lt;b&gt;検索やレポート出力などモデルに紐付かないフォームを作成するため&lt;/b&gt;に使います。モデルに紐付かないので、基本的にはバリデーションはできません。メソッドは&lt;code&gt;label_tag&lt;/code&gt;など&lt;code&gt;xxx_tag&lt;/code&gt;メソッドを使います。&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;form_for(record, options = {} &amp;amp;block)
form_tag(url_for_options = {}&amp;lt; options = {}, &amp;amp;block)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;オプション&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt; ... submitするURL。&lt;code&gt;form_for&lt;/code&gt;の場合、モデルから自動的にURLが生成されるため必ずしも必要ではない。&lt;code&gt;form_tag&lt;/code&gt;の場合、必ず必要。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt; ... &lt;code&gt;:get&lt;/code&gt;, &lt;code&gt;:post&lt;/code&gt;, &lt;code&gt;:patch&lt;/code&gt;, &lt;code&gt;:delete&lt;/code&gt; を指定することで、フォームのGET, POSTなどのHTTPメソッドを定義できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remote&lt;/code&gt; ... &lt;code&gt;true&lt;/code&gt;を設定するとAjaxのsubmitになる。（デフォルト: false）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;html&lt;/code&gt; ... formタグのHTML属性を指定する&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= form_for &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;remote&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:html&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synConstant&quot;&gt;:class&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;form-horizontal&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:role&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; } &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;f&lt;/span&gt;| %&amp;gt;
  &lt;span class=&quot;synComment&quot;&gt;# userの属性を指定&lt;/span&gt;
  &amp;lt;%= f.text_field &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt; %&amp;gt;
  &amp;lt;%= f.number_field &lt;span class=&quot;synConstant&quot;&gt;:age&lt;/span&gt; %&amp;gt;
  ...
  &amp;lt;%= f.submit %&amp;gt;
&amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt; %&amp;gt;


&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb の resources が次のように入れ子の場合、&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  resources :users do&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#    resources :comments&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  end&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# form_forにモデルを配列で指定する&lt;/span&gt;
&amp;lt;%= form_for [&lt;span class=&quot;synIdentifier&quot;&gt;@usre&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;@comments&lt;/span&gt;] &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;f&lt;/span&gt;| %&amp;gt;
  &amp;lt;!-- commentの属性を指定 --&amp;gt;
  &amp;lt;%= f.text_field &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt; %&amp;gt;
  ...
&amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt; %&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-fileds_for&quot;&gt; 4. 関連モデルのフォームを作成 - &lt;code&gt;fields_for&lt;/code&gt;&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;has_one&lt;/code&gt;や&lt;code&gt;has_many&lt;/code&gt;で関連づいたモデルも同時に作成/更新できるフォームを作成します。&lt;br /&gt;
次のようにモデルごとにフォームを入れ子にします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @user do |f| %&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.fields_for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :address do |address_fields| %&amp;gt;&lt;/span&gt;
    Street  : &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; address_fields.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :street %&amp;gt;&lt;/span&gt;
    Zip code: &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; address_fields.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :zip_code %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
関連モデルの作成/更新をするには、ビューだけでなくモデルやコントローラーにも実装が必要です。一般的に&lt;code&gt;fields_for&lt;/code&gt;と一緒に&lt;code&gt;accepts_nested_attributes_for&lt;/code&gt;を使います。&lt;br /&gt;
関連モデルも一度に作成/更新するフォームを作りたい場合は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141208/1418018874&quot;&gt;Rails&amp;#x3067;accepts_nested_attributes_for&amp;#x3068;fields_for&amp;#x3092;&amp;#x4F7F;&amp;#x3063;&amp;#x3066;has_many&amp;#x95A2;&amp;#x9023;&amp;#x306E;&amp;#x5B50;&amp;#x30EC;&amp;#x30B3;&amp;#x30FC;&amp;#x30C9;&amp;#x3092;&amp;#x4F5C;&amp;#x6210;/&amp;#x66F4;&amp;#x65B0;&amp;#x3059;&amp;#x308B;&amp;#x30D5;&amp;#x30A9;&amp;#x30FC;&amp;#x30E0;&amp;#x3092;&amp;#x4F5C;&amp;#x6210; - Rails Webook&lt;/a&gt;」を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-label&quot;&gt; 5. ラベル - &lt;code&gt;label / label_tag&lt;/code&gt;&lt;/h3&gt;ラベル（&lt;code&gt;label&lt;/code&gt;要素）を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.label(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;名前&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;label for=&amp;quot;user_name&amp;quot;&amp;gt;名前&amp;lt;/label&amp;gt;&lt;/span&gt;


&amp;lt;%= label_tag(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;名前&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;label for=&amp;quot;user&amp;quot;&amp;gt;名前&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-text&quot;&gt; 6. テキストフィールド - &lt;code&gt;text_field / test_field_tag&lt;/code&gt;&lt;/h3&gt;テキストフィールド（&lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt;要素）を作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 編集時にはvalueにはモデルのname属性の値が入る&lt;/span&gt;
&amp;lt;%= f.text_field &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user[name]&amp;quot; id=&amp;quot;user_name&amp;quot;&amp;gt;&lt;/span&gt;


&amp;lt;%= text_field_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user[name]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;値&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user[name]&amp;quot; id=&amp;quot;user_name&amp;quot; value=&amp;quot;値&amp;quot;&amp;gt;&lt;/span&gt;
&amp;lt;%= f.text_field(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;名前&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) %&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;code&gt;text_field&lt;/code&gt;のオプション&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:disabled&lt;/code&gt; ... &lt;code&gt;true&lt;/code&gt;を設定すると入力不可にできる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:size&lt;/code&gt; ... 指定した数の文字数分だけ表示できる幅に広がる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:maxlength&lt;/code&gt; ... ユーザが入力可能な最大文字数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:placeholder&lt;/code&gt; ... プレイスホルダーを設定する。&lt;/li&gt;
&lt;li&gt;その他、どんなHTML属性をも設定できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;その他のテキストフィールド&lt;/h4&gt;
    &lt;p&gt;テキストフィールドと同じように、次のようなフィールドも作成できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メールアドレスフィールド(&lt;code&gt;type=&quot;email&quot;&lt;/code&gt;) &lt;code&gt;email_field / email_field_tag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;パスワードフィールド(&lt;code&gt;type=&quot;password&lt;/code&gt;) &lt;code&gt;password_field / password_field_tag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;検索フィールド(&lt;code&gt;type=&quot;search&quot;&lt;/code&gt;) &lt;code&gt;search_field / search_field_tag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;数値フィールド(&lt;code&gt;type=&quot;number&quot;&lt;/code&gt;) &lt;code&gt;number_field / number_field_tag&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;view-helpers-datetime&quot;&gt; 7. 日付/時刻の入力フィールド - &lt;code&gt;date_field / time_field / datetime_field&lt;/code&gt;&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;日付フィールド(&lt;code&gt;type=&quot;date&lt;/code&gt;)&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;date_field / date_field_tag&lt;/code&gt;で作成できます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140026.jpg&quot; alt=&quot;f:id:nipe880324:20150110140026j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140026j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;時刻フィールド(&lt;code&gt;type=&quot;time&lt;/code&gt;)&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;time_field / time_field &lt;/code&gt;で作成できます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140044.jpg&quot; alt=&quot;f:id:nipe880324:20150110140044j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140044j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;日付時刻フィールド(&lt;code&gt;input type=&quot;datetime&quot;&lt;/code&gt;)&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;datetime_field / datetime_field_tag&lt;/code&gt;で作成できます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140057.jpg&quot; alt=&quot;f:id:nipe880324:20150110140057j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140057j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-datetime- 8. select&quot;&gt;日付/時刻の選択フィールド - &lt;code&gt;date_select / time_select / datetime_select&lt;/code&gt;&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;日付選択フィールド - &lt;code&gt;time_select&lt;/code&gt;&lt;/h4&gt;
    &lt;p&gt;日付のセレクトフィールドが作成します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140321.jpg&quot; alt=&quot;f:id:nipe880324:20150110140321j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140321j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.time_select &lt;span class=&quot;synConstant&quot;&gt;:activated_at&lt;/span&gt; %&amp;gt;

&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_1i&amp;quot; name=&amp;quot;user[activated_at(1i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2010&amp;quot;&amp;gt;2010&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2011&amp;quot;&amp;gt;2011&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   ... 年&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2020&amp;quot;&amp;gt;2020&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_2i&amp;quot; name=&amp;quot;user[activated_at(2i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;1&amp;quot; selected=&amp;quot;selected&amp;quot;&amp;gt;January&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;Feburary&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   ... 月&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;12&amp;quot;&amp;gt;December&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_3i&amp;quot; name=&amp;quot;user[activated_at(3i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;1&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;2&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   ... 日&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;31&amp;quot;&amp;gt;31&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# paramsの値&lt;/span&gt;
{
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; {
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ユーザー名&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(1i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(2i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(3i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    },
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;様々なオプションがあるので&lt;a href=&quot;http://api.rubyonrails.org/&quot; target=&quot;_blank&quot;&gt;Rails API&lt;/a&gt;を参照してください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;時刻選択フィールド - &lt;code&gt;time_select&lt;/code&gt;&lt;/h4&gt;
    &lt;p&gt;時刻のセレクトフィールドが作成されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140357.jpg&quot; alt=&quot;f:id:nipe880324:20150110140357j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140357j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.time_select &lt;span class=&quot;synConstant&quot;&gt;:activated_at&lt;/span&gt; %&amp;gt;

&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;hidden&amp;quot; id=&amp;quot;user_activated_at_1i&amp;quot; name=&amp;quot;user[activated_at(1i)]&amp;quot; value=&amp;quot;2015&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;hidden&amp;quot; id=&amp;quot;user_activated_at_2i&amp;quot; name=&amp;quot;user[activated_at(2i)]&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;hidden&amp;quot; id=&amp;quot;user_activated_at_3i&amp;quot; name=&amp;quot;user[activated_at(3i)]&amp;quot; value=&amp;quot;8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_4i&amp;quot; name=&amp;quot;user[activated_at(4i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;00&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;01&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   ... 時&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;24&amp;quot;&amp;gt;24&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  : &lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_5i&amp;quot; name=&amp;quot;user[activated_at(5i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;00&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;01&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   ... 分&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;59&amp;quot;&amp;gt;59&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# デフォルトだとparamsに年月日も送られます。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 未入力でも、勝手にデータが作成される可能性があります。&lt;/span&gt;
{
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ユーザー名&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(1i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(2i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(3i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(4i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(5i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  },
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
上記で記載しましたが、場合によって、&lt;code&gt;include_blank: true&lt;/code&gt;と&lt;code&gt;ignore_date: true&lt;/code&gt;を指定することで、未入力の場合に年月日が送られないようにできます。&lt;br /&gt;
そうすることで、モデル側の&lt;code&gt;presence&lt;/code&gt;などのバリデーションを上手く機能させることができるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.time_select &lt;span class=&quot;synConstant&quot;&gt;:activated_at&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;include_blank&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;ignore_date&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; %&amp;gt;

&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 年月日のhiddenフィールドが作成されない&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_4i&amp;quot; name=&amp;quot;user[activated_at(4i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;00&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;01&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   ... 時&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;24&amp;quot;&amp;gt;24&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  : &lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_5i&amp;quot; name=&amp;quot;user[activated_at(5i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;00&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;01&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   ... 分&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;59&amp;quot;&amp;gt;59&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 年月日がparamsになくなる&lt;/span&gt;
{
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; {
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;値&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(4i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(5i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  },
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;他にも秒数を表示など様々なオプションがあるので&lt;a href=&quot;http://api.rubyonrails.org/&quot; target=&quot;_blank&quot;&gt;Rails API&lt;/a&gt;を参照してください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;日付時刻選択フィールド - &lt;code&gt;datetime_select&lt;/code&gt;&lt;/h4&gt;
    &lt;p&gt;日付と時刻のセレクトフィールドが作成されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110141729.jpg&quot; alt=&quot;f:id:nipe880324:20150110141729j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110141729j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.datetime_select &lt;span class=&quot;synConstant&quot;&gt;:activated_at&lt;/span&gt; %&amp;gt;

&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_1i&amp;quot; name=&amp;quot;user[activated_at(1i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2015&amp;quot; selected=&amp;quot;selected&amp;quot;&amp;gt;2015&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2016&amp;quot;&amp;gt;2016&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     ... 年&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_2i&amp;quot; name=&amp;quot;user[activated_at(2i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;1&amp;quot; selected=&amp;quot;selected&amp;quot;&amp;gt;January&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;February&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     ... 月&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;12&amp;quot;&amp;gt;December&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_3i&amp;quot; name=&amp;quot;user[activated_at(3i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;1&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;2&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     ... 日&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;31&amp;quot;&amp;gt;31&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  —&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select id=&amp;quot;user_activated_at_4i&amp;quot; name=&amp;quot;user[activated_at(4i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;00&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;01&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     ... 時&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;23&amp;quot;&amp;gt;23&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  :&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#  &amp;lt;select id=&amp;quot;user_activated_at_5i&amp;quot; name=&amp;quot;user[activated_at(5i)]&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;00&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;01&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     ... 分&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;59&amp;quot;&amp;gt;59&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# paramsは年月日と時刻が送られれます。&lt;/span&gt;
{
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; {
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ユーザー名&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(1i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(2i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(3i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(4i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;activated_at(5i)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  },
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create User&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-file&quot;&gt; 9. ファイルアップロードフィールド - &lt;code&gt;file_field / file_field_tag&lt;/code&gt;&lt;/h3&gt;ファイルをアップロードするための&lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt;要素を作成します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140555.jpg&quot; alt=&quot;f:id:nipe880324:20150110140555j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140555j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.file_field(&lt;span class=&quot;synConstant&quot;&gt;:iamge&lt;/span&gt;) %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;user[image]&amp;quot; id=&amp;quot;user_image&amp;quot;&amp;gt;&lt;/span&gt;


&amp;lt;%= file_field_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user[image]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;user[image]&amp;quot; id=&amp;quot;user_image&amp;quot;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# form_for の場合は必要ないが、form_tagの場合、form_tag に multipart: true オプションが必要。&lt;/span&gt;
&amp;lt;%= form_tag &lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;: upload_users_path, &lt;span class=&quot;synConstant&quot;&gt;multipart&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;f&lt;/span&gt;| %&amp;gt;
  &amp;lt;%= f.file_field(&lt;span class=&quot;synConstant&quot;&gt;:iamge&lt;/span&gt;) %&amp;gt;
&amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt; %&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-text_area&quot;&gt;10. テキストエリア - &lt;code&gt;text_area / text_area_tag&lt;/code&gt;&lt;/h3&gt;テキストエリアを作成します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110141743.jpg&quot; alt=&quot;f:id:nipe880324:20150110141743j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110141743j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.text_area &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;user[image]&amp;quot; id=&amp;quot;user_image&amp;quot;&amp;gt;&lt;/span&gt;


&amp;lt;%= text_area_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user[name]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;値&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;textarea name=&amp;quot;user[name]&amp;quot; id=&amp;quot;user_name&amp;quot;&amp;gt;値&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;オプション&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;:size - A string specifying the dimensions (columns by rows) of the textarea (e.g., “25x10”).&lt;/li&gt;
&lt;li&gt;:rows - Specify the number of rows in the textarea&lt;/li&gt;
&lt;li&gt;:cols - Specify the number of columns in the textarea&lt;/li&gt;
&lt;li&gt;:disabled - If set to true, the user will not be able to use this input.&lt;/li&gt;
&lt;li&gt;:escape - By default, the contents of the text input are HTML escaped. If you need unescaped contents, set this to false.&lt;/li&gt;
&lt;li&gt;Any other key creates standard HTML attributes for the tag.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-select&quot;&gt;11. プルダウン/セレクトボックス - &lt;code&gt;select / select_tag / collection_select&lt;/code&gt;&lt;/h3&gt;プルダウンである&lt;code&gt;select&lt;/code&gt;要素が作成されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110141809.jpg&quot; alt=&quot;f:id:nipe880324:20150110141809j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110141809j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# どのメソッド結果は同じです&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 「属性名」、「配列データ」,「Option要素のvalueに設定するカラム名」, 「Option要素に表示するカラム名」の順で指定します。&lt;/span&gt;
&amp;lt;%= f.select &lt;span class=&quot;synConstant&quot;&gt;:prefecture_id&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Prefecture&lt;/span&gt;.all.map { |&lt;span class=&quot;synIdentifier&quot;&gt;p&lt;/span&gt;| [p.name, p.id] } %&amp;gt;
&amp;lt;%= select_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;address[prefeture_id]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, options_from_collection_for_select(&lt;span class=&quot;synType&quot;&gt;Prefecture&lt;/span&gt;.all, &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;) %&amp;gt;
&amp;lt;%= f.collection_select &lt;span class=&quot;synConstant&quot;&gt;:prefecture_id&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Prefecture&lt;/span&gt;.all, &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;select name=&amp;quot;address[prefecture_id]&amp;quot; id=&amp;quot;address_prefecture_id&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;東京都&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;神奈川県&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;option value=&amp;quot;3&amp;quot;&amp;gt;埼玉県&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;オプション&lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;:multiple - If set to true the selection will allow multiple choices.&lt;/li&gt;
&lt;li&gt;:disabled - If set to true, the user will not be able to use this input.&lt;/li&gt;
&lt;li&gt;:include_blank - If set to true, an empty option will be created. If set to a string, the string will be used as the option&#39;s content and the value will be empty.&lt;/li&gt;
&lt;li&gt;:prompt - Create a prompt option with blank value and the text asking user to select something.&lt;/li&gt;
&lt;li&gt;:selected - Provide a default selected value. It should be of the exact type as the provided options.&lt;/li&gt;
&lt;li&gt;Any other key creates standard HTML attributes for the tag.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
また、&lt;a href=&quot;https://select2.github.io/&quot; target=&quot;_blank&quot;&gt;select2&lt;/a&gt;という検索可能なプルダウンを作成するjQueryプラグインもあります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110141855.jpg&quot; alt=&quot;f:id:nipe880324:20150110141855j:plain:w220&quot; title=&quot;f:id:nipe880324:20150110141855j:plain:w220&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:220px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Railsへの導入方法は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141112/1415804076&quot; target=&quot;_blank&quot;&gt;Railsで検索可能なセレクトボックスのselect2を使う方法&lt;/a&gt;]」を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-check_box&quot;&gt;12. チェックボックス - &lt;code&gt;check_box / check_box_tag / collection_check_boxes&lt;/code&gt;&lt;/h3&gt;チェックボックスが作成されます。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;単一のチェックボックスの作成&lt;/h4&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140828.jpg&quot; alt=&quot;f:id:nipe880324:20150110140828j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140828j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# チェックボックスを1つ作成する&lt;/span&gt;
&amp;lt;%= f.check_box &lt;span class=&quot;synConstant&quot;&gt;:discontinued&lt;/span&gt; %&amp;gt; &amp;lt;%= f.label &lt;span class=&quot;synConstant&quot;&gt;:discontinued&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;販売停止&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input name=&amp;quot;product[discontinued]&amp;quot; type=&amp;quot;hidden&amp;quot; value=&amp;quot;0&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;checkbox&amp;quot; value=&amp;quot;1&amp;quot; name=&amp;quot;product[discontinued]&amp;quot; id=&amp;quot;product_discontinued&amp;quot;&amp;gt; &amp;lt;label for=&amp;quot;user_discontinued&amp;quot;&amp;gt;販売停止&amp;lt;/label&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# チェックボックスを1つ作成する&lt;/span&gt;
&amp;lt;%= check_box_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[discontinued]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt; &amp;lt;%= label_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[discontinued]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;販売停止&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;product[discontinued]&amp;quot; id=&amp;quot;product_discontinued&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt; &amp;lt;label for=&amp;quot;product_discontinued&amp;quot;&amp;gt;販売停止&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;複数のチェックボックスの作成&lt;/h4&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140843.jpg&quot; alt=&quot;f:id:nipe880324:20150110140843j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140843j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;ProductとCategoryが「N対N関係」である前提でビューを記載しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;% &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.all.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;category&lt;/span&gt;| %&amp;gt;
  &amp;lt;%= check_box_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[category_ids][]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, category.id, &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.categories.include?(category), &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_category_ids_&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;category.id&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; %&amp;gt;
  &amp;lt;%= label_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[category_ids][&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;category.id&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, category.name %&amp;gt;
&amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt; %&amp;gt;

&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;product[category_ids][]&amp;quot; id=&amp;quot;product_category_ids_1&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;label for=&amp;quot;product_category_ids_1&amp;quot;&amp;gt;カテゴリ1&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;product[category_ids][]&amp;quot; id=&amp;quot;product_category_ids_2&amp;quot; value=&amp;quot;2&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;label for=&amp;quot;product_category_ids_2&amp;quot;&amp;gt;カテゴリ2&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;product[category_ids][]&amp;quot; id=&amp;quot;product_category_ids_3&amp;quot; value=&amp;quot;3&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;label for=&amp;quot;product_category_ids_3&amp;quot;&amp;gt;カテゴリ3&amp;lt;/label&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# paramsは次のようになります。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# チェック0個の場合&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;}
&lt;span class=&quot;synComment&quot;&gt;# チェック1個以上&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, category_ids&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;=&amp;gt;[&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;]}&lt;/span&gt;


&lt;span class=&quot;synConstant&quot;&gt;# コントローラーのStrongParameters部分では、category_ids =&amp;gt; [] と記載し配列を許可するようにします。&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;def product_params&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  params.require(:product).permit(:name, :category_ids =&amp;gt; [])&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synConstant&quot;&gt;# 「多対多関係」をモデルで定義しておくとProductのcateogyr_ids属性に配列でカテゴリIDを設定することでhas_manyメソッドのおかげで複数のINERT文が走ります。&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;Parameters: {product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Aaa&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_ids&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]}, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Create Product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}
&lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; Load (&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;.3ms)  &lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.* &lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; IN (&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;)
&lt;span class=&quot;synStatement&quot;&gt;begin&lt;/span&gt; transaction
  &lt;span class=&quot;synComment&quot;&gt;# Prodctに1レコード追加される&lt;/span&gt;
  SQL (&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;.4ms)  &lt;span class=&quot;synType&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) VALUES (&lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?)&lt;/span&gt;  [[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Aaa&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015-01-10 03:51:29.408266&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015-01-10 03:51:29.408266&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]]
  &lt;span class=&quot;synComment&quot;&gt;# ProductとCategoryの中間テーブルが2列追加されている&lt;/span&gt;
  SQL (&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;.2ms)  &lt;span class=&quot;synType&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) VALUES (&lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?)&lt;/span&gt;  [[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015-01-10 03:51:29.410606&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015-01-10 03:51:29.410606&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]]
  SQL (&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;.1ms)  &lt;span class=&quot;synType&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) VALUES (&lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;?)&lt;/span&gt;  [[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015-01-10 03:51:29.414744&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;], [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2015-01-10 03:51:29.414744&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]]
commit transaction
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
同じく「多対多関連」が前提で、次のような記載方法もあります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.collection_check_boxes &lt;span class=&quot;synConstant&quot;&gt;:category_ids&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.all, &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt; %&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-radio_button&quot;&gt;13. ラジオボタン - &lt;code&gt;radio_button, radio_button_tag&lt;/code&gt;&lt;/h3&gt;ラジオボタンを作成します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110140911.jpg&quot; alt=&quot;f:id:nipe880324:20150110140911j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110140911j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.label &lt;span class=&quot;synConstant&quot;&gt;:rate&lt;/span&gt; %&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;%= f.radio_button &lt;span class=&quot;synConstant&quot;&gt;:rate&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; %&amp;gt; &amp;lt;%= f.label &lt;span class=&quot;synConstant&quot;&gt;:rate_1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; %&amp;gt;
&amp;lt;%= f.radio_button &lt;span class=&quot;synConstant&quot;&gt;:rate&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; %&amp;gt; &amp;lt;%= f.label &lt;span class=&quot;synConstant&quot;&gt;:rate_2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; %&amp;gt;
&amp;lt;%= f.radio_button &lt;span class=&quot;synConstant&quot;&gt;:rate&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; %&amp;gt; &amp;lt;%= f.label &lt;span class=&quot;synConstant&quot;&gt;:rate_3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; %&amp;gt;
&amp;lt;%= f.radio_button &lt;span class=&quot;synConstant&quot;&gt;:rate&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt; %&amp;gt; &amp;lt;%= f.label &lt;span class=&quot;synConstant&quot;&gt;:rate_4&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt; %&amp;gt;
&amp;lt;%= f.radio_button &lt;span class=&quot;synConstant&quot;&gt;:rate&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt; %&amp;gt; &amp;lt;%= f.label &lt;span class=&quot;synConstant&quot;&gt;:rate_5&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;synType&quot;&gt;Rate&lt;/span&gt;&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[rate]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt; &amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[rate]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt; &amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[rate]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt; &amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[rate]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_4&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt; &amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_4&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;&amp;lt;/label&amp;gt;
&amp;lt;input type=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; value=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; name=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[rate]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; id=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_5&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt; &amp;lt;label &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product_rate_5&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;&amp;lt;/label&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
セレクトボックスのように一度にモデルの配列を返すことで、ラジオボックスを作成することも可能です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.collection_radio_buttons &lt;span class=&quot;synConstant&quot;&gt;:maker_id&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Maker&lt;/span&gt;.all, &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;radio&amp;quot; value=&amp;quot;1&amp;quot; name=&amp;quot;product[maker_id]&amp;quot; id=&amp;quot;product_maker_id_1&amp;quot;&amp;gt;&amp;lt;label for=&amp;quot;product_maker_id_1&amp;quot;&amp;gt;カテゴリ1# &amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;radio&amp;quot; value=&amp;quot;2&amp;quot; name=&amp;quot;product[maker_id]&amp;quot; id=&amp;quot;product_maker_id_2&amp;quot;&amp;gt;&amp;lt;label for=&amp;quot;product_maker_id_2&amp;quot;&amp;gt;カテゴリ2# &amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# &amp;lt;input type=&amp;quot;radio&amp;quot; value=&amp;quot;3&amp;quot; name=&amp;quot;product[maker_id]&amp;quot; id=&amp;quot;product_maker_id_3&amp;quot;&amp;gt;&amp;lt;label for=&amp;quot;product_maker_id_3&amp;quot;&amp;gt;カテゴリ3# &amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;view-helpers-hidden&quot;&gt;14. hiddenフィールド - &lt;code&gt;hidden_field / hidden_field_tag&lt;/code&gt;&lt;/h3&gt;隠し入力フィールド（画面に表示されない）を作成できます。&lt;br /&gt;
&lt;i&gt;ユーザーからhiddenフィールドの値を見ることができるので、ユーザーに見られて困る秘密情報は載せないようにする必要があります。&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.hidden_field &lt;span class=&quot;synConstant&quot;&gt;:lock_version&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;product[lock_version]&amp;quot; id=&amp;quot;product_lock_version&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt;&lt;/span&gt;


&amp;lt;%= hidden_field_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product[lock_version]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.lock_version %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;product[lock_version]&amp;quot; id=&amp;quot;product_lock_version&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;view-helpers-submit&quot;&gt;15. サブミットボタン - &lt;code&gt;submit / submit_tag&lt;/code&gt;&lt;/h3&gt;サブミットボタンを作成します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110141646.jpg&quot; alt=&quot;f:id:nipe880324:20150110141646j:plain:w180&quot; title=&quot;f:id:nipe880324:20150110141646j:plain:w180&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:180px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= f.submit &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;登録&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;submit&amp;quot; name=&amp;quot;commit&amp;quot; value=&amp;quot;登録&amp;quot;&amp;gt;&lt;/span&gt;

&amp;lt;%= submit_tag &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;検索&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; %&amp;gt;
 &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;lt;input type=&amp;quot;submit&amp;quot; name=&amp;quot;commit&amp;quot; value=&amp;quot;検索&amp;quot;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
１つのフォームに複数のサブミットボタンを追加して処理を分けたい場合は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141225/1419515057&quot; target=&quot;_blank&quot;&gt;Railsで１フォームに複数のサブミット(Submit)ボタンを配置するTips&lt;a/&gt;」を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot;&gt;Ruby on Rails API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 13 Jan 2015 20:37:41 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450079810257</guid>
          
            <category>Rails初級</category>
          
            <category>Rails View</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsでのログ/ロガーまとめ（ログ出力、ログレベル、ロガー作成、ログフォーマット）</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150110/1420863998</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150110/20150110132541.jpg&quot; alt=&quot;f:id:nipe880324:20150110132541j:plain:w520&quot; title=&quot;f:id:nipe880324:20150110132541j:plain:w520&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:520px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/humboldtstate/&quot;&gt;Flickr: Humboldt State University&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Railsでログ出力を行う、ログレベルを設定する、新たにロガーを作成する、ログのフォーマットを設定する方法などRailsのログに関することをまとめました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#log-output&quot;&gt;1. ログを出力する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#log-setting-level&quot;&gt;2. ログレベルを設定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#log-creating-logger&quot;&gt;3. 新たにロガーを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#log-format&quot;&gt;4. ログのフォーマットを設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;log-output&quot;&gt;1. ログを出力する&lt;/h3&gt;&lt;code&gt;logger&lt;/code&gt;を使うことでコントローラー、モデル、ビューなどからロガーで設定されたログ出力先にログを出力することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;logger.debug &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ログ出力先にDebugレベルで情報を出力する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次の5つのメソッドが用意されており、それぞれログレベルに出力有無が変わります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;logger.fatal &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;致命的なエラー情報&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
logger.error &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;エラー情報&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
logger.warn  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;警告情報&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
logger.info  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;お知らせ情報&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
logger.debug &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;デバッグ情報&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;log-setting-level&quot;&gt;2. ログレベルを設定する&lt;/h3&gt;まず、ログレベルの使い分けは次のようになっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;fatal  &lt;span class=&quot;synComment&quot;&gt;# プログラムがクラッシュしたなどエラーハンドリングできないエラー&lt;/span&gt;
error  &lt;span class=&quot;synComment&quot;&gt;# エラーハンドリングできるエラー&lt;/span&gt;
warn   &lt;span class=&quot;synComment&quot;&gt;# 警告&lt;/span&gt;
info   &lt;span class=&quot;synComment&quot;&gt;# システム操作に対する一般的な役に立つ情報&lt;/span&gt;
debug  &lt;span class=&quot;synComment&quot;&gt;# 開発者向けの詳細な情報&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Railsでログレベルを設定するには、&lt;code&gt;config/development.rb&lt;/code&gt;、&lt;code&gt;config/test.rb&lt;/code&gt;、&lt;code&gt;config/production.rb&lt;/code&gt;内で次のように記載します。&lt;br /&gt;
設定したログレベルより低い(fatal &gt; error &gt; warn &gt; info &gt; debug)ログは出力されなくなります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# :fatal, :error, :warn, :info, :debugが設定可能&lt;/span&gt;
config.log_level = &lt;span class=&quot;synConstant&quot;&gt;:warn&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# logger.info と logger.debugの内容は出力されない&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
もしくは、上記のinitializers以外でログレベルを変更したい場合は次のようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.logger.level = &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# :debug&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 4 :fatal, 3 :error, 2 :warn, 1 :info, 0 :debug&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
各環境ごとのデフォルトのログレベルは次のとおりです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;development &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; debug&lt;/span&gt;
test        &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; debug&lt;/span&gt;
production  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; info&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;log-creating-logger&quot;&gt;3. 新たにロガーを作成する&lt;/h3&gt;Railsでロガーを作成するには、&lt;code&gt;config/development.rb&lt;/code&gt;、&lt;code&gt;config/test.rb&lt;/code&gt;、&lt;code&gt;config/production.rb&lt;/code&gt;内で次のように記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# log/developmetn.logに出力するロガーを作成。週ごとにログファイルがローテートされる&lt;/span&gt;
config.logger = &lt;span class=&quot;synType&quot;&gt;Logger&lt;/span&gt;.new(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;log/development.log&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;weekly&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# log/developmetn_special.logに出力する２つ目のロガーを作成。日ごとにログファイルがローテートされる&lt;/span&gt;
config.special_logger = &lt;span class=&quot;synType&quot;&gt;Logger&lt;/span&gt;.new(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;log/development_special.log&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;daily&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
コントローラー、モデル、ビューなどで上記で作成したログを使うことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;logger.debug &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;log/development.logに出力します&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 新たに定義したロガーは次のような指定をしないといけない&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.config.special_logger.debug &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;log/development_special.logに出力される&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;log-format&quot;&gt;4. ログのフォーマットを設定する&lt;/h3&gt;Railsでロガーを作成するには、&lt;code&gt;config/development.rb&lt;/code&gt;、&lt;code&gt;config/test.rb&lt;/code&gt;、&lt;code&gt;config/production.rb&lt;/code&gt;内で&lt;code&gt;formatter&lt;/code&gt;を設定します。&lt;/p&gt;&lt;p&gt;デフォルトのフォーマッターは次のように設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;config.logger.formatter = ::&lt;span class=&quot;synType&quot;&gt;Logger&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Formatter&lt;/span&gt;.new

&lt;span class=&quot;synComment&quot;&gt;# ログ内容です。&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I&lt;/span&gt;, [&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;-18T22:&lt;span class=&quot;synConstant&quot;&gt;50&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;46.439420&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;#42595]  INFO -- : Started GET &amp;quot;/users&amp;quot; for 127.0.0.1 at 2014-12-18 22:50:46 +0900&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;I&lt;/span&gt;, [&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;-18T22:&lt;span class=&quot;synConstant&quot;&gt;50&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;46.585090&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;#42595]  INFO -- : Processing by UsersController#index as HTML&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、自分でログフォーマットをカスタマイズすることができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;config.logger.formatter = &lt;span class=&quot;synStatement&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;severity&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;datetime&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;progname&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;msg&lt;/span&gt;|
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;severity&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;datetime&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;progname&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; : &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;msg&lt;span class=&quot;synSpecial&quot;&gt;}\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ログ内容です。&lt;/span&gt;
[&lt;span class=&quot;synType&quot;&gt;INFO&lt;/span&gt;]&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;22&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;48&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;40&lt;/span&gt; +0900:  : &lt;span class=&quot;synType&quot;&gt;Started&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;0.1&lt;/span&gt; at &lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;22&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;48&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;40&lt;/span&gt; +0900
[&lt;span class=&quot;synType&quot;&gt;INFO&lt;/span&gt;]&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;-&lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;22&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;48&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;40&lt;/span&gt; +0900:  : &lt;span class=&quot;synType&quot;&gt;Processing&lt;/span&gt; by &lt;span class=&quot;synType&quot;&gt;UsersController&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#index as HTML&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruby-doc.org/stdlib-2.1.0/libdoc/logger/rdoc/Logger.html&quot;&gt;Class: Logger (Ruby 2.1.0)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/debugging_rails_applications.html#the-logger&quot;&gt;Debugging Rails Applications &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sat, 10 Jan 2015 13:26:38 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450077440779</guid>
          
            <category>Rails初級</category>
          
            <category>運用</category>
          
            <category>まとめ</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsでデバッグをする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150108/1420721205</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150108/20150108215106.png&quot; alt=&quot;f:id:nipe880324:20150108215106p:plain:w420&quot; title=&quot;f:id:nipe880324:20150108215106p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/mloskot/&quot;&gt;Flickr: Pantera and Mateusz&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Railsで「変数の値を表示」から「ブレイクポイントを設定し、挙動を１ステップずつ確認するデバッグ」までのやり方を説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.1&lt;/li&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;pry-rails&lt;/li&gt;
&lt;li&gt;pry-byebug&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#debugging-in-view&quot;&gt;ビューファイルでのデバッグ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#debugging-in-controller-or-model&quot;&gt;モデルとコントローラーでのデバッグ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#debugging-with-breakpoint&quot;&gt;ブレイクポイントを設定した本格的なデバッグ&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;debugging-in-view&quot;&gt;1. ビューファイルのデバッグ&lt;/h3&gt;ビュー内では、次のように&lt;code&gt;debug&lt;/code&gt;メソッドを使うことで、変数の値や、パラメーターの値を表示することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# ビューファイル

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- インスタンス変数(@products)の値を表示する --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; debug&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @products %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- paramsの内容を画面に表示する。--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; debug&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; params %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 他にも、session、headers、params、flash、request、responseなどの値も表示できます --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
よくある開発中のみ表示したい場合は、&lt;code&gt;if Rails.env.development?&lt;/code&gt;をつけることで、&lt;code&gt;development&lt;/code&gt;環境の場合のみデバッグ情報が表示されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# ビューファイル

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!--  develompent環境のときにデバッグ情報を表示する --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; debug&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;  if Rails.env.development? %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;debugging-in-controller-or-model&quot;&gt;2. モデルとコントローラーでのデバッグ&lt;/h3&gt;モデルとコントローラーではビューと違って画面表示がないので、&lt;code&gt;logger.debug&lt;/code&gt;メソッドを使い、ログファイルに情報を出力します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# コントローラーかモデル&lt;/span&gt;

logger.debug &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;出力したいデバッグ情報&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;debugging-with-breakpoint&quot;&gt;ブレイクポイントを設定した本格的なデバッグ&lt;/h3&gt;まず、&lt;code&gt;pry-byebug&lt;/code&gt;というデバッグを実行できるようにするGemを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# rails console(もしくは、rails c)でirbの代わりにpryを使われる&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-doc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# methodを表示&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-byebug&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# デバッグを実施(Ruby 2.0以降で動作する)&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pry-stack_explorer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# スタックをたどれる&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Bundlerでインストールします。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
あとは、ビュー、コントローラー、モデルなど詳細にデバッグを行いたい箇所に&lt;code&gt;binding.pry&lt;/code&gt;と記載するとそこがブレイクポイントになります。&lt;/p&gt;&lt;p&gt;あとは、実際にそこの箇所になれば、サーバーが停止し、interactiveなモードになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synConstant&quot;&gt;From&lt;/span&gt;: /&lt;span class=&quot;synType&quot;&gt;Users&lt;/span&gt;/nipe0324/codes/rails_samples/debug_test/app/views/users/show.html.erb @ line &lt;span class=&quot;synConstant&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ActionView&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;CompiledTemplates&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#_app_views_users_show_html_erb__1221253090899921858_70168087519620:&lt;/span&gt;

     &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;:
     &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;: &amp;lt;p&amp;gt;
     &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;:   &amp;lt;strong&amp;gt;&lt;span class=&quot;synType&quot;&gt;Username&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:&amp;lt;&lt;/span&gt;/strong&amp;gt;
     &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;:   &amp;lt;%= &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;.username %&amp;gt;
     &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;:   &amp;lt;% binding.pry %&amp;gt;
 =&amp;gt;  &lt;span class=&quot;synConstant&quot;&gt;7&lt;/span&gt;: &amp;lt;/p&amp;gt;
     &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;:
     &lt;span class=&quot;synConstant&quot;&gt;9&lt;/span&gt;: &amp;lt;p&amp;gt;
    &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;:   &amp;lt;strong&amp;gt;&lt;span class=&quot;synType&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:&amp;lt;&lt;/span&gt;/strong&amp;gt;
    &lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;:   &amp;lt;%= &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;.email %&amp;gt;
    &lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;: &amp;lt;/p&amp;gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;] pry(&lt;span class=&quot;synComment&quot;&gt;#&amp;lt;#&amp;lt;Class:0x007fa2918b37e8&amp;gt;&amp;gt;)&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そこで、変数の内容を表示したり、変数定義やコマンドを試すことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;] pry(&lt;span class=&quot;synComment&quot;&gt;#&amp;lt;#&amp;lt;Class:0x007fa2918b37e8&amp;gt;&amp;gt;)&amp;gt; @user.username&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;testuser&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

[&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;] pry(&lt;span class=&quot;synComment&quot;&gt;#&amp;lt;#&amp;lt;Class:0x007fa2918b37e8&amp;gt;&amp;gt;)&amp;gt; params&lt;/span&gt;
=&amp;gt; {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、次の4つのコマンドでソース内を移動できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;next&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# 次の行に移動する&lt;/span&gt;
step   &lt;span class=&quot;synComment&quot;&gt;# 次の行か、メソッド内の行に移動する&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;exit&lt;/span&gt;     &lt;span class=&quot;synComment&quot;&gt;# 次のブレークポイントまで実行する&lt;/span&gt;
finish  &lt;span class=&quot;synComment&quot;&gt;# 現在のスタックトレース(画面に表示されているメソッド)が終わるまで実行する&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;next&lt;/code&gt;で次の行に移動する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;] pry(&lt;span class=&quot;synComment&quot;&gt;#&amp;lt;#&amp;lt;Class:0x007fa2918b37e8&amp;gt;&amp;gt;)&amp;gt; next&lt;/span&gt;

&lt;span class=&quot;synConstant&quot;&gt;From&lt;/span&gt;: /&lt;span class=&quot;synType&quot;&gt;Users&lt;/span&gt;/nipe0324/codes/rails_samples/debug_test/app/views/users/show.html.erb @ line &lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ActionView&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;CompiledTemplates&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#_app_views_users_show_html_erb__1221253090899921858_70168087519620:&lt;/span&gt;

     &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;:   &amp;lt;% binding.pry %&amp;gt;
     &lt;span class=&quot;synConstant&quot;&gt;7&lt;/span&gt;: &amp;lt;/p&amp;gt;
     &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;: 
     &lt;span class=&quot;synConstant&quot;&gt;9&lt;/span&gt;: &amp;lt;p&amp;gt;
    &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;:   &amp;lt;strong&amp;gt;&lt;span class=&quot;synType&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:&amp;lt;&lt;/span&gt;/strong&amp;gt;
 =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;:   &amp;lt;%= &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;.email %&amp;gt;
    &lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;: &amp;lt;/p&amp;gt;
    &lt;span class=&quot;synConstant&quot;&gt;13&lt;/span&gt;: 
    &lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt;: &amp;lt;%= link_to &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Edit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, edit_user_path(&lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;) %&amp;gt; |
    &lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt;: &amp;lt;%= link_to &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Back&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, users_path %&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
開発中に思った通りに動かないといったときは是非デバッグを行い、効率的に開発を進めていってください。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/debugging_rails_applications.html&quot; target=&quot;_blank&quot;&gt;Rails Guids - Debugging Rails Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 08 Jan 2015 21:46:45 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450079467349</guid>
          
            <category>Rails初級</category>
          
            <category>ツール</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4でJSON, XML, YAMLの読み込みと出力</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141230/1419936984</link>
          <description>&lt;p&gt;Railsでは、ActiveSupportにより、Array, Hash, ActiveModel(ActiveRecord)とJSON, XML, YAMLのフォーマットを変換するメソッドが拡張されています。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveSupport 4.1.7&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#activesupport-format-parse-json&quot;&gt;JSONの読み込み(ActiveSupport::JSON.decode)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#activesupport-format-to_json&quot;&gt;JSONの出力(to_json)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#activesupport-format-from_xml&quot;&gt;XMLの読み込み(from_xml)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#activesupport-format-to_xml&quot;&gt;XMLの出力(to_xml)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#activesupport-format-yaml-load&quot;&gt;YAMLの読み込み(YAML.load)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#activesupport-format-to_yaml&quot;&gt;YAMLの出力(to_yaml)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesupport-format-parse-json&quot;&gt;JSONの読み込み(ActiveSupport::JSON.decode)&lt;/h3&gt;&lt;code&gt;ActiveSupport::JSON.decode&lt;/code&gt;メソッドを使うことで、JSON形式の文字列を解析し、Hashに変換します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;ActiveSupport&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;.decode(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;{\&amp;quot;id\&amp;quot;:2,\&amp;quot;name\&amp;quot;:\&amp;quot;田中\&amp;quot;,\&amp;quot;created_at\&amp;quot;:\&amp;quot;2014-11-29T03:02:30.449-06:00\&amp;quot;,\&amp;quot;updated_at\&amp;quot;:\&amp;quot;2014-11-29T03:02:30.449-06:00\&amp;quot;}&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;id&amp;quot;=&amp;gt;2, &amp;quot;name&amp;quot;=&amp;gt;&amp;quot;田中&amp;quot;, &amp;quot;created_at&amp;quot;=&amp;gt;&amp;quot;2014-11-29T03:02:30.449-06:00&amp;quot;, &amp;quot;updated_at&amp;quot;=&amp;gt;&amp;quot;2014-11-29T03:02:30.449-06:00&amp;quot;}&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# パースの例外処理&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;begin&lt;/span&gt;
  obj = &lt;span class=&quot;synType&quot;&gt;ActiveSupport&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;.decode(json_string)
&lt;span class=&quot;synStatement&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ActiveSupport&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;.parse_error
  &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.logger.warn(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;妥当でないJSON文字列です: &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;json_string&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesupport-format-to_json&quot;&gt;JSONの出力(to_json)&lt;/h3&gt;Railsでは&lt;code&gt;Object#to_json&lt;/code&gt;メソッドが定義されているので、Array, Hash, ActiveRecordなどからJSON形式の出力をすることが可能です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 配列からJSONへ&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].to_json
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;[1,2,3]&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ハッシュからJSONへ&lt;/span&gt;
{ &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; } }.to_json
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;{\&amp;quot;hash\&amp;quot;:{\&amp;quot;foo\&amp;quot;:1,\&amp;quot;bar\&amp;quot;:2}}&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ActiveRecordからJSONへ&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.last.to_json
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;{\&amp;quot;id\&amp;quot;:2,\&amp;quot;name\&amp;quot;:\&amp;quot;田中\&amp;quot;,\&amp;quot;created_at\&amp;quot;:\&amp;quot;2014-11-29T03:02:30.449-06:00\&amp;quot;,\&amp;quot;updated_at\&amp;quot;:\&amp;quot;2014-11-29T03:02:30.449-06:00\&amp;quot;}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesupport-format-from_xml&quot;&gt;XMLの読み込み(from_xml)&lt;/h3&gt;&lt;code&gt;Hash.from_xml&lt;/code&gt;を使うことで、XMLをハッシュに変換することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;xml = &amp;lt;&amp;lt;-&lt;span class=&quot;synSpecial&quot;&gt;XML&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;    &amp;lt;hash&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;      &amp;lt;foo type=&amp;quot;integer&amp;quot;&amp;gt;1&amp;lt;/foo&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;      &amp;lt;bar type=&amp;quot;integer&amp;quot;&amp;gt;2&amp;lt;/bar&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;    &amp;lt;/hash&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;XML&lt;/span&gt;

hash = &lt;span class=&quot;synType&quot;&gt;Hash&lt;/span&gt;.from_xml(xml)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;hash&amp;quot;=&amp;gt;{&amp;quot;foo&amp;quot;=&amp;gt;1, &amp;quot;bar&amp;quot;=&amp;gt;2}}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesupport-format-to_xml&quot;&gt;XMLの出力(to_xml)&lt;/h3&gt;Array, Hash, ActiveModel(ActiveRecord)には&lt;code&gt;to_xml&lt;/code&gt;というXMLに変換して出力するメソッドがあります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 配列からXMLへ&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;].to_xml
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;&amp;lt;?xml version=\&amp;quot;1.0\&amp;quot; encoding=\&amp;quot;UTF-8\&amp;quot;?&amp;gt;\n&amp;lt;fixnums type=\&amp;quot;array\&amp;quot;&amp;gt;\n  &amp;lt;fixnum type=\&amp;quot;integer\&amp;quot;&amp;gt;1&amp;lt;/fixnum&amp;gt;\n  &amp;lt;fixnum type=\&amp;quot;integer\&amp;quot;&amp;gt;2&amp;lt;/fixnum&amp;gt;\n  &amp;lt;fixnum type=\&amp;quot;integer\&amp;quot;&amp;gt;3&amp;lt;/fixnum&amp;gt;\n&amp;lt;/fixnums&amp;gt;\n&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ハッシュからXMLへ&lt;/span&gt;
{ &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; } }.to_xml
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;&amp;lt;?xml version=\&amp;quot;1.0\&amp;quot; encoding=\&amp;quot;UTF-8\&amp;quot;?&amp;gt;\n&amp;lt;hash&amp;gt;\n  &amp;lt;hash&amp;gt;\n    &amp;lt;foo type=\&amp;quot;integer\&amp;quot;&amp;gt;1&amp;lt;/foo&amp;gt;\n    &amp;lt;bar type=\&amp;quot;integer\&amp;quot;&amp;gt;2&amp;lt;/bar&amp;gt;\n  &amp;lt;/hash&amp;gt;\n&amp;lt;/hash&amp;gt;\n&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ActiveRecordからXMLへ&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.last.to_xml
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;&amp;lt;?xml version=\&amp;quot;1.0\&amp;quot; encoding=\&amp;quot;UTF-8\&amp;quot;?&amp;gt;\n&amp;lt;user&amp;gt;\n  &amp;lt;id type=\&amp;quot;integer\&amp;quot;&amp;gt;2&amp;lt;/id&amp;gt;\n  &amp;lt;name&amp;gt;田中&amp;lt;/name&amp;gt;\n  &amp;lt;created-at type=\&amp;quot;dateTime\&amp;quot;&amp;gt;2014-11-29T03:02:30-06:00&amp;lt;/created-at&amp;gt;\n  &amp;lt;updated-at type=\&amp;quot;dateTime\&amp;quot;&amp;gt;2014-11-29T03:02:30-06:00&amp;lt;/updated-at&amp;gt;\n&amp;lt;/user&amp;gt;\n&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesupport-format-yaml-load&quot;&gt;YAMLの読み込み(YAML.load)&lt;/h3&gt;Railsでは&lt;code&gt;YAML.load&lt;/code&gt;により、YAmLファイルを読み込むことが可能です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;yaml = &amp;lt;&amp;lt;&lt;span class=&quot;synSpecial&quot;&gt;TEXT&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;:id: 3&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;:username: \&amp;quot;太郎\&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;:age: 30&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;TEXT&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;YAML&lt;/span&gt;.load(yaml)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {:id=&amp;gt;3, :username=&amp;gt;&amp;quot;太郎&amp;quot;, :age=&amp;gt;30}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# もちろん、ファイルからも読み込める&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;YAML&lt;/span&gt;.load(&lt;span class=&quot;synType&quot;&gt;File&lt;/span&gt;.open(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test.yml&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesupport-format-to_yaml&quot;&gt;YAMLの出力(to_yaml)&lt;/h3&gt;Railsでは&lt;code&gt;Object#to_yaml&lt;/code&gt;メソッドが定義されているので、Array, Hash, ActiveRecordなどからYAML形式の出力をすることが可能です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# ArrayをYAMLへ&lt;/span&gt;
[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;zxy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;].to_yaml
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;---\n- abc\n- def\n- zxy\n&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# HashをYAMLへ&lt;/span&gt;
{ &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;太郎&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;30&lt;/span&gt; }.to_yaml
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;---\n:id: 3\n:username: \&amp;quot;太郎\&amp;quot;\n:age: 30\n&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ActiveRecordをYAMLへ&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.last.to_yaml
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;--- !ruby/object:User\nattributes:\n  id: 2\n  name: \&amp;quot;田中\&amp;quot;\n  created_at: 2014-11-29 09:02:30.449449000 Z\n  updated_at: 2014-11-29 09:02:30.449449000 Z\n&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot;&gt;Ruby on Rails API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 30 Dec 2014 19:56:24 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075642985</guid>
          
            <category>Rails ActiveSupport</category>
          
            <category>Rails初級</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでTimecopを使って日付/時間のテストをする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141218/1418901424</link>
          <description>&lt;p&gt;&lt;a href=&quot;https://github.com/travisjeffery/timecop&quot;&gt;Timecop&lt;/a&gt;というGemを使うことで、好きな時刻に移動(&lt;code&gt;Timecop.travel&lt;/code&gt;)させたり、時刻を止めたり(&lt;code&gt;Timecop.freeze&lt;/code&gt;)といったことができ、日付/時間に関するテストをやるときに必須といっていいほど便利なGemです。&lt;br /&gt;
具体的な「日付/時間が関係するテスト例」として、うるう歳のテスト、税率変更のテスト、有効期限のテストなどがあります。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1.7&lt;/li&gt;
&lt;li&gt;Timecop 0.7.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#timecop-install&quot;&gt;Timecopのインストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#timecop-travel&quot;&gt;時間の移動方法(travel)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#timecop-freeze&quot;&gt;時間の停止方法(freeze)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#timecop-scale&quot;&gt;時間の進みを加速させる(scale)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;timecop-install&quot;&gt;Timecopのインストール方法&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;に&lt;code&gt;timecop&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
group &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;timecop&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;timecop-travel&quot;&gt;時間の移動方法(travel)&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Timcecop.travel&lt;/code&gt;は、&lt;code&gt;Timecop.return&lt;/code&gt;が呼ばれるまで、「指定した時間に移動させておく」ことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 現在の日付&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 2014-12-17 12:30:30 UTC&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 10日前の日付に移動する&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Timecop&lt;/span&gt;.travel(&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;.days.ago)

&lt;span class=&quot;synComment&quot;&gt;# 10日前の日付になる&lt;/span&gt;
puts &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.zone.now &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-12-07 12:30:30 UTC&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# テストしたい処理を記載する ...&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 時間が戻る&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Timecop&lt;/span&gt;.return

&lt;span class=&quot;synComment&quot;&gt;# 現在の日付に戻っている&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-12-17 12:30:30 UTC&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、&lt;code&gt;Timcecop.travel&lt;/code&gt;にブロック引数を指定することで、ブロック内のみで指定した時間に移動します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 現在の日付&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 2014-12-17 12:30:30 UTC&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ブロック内のみ指定した日付(1日後に移動する)&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Timecop&lt;/span&gt;.travel(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.day.from_now) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 1日後の日付になる&lt;/span&gt;
  puts &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.zone.now &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-12-18 12:30:30 UTC&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ブロックを抜けると時間が戻っている&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 2014-12-17 12:30:30 UTC&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;timecop-freeze&quot;&gt;時間の停止方法(freeze)&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Timcecop.freeze&lt;/code&gt;は、&lt;code&gt;Timecop.return&lt;/code&gt;が呼ばれるまで、「指定した時間に停止させておく」ことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 10日前の日付で時間を止める&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Timecop&lt;/span&gt;.freeze(&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;.days.ago)

&lt;span class=&quot;synComment&quot;&gt;# 10日前の日付になる&lt;/span&gt;
puts &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.zone.now &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-12-07 12:37:30 UTC&lt;/span&gt;

sleep &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 10秒経過させる&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 10秒経過させたが同じ秒数。時間が止まっている&lt;/span&gt;
puts &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.zone.now &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-12-07 12:37:30 UTC&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 時間が戻る&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Timecop&lt;/span&gt;.return
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、&lt;code&gt;Timcecop.freeze&lt;/code&gt;にブロック引数を指定することで、ブロック内の処理のみで指定した時間に停止します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# ブロック内のみ指定した日付(1日後に移動する)&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Timecop&lt;/span&gt;.freeze(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.day.from_now) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 1日後の日付になる&lt;/span&gt;
  puts &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.zone.now &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-12-18 12:40:40 UTC&lt;/span&gt;
  sleep &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 10秒経過させる&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 10秒たっても同じ時刻&lt;/span&gt;
  puts &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.zone.now &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-12-18 12:40:40 UTC&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ブロックを抜けると時間が戻っている&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 2014-12-17 12:40:50 UTC&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;timecop-scale&quot;&gt;時間の進みを加速させる(scale)&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Timcecop.scale(秒数)&lt;/code&gt;は、&lt;code&gt;Timecop.return&lt;/code&gt;が呼ばれるまで、「1秒の時間を指定した時間（単位：秒）の進み」にさせることができます。&lt;br /&gt;
たとえば、&lt;code&gt;Timecop.scale(60)&lt;/code&gt;なら、1秒経過すると時間が60秒進みます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 1秒を60秒(1分)にする&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Timecop&lt;/span&gt;.scale(&lt;span class=&quot;synConstant&quot;&gt;60&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-12-17 12:44:30 UTC&lt;/span&gt;
sleep &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# scaleで1秒を1分の時間の進みにしているので、5秒経過は5分経過になる&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-12-17 12:49:30 UTC&lt;/span&gt;
sleep &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# また5分経過になる&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-12-17 12:54:30 UTC&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 時間を戻す&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Timecop&lt;/span&gt;.return

sleep &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 5秒を3回止まったので、開始時間より+15秒になっている&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 2014-12-17 12:44:45 UTC&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;もちろん、&lt;code&gt;Timecop.travel&lt;/code&gt;や&lt;code&gt;Timecop.freeze&lt;/code&gt;のようにブロックも使えます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;br /&gt;
日付/時刻の便利なメソッドは&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141217/1418817120&quot;&gt;タイムゾーンや時刻処理のまとめ&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/travisjeffery/timecop&quot;&gt;travisjeffery/timecop &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 18 Dec 2014 20:17:04 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450077337873</guid>
          
            <category>Rails初級</category>
          
            <category>Rails ActiveSupport</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsのタイムゾーンや時刻処理のまとめ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141217/1418817120</link>
          <description>&lt;p&gt;Rubyでは日付(yyyymmdd)を扱うために&lt;code&gt;Date&lt;/code&gt;クラス、時刻(yyyymmdd hh:mm:ss)を扱うために&lt;code&gt;Time&lt;/code&gt;クラスが定義さています。&lt;br /&gt;
これらを扱いやすくするためにRailsのActiveSupportでタイムゾーンなどいくつか機能が拡張されているので、それらをまとめました。&lt;/p&gt;&lt;p&gt;&lt;i&gt;時刻関連のテストは&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141218/1418901424&quot;&gt;Timecopの使い方&lt;/a&gt;を参照してください。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveSupport 4.1.7&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#activesuppor-time-prerequisite&quot;&gt;本ページの動作の前提条件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#activesuppor-time-rails-timezone&quot;&gt;Rails4アプリ全体でタイムゾーンを設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#activesuppor-time-user-timezone&quot;&gt;ユーザー単位でタイムゾーンを設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#activesuppor-time-all-and-local-timezones&quot;&gt;タイムゾーン一覧とOSのタイムゾーンを確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#activesuppor-time-current-date&quot;&gt;現在の日付(Date)を取得(Date.today, Date.current)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#activesuppor-time-current-time&quot;&gt;現在の時刻(Time)を取得する(Time.now)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#activesuppor-time-indicate-time&quot;&gt;指定した日時(Time)を作成する(Time.local)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#activesuppor-time-yesterday-tomorrow&quot;&gt;昨日、明日を取得する(yesterday, tomorrow)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#activesuppor-time-prev-and-next&quot;&gt;昨月、昨年、翌月、翌年を取得する(prev_xxx, next_xxx)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#activesuppor-time-relative-time&quot;&gt;相対的な時刻(Time)を返す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#activesuppor-time-beginning-and-end&quot;&gt;開始時間と終了時間を取得する(beginning_of_xxx, end_of_xxx)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesuppor-time-prerequisite&quot;&gt;1. 本ページの動作の前提条件&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OS(Mac)のタイムゾーン: JST (+9:00) = Tokyo&lt;/li&gt;
&lt;li&gt;Railsのタイムゾーン  : CST (-5:00/-6:00) = US &amp; Canada（&lt;code&gt;application.rb&lt;/code&gt;に&lt;code&gt;config.time_zone = &#39;Central Time (US &amp; Canada)&#39;&lt;/code&gt;を設定）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;アメリカなどの場合、サマータイムがあるため日付に応じて自動的にタイムゾーンが変わります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.zone.local(&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Sat, 01 Nov 2014 00:00:00 CDT -05:00&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.zone.local(&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;29&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Sat, 29 Nov 2014 00:00:00 CST -06:00&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesuppor-time-rails-timezone&quot;&gt;2. Rails4アプリ全体でタイムゾーンを設定&lt;/h3&gt;Rails全体のタイムゾーンを設定するには&lt;code&gt;application.rb&lt;/code&gt;の&lt;code&gt;config.time_zone&lt;/code&gt;にタイムゾーンを設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/application.rb&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# デフォルトはUTC (0:00)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# タイムゾーンをセントラルタイム（CDT -5:00 / CST -6:00)に設定&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# config.time_zone = &#39;Central Time (US &amp;amp; Canada)&#39;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# タイムゾーンを東京(JST +9:00)に設定&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# config.time_zone = &#39;Tokyo&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;設定可能なタイムゾーンは「&lt;a href=&quot;#activesuppor-time-all-and-local-timezones&quot;&gt;タイムゾーン一覧とOSのタイムゾーンを確認&lt;/a&gt;」を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesuppor-time-user-timezone&quot;&gt;3. ユーザー単位でタイムゾーンを設定&lt;/h3&gt;ユーザー単位でタイムゾーンを設定するには、ユーザーにタイムゾーンを保持するカラムを追加し、コントローラーで設定する必要があります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g migration add_time_zone_to_users time_zone
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
モデルにバリデーションをつける。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
valications &lt;span class=&quot;synConstant&quot;&gt;:time_zone&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;inclusion&lt;/span&gt;: { &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;ActiveSupport&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;TimeZone&lt;/span&gt;.zones_map(&amp;amp;&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;) }
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ビューで更新するようにする。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/users/_form.html.erb
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :time_zone %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.time_zone_select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :time_zone %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
StringParamterに&lt;code&gt;time_zone&lt;/code&gt;を追加する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/users_controller.rb&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;users_params&lt;/span&gt;
    params.require(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;).permite(..., &lt;span class=&quot;synConstant&quot;&gt;:time_zone&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
コントローラーでタイムゾーンを設定する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/application_controller.rb&lt;/span&gt;
around_action &lt;span class=&quot;synConstant&quot;&gt;:user_time_zone&lt;/span&gt;, &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:current_user&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;user_time_zone&lt;/span&gt;(&amp;amp;block)
    &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.use_zone(current_user.time_zone, &amp;amp;block)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesuppor-time-all-and-local-timezones&quot;&gt;4. タイムゾーン一覧とOSのタイムゾーンを確認&lt;/h3&gt;&lt;code&gt;rake time:zones:all&lt;/code&gt;ですべてのタイムゾーンを確認できます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake time:zones:all
* UTC -11:00 *
American Samoa
International Date Line West
Midway Island
Samoa

* UTC -10:00 *
Hawaii

* UTC -09:00 *
Alaska
...&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
OSのタイムゾーンは&lt;code&gt;rake time:zones:local&lt;/code&gt;で確認できます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake time:zones:local
* UTC +09:00 *
Osaka
Sapporo
Seoul
Tokyo
Yakutsk&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesuppor-time-current-date&quot;&gt;5. 現在の日付(Date)を取得(Date.today, Date.current)&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Date.today&lt;/code&gt;で、現在の日付を取得する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date.current&lt;/code&gt;で、タイムゾーンに基づいた現在の日付を取得する&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# JST (+ 9:00)&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Date&lt;/span&gt;.today   &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; Sat, 29 Nov 2014&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# CST (- 5:00)&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Date&lt;/span&gt;.current &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Sat, 29 Nov 2014&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Time.zoneかconfig.time_zoneがセットされている場合、Time.zone.todayの結果を返す&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# セットされていない場合、Date.todayの結果を返す&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesuppor-time-current-time&quot;&gt;6. 現在の時刻(Time)を取得する(Time.now)&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Time.now&lt;/code&gt;で、現在の日時を取得する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Time.zone.now&lt;/code&gt;で、タイムゾーンに基づいた現在の日時を取得する&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now      &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-11-29 17:00:46 +0900&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.zone.now &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Sat, 29 Nov 2014 02:01:41 CST -06:00&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.current  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Sat, 29 Nov 2014 02:01:41 CST -06:00&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Time.zonかconfig.time_zoneがセットされている場合、Time.zone.nowの結果を返す&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# セットされていない場合、Tiem.nowの結果を返す&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesuppor-time-indicate-time&quot;&gt;7. 指定した日時(Time)を作成する(Time.local)&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Time.local&lt;/code&gt;で、指定した日時を取得する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Time.zone.local&lt;/code&gt;で、タイムゾーンに基づいた指定した日時を取得する&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.local(&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;33&lt;/span&gt;)      &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-11-29 11:22:33 +0900&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.zone.local(&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;33&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Sat, 29 Nov 2014 11:22:33 CST -06:00&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesuppor-time-yesterday-tomorrow&quot;&gt;8. 昨日、明日を取得する(yesterday, tomorrow)&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Time#yesterday&lt;/code&gt;で、前日の日時を取得する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Time#tomorrow&lt;/code&gt;で、翌日の日時を取得する&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;t = &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.local(&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;30&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-11-30 00:00:00 +0900&lt;/span&gt;
t.yesterday                  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-11-29 00:00:00 +0900&lt;/span&gt;
t.tomorrow                   &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-12-01 00:00:00 +0900&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# タイムゾーンは呼び出し元のTimeオブジェクトに依存する&lt;/span&gt;
t2 = &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.zone.local(&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;29&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Sat, 29 Nov 2014 00:00:00 CST -06:00&lt;/span&gt;
t2.yesterday                       &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Fri, 28 Nov 2014 00:00:00 CST -06:00&lt;/span&gt;
t2.tomorrow                        &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Sun, 30 Nov 2014 00:00:00 CST -06:00&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesuppor-time-prev-and-next&quot;&gt;9. 昨月、昨年、翌月、翌年を取得する(prev_xxx, next_xxx)&lt;/h3&gt;次のメソッドが定義されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Time#prev_month, Date#prev_month&lt;/li&gt;
&lt;li&gt;Time#next_month, Date#next_month&lt;/li&gt;
&lt;li&gt;Time#prev_year,  Date#prev_year&lt;/li&gt;
&lt;li&gt;Time#next_year,  Date#next_year&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;また、タイムゾーンは呼び出し元のオブジェクトに依存します。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesuppor-time-relative-time&quot;&gt;10. 相対的な時刻(Time)を返す&lt;/h3&gt;ActiveSupportによりNumericクラスには次のメソッドが拡張されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;years (年)&lt;/li&gt;
&lt;li&gt;mounths (月)&lt;/li&gt;
&lt;li&gt;weeks (週)&lt;/li&gt;
&lt;li&gt;days (日)&lt;/li&gt;
&lt;li&gt;hours (時間)&lt;/li&gt;
&lt;li&gt;minutes (分)&lt;/li&gt;
&lt;li&gt;seconds (秒)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;そして、次のメソッドをメソッドチェインすることで相対的な日付を返す&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;後: from_now or since&lt;/li&gt;
&lt;li&gt;前: until or ago(time = :Time.current)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;デフォルトで引数に&lt;code&gt;Time.current&lt;/code&gt;が指定されているため、Railsのタイムゾーンに基づいた現在日時からの相対時間を返す&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.current    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; Sat, 29 Nov 2014 02:20:08 CST -06:00&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 1週間前&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.weeks.ago     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; Sat, 22 Nov 2014 02:21:23 CST -06:00&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 1日後&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.days.from_now &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; Sun, 30 Nov 2014 02:20:32 CST -06:00&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 引数を指定することで、その日からの相対的な時間を指定できる&lt;/span&gt;
t = &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.local(&lt;span class=&quot;synConstant&quot;&gt;2014&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-11-01 00:00:00 +0900&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.months.ago(t)             &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2014-10-01 00:00:00 +0900&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;activesuppor-time-beginning-and-end&quot;&gt;11. 開始時間と終了時間を取得する(beginning_of_xxx, end_of_xxx)&lt;/h3&gt;DateクラスとTimeクラスには、開始時刻や終了時刻を取得するために次のメソッドが定義されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;beginning_of_hour,    end_of_hour&lt;/li&gt;
&lt;li&gt;beginning_of_day,     end_of_day&lt;/li&gt;
&lt;li&gt;beginning_of_week,    end_of_week&lt;/li&gt;
&lt;li&gt;beginning_of_month,   end_of_month&lt;/li&gt;
&lt;li&gt;beginning_of_quarter, end_of_quarter&lt;/li&gt;
&lt;li&gt;beginning_of_year,    end_of_year&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;次のようにすることで、ActiveRecordで月単位などでレコードを取得ができる&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;now = &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.current &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Sat, 29 Nov 2014 02:26:53 CST -06:00&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.where(&lt;span class=&quot;synConstant&quot;&gt;order_at&lt;/span&gt;: now.beginning_of_month..now.end_of_month)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot;&gt;Ruby on Rails API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/106-time-zones-revised&quot;&gt;#106 Time Zones (revised) - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 17 Dec 2014 20:52:00 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075634983</guid>
          
            <category>Rails初級</category>
          
            <category>Rails ActiveSupport</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4でモデルのコールバックの一覧と順番</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141211/1418301640</link>
          <description>&lt;p&gt;RailsのActiveRecordでは、モデルのバリデーション、生成、更新、削除などの処理の前後に処理を挟み込むことができる「コールバック」という仕組みがあります。&lt;/p&gt;&lt;p&gt;そのコールバックの基礎的な使い方、コールバックの一覧と呼ばれる順序について説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveRecord 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#model-callback-overview&quot;&gt;コールバックの概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-callback-list&quot;&gt;ActiveRecordで利用可能なコールバック一覧&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-callback-overview&quot;&gt;コールバックの概要&lt;/h3&gt;&lt;code&gt;before_save&lt;/code&gt;, &lt;code&gt;after_save&lt;/code&gt;などのように&lt;code&gt;save&lt;/code&gt;、&lt;code&gt;vadliatiaon&lt;/code&gt;の前後に処理を記述することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# レコードを作成する前に create_remember_tokenメソッド が呼ばれる&lt;/span&gt;
  before_create &lt;span class=&quot;synConstant&quot;&gt;:create_remember_token&lt;/span&gt;

  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create_remember_token&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.remember_token = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.encrypt(&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.new_remember_token)
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-callback-list&quot;&gt;ActiveRecordで利用可能なコールバック一覧&lt;/h3&gt;ActiveRecordで利用できるコールバック一覧です。呼び出される順番で並んでいます。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;オブジェクトの作成(create)&lt;/h5&gt;
    
&lt;ol&gt;
&lt;li&gt;before_validation&lt;/li&gt;
&lt;li&gt;after_validation&lt;/li&gt;
&lt;li&gt;before_save&lt;/li&gt;
&lt;li&gt;around_save&lt;/li&gt;
&lt;li&gt;before_create&lt;/li&gt;
&lt;li&gt;around_create&lt;/li&gt;
&lt;li&gt;after_create&lt;/li&gt;
&lt;li&gt;after_save&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;オブジェクトの更新(update)&lt;/h5&gt;
    
&lt;ol&gt;
&lt;li&gt;before_validation&lt;/li&gt;
&lt;li&gt;after_validation&lt;/li&gt;
&lt;li&gt;before_save&lt;/li&gt;
&lt;li&gt;around_save&lt;/li&gt;
&lt;li&gt;before_update&lt;/li&gt;
&lt;li&gt;around_update&lt;/li&gt;
&lt;li&gt;after_update&lt;/li&gt;
&lt;li&gt;after_save&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;オブジェクトの削除（destroy)&lt;/h5&gt;
    
&lt;ol&gt;
&lt;li&gt;before_destroy&lt;/li&gt;
&lt;li&gt;around_destroy&lt;/li&gt;
&lt;li&gt;after_destroy&lt;/li&gt;
&lt;li&gt;after_save&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;インスタンス化&lt;/h5&gt;
    
&lt;ol&gt;
&lt;li&gt;after_initialize&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;DBからレコードをロード&lt;/h5&gt;
    
&lt;ol&gt;
&lt;li&gt;after_find&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;touchオプションによりtouchされた&lt;/h5&gt;
    
&lt;ol&gt;
&lt;li&gt;after_touch&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/active_record_callbacks.html&quot;&gt;Active Record Callbacks &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 11 Dec 2014 21:40:40 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075143522</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4で1対1のリレーションをモデルに実装する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141205/1417779929</link>
          <description>&lt;p&gt;Railsでは、ActiveRecordの&lt;code&gt;has_one&lt;/code&gt;と&lt;code&gt;belogns_to&lt;/code&gt;を使って、DBの1対1のテーブル間のリレーションをモデルに簡単に実装することができます。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveRecord 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-one-desc&quot;&gt;1対1関連とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-one-forigen_key&quot;&gt;参照先の外部キーを追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-one-model-define&quot;&gt;モデルにhas_oneとbelongs_toを追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-one-methods&quot;&gt;使えるようになるメソッド&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-one-desc&quot;&gt;1. 1対1関連とは&lt;/h3&gt;説明のために次のER図を実装してみます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140810/20140810053307.png&quot; alt=&quot;f:id:nipe880324:20140810053307p:plain:w480&quot; title=&quot;f:id:nipe880324:20140810053307p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;注文一つには多くとも請求書１つがあるビジネスの場合、「注文」から見ると「請求書」は&lt;b&gt;&quot;1&quot;&lt;/b&gt;です。&lt;br /&gt;
請求書１通にも注文が必ず１つあるビジネスの場合、「請求書」から見ると「注文」は&lt;b&gt;&quot;1&quot;&lt;/b&gt;です。&lt;br /&gt;
このような関係を「&lt;b&gt;1対1関係&lt;/b&gt;」といいます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;i&gt;※注文と請求書のどちらに&lt;code&gt;has_one&lt;/code&gt;を書き、どちらに&lt;code&gt;belongs_to&lt;/code&gt;を書けばいいのか？&lt;br /&gt;
明確な答えはありませんが、意味的に「注文は請求書に属する(belongs_to)」よりも「請求書は注文に属する(belongs_to)」の方がしっくりくるので、Invoiceクラスに&lt;code&gt;belongs_to&lt;/code&gt;を今回は記載します。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-one-forigen_key&quot;&gt;2. 参照先の外部キーを追加する&lt;/h3&gt;まず、belogns_to側のテーブル（今回はinvoicesテーブル）に&lt;code&gt;xxx_id&lt;/code&gt;という名で外部キーを追加します。&lt;br /&gt;
&lt;code&gt;xxx&lt;/code&gt;の箇所は参照先のモデル名にする必要があります。&lt;br /&gt;
今回の場合は、Orderモデルを参照するため、&lt;code&gt;order_id&lt;/code&gt;にする必要があります。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Orderモデルとordersテーブルの作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Order order_date:date
rake db:migrate&lt;/pre&gt;&lt;p&gt;Invoiceモデルとinvoicesテーブルの作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Invoice order_id:integer
rake db:migrate&lt;/pre&gt;&lt;p&gt;もし、既にInvoiceクラスとinvoicesテーブルが存在する場合は、invoicesテーブルにorder_idのみを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g migration add_order_id_to_invoices order_id:integer
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-one-model-define&quot;&gt;3. モデルにhas_oneとbelongs_toを追加する&lt;/h3&gt;ではモデルファイルに1対1関連の宣言を追加します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;「注文」に&lt;code&gt;has_one&lt;/code&gt;を追加します。&lt;br /&gt;
&lt;i&gt;&quot;Order has_one :invoice&quot;&lt;/i&gt;と読めば、「注文(Order)は請求書(Invoice)を１つ持つ」と訳せます。&lt;br /&gt;
また、&lt;code&gt;dependent: :destroy&lt;/code&gt;オプションを追加することで、destoryメソッドで注文を削除したら、Railsがその注文に紐づいている請求書も自動で削除してくれます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/order.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_one &lt;span class=&quot;synConstant&quot;&gt;:invoice&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;dependent&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;has_one&lt;/code&gt;メソッドには次のようなオプションを指定できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class_name&lt;/code&gt;オプションで関連するモデルのクラス名を指定でき、関連名と参照先のクラス名を異なるものにできできる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreign_key&lt;/code&gt;オプションで参照先を参照する外部キーの名前を指定できる。デフォルトは、&lt;code&gt;参照先のモデル名_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependent&lt;/code&gt;オプションで親オブジェクトが削除された時の扱いを指定できる。&lt;code&gt;destroy&lt;/code&gt;などが指定可能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;as&lt;/code&gt;オプションでポリモフィック関連を定義できる。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;など&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;「請求書」に&lt;code&gt;belogns_to&lt;/code&gt;を追加します。&lt;br /&gt;
&lt;i&gt;&quot;Invoice belongs_to :order&quot;&lt;/i&gt;と読めば、「請求書(Invoice)は注文(Order)に属する」と訳せます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/invoice.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Invoice&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:order&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;belogns_to&lt;/code&gt;メソッドには次のようなオプションを指定できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class_name&lt;/code&gt;オプションで関連するモデルのクラス名を指定でき、関連名と参照先のクラス名を異なるものにできできる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreign_key&lt;/code&gt;オプションで参照先を参照する外部キーの名前を指定できる。デフォルトは、&lt;code&gt;参照先のモデル名_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependent&lt;/code&gt;オプションで親オブジェクトが削除された時の扱いを指定できる。&lt;code&gt;destroy&lt;/code&gt;と&lt;code&gt;delete&lt;/code&gt;が指定可能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;polymorphic&lt;/code&gt;オプションでポリモフィック関連を定義できる。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;など&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-one-methods&quot;&gt;4. 使えるようになるメソッド&lt;/h3&gt;これらを追加することで自動的に次のようなメソッドが使えるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 作成&lt;/span&gt;
order = &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.create( &lt;span class=&quot;synConstant&quot;&gt;order_date&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now ) &lt;span class=&quot;synComment&quot;&gt;# orderを作成し、DBに保存&lt;/span&gt;
invoice = &lt;span class=&quot;synType&quot;&gt;Invoice&lt;/span&gt;.create &lt;span class=&quot;synComment&quot;&gt;# invoiceを作成し、DBに保存&lt;/span&gt;

order.invoice &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; nil&lt;/span&gt;
order.invoice.build &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; エラー&lt;/span&gt;

invoice.order &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; nil&lt;/span&gt;
invoice.order.build &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; エラー&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# リレーション&lt;/span&gt;
order.invoice = invoice &lt;span class=&quot;synComment&quot;&gt;# orderとinvoiceを関連づける&lt;/span&gt;

order.invoice &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; invoiceを返す&lt;/span&gt;
invoice.order &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; orderを返す&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 削除&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Invoice&lt;/span&gt;.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
order.destory &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; dependent: :destroyが指定されているので、invoiceも削除される&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Invoice&lt;/span&gt;.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 0&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/association_basics.html&quot;&gt;Active Record Associations &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot;&gt;Ruby on Rails API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Fri, 05 Dec 2014 20:45:29 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075135867</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4で多対多のリレーションをモデルに実装する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141204/1417688260</link>
          <description>&lt;p&gt;Railsでは、ActiveRecordの&lt;code&gt;has_many&lt;/code&gt;か&lt;code&gt;has_and_belongs_to_many&lt;/code&gt;を使うことで、DBの「多対多」のテーブル間の関連をモデルに簡単に実装することができます。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※&lt;code&gt;has_many&lt;/code&gt;と&lt;code&gt;has_and_belongs_to_many&lt;/code&gt;の違い&lt;br /&gt;
多対多関係を作るには、中間テーブルを作成する必要があります。&lt;br /&gt;
&lt;code&gt;has_many&lt;/code&gt;の場合、中間テーブルを表現するクラスを作らないといけないが、その中間テーブルに属性やバリデーションなどを追加できます。&lt;br /&gt;
&lt;code&gt;has_and_belongs_to_many&lt;/code&gt;の場合、中間テーブルのクラスを作らなくて良いが、中間テーブルにカスタマイズができません。&lt;/p&gt;&lt;p&gt;個人的には、そこまで手間ではないので、&lt;code&gt;has_many&lt;/code&gt;で拡張性をもたせた方がよいと思います。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveRecord 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-n-n-desc&quot;&gt;多対多関連とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-n-n-migration&quot;&gt;マイグレーションファイルを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-n-n-model-define&quot;&gt;モデルにhas_manyとbelongs_toを追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-n-n-methods&quot;&gt;使えるようになるメソッド&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-n-n-desc&quot;&gt;1. 多対多関連とは&lt;/h3&gt;説明のために次のER図を実装してみます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140810/20140810044509.png&quot; alt=&quot;f:id:nipe880324:20140810044509p:plain:w480&quot; title=&quot;f:id:nipe880324:20140810044509p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;１商品は複数のカテゴリに属するので、「商品」から見ると「カテゴリ」は&lt;b&gt;&quot;多&quot;&lt;/b&gt;です。&lt;br /&gt;
１つのカテゴリには、多数の商品が存在するので、「カテゴリ」から見ると「商品」も&lt;b&gt;&quot;多&quot;&lt;/b&gt;です。&lt;br /&gt;
このような関係を「&lt;b&gt;多対多関係&lt;/b&gt;」といいます。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-n-n-migration&quot;&gt;2. マイグレーションファイルを作成する&lt;/h3&gt;それぞれのテーブルを普通に作成し、最後に中間テーブルに両方のテーブルの外部キーを定義して作成します。&lt;/p&gt;&lt;p&gt;Categoryモデルとcategoriesテーブルの作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Category name:string
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Productモデルとproductsテーブルの作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Product name:string price:integer
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;has_many&lt;/code&gt;の場合、CategoryProductモデルとcategories_productsテーブルの作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model CategoryProduct category_id:integer product_id:integer
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;has_and_belongs_to_many&lt;/code&gt;の場合、categories_productsテーブルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g migration create_categories_products category_id:integer product_id:integer
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-n-n-define&quot;&gt;3. モデルにhas_manyとbelongs_toを追加する&lt;/h3&gt;ではモデルファイルに多対多関連の宣言を追加します。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;code&gt;has_many&lt;/code&gt;の場合&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:category_products&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;through&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:category_products&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# throughオプションによりcategory_products経由でproductsにアクセスできるようになる&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 具体的には、category.productsで商品にアクセスができる&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/models/category_product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CategoryProduct&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:category_products&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;through&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:category_products&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# throughオプションによりcategory_products経由でcategoriesにアクセスできるようになる&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 具体的には、product.categoriesでカテゴリにアクセスができる&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;has_many&lt;/code&gt;メソッドには次のようなオプションを指定できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class_name&lt;/code&gt;オプションで関連するモデルのクラス名を指定でき、関連名と参照先のクラス名を異なるものにできできる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreign_key&lt;/code&gt;オプションで参照先を参照する外部キーの名前を指定できる。デフォルトは、&lt;code&gt;参照先のモデル名_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependent&lt;/code&gt;オプションで親オブジェクトが削除された時の扱いを指定できる。&lt;code&gt;destroy&lt;/code&gt;と&lt;code&gt;delete_all&lt;/code&gt;などが指定可能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;as&lt;/code&gt;オプションでポリモフィック関連を定義できる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;through&lt;/code&gt;オプションでモデル接続の関連を設定できる。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;など&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;code&gt;has_and_belongs_to_many&lt;/code&gt;の場合&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_and_belongs_to_many &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_and_belongs_to_many &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-n-n-methods&quot;&gt;4. 使えるようになるメソッド&lt;/h3&gt;これらを追加することで自動的に次のようなメソッドが使えるようになります。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;code&gt;has_many&lt;/code&gt;の場合&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 作成&lt;/span&gt;
category1 = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;カテゴリ1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# category単体で作成&lt;/span&gt;
product1 = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1000&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# product単体で作成&lt;/span&gt;

category1.products.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;200&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# category1に関係したproductを作成&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# リレーション&lt;/span&gt;
category1.products.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
category1.products &amp;lt;&amp;lt; product1 &lt;span class=&quot;synComment&quot;&gt;# product1をcategory1に関連させた&lt;/span&gt;
category1.products.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;

product1.categories &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; product1に関連しているcategoryの配列&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 中間テーブル&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;CategoryProduct&lt;/span&gt;.all &lt;span class=&quot;synComment&quot;&gt;# category_productsの全てのレコードを取得&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# CategoryProductモデルが存在するため、中間テーブルのバリデーションや属性の追加などができる&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;code&gt;has_and_belongs_to_many&lt;/code&gt;の場合&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 作成&lt;/span&gt;
category1 = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;カテゴリ1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# category単体で作成&lt;/span&gt;
product1 = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1000&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# product単体で作成&lt;/span&gt;

category1.products.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;200&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# category1に関係したproductを作成&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# リレーション&lt;/span&gt;
category1.products.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
category1.products &amp;lt;&amp;lt; product1 &lt;span class=&quot;synComment&quot;&gt;# product1をcategory1に関連させた&lt;/span&gt;
category1.products.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;

product1.categories &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; product1に関連しているcategoryの配列&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/association_basics.html&quot;&gt;Active Record Associations &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot;&gt;Ruby on Rails API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 04 Dec 2014 19:17:40 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075135857</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4で1対多のリレーションをモデルに実装する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141203/1417601540</link>
          <description>&lt;p&gt;Railsでは、ActiveRecordの&lt;code&gt;has_many&lt;/code&gt;と&lt;code&gt;belogns_to&lt;/code&gt;を使うことで、DBの「1対多」のテーブル間のリレーションをモデルに簡単に実装することができます。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveRecord 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-n-desc&quot;&gt;1対多関連とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-n-forigen_key&quot;&gt;参照先の外部キーを追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-n-model-define&quot;&gt;モデルにhas_manyとbelongs_toを追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-n-methods&quot;&gt;使えるようになるメソッド&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-n-desc&quot;&gt;1. 1対多関連とは&lt;/h3&gt;説明のために次のER図を実装してみます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140810/20140810053124.png&quot; alt=&quot;f:id:nipe880324:20140810053124p:plain:w480&quot; title=&quot;f:id:nipe880324:20140810053124p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;顧客1人が複数回注文をするので、「顧客」から見ると「注文」は&lt;b&gt;&quot;多&quot;&lt;/b&gt;です。&lt;br /&gt;
また、１注文は必ず一人の顧客から注文されないので、「注文」から見ると「顧客」は&lt;b&gt;&quot;1&quot;&lt;/b&gt;です。&lt;br /&gt;
このような関係を「&lt;b&gt;1対多関係&lt;/b&gt;」といいます。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-n-forigen_key&quot;&gt;2. 参照先の外部キーを追加する&lt;/h3&gt;まず、多側のテーブル（今回はordersテーブル）に&lt;code&gt;xxx_id&lt;/code&gt;という名で外部キーを追加します。&lt;br /&gt;
&lt;code&gt;xxx&lt;/code&gt;の箇所は参照先のモデル名にする必要があります。&lt;br /&gt;
今回の場合は、Customerモデルを参照するため、&lt;code&gt;customer_id&lt;/code&gt;にする必要があります。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Customerモデルとcustomersテーブルの作成をします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Customer name:string
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Orderモデルとordersテーブルの作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Order customer_id:integer order_date:date
rake db:migrate&lt;/pre&gt;&lt;p&gt;もし、モデルが既に存在していて外部キーのみを追加したい場合は、customer_idのみを追加するマイグレーションファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g migration add_customer_id_to_orders customer_id:integer
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-n-model-define&quot;&gt;3. モデルにhas_manyとbelongs_toを追加する&lt;/h3&gt;ではモデルファイルに1対多関連の宣言を追加します。&lt;/p&gt;&lt;p&gt;「1側」に&lt;code&gt;has_many&lt;/code&gt;を追加します。&lt;br /&gt;
&lt;i&gt;&quot;Customer has_many orders&quot;&lt;/i&gt;と読めば、「顧客(customer)は複数の注文(order)を持つ」と訳せます。&lt;br /&gt;
また、&lt;code&gt;dependent: :destroy&lt;/code&gt;オプションを追加することで、customerレコードをdestoryメソッドで削除したら、Railsがそのcustomerに紐づいていたorderを全て削除してくれます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/customer.rb 1側&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Customer&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:orders&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;dependent&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;has_many&lt;/code&gt;メソッドには次のようなオプションを指定できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class_name&lt;/code&gt;オプションで関連するモデルのクラス名を指定でき、関連名と参照先のクラス名を異なるものにできできる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreign_key&lt;/code&gt;オプションで参照先を参照する外部キーの名前を指定できる。デフォルトは、&lt;code&gt;参照先のモデル名_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependent&lt;/code&gt;オプションで親オブジェクトが削除された時の扱いを指定できる。&lt;code&gt;destroy&lt;/code&gt;と&lt;code&gt;delete_all&lt;/code&gt;などが指定可能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;as&lt;/code&gt;オプションでポリモフィック関連を定義できる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;through&lt;/code&gt;オプションでモデル接続の関連を設定できる。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;など&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;「多側」に&lt;code&gt;belongs_to&lt;/code&gt;メソッドを記載します。&lt;br /&gt;
&lt;i&gt;&quot;Order belogns_to customer&quot;&lt;/i&gt;と読めば、「注文(order)は1つの顧客(customer)に属する」と訳せます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/order.rb 多側&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:customer&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;belogns_to&lt;/code&gt;メソッドには次のようなオプションを指定できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class_name&lt;/code&gt;オプションで関連するモデルのクラス名を指定でき、関連名と参照先のクラス名を異なるものにできできる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreign_key&lt;/code&gt;オプションで参照先を参照する外部キーの名前を指定できる。デフォルトは、&lt;code&gt;参照先のモデル名_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependent&lt;/code&gt;オプションで親オブジェクトが削除された時の扱いを指定できる。&lt;code&gt;destroy&lt;/code&gt;と&lt;code&gt;delete&lt;/code&gt;が指定可能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;polymorphic&lt;/code&gt;オプションでポリモフィック関連を定義できる。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;など&lt;/p&gt;&lt;p&gt;例えば、デフォルトの&lt;code&gt;order.customer&lt;/code&gt;ではなく、&lt;code&gt;order.user&lt;/code&gt;でアクセス可能にする&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/order.rb 多側&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;class_name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;foreign_key&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-n-methods&quot;&gt;4. 使えるようになるメソッド&lt;/h3&gt;これらを追加することで自動的に次のようなメソッドが使えるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 作成&lt;/span&gt;
taro = &lt;span class=&quot;synType&quot;&gt;Customer&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;顧客1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# taroを作成し、DBに保存&lt;/span&gt;
order1 = taro.orders.build(&lt;span class=&quot;synConstant&quot;&gt;order_date&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now) &lt;span class=&quot;synComment&quot;&gt;# order1を作成（newの代わりにbuildを使う）&lt;/span&gt;
order1.save &lt;span class=&quot;synComment&quot;&gt;# order1をDBに保存&lt;/span&gt;
order2 = taro.orders.create(&lt;span class=&quot;synConstant&quot;&gt;order_date&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now) &lt;span class=&quot;synComment&quot;&gt;# order2を作成し、保存&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# リレーション&lt;/span&gt;
taro.orders         &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; orderオブジェクトの配列&lt;/span&gt;
taro.orders.exists? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true (存在するか判定する)&lt;/span&gt;
taro.orders.empty?  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false (空か判定する)&lt;/span&gt;
order1.customer     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; customerオブジェクト（orderを所持しているcustomer）&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# taro.orders内のレコードのみから検索ができる&lt;/span&gt;
taro.orders.find(...)
taro.orders.find_by(...)
aro.orders.where(...)

&lt;span class=&quot;synComment&quot;&gt;# 削除&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
taro.destory &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; dependent: :destroyが指定されているので、orderも削除される&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 0&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/association_basics.html&quot;&gt;Active Record Associations &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot;&gt;Ruby on Rails API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 03 Dec 2014 19:12:20 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075135838</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4でHTTPリクエストとHTTPレスポンスを取得・設定する方法</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141201/1417432408</link>
          <description>&lt;p&gt;Railsでは、コントローラー内で、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;request&lt;/code&gt;メソッドにより、リクエストから値を取得することができます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;response&lt;/code&gt;メソッドにより、レスポンスに値を設定することができます。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-request-get&quot;&gt;Railsでリクエストヘッダの内容を取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-response-set&quot;&gt;Railsでリクエストヘッダの内容を取得する&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-request-get&quot;&gt;Railsでリクエストヘッダの内容を取得する&lt;/h3&gt;コントローラー内で&lt;code&gt;requet&lt;/code&gt;メソッドを使うことでリクエストヘッダの情報を取得することができます。&lt;br /&gt;
よく使うリクエストヘッダには、アクセサメソッドが定義されています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;request.url
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;http://localhost:3000/products&amp;quot;&lt;/span&gt;

request.method
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;GET&amp;quot;&lt;/span&gt;

request.user_agent
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
アクセサメソッドがないヘッダに対しては、&lt;code&gt;request.env&lt;/code&gt;に対して、ハッシュのようにアクセス可能です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;request.env[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;HTTP_ACCEPT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-response-set&quot;&gt;Railsでリクエストヘッダの内容を取得する&lt;/h3&gt;コントローラー内で&lt;code&gt;response.headers&lt;/code&gt;にハッシュのようにアクセスすることで、レスポンスヘッダの情報を設定することができます。&lt;br /&gt;
&lt;code&gt;response.headers&lt;/code&gt;に対して、ハッシュの&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Content-Typeをapplication/jsonにする&lt;/span&gt;
response.headers[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;] = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、&lt;code&gt;response.headers&lt;/code&gt;でレスポンスヘッダの内容を確認できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;response.headers
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;X-Frame-Options&amp;quot;=&amp;gt;&amp;quot;SAMEORIGIN&amp;quot;, &amp;quot;X-XSS-Protection&amp;quot;=&amp;gt;&amp;quot;1; mode=block&amp;quot;, &amp;quot;X-Content-Type-Options&amp;quot;=&amp;gt;&amp;quot;nosniff&amp;quot;, &amp;quot;Content-Type&amp;quot;=&amp;gt;&amp;quot;application/json&amp;quot;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Mon, 01 Dec 2014 20:13:28 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450074930973</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Controller</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4での基本的なセッションの使い方</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141130/1417334030</link>
          <description>&lt;p&gt;Rails4では、デフォルトでセッション情報はブラウザのクッキーに保存されます。&lt;br /&gt;
そして、コントローラーで&lt;code&gt;session&lt;/code&gt;インスタンスを使うことで、セッションに値を設定/取得といったアクセスができます。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-session-set&quot;&gt;セッションに値を設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-session-get&quot;&gt;セッションから値を取得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-session-delete&quot;&gt;セッションを削除する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-session-notices&quot;&gt;セッションを使うときの3つの注意点&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-session-set&quot;&gt;1. セッションに値を設定&lt;/h3&gt;次のように、コントローラー内から&lt;code&gt;session&lt;/code&gt;インスタンスにハッシュのようにアクセスすることが可能です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/logins_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;LoginsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ログインする&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.authenticate(params[&lt;span class=&quot;synConstant&quot;&gt;:username&lt;/span&gt;], params[&lt;span class=&quot;synConstant&quot;&gt;:password&lt;/span&gt;])
      &lt;span class=&quot;synComment&quot;&gt;# ユーザーIDをセッションに保存する&lt;/span&gt;
      session[&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;] = user.id
      redirect_to root_url
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
end
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-session-get&quot;&gt;2. セッションから値を取得&lt;/h3&gt;次のように、設定した値を、セッションから値を取得することも可能です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/application_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActionController&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;

  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 現在のユーザーを取得する&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# @_current_userが空の場合は、session情報をキーにしてDBから検索する&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;current_user&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@_current_user&lt;/span&gt; ||= &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find_by(&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: session[&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;])
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-session-delete&quot;&gt;3. セッションを削除する&lt;/h3&gt;設定したセッションから値を削除するには、&lt;code&gt;nil&lt;/code&gt;を設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/logins_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;LoginsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ログアウトする&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;destroy&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# @_current_userとsession[:user_id]の値をnilにする&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@_current_user&lt;/span&gt; = session[&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;] = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
    redirect_to root_url
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
すべてのセッション情報を削除したい場合は、&lt;code&gt;reset_session&lt;/code&gt;を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/logins_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;LoginsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ログアウトする&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;destroy&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# @_current_userの値をnilにする&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@_current_user&lt;/span&gt; = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
    reset_session
    redirect_to root_url
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-session-notices&quot;&gt;4. セッションを使うときの3つの注意点&lt;/h3&gt;&lt;b&gt;1. 秘密情報を保持しない&lt;/b&gt;&lt;br /&gt;
デフォルトのセッションデータはクッキーに保存されます。そのため、改ざん防止機構はついていますが、内容を確認することができてしまうため、秘密譲歩は表示しないようにしましょう。&lt;/p&gt;&lt;p&gt;&lt;b&gt;2. 巨大なオブジェクトは入れられない&lt;/b&gt;&lt;br /&gt;
クッキーの制限に、4KB弱という容量制限があります。そのため、巨大なオブジェクトは入れられません。&lt;br /&gt;
ちなみに、Railsのセッションの使われ方として、セッションに入れるデータはユーザーのIDとflash程度にとどめるのが推奨されています。&lt;/p&gt;&lt;p&gt;&lt;b&gt;3. マージャルできないオブジェクトは入れられない&lt;/b&gt;&lt;br /&gt;
セッションにデータを格納すると、保存対象のオブジェクトは&lt;code&gt;Marshal#dump&lt;/code&gt;によってシリアライズされて保存されます。&lt;br /&gt;
これは、IOオブジェクトやProcオブジェクトなど、シリアライズできないオブジェクトはセッションに格納することができないという意味です。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;&lt;p&gt;DBにセッション情報を格納したい場合は、&lt;a href=&quot;https://github.com/rails/activerecord-session_store&quot;&gt;rails/activerecord-session_store &amp;middot; GitHub&lt;/a&gt;というgemの利用を検討してください。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/action_controller_overview.html&quot;&gt;Action Controller Overview &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sun, 30 Nov 2014 16:53:50 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450074930155</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Controller</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4でアクションの前後にフィルタ/処理を挟み込む</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141129/1417223453</link>
          <description>&lt;p&gt;Rails4ではコントローラーで&lt;code&gt;before_action&lt;/code&gt;、&lt;code&gt;after_action&lt;/code&gt;、&lt;code&gt;around_action&lt;/code&gt;を宣言することでアクションの前後に処理を挟み込むことができます。&lt;/p&gt;&lt;p&gt;&lt;code&gt;before_filter&lt;/code&gt;、&lt;code&gt;after_filter&lt;/code&gt;、&lt;code&gt;around_filter&lt;/code&gt;という記述も可能ですがRails3までの記述のため、Rails4では&lt;code&gt;xxx_action&lt;/code&gt;を使いましょう。&lt;/p&gt;&lt;p&gt;また、&lt;code&gt;prepend_before_action&lt;/code&gt;、&lt;code&gt;preprend_after_action&lt;/code&gt;、&lt;code&gt;prepend_around_action&lt;/code&gt;を宣言することで&lt;code&gt;before_action&lt;/code&gt;などのアクションの前にアクションを挿入することができます。&lt;/p&gt;&lt;p&gt;&lt;i&gt;これは、この宣言がフィルタ以外にも共通の処理を記述するなど多目的に使われるため、&lt;code&gt;xxx_filter&lt;/code&gt;から&lt;code&gt;xxx_action&lt;/code&gt;に変わったという経緯があります。&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-action-before-after&quot;&gt;before_action, after_actionの宣言方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-action-around&quot;&gt;around_actionの宣言方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-action-skip-before-after&quot;&gt;before_action, after_action, around_actionをスキップする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-action-multiple&quot;&gt;複数のコントローラーにxxx_actionの処理を追加したい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-action-prepend&quot;&gt;befor_action, after_action, around_actionの前にアクションを挿入するprepend_xxx_action&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;ctrl-action-before-after&quot;&gt;1. before_action, after_actionの宣言方法&lt;/h3&gt;&lt;code&gt;before_action&lt;/code&gt;を使うことで、アクションの前に処理を実施することができます。&lt;br /&gt;
よく認証に使われます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/users_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;UsersController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# アクションの処理を実行する前に、認証の確認を行う&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 認証に失敗したら、リダイレクトされる&lt;/span&gt;
  before_action &lt;span class=&quot;synConstant&quot;&gt;:authenticate_user!&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 次のように、only, exceptを指定することでアクションを絞れる&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# before_action :authenticate_user!, only: [:show, :edit, :update, :destroy]&lt;/span&gt;

  ...
  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;authenticate_user!&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# 認証処理をする&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# 認証に失敗したらログインページにリダイレクトする&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-action-around&quot;&gt;2. around_actionの宣言方法&lt;/h3&gt;次のように、&lt;code&gt;around_action&lt;/code&gt;を使うときは、処理内で明示的に&lt;code&gt;yield&lt;/code&gt;を呼び出す必要がることに注意が必要です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/users_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;UsersController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  around_action &lt;span class=&quot;synConstant&quot;&gt;:hoge&lt;/span&gt;

  ...
  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;hoge&lt;/span&gt;
      logger.debug &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;アクション前の処理&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;yield&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# アクションが実行される&lt;/span&gt;
      logger.debug &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;アクション後の処理&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-action-skip-before-after&quot;&gt;3. before_action, after_action, around_actionをスキップする&lt;/h3&gt;&lt;code&gt; skip_before_action&lt;/code&gt;、&lt;code&gt; skip_after_action&lt;/code&gt;、&lt;code&gt; skip_around_action&lt;/code&gt;を使うことでスキップすることが可能です。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-action-multiple&quot;&gt;4. 複数のコントローラーにxxx_actionの処理を追加したい&lt;/h3&gt;複数のコントローラーで同じアクションを指定したい場合は、クラスにすることでDRY原則を守ることが可能です。&lt;br /&gt;
クラス内では、&lt;code&gt;xxx_action&lt;/code&gt;の&lt;code&gt;xxx&lt;/code&gt;に合った&lt;code&gt;before&lt;/code&gt;、&lt;code&gt;after&lt;/code&gt;、&lt;code&gt;around&lt;/code&gt;メソッドを定義する必要があります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/concerns/my_action.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;MyAction&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# before_action時に呼び出される&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;before&lt;/span&gt;(controller)
    controller.logger.debug &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;before: &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;controller.action_name&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# after_action時に呼び出される&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;after&lt;/span&gt;(controller)
    controller.logger.debug &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;after: &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;controller.action_name&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# around_action時に呼び出される&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;around&lt;/span&gt;(controller)
    before(controller)
    &lt;span class=&quot;synStatement&quot;&gt;yield&lt;/span&gt;
    after(controller)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;コントローラーからは次のようにして使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/users_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;UsersController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  before_aciton &lt;span class=&quot;synType&quot;&gt;MyAction&lt;/span&gt;.new   &lt;span class=&quot;synComment&quot;&gt;# beforeが呼び出される&lt;/span&gt;
  after_action  &lt;span class=&quot;synType&quot;&gt;MyAction&lt;/span&gt;.new   &lt;span class=&quot;synComment&quot;&gt;# afterが呼び出される&lt;/span&gt;
  around_action &lt;span class=&quot;synType&quot;&gt;MyAction&lt;/span&gt;.new   &lt;span class=&quot;synComment&quot;&gt;# aroundが呼び出される&lt;/span&gt;
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;ctrl-action-prepend&quot;&gt;5. befor_action, after_action, around_actionの前にアクションを挿入するprepend_xxx_action&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;xxx_action&lt;/code&gt;を複数宣言すると、宣言した順に処理が実行されます。&lt;br /&gt;
継承などをした場合に、親クラスで宣言されたフィルタより先に自分で作成したフィルタを実行したい場合には、&lt;code&gt;prepend_xxx_action(prepend_before_actionなど)&lt;/code&gt;が使えます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;API&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;BaseController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  before_filter &lt;span class=&quot;synConstant&quot;&gt;:ensure_login&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;API&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;SomethingController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;API&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;BaseController&lt;/span&gt;
  preprend_before_filter &lt;span class=&quot;synConstant&quot;&gt;:do_something&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# このアクションが実行される前に&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# do_something、ensure_loginの順で&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# フィルタが実行される&lt;/span&gt;
    render &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;li&gt;Rails API&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sat, 29 Nov 2014 10:10:53 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450074925390</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Controller</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4でユーザーに簡易なメッセージをflashで表示する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141127/1417086075</link>
          <description>&lt;p&gt;Railsでは、ログイン時のメッセージや、登録や更新時の成功通知などの簡易な通知のために、&lt;code&gt;flash&lt;/code&gt;という仕組みが用意されています。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-flash-set-and-view&quot;&gt;flashメッセージの設定と表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-flash-one-requiest&quot;&gt;１リクエスト内のみで有効なflashメッセージ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-flash-with-redirect&quot;&gt;リダイレクト時のflashメッセージ&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-flash-set-and-view&quot;&gt;1. flashメッセージの設定と表示&lt;/h3&gt;コントローラー内で&lt;code&gt;flash&lt;/code&gt;オブジェクトがハッシュのように使うことができます。&lt;br /&gt;
一度表示されるまでflashメッセージは残り、表示されると自動的に削除されるので特に削除処理は必要ありません。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
  flash[&lt;span class=&quot;synConstant&quot;&gt;:notice&lt;/span&gt;] = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ようこそ。本日は&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Date&lt;/span&gt;.today&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;です。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、ビューファイルにこのfalshの内容を表示する表示するように記載します。レイアウトファイルに記載しておくとよいでしょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/layouts/application.html.erb
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;ControllerTest&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; stylesheet_link_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;all&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; javascript_include_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; csrf_meta_tags&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追記部分 開始 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% flash.each do |key, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;| %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; content_tag(:div,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#{key}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追記部分 終了--&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; yield&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-flash-one-requiest&quot;&gt;2. １リクエスト内のみで有効なflashメッセージ&lt;/h3&gt;通常のflashメッセージは、そのアクション自体か、リダイレクトした次のアクションで利用します。&lt;br /&gt;
一度表示されるまでflashメッセージは残ってしまうので、予期しないメッセージを表示してしまう箇所もあります。&lt;br /&gt;
そういうときには、&lt;code&gt;flash.now&lt;/code&gt;を使って設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
  flash.now[&lt;span class=&quot;synConstant&quot;&gt;:notice&lt;/span&gt;] = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ようこそ。本日は&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Date&lt;/span&gt;.today&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;です。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-flash-with-redirect&quot;&gt;3. リダイレクト時のflashメッセージ&lt;/h3&gt;リダイレクト時によくflashを使うので、&lt;code&gt;redirect_to&lt;/code&gt;メソッドのオプションとして&lt;code&gt;notice&lt;/code&gt;と&lt;code&gt;alert&lt;/code&gt;が用意されています。&lt;br /&gt;
これを利用することで、&lt;code&gt;flash[:notice]&lt;/code&gt;と&lt;code&gt;flash[:error]&lt;/code&gt;と同様の記述となります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# flash[:notice]にメッセージを設定しながら、リダイレクトをしている
redirect_to @user, notice: &amp;#39;ログインに成功しました&amp;#39;

# flash[:alert]にメッセージを設定しながら、リダイレクトをしている
redirect_to login_url, alert: &amp;#39;ログインできませんでした&amp;#39;&lt;/pre&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot;&gt;http://api.rubyonrails.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 27 Nov 2014 20:01:15 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450074928808</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Controller</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4でフォームに入力された値を取得するStrongParameters機能</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141126/1417012848</link>
          <description>&lt;p&gt;Rails4以降で導入されたフォームで入力された値のマスアサイメントを防ぐためのStrongParametersという機能について説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-form-params&quot;&gt;Railsのparamsメソッド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-form-strong-parameter&quot;&gt;StrongParameterのメソッド&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-form-params&quot;&gt;1. Railsのparamsメソッド&lt;/h3&gt;Railsではname属性には次のような規約があるため、コントローラー内の&lt;code&gt;params&lt;/code&gt;メソッドで値をネストされたハッシュとして取得できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;product[name]&lt;/code&gt;のように、name属性に&lt;code&gt;[名前]&lt;/code&gt;をつけると、ネストしたハッシュとして受け取れる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;product[category_ids][]&lt;/code&gt;のように、name属性に&lt;code&gt;複数空の[]&lt;/code&gt;をつけると、配列として値を受け取れる。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例えば、次のような商品情報を登録するフォームから入力を受け付けたとします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/products&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;display:none&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;utf8&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;✓&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;authenticity_token&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;gpATAhefgIhzK7cuGsWVuKGZCE4gJeEbrMv+a/wOJ+I=&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product_name&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Name&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product_name&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product[name]&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product_description&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Description&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product_description&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product[description]&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product_price&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Price&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product_price&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product[price]&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product_category&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Category&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product_category_idx_1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product[cateogory_ids][]&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; カテゴリ1
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product_category_idx_2&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product[cateogory_ids][]&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; カテゴリ2
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product_category_idx_3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;product[cateogory_ids][]&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt; カテゴリ3
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;commit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Create Product&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;このとき、&lt;code&gt;params&lt;/code&gt;は次のような値を返します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;params
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     &amp;quot;utf8&amp;quot;=&amp;gt;&amp;quot;✓&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     &amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;gpATAhefgIhzK7cuGsWVuKGZCE4gJeEbrMv+a/wOJ+I=&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     &amp;quot;product&amp;quot; =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#         &amp;quot;name&amp;quot;=&amp;gt;&amp;quot;オレンジジュース&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#         &amp;quot;description&amp;quot;=&amp;gt;&amp;quot;おいしーいオレンジジュース&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#         &amp;quot;price&amp;quot;=&amp;gt;&amp;quot;100&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#         &amp;quot;cateogory_ids&amp;quot; =&amp;gt; [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     },&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     &amp;quot;commit&amp;quot;=&amp;gt;&amp;quot;Create Product&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     &amp;quot;action&amp;quot;=&amp;gt;&amp;quot;create&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#     &amp;quot;controller&amp;quot;=&amp;gt;&amp;quot;products&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   }&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-form-strong-parameter&quot;&gt;2. StrongParameterのメソッド&lt;/h3&gt;ハッシュで入力パラメーターを受け取れると、モデルの&lt;code&gt;new&lt;/code&gt;、&lt;code&gt;update&lt;/code&gt;などのメソッドにそのまま受け渡すことが可能です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;params &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; { &amp;quot;name&amp;quot; =&amp;gt; &amp;quot;田中太郎&amp;quot;, &amp;quot;email&amp;quot; =&amp;gt; &amp;quot;taro@test.com&amp;quot;, password&amp;quot; =&amp;gt; &amp;quot;password&amp;quot; }&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.create(params) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 新しいユーザーが作成される&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;しかし、セキュリティの問題として、悪意あるユーザーが次のように入力パラメーターを付加して送ってきた場合、予期しないデータまで更新されてしまいます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;params &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; { &amp;quot;name&amp;quot; =&amp;gt; &amp;quot;田中太郎&amp;quot;, &amp;quot;email&amp;quot; =&amp;gt; &amp;quot;taro@test.com&amp;quot;, password&amp;quot; =&amp;gt; &amp;quot;password&amp;quot;, &amp;quot;admin&amp;quot; =&amp;gt; &amp;quot;true&amp;quot; }&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.create(params) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 新しいユーザーが管理者権限でで作成されてしまう&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;このため、Rails3では、モデル内で次のように&lt;code&gt;attr_accessible&lt;/code&gt;を使って明示的に記載することで、&lt;b&gt;更新できる値を制限&lt;/b&gt;していました。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Rails3&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  attr_accessible &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:email&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:password&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;しかし、書かないと制限できないという性質上、制限し忘れということが有名なサイトなどでも発見されて、デフォルトで許可というのは良くないということになりました。&lt;br /&gt;
そのため、Rails4からはデフォルトで拒否し、更新したい値を許可するという形になりました。&lt;br /&gt;
それが、StrongParameterという機構であり、paramsの受け取る値（更新を許可する値）をコントローラー側で明示的に記載するようなりました。&lt;/p&gt;&lt;p&gt;paramsメソッドに&lt;code&gt;require&lt;/code&gt;と&lt;code&gt;permit&lt;/code&gt;を使うことで値を許可することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new(product_params)

    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.save
      redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Product was successfully created.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# StrongParameter&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# productのname, description, priceのみ返される(許可する)&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# paramsの内容&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;utf8&amp;quot;=&amp;gt;&amp;quot;✓&amp;quot;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;authenticity_token&amp;quot; =&amp;gt; &amp;quot;gpATAhefgIhzK7cuGsWVuKGZCE4gJeEbrMv+a/wOJ+I=&amp;quot;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;product&amp;quot;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#         { &amp;quot;name&amp;quot;=&amp;gt;&amp;quot;111&amp;quot;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#           &amp;quot;description&amp;quot;=&amp;gt;&amp;quot;22&amp;quot;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#           &amp;quot;price&amp;quot;=&amp;gt;&amp;quot;100&amp;quot;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#           &amp;quot;cateogory_ids&amp;quot;=&amp;gt;[&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;]&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#         },&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;commit&amp;quot;=&amp;gt;&amp;quot;Create Product&amp;quot;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;action&amp;quot;=&amp;gt;&amp;quot;create&amp;quot;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#      &amp;quot;controller&amp;quot;=&amp;gt;&amp;quot;products&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#     }&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 返り値&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;name&amp;quot;=&amp;gt;&amp;quot;商品名&amp;quot;, &amp;quot;description&amp;quot;=&amp;gt;&amp;quot;商品の説明&amp;quot;, &amp;quot;price&amp;quot;=&amp;gt;&amp;quot;100&amp;quot;}&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;product_params&lt;/span&gt;
      params.require(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:description&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:price&lt;/span&gt;)

      &lt;span class=&quot;synComment&quot;&gt;# 配列も取得したい場合は、次のように記載します。&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# params.require(:product)&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;#       .permit(:name, :description, :price, :cateogory_ids =&amp;gt; [])&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rails/strong_parameters&quot;&gt;rails/strong_parameters &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 26 Nov 2014 23:40:48 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450074927760</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Controller</category>
          
        </item>
      
    
      
      
        <item>
          <title>よく忘れるRailsのコントローラーでのrenderメソッドのレシピ集</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141125/1416918957</link>
          <description>&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のコントローラーでの&lt;code&gt;render&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の使い方について説明します。&lt;br /&gt;
&lt;code&gt;render&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;は、「コントローラー(Controller)」と「ビュー(View)」のそれぞれにあります。&lt;br /&gt;
ここではコントローラーのrender&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の使い方を示します。&lt;br /&gt;
ビューでのrender&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の使い方は &lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140807/1407419013&quot; target=&quot;_blank&quot;&gt;こちら&lt;/a&gt;を参照してください。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#render-ctrl-render-desc&quot;&gt;1. ビューを表示する&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#render-ctrl-render&quot;&gt;1.1. 暗黙的なビューの表示する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#render-ctrl-render-action&quot;&gt;1.2. 他のアクションのビューを表示する(actionオプション)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#render-ctrl-render-temp&quot;&gt;1.3. 他のコントローラーのビューを表示する(templateオプション)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#render-ctrl-json-desc&quot;&gt;2. JSONを返す&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#render-ctrl-json-render&quot;&gt;2.1. renderメソッド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#render-ctrl-json-jbuilder&quot;&gt;2.2. jbuilder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#render-ctrl-json-serializer&quot;&gt;2.3. ActiveModelSerializer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#render-ctrl-not-view&quot;&gt;3. ビュー以外を表示する&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#render-ctrl-render-text&quot;&gt;3.1. 文字列を表示する(textオプション)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#render-ctrl-render-xml&quot;&gt;3.2. XMLを返す(xmlオプション)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#render-ctrl-only-status-code&quot;&gt;4. ステータスコードのみを返す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#render-ctrl-respond-to&quot;&gt;5. リクエストの種類に応じて、レスポンスのフォーマットを変更する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#render-ctrl-render-to-string&quot;&gt;6. テンプレートを文字列として取得する(デバッグなどで使える)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#render-ctrl-status-code&quot;&gt;7. よく使うステータスコード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;render-ctrl-render-desc&quot;&gt;1. ビューを表示する&lt;/h4&gt;&lt;h4 id=&quot;render-ctrl-render&quot;&gt;1.1. 暗黙的なビューの表示する&lt;/h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;はコントローラ名と&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;名からrender&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を記載しなくても自動的に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;するビューを特定します。&lt;br /&gt;
&lt;b&gt;ルールは「app/views/コントローラ名/&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;名.html.erb」を呼び出します。&lt;/b&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/products_controller.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# GET /products&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 暗黙的に「app/views/products/index.html.erb」を呼び出す&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# indexはアクション名&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.all
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4 id=&quot;render-ctrl-render-action&quot;&gt;1.2. 他のアクションのビューを表示する(actionオプション)&lt;/h4&gt;actionオプションを指定することにより、 &lt;b&gt;同じコントローラー内&lt;/b&gt;のビューファイルを明示的に指定することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/products_controller.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# GET /products&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# renderメソッドは、「app/views/products/new.html.erb」を呼び出す&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.all
  render &lt;span class=&quot;synConstant&quot;&gt;action&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# 引数は :new のようなシンボルでも、&#39;new&#39; のような文字列でも良い&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;layoutオプションを指定することで、レイアウトファイルを指定することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# special_layoutというレイアウトを使用して、new.html.erbテンプレートを表示する&lt;/span&gt;
render &lt;span class=&quot;synConstant&quot;&gt;action&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;layout&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:special_layout&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# レイアウトを表示しないで、new.html.erbテンプレートのみを表示する&lt;/span&gt;
render &lt;span class=&quot;synConstant&quot;&gt;action&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;layout&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# レイアウトを指定しない場合は、コントローラーのデフォルトのレイアウトが使われて、&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# new.html.erbテンプレートを表示する&lt;/span&gt;
render &lt;span class=&quot;synConstant&quot;&gt;action&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4 id=&quot;render-ctrl-render-temp&quot;&gt;1.3. 他のコントローラーのビューを表示する(templateオプション)&lt;/h4&gt;&lt;b&gt;他のコントローラー&lt;/b&gt;のビューファイルを呼び出すためには、&lt;code&gt;template&lt;/code&gt;オプションを利用します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/views/welcome/index.html.erb を表示する&lt;/span&gt;
render &lt;span class=&quot;synConstant&quot;&gt;template&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;welcome/index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;render-ctrl-json-desc&quot;&gt;2. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を返す&lt;/h4&gt;&lt;h4 id=&quot;render-ctrl-json-render&quot;&gt;2.1. render&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;&lt;/h4&gt;render&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に&lt;code&gt;json&lt;/code&gt;オプションを追加すると&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;としてレスポンスを返します。&lt;br /&gt;
指定したオブジェクトに&lt;code&gt;to_json&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;があれば、自動的に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;形式に変換して返します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.all
  render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;形式として次のように返されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[
  {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ジュース&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;おいしいジュース&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2014-11-23T07:12:19.942Z&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2014-11-23T07:12:19.942Z&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;},
  {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ハンバーガー&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;普通のハンバーガー&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;120&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2014-11-23T07:12:31.892Z&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2014-11-23T07:12:31.892Z&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}
]
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4 id=&quot;render-ctrl-json-jbuilder&quot;&gt;2.2. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/jbuilder&quot;&gt;jbuilder&lt;/a&gt;&lt;/h4&gt;また、Rails4.1には&lt;code&gt;jbuilder&lt;/code&gt;というgemがデフォルトで入っており、テンプレートファイルで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を生成することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/views/products/index.json.jbuilder&lt;/span&gt;

json.array!(&lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;product&lt;/span&gt;|
  json.extract! product, &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:description&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:price&lt;/span&gt;
  json.url product_url(product, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:json&lt;/span&gt;)
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;localhost:3000/products.json&lt;/code&gt;にアクセすると次のように結果が表示されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[
  {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ジュース&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;おいしいジュース&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;http://localhost:3000/products/1.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;},
  {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ハンバーガー&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;普通のハンバーガー&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;120&lt;/span&gt;,&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;http://localhost:3000/products/2.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}
]
&lt;/pre&gt;&lt;p&gt;&lt;h4 id=&quot;render-ctrl-json-serializer&quot;&gt;2.3. ActiveModelSerializer&lt;/h4&gt;&lt;a href=&quot;https://github.com/rails-api/active_model_serializers&quot;&gt;active_model_serializer&lt;/a&gt;というgemによりモデルのように定義することで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を返すこともできます。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;render-ctrl-not-view&quot;&gt;3. ビュー以外を表示する&lt;/h4&gt;&lt;h4 id=&quot;render-ctrl-render-text&quot;&gt;3.1. 文字列を表示する(textオプション)&lt;/h4&gt;render&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に&lt;code&gt;text&lt;/code&gt;オプションを指定することで、テンプレートではなく、文字列を直接表示することが可能です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;render &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hello, world!&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141123/20141123165933.png&quot; alt=&quot;f:id:nipe880324:20141123165933p:plain:w240&quot; title=&quot;f:id:nipe880324:20141123165933p:plain:w240&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:240px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;デフォルトではレイアウトは適用されていません。レイアウトを適用するには、&lt;code&gt;layout: true&lt;/code&gt;を指定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;render &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hello, world!&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;layout&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4 id=&quot;render-ctrl-render-xml&quot;&gt;3.2. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/XML&quot;&gt;XML&lt;/a&gt;を返す(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/xml&quot;&gt;xml&lt;/a&gt;オプション)&lt;/h4&gt;render&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に&lt;code&gt;xml&lt;/code&gt;オプションを指定することで、テンプレートではなく、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/XML&quot;&gt;XML&lt;/a&gt;を返すことが可能です。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/XML&quot;&gt;XML&lt;/a&gt;の表示には、&lt;code&gt;to_xml&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;が用いられます。また、Content-Typeは&lt;b&gt;application/&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/xml&quot;&gt;xml&lt;/a&gt;; charset=&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/utf-8&quot;&gt;utf-8&lt;/a&gt;&lt;/b&gt;です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.all
  render &lt;span class=&quot;synConstant&quot;&gt;xml&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# @products.to_xml の結果が返される&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;次にように&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/XML&quot;&gt;XML&lt;/a&gt;が返されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141123/20141123165935.png&quot; alt=&quot;f:id:nipe880324:20141123165935p:plain:w480&quot; title=&quot;f:id:nipe880324:20141123165935p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;render-ctrl-only-status-code&quot;&gt;4. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%BF%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ステータスコード&lt;/a&gt;のみを返す&lt;/h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;として動作するアクションなどでは、レスポンスの本文は省略し、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%BF%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ステータスコード&lt;/a&gt;のみで成功/失敗を伝えれば良い時があります。&lt;br /&gt;
そういう場合は、&lt;code&gt;head&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;head &lt;span class=&quot;synConstant&quot;&gt;200&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# 200を返す&lt;/span&gt;
head &lt;span class=&quot;synConstant&quot;&gt;:ok&lt;/span&gt;   &lt;span class=&quot;synComment&quot;&gt;# 200を返す&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;第2引数にパラメーターを指定すると、HTTPヘッダの内容を指定できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# createdは201コード。locationヘッダも指定しリソースが作られたことを伝えるために使われる&lt;/span&gt;
head &lt;span class=&quot;synConstant&quot;&gt;:created&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;location&lt;/span&gt;: product_path(&lt;span class=&quot;synIdentifier&quot;&gt;@person&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;例外を除去するために、次のようにすることも可能です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; head(&lt;span class=&quot;synConstant&quot;&gt;:method_not_allowed&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;unless&lt;/span&gt; request.post?
&lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; head(&lt;span class=&quot;synConstant&quot;&gt;:bad_request&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;unless&lt;/span&gt; valid_request?
render
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%BF%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ステータスコード&lt;/a&gt;については、「&lt;a href=&quot;#&quot;&gt;良く使うステータスコード一覧&lt;/a&gt;」を参照してください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;render-ctrl-respond-to&quot;&gt;5. リクエストの種類に応じて、レスポンスのフォーマットを変更する&lt;/h4&gt;&lt;code&gt;resopnd_to&lt;/code&gt;を使うことで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;形式や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/XML&quot;&gt;XML&lt;/a&gt;などの形式でデータを返すことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/products_controller.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 下記のリクエストに応じて、それぞれの形式でレスポンスを返す&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# GET /products/1&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# GET /products/1.json&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# GET /products/1.xml&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# GET /products/1.yaml&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;)

  respond_to &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;|
    format.html &lt;span class=&quot;synComment&quot;&gt;# show.html.erb&lt;/span&gt;
    format.json { render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; } &lt;span class=&quot;synComment&quot;&gt;# JSON形式&lt;/span&gt;
    format.xml  { render &lt;span class=&quot;synConstant&quot;&gt;xml&lt;/span&gt;:  &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; } &lt;span class=&quot;synComment&quot;&gt;# XML形式&lt;/span&gt;
    format.yaml { render &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.to_yaml } &lt;span class=&quot;synComment&quot;&gt;# YAML形式&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;render-ctrl-render-to-string&quot;&gt;6. テンプレートを文字列として取得する(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0&quot;&gt;デバッグ&lt;/a&gt;などで使える)&lt;/h4&gt;テンプレートの処理結果を画面に表示せず、文字列として取得したい場合は、&lt;code&gt;render_to_string&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# index.html&lt;/span&gt;
html_str = render_to_string &lt;span class=&quot;synConstant&quot;&gt;action&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;
p html_str
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;\n&amp;lt;html&amp;gt;\n&amp;lt;head&amp;gt;\n  ...&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;render-ctrl-status-code&quot;&gt;7. よく使う&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%BF%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ステータスコード&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Code&lt;/th&gt;&lt;th&gt;シンボル&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt;200&lt;/td&gt;&lt;td&gt;:ok&lt;/td&gt;&lt;td&gt;レスポンスが正常に終了した&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;201&lt;/td&gt;&lt;td&gt;:created&lt;/td&gt;&lt;td&gt;createなどのアクションの結果などでリソースが正常に作成された。作成されたリソースに対するlocationヘッダも指定する&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;302&lt;/td&gt;&lt;td&gt;:found&lt;/td&gt;&lt;td&gt;他のURLへのリダイレクトを示す。redirect_to&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;が内部的に使っていて明示的に使うことは少ない&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;400&lt;/td&gt;&lt;td&gt;:bad_request&lt;/td&gt;&lt;td&gt;リクエストチェックをした結果、不正だった&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;401&lt;/td&gt;&lt;td&gt;:unauthorized&lt;/td&gt;&lt;td&gt;認証に失敗した&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;403&lt;/td&gt;&lt;td&gt;:forbidden&lt;/td&gt;&lt;td&gt;アクセスが禁止されている&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;404&lt;/td&gt;&lt;td&gt;:not_found&lt;/td&gt;&lt;td&gt;対象のURLやリソースが存在しない&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;406&lt;/td&gt;&lt;td&gt;:not_acceptable&lt;/td&gt;&lt;td&gt;指定されたフォーマットでレスポンスを返せない。respond_toの指定ミスなどで起こる&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;422&lt;/td&gt;&lt;td&gt;:unprocessable_entity&lt;/td&gt;&lt;td&gt;バリデーションエラーなど&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;500&lt;/td&gt;&lt;td&gt;:internal_server_&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/error&quot;&gt;error&lt;/a&gt;&lt;/td&gt;&lt;td&gt;サーバー側が現認のシステムエラーが発生した&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;503&lt;/td&gt;&lt;td&gt;:service_unavailable&lt;/td&gt;&lt;td&gt;メンテナンスや高負荷など&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;br /&gt;
なにかありましたら、コメントいただけると嬉しいです。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 25 Nov 2014 21:35:57 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450074922359</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Controller</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでRakeタスクの作成</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141117/1416225563</link>
          <description>&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でRakeタスクを作成する手順を説明します。&lt;br /&gt;
開発中に何度も実行するコマンドや操作をRakeタスクにしておくことで開発をスムーズに進められるようになります。&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;には、既に有用なRakeタスクがデフォルトで定義されていますので、&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141116/1416115266&quot; target=&quot;_blank&quot;&gt;Rakeコマンド一覧&lt;/a&gt;を参照して、既に存在していないか、一部として使えそうなタスクはないかと見ることも大切です。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;今回は、次のユーザーモデルのテストデータを作成するタスクを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;User nickname email password&lt;/pre&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;1. Rakeタスクをファイルを作成&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;rails g task [タスク名]&lt;/code&gt;でRakeタスクのファイルを作成します。&lt;br /&gt;
Rakeタスクは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B3%C8%C4%A5%BB%D2&quot;&gt;拡張子&lt;/a&gt;が&lt;code&gt;.rake&lt;/code&gt;である必要があります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g task sample
      create  lib/tasks/sample.rake&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;2. Rakeタスクの実装&lt;/h3&gt;
    &lt;p&gt;&lt;code&gt;lib/tasks&lt;/code&gt;配下にファイルが作成されるので、タスクで実行したい処理を実装します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# lib/tasks/sample.rake&lt;/span&gt;

namespace &lt;span class=&quot;synConstant&quot;&gt;:sample&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;           &lt;span class=&quot;synComment&quot;&gt;# ネームスペースを定義 &amp;quot;rake sample: ...&amp;quot;となる&lt;/span&gt;
  desc &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;サンプルデータを作成する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# rake -T のタスク一覧の結果で表示されるタスクの説明文&lt;/span&gt;
  task &lt;span class=&quot;synConstant&quot;&gt;populate&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# タスク名を定義 &amp;quot;rake db:populate&amp;quot;で呼べる&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 100ユーザ作成する&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;.times &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;|
      nickname = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
      email    = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;@example.co.jp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      password = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;nickname&lt;/span&gt;: nickname, &lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;: email, &lt;span class=&quot;synConstant&quot;&gt;password&lt;/span&gt;: password)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;では、Rakeタスクを実行します。(migrationが実行済みであること)&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake sample:populate&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;3. Rakeタスクに引数を渡す&lt;/h3&gt;
    &lt;p&gt;次のように環境引数で渡すのが一般的です。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake sample:populate LIMIT=10&lt;/pre&gt;&lt;p&gt;ここでは、&lt;code&gt;LIMIT&lt;/code&gt;を指定することで作成するUser数を設定できるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# lib/tasks/sample.rake&lt;/span&gt;

namespace &lt;span class=&quot;synConstant&quot;&gt;:sample&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  desc &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;サンプルデータを作成する&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; 
  task &lt;span class=&quot;synConstant&quot;&gt;populate&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 環境変数の値を取得。指定がないときはデフォルト値100で設定&lt;/span&gt;
    limit = &lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;LIMIT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;] || &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# limitの数だけUserを作成する&lt;/span&gt;
    limit.times &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;|
      nickname = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
      email    = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;@example.co.jp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      password = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.create!(&lt;span class=&quot;synConstant&quot;&gt;nickname&lt;/span&gt;: nickname, &lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;: email, &lt;span class=&quot;synConstant&quot;&gt;password&lt;/span&gt;: password)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;え&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/command_line.html#custom-rake-tasks&quot;&gt;The Rails Command Line &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ownway.info/Ruby/rake/arguments&quot;&gt;rake &amp;#x3067;&amp;#x306E;&amp;#x30B3;&amp;#x30DE;&amp;#x30F3;&amp;#x30C9;&amp;#x30E9;&amp;#x30A4;&amp;#x30F3;&amp;#x5F15;&amp;#x6570;&amp;#x306E;&amp;#x6271;&amp;#x3044; - &amp;#x541B;&amp;#x306E;&amp;#x77B3;&amp;#x306F;&amp;#x307E;&amp;#x308B;&amp;#x3067;&amp;#x30EB;&amp;#x30D3;&amp;#x30FC; - Ruby &amp;#x95A2;&amp;#x9023;&amp;#x307E;&amp;#x3068;&amp;#x3081;&amp;#x30B5;&amp;#x30A4;&amp;#x30C8;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Mon, 17 Nov 2014 20:59:23 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450073934357</guid>
          
            <category>Rails入門</category>
          
            <category>Rails初級</category>
          
            <category>開発を効率化する</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rake コマンド一覧</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141116/1416115266</link>
          <description>&lt;p&gt;rakeコマンドをまとめました。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;すべてのRakeコマンドを表示する(※1)&lt;/h3&gt;
    &lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake -T&lt;/pre&gt;&lt;p&gt;&lt;i&gt;※1 Rakeタスクの定義で、&lt;code&gt;description&lt;/code&gt;を書いていないため、厳密には表示されないものもある&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;すべてのRakeコマンド一覧(※1)&lt;/h3&gt;
    &lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake about                              # Railsフレームワークのバージョンを表示する
rake assets:clean[keep]                 # 古いコンパイルされたアセットを削除する
rake assets:clobber                     # コンパイルされたアセットを削除する
rake assets:environment                 # Load asset compile environment
rake assets:precompile                  # config.assets.prefompile内のすべてのアセットをコンパイルする
rake cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)
rake cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)
rake db:create                          # DATABASE_URL か config/database.yml に基づいてRAILS_ENV 用の DBを作成する
rake db:drop                            # DATABASE_URL か config/database.yml に基づいてRAILS_ENV 用の DBを削除する
rake db:fixtures:load                   # 現在の環境のDBに fixtures をロードする
rake db:migrate                         # マイグレートする(オプション: VERSION=x, VERBOSE=false, SCOPE=blog)
rake db:migrate:status                  # マイグレーションの適用状況を確認する
rake db:migrate:reset                   # db:drop, db:create, db:migrate を実行する
rake db:rollback                        # マイグレートをロールバックする(オプション: STEP=n)
rake db:schema:cache:clear              # db/schema_cache.dump をクリアする
rake db:schema:cache:dump               # db/schema_cache.dump を作成する
rake db:schema:dump                     # db/schema.rb を作成する
rake db:schema:load                     # db/schema.rb の内容をDBにロードする
rake db:seed                            # db/seeds.rb からseedデータをロードする
rake db:setup                           # DBを作成、スキーマをロード、seedデータをロードする
rake db:structure:dump                  # db/structure.sql にDB構造をdumpする
rake db:version                         # 現在のスキーマバージョン番号を取得する
rake doc:app                            # doc/app配下にアプリのドキュメントを生成する
rake doc:rails                          # doc/api配下にRailsのドキュメントを生成する
rake doc:guides                         # doc/guids配下にRailsGuidsのドキュメントを生成する
rake log:clear                          # すべての log/配下の *.log をクリアする (LOGS=test,development でログを指定できる)
rake middleware                         # Rack Middlewareのスタックを表示する
rake notes                              # すべてのアノテーション(コード上のOPTIMIZE, FIXME, TODO)を列挙する (notes:optimize, :fixme, :todo で指定可能)
rake notes:custom                       # カスタムアノテーションを列挙する (ANNOTATION=CUSTOM で指定可能)
rake rails:template                     # Applies the template supplied by LOCATION=(/path/to/template) or URL
rake rails:update                       # Update configs and some other initially generated files (or use just update:configs or update:bin)
rake routes                             # すべての定義されたルートを表示する
rake secret                             # セキュアなシークレットキーを生成する (一般的にクッキーセッションのためのシークレットに使われる)
rake stats                              # コードの静的情報(KLOCなど)を報告する
rake test                               # test:units, test:functionals, test:generators, test:integration を実行する
rake test:all                           # Run tests quickly by merging all types and not resetting db
rake test:all:db                        # Run tests quickly, but also reset db
rake time:zones:all                     # すべてのタイムゾーンを表示する(time:zones:us, time:zones:local も指定可能)
rake tmp:clear                          # tmp/配管のsession, cache, socket ファイルをクリアする(tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear　でクリア範囲を狭められる)
rake tmp:create                         # sessions, cache, sockets, pidsのために、tmpディレクトリを作成する&lt;/pre&gt;
&lt;/div&gt;</description>
          <pubDate>Sun, 16 Nov 2014 14:21:06 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450073930565</guid>
          
            <category>Rails初級</category>
          
            <category>開発を効率化する</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsをローカルでProductionモードで起動させる方法</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141110/1415623670</link>
          <description>&lt;p&gt;ローカル環境でRailsを&lt;code&gt;production&lt;/code&gt;モードで起動させようとするといろいろと詰まるので起動方法をまとめました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;確認環境&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;Rails 4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;productionモードで起動させる方法&lt;/h3&gt;
    &lt;p&gt;まず、production環境のDBを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake db:migrate &lt;span class=&quot;synIdentifier&quot;&gt;RAILS_ENV&lt;/span&gt;=production
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;production&lt;/code&gt;モードでは静的ファイルはNginxやApacheなどのWebサーバーが配信するのが適切なのですが、今回は、Webサーバーを立てるのがめんどくさいので、Rails側で静的ファイルを配信しなければなりません。&lt;br /&gt;
そのため、以下の設定を&lt;code&gt;true&lt;/code&gt;にします。&lt;br /&gt;
NginxやApacheなどのWebサーバー経由でアクセスする場合は、下記は必要ありません。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/environments/production.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Rails 4.1の場合&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Disable Rails&#39;s static asset server (Apache or nginx will already do this).&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# config.serve_static_assets = false&lt;/span&gt;
config.serve_static_assets = &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# Rails 4.2の場合は、次のようになっています。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 特に修正する必要はないが、起動時にRAILS_SERVE_STATIC_FILES という環境変数を指定する必要があります。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Disable serving static files from the `/public` folder by default since&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Apache or NGINX already handles this.&lt;/span&gt;
config.serve_static_files = &lt;span class=&quot;synIdentifier&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;RAILS_SERVE_STATIC_FILES&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;].present?
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、静的ファイルをPreCompileしておきます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake assets:precompile RAILS_ENV=production&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;code&gt;production&lt;/code&gt;モードでは、&lt;code&gt;secret_key_base&lt;/code&gt;が必要なので作成し、一時的に設定します。&lt;br /&gt;
そして、サーバーを&lt;code&gt;production&lt;/code&gt;モードで起動します。&lt;br /&gt;
本番のときは、SECRET_KEY_BASEは環境変数に設定し、起動するたびに変更しないようにしてください。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;// Rails 4.1 の場合
&lt;span class=&quot;synIdentifier&quot;&gt;SECRET_KEY_BASE&lt;/span&gt;=&lt;span class=&quot;synPreProc&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;rake secret&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; rails s &lt;span class=&quot;synSpecial&quot;&gt;-eproduction&lt;/span&gt;

// Rails 4.2 の場合
&lt;span class=&quot;synIdentifier&quot;&gt;SECRET_KEY_BASE&lt;/span&gt;=&lt;span class=&quot;synPreProc&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;rake secret&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;RAILS_SERVE_STATIC_FILES&lt;/span&gt;=&lt;span class=&quot;synStatement&quot;&gt;true&lt;/span&gt; rails s &lt;span class=&quot;synSpecial&quot;&gt;-eproduction&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;最後に、実際に画面にアクセスし、スタイルシートやJSファイルが読み込まれているか確認してください。&lt;br /&gt;
うまく読み込まれていない場合は、ブラウザのログにスタイルシートやJSが見つからないといったような、&lt;br /&gt;
次のようにエラーが出ているはずです。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141108/20141108153747.png&quot; alt=&quot;f:id:nipe880324:20141108153747p:plain:w480&quot; title=&quot;f:id:nipe880324:20141108153747p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Mon, 10 Nov 2014 21:47:50 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450072928979</guid>
          
            <category>Rails初級</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsを始めたばかりの人向け！Railsの仕組みを一から理解しながらブログを作成する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140813/1407915718</link>
          <description>&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;初心者が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;の一通りの仕組みを理解できることをために、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;の仕組みを一つ一つ理解しながらブログを作成していきます。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でのルーティング、コントローラー、モデル、ビューの規約や使い方、Scssでのスタイリングや&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CoffeeScript&quot;&gt;CoffeeScript&lt;/a&gt;での&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Javascript&quot;&gt;Javascript&lt;/a&gt;の記述なども説明します。&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;a href=&quot;http://guides.rubyonrails.org/v4.0.6/getting_started.html&quot; target=&quot;_blank&quot;&gt;Rails Guide - Getting Started with Rails&lt;/a&gt;をベースにしました。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;まずは、完成させるブログアプリケーションの画面です。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140813/20140813160348.png&quot; alt=&quot;f:id:nipe880324:20140813160348p:plain:w320&quot; title=&quot;f:id:nipe880324:20140813160348p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt; 2.0&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.1&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac%20OS%20X&quot;&gt;Mac OS X&lt;/a&gt; 10.9 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;前提条件&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt; がインストール済み&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4 がインストール済み&lt;/li&gt;
&lt;li&gt;SQLite3データベースがインストール済み&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;i&gt;※もしインストールされていない場合は、「Rails4 インストール」などで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Google&quot;&gt;Google&lt;/a&gt;検索してインストールしてください&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#what-is-rails&quot;&gt;Railsとは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#create-new-rails-project&quot;&gt;新しいRailsプロジェクトを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hello-rails&quot;&gt;Hello, Rails! を表示する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#getting-up-and-running&quot;&gt;投稿機能を作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#adding-a-second-model&quot;&gt;コメントを追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#refactoring&quot;&gt;リファクタリング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#deleting-comments&quot;&gt;コメントを削除する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#security&quot;&gt;HTTP認証を追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#styling&quot;&gt;画面のスタイリングをする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#coffee-script&quot;&gt;CoffeeScriptでJavaScriptを使う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#what-is-next&quot;&gt;次は？&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;what-is-rails&quot;&gt;1. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;とは&lt;/h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC&quot;&gt;プログラミング言語&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;で書かれたWebアプリケーション開発&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;です。&lt;br /&gt;
「設定よりも規約」とい考えで、いろいろとルールを決めることでWebアプリケーションを簡易に開発できようにするという設計思想のもとに作られています。このため、この規約を守ることで、他の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC&quot;&gt;プログラミング言語&lt;/a&gt;や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;よりも少ない&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;（生産性が高い）でWebアプリケーションを開発できます。&lt;br /&gt;
これにより、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;開発者の多くは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でのWebアプリケーション開発は楽しいものであると感じています。&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;の規約に基づいた開発を学ぶことで、素晴らしい生産性の向上を体感するでしょう。他の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC&quot;&gt;プログラミング言語&lt;/a&gt;での古い考え方にいつまでも固執していると、Webアプリケーション開発が楽しくないものになってしまうかもれません。&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;の主要な２つの原則&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DRY（Don&#39;t Repeat Yourself）- 同じコードを何度も書くことは良くないという考え&lt;/li&gt;
&lt;li&gt;設定より規約（Convention Over Configuration）- 設定ファイルに細かな設定情報を記載するのではなく、ファイル名やクラス名などの規約があらかじめ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;によって決められている&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;#create-new-rails-project&quot;&gt;2. 新しい&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;プロジェクトを作成する&lt;/h3&gt;実際に手を動かしながら以降の説明を実施していくと理解が深まるのでお勧めです。&lt;br /&gt;
この記事では、「簡単なブログアプリケーションを作成」していきます。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;2.1. ブログアプリケーションの作成&lt;/h4&gt;
    &lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;には「ジェネレーター」と呼ばれる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;があり、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でなにか作業を始めるときの最初のステップとしてよく使う&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;郡ですので覚えておいてください。&lt;br /&gt;
新しい&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;アプリケーションを作成するときもこの「ジェネレーター」を使うことができます。&lt;/p&gt;&lt;p&gt;ターミナルを開いて、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;アプリケーションを作成したいフォルダに移動して、次のコマンドを実行してください。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ rails new blog&lt;/pre&gt;&lt;p&gt;このコマンドは内部的に、&lt;code&gt;blog&lt;/code&gt;フォルダを作成し、そのフォルダ内に「Blog」という&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;アプリケーションに必要なファイルを作成しています。その後、&lt;code&gt;bundle install&lt;/code&gt;を行い&lt;code&gt;Gemfile&lt;/code&gt;内に記載されているgemをインストールしています。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※&lt;code&gt;rails new -h&lt;/code&gt;コマンドで全ての&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3&quot;&gt;コマンドライン&lt;/a&gt;オプションを確認できます。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;ブログアプリケーションで作業をするために作成したblogフォルダに移動します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ cd blog&lt;/pre&gt;&lt;p&gt;&lt;code&gt;rails new blog&lt;/code&gt;コマンドは、自動で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のフォルダ構成、ファイルを作成します。この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB&quot;&gt;チュートリアル&lt;/a&gt;では、&lt;code&gt;app/&lt;/code&gt;配下のファイルを修正することが多くなりますが、その他のフォルダも重要です。そのため、デフォルトで作成されるフォルダとファイルの基礎をまとめておきました。&lt;br /&gt;
&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140709/1404912093&quot; target=&quot;_blank&quot;&gt;Railsのフォルダ構造の説明&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;hello-rails&quot;&gt;3. Hello, &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;! を表示する&lt;/h3&gt;まずは、画面にテキストを表示させてみましょう。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;3.1. Webサーバーを起動する&lt;/h4&gt;
    &lt;p&gt;実は今の段階で既に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;アプリケーションは機能します。開発マシン上でWebサーバーを起動させましょう。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ rails server&lt;/pre&gt;&lt;p&gt;&lt;i&gt;※&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CoffeeScript&quot;&gt;CoffeeScript&lt;/a&gt;を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;するために「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;ランタイム」が必要です。もし、「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;ランタイム」が存在しない場合、&lt;code&gt;execjs error&lt;/code&gt;が発生します。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac%20OS%20X&quot;&gt;Mac OS X&lt;/a&gt;や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Windows&quot;&gt;Windows&lt;/a&gt;では「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;ランタイム」は通常はインストールされているので問題ありません。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;コマンドを実行すると、Webサーバーの&lt;code&gt;WeBrick&lt;/code&gt;が起動します。動作を確認するために、ブラウザを開き、&lt;code&gt;http://localhost:3000&lt;/code&gt;にアクセスしてください。デフォルトのインフォページが表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140812/20140812025948.png&quot; alt=&quot;f:id:nipe880324:20140812025948p:plain:w480&quot; title=&quot;f:id:nipe880324:20140812025948p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;※Webサーバーを止めるには、ターミナル内で&lt;code&gt;Ctrl+C&lt;/code&gt;を押して下さい。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;を変更したときにサーバーが自動的に読み込むを行うのでサーバーの再起動は必要ありません。ルーティングなどの設定ファイルを変更した場合はサーバーの再起動が必要です。変更したのに画面上で変化がないときはサーバーの再起動をするようにしてみてください。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;画面にインフォページが表示されるということは、画面を表示するために十分な設定が正しく行われているという証拠です。また、この画面上部にある&quot;About your application’s environment&quot;リンクをクリックすることでアプリケーション環境を確認することができます。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;3.2. &quot;Hello, &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;&quot;を画面表示&lt;/h4&gt;
    &lt;p&gt;&quot;Hello, &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;&quot;を画面表示するためには、少なくともコントローラーとビューを作成する必要があります。&lt;/p&gt;&lt;p&gt;コントローラーの目的は、アプリケーションへのリクエストを処理することです。ルーティングは、どのコントローラーがどのリクエストを処理するかを決めます。つまり、リクエストされたURLとコントローラーの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;を行っています。たいていは、コントローラーは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のルートを処理できるので、それぞれのルートはコントローラー内のそれぞれのアクション（コントローラーの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;のことをアクションと呼ぶ）に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;されます。アクション内では、情報を集め、それをビューに渡しています。&lt;/p&gt;&lt;p&gt;ビューの目的は、人間が読める形式で情報を表示することです。重要なことは、表示する情報を集めるのはコントローラーであり、ビューではないということです。ビューはコントローラーが集めた情報を表示することに専念すべきです。デフォルトでは、ビューテンプレートはERB(組み込み&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;)という言語で書かれています。&lt;/p&gt;&lt;p&gt;コントローラーを作成するために、「ジェネレーター」に&lt;code&gt;controller&lt;/code&gt;を指定し、&lt;code&gt;welcome&lt;/code&gt;というコントローラ名、そして、&lt;code&gt;index&lt;/code&gt;というアクションを指定します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ rails generate controller welcome index&lt;/pre&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;はいくつかのファイルと１つのルートを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;    create  app/controllers/welcome_controller.rb
     route  get &amp;#39;welcome/index&amp;#39;
    invoke  erb
    create    app/views/welcome
    create    app/views/welcome/index.html.erb
    invoke  test_unit
    create    test/controllers/welcome_controller_test.rb
    invoke  helper
    create    app/helpers/welcome_helper.rb
    invoke    test_unit
    create      test/helpers/welcome_helper_test.rb
    invoke  assets
    invoke    coffee
    create      app/assets/javascripts/welcome.js.coffee
    invoke    scss
    create      app/assets/stylesheets/welcome.css.scss&lt;/pre&gt;&lt;p&gt;これらのファイルのなかで一番重要なのは、&lt;br /&gt;
「コントローラー(&lt;code&gt;app/controllers/welcome_controller.rb&lt;/code&gt;)」と&lt;br /&gt;
「ビュー(&lt;code&gt;app/views/welcome/index.html.erb&lt;/code&gt;)」です。&lt;/p&gt;&lt;p&gt;&lt;code&gt;app/views/welcome/index.html.erb&lt;/code&gt;を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C6%A5%AD%A5%B9%A5%C8%A5%A8%A5%C7%A5%A3%A5%BF&quot;&gt;テキストエディタ&lt;/a&gt;で開きましょう。&lt;br /&gt;
全てのコードを削除し、次のコードを記載して保存してください。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Hello, Rails!&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;3.3. アプリケーションのルート画面を設定&lt;/h4&gt;
    &lt;p&gt;さて、私たちは今コントローラーとビューを作成しました。ルートURL(&lt;code&gt;http://localhost:3000&lt;/code&gt;)にアクセスしたときに、&quot;Hello, &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;!&quot;を画面に表示させたいです。しかし、今は&quot;Welcome Aboard&quot;のインフォページが表示されてしまいます。&lt;/p&gt;&lt;p&gt;これを解消するために、ルートを指定する必要があります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.routes.draw &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;welcome/index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# The priority is based upon order of creation: first created -&amp;gt; highest priority.&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# See how all your routes lay out with &amp;quot;rake routes&amp;quot;.&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# You can have the root of your site routed with &amp;quot;root&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# root &#39;welcome#index&#39;&lt;/span&gt;
  ...
&lt;/pre&gt;&lt;p&gt;これはアプリケーションのルーティングファイルです。特殊な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;(Domain-Specific-Language)で書かれており、アプリケーションへのリクエストをコントローラーとアクションに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;しています。このファイル内には既にいくつかのサンプルが&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%E1%A5%F3%A5%C8%A5%A2%A5%A6%A5%C8&quot;&gt;コメントアウト&lt;/a&gt;されて記載されています。その中の一つに、ルートURLをコントローラーとアクションに結びつけている記載があります。&lt;code&gt;root&lt;/code&gt;から始まる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%E1%A5%F3%A5%C8%A5%A2%A5%A6%A5%C8&quot;&gt;コメントアウト&lt;/a&gt;されている行を探して、コメントを外して下さい。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
  root &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;welcome#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;root &#39;welcome#index&#39;&lt;/code&gt;はルートへのリクエストを&lt;code&gt;Welcome&lt;/code&gt;コントローラーの&lt;code&gt;index&lt;/code&gt;アクションに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;させることを意味しています。&lt;br /&gt;
また、&lt;code&gt;get &#39;welcome/index&#39;&lt;/code&gt;は&lt;code&gt;http://localhost:3000/welcome/index&lt;/code&gt;へのリクエストを&lt;code&gt;Welcome&lt;/code&gt;コントローラーの&lt;code&gt;index&lt;/code&gt;アクションに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;させることを意味しています。これは、&lt;code&gt;rails generate controller welcome index&lt;/code&gt;コマンドを実行したときに作られたルートです。&lt;/p&gt;&lt;p&gt;ブラウザで&lt;code&gt;http://localhost:3000&lt;/code&gt;にアクセスしましょう。&lt;br /&gt;
すると、&lt;code&gt;app/views/welcome/index.html.erb&lt;/code&gt;に記載された&quot;Hello, &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;!&quot;メッセージが表示されるます。&lt;br /&gt;
これは、&lt;code&gt;config/routes.rb&lt;/code&gt;内に追加したルートが&lt;code&gt;Welcome&lt;/code&gt;コントローラーの&lt;code&gt;index&lt;/code&gt;アクションに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;され、&lt;code&gt;index&lt;/code&gt;アクションが&lt;code&gt;app/views/welcome/index.html.erb&lt;/code&gt;を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;したからです。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※&lt;code&gt;index&lt;/code&gt;アクションを確認すると、アクション内に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;が記載されていません。しかし、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;はビューを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の&lt;code&gt;render&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;が呼ばれていないときは、暗黙でコントローラー名とアクション名から&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;するビューファイルを推測します。今回の場合、コントローラ名が&lt;code&gt;Welcome&lt;/code&gt;でアクション名が&lt;code&gt;index&lt;/code&gt;なので、&lt;code&gt;app/views/welcome/index.html.erb&lt;/code&gt;が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;されます。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140812/20140812031054.png&quot; alt=&quot;f:id:nipe880324:20140812031054p:plain:w480&quot; title=&quot;f:id:nipe880324:20140812031054p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;getting-up-and-running&quot;&gt;4. 投稿機能を作成する&lt;/h3&gt;さて、あなたはもうすでに「コントローラー、アクション、ビューの作成方法」を知ることができました。&lt;br /&gt;
それでは、ブログの投稿機能を作っていきましょう。&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;では、標準的なRESTリソースを宣言するために使われる&lt;code&gt;resources&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;が定義されています。&gt;|&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ruby&quot;&gt;ruby&lt;/a&gt;|&lt;br /&gt;
# config/routes.rb&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;.application.routes.draw do&lt;/p&gt;&lt;p&gt;  resources :posts&lt;/p&gt;&lt;p&gt;  root &#39;welcome#index&#39;&lt;br /&gt;
end&lt;br /&gt;
|&lt;/p&gt;

&lt;/div&gt;&lt;p&gt;ターミナルで&lt;code&gt;rake routes&lt;/code&gt;を実行すると、標準のRESTfulアクションのルートを確認することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rake routes
   &lt;span class=&quot;synType&quot;&gt;Prefix&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Verb&lt;/span&gt;   &lt;span class=&quot;synType&quot;&gt;URI&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Pattern&lt;/span&gt;               &lt;span class=&quot;synType&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#Action&lt;/span&gt;
    posts &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;          posts#index&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;          POST   &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;posts(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)          posts&lt;span class=&quot;synComment&quot;&gt;#create&lt;/span&gt;
 new_post &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/ne&lt;/span&gt;w(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      posts&lt;span class=&quot;synComment&quot;&gt;#new&lt;/span&gt;
edit_post &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;/edit(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;) posts&lt;span class=&quot;synComment&quot;&gt;#edit&lt;/span&gt;
     post &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      posts&lt;span class=&quot;synComment&quot;&gt;#show&lt;/span&gt;
          &lt;span class=&quot;synType&quot;&gt;PATCH&lt;/span&gt;  &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      posts&lt;span class=&quot;synComment&quot;&gt;#update&lt;/span&gt;
          &lt;span class=&quot;synType&quot;&gt;PUT&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      posts&lt;span class=&quot;synComment&quot;&gt;#update&lt;/span&gt;
          &lt;span class=&quot;synType&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      posts&lt;span class=&quot;synComment&quot;&gt;#destroy&lt;/span&gt;
     root &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    /                         welcome&lt;span class=&quot;synComment&quot;&gt;#index&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;それでは、新しい投稿(&lt;code&gt;Post&lt;/code&gt;)を作成する機能とフォームを追加します。&lt;br /&gt;
これは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRUD&quot;&gt;CRUD&lt;/a&gt;操作の&lt;code&gt;作成(Create)&lt;/code&gt;と&lt;code&gt;検索(Read)&lt;/code&gt;に当てはまります。これから作成するフォームは次のようになります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140812/20140812034136.png&quot; alt=&quot;f:id:nipe880324:20140812034136p:plain:w480&quot; title=&quot;f:id:nipe880324:20140812034136p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;今のところ見た目がもっさいですが、まあいいでしょう。最後の方の９番目の大項目でスタイリングを改善していきます。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4.1. 前準備の実施&lt;/h4&gt;
    &lt;p&gt;アプリケーションに新しい投稿を作成する最初のステップは、「ルーティング」です。&lt;br /&gt;
&lt;code&gt;/posts/new&lt;/code&gt;のURLにアクセスすることで投稿を作成します。しかし、&lt;code&gt;resouces&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;により既にそのルートは定義されています。&lt;/p&gt;&lt;p&gt;画面から&lt;code&gt;http://localhost:3000/posts/new&lt;/code&gt;にアクセスしてください。ルーティングエラーが発生するでしょう。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140812/20140812032446.png&quot; alt=&quot;f:id:nipe880324:20140812032446p:plain:w480&quot; title=&quot;f:id:nipe880324:20140812032446p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;このエラーの原因は、「リクエストを処理するためのコントローラーを必要としているが、そのコントローラーが存在していなかった」ためです。&lt;br /&gt;
そのため&lt;code&gt;PostsController&lt;/code&gt;を作成すれば解決します。次のコマンドでコントローラーを作成しましょう。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ rails generate controller posts&lt;/pre&gt;&lt;p&gt;空のコントローラーが表示されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/posts_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;PostsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;コントローラーは&lt;code&gt;ApplicationController&lt;/code&gt;を継承したクラスです。コントローラークラス内に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を定義することで、それがコントローラーのアクションとなります。通常そのアクションはPostに対する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRUD&quot;&gt;CRUD&lt;/a&gt;操作を行います。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;にはpublic, private, protected&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;があります。public&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;だけがコントローラーのアクションとなります。privateやprotected&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;はアクションにはならないことに注意して下さい。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://localhost:3000/posts/new&lt;/code&gt;にアクセスし直すと、新しいエラーが表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140812/20140812032733.png&quot; alt=&quot;f:id:nipe880324:20140812032733p:plain:w480&quot; title=&quot;f:id:nipe880324:20140812032733p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;このエラーは、「&lt;code&gt;PostsController&lt;/code&gt;内に&lt;code&gt;new&lt;/code&gt;アクションを見つからなかった」ということを表しています。&lt;/p&gt;&lt;p&gt;&lt;code&gt;app/controllers/posts_controller.rb&lt;/code&gt;をエディタで開き、&lt;code&gt;PostsController&lt;/code&gt;クラス内に&lt;code&gt;new&lt;/code&gt;アクションを定義しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;PostsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# GET /posts/new&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;new&lt;/span&gt; 
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;new&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を定義したので、&lt;code&gt;http://localhost:3000/posts/new&lt;/code&gt;にアクセスし直しましょう。また新しいエラーが発生します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140812/20140812032951.png&quot; alt=&quot;f:id:nipe880324:20140812032951p:plain:w480&quot; title=&quot;f:id:nipe880324:20140812032951p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;「アクションを処理した後にビュー（テンプレート）を表示しようとしたが、それが存在しなかった」ためエラーが発生しています。&lt;/p&gt;&lt;p&gt;上記の画像のエラー文を細かく見てみましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Missing&lt;/span&gt; template posts/new, application/new
with {&lt;span class=&quot;synConstant&quot;&gt;locale&lt;/span&gt;:[&lt;span class=&quot;synConstant&quot;&gt;:en&lt;/span&gt;], &lt;span class=&quot;synConstant&quot;&gt;formats&lt;/span&gt;:[&lt;span class=&quot;synConstant&quot;&gt;:html&lt;/span&gt;], &lt;span class=&quot;synConstant&quot;&gt;handlers&lt;/span&gt;:[&lt;span class=&quot;synConstant&quot;&gt;:erb&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:builder&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:coffee&lt;/span&gt;]}.
&lt;span class=&quot;synType&quot;&gt;Searched&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt;: * &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/path/to/blog/app/views&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;それぞれの部分が何を意味しているかささっと確認しましょう。&lt;/p&gt;&lt;p&gt;最初の部分は、何のテンプレートが存在しなかったかを示しています。今回の場合、&lt;code&gt;posts/new&lt;/code&gt;テンプレートです。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;は最初にこのテンプレートを探します。そしてもし見つけれなかった場合、今度は&lt;code&gt;application/new&lt;/code&gt;テンプレートを表示しようと試みます。これは、&lt;code&gt;PostsControler&lt;/code&gt;が&lt;code&gt;ApplicationController&lt;/code&gt;を継承しているためです。&lt;/p&gt;&lt;p&gt;次の部分は、ハッシュです。&lt;code&gt;locale&lt;/code&gt;キーはテンプレートがどの言語を使うべきかを示しいます。デフォルトは「&lt;code&gt;英語(:en)&lt;/code&gt;」です。&lt;br /&gt;
次の&lt;code&gt;formats&lt;/code&gt;キーはテンプレートの形式を表しています。デフォルトは「&lt;code&gt;HTML(html)&lt;/code&gt;」のため、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;はHTMLテンプレートを探します。&lt;br /&gt;
最後の&lt;code&gt;handlers&lt;/code&gt;キーはテンプレートを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;するためにどのテンプレートハンドラーを使えるか表しています。今回の場合で言うと、&lt;code&gt;erb&lt;/code&gt;はHTMLテンプレート用、&lt;code&gt;builder&lt;/code&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/XML&quot;&gt;XML&lt;/a&gt;テンプレート用に使われ、&lt;code&gt;coffee&lt;/code&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CoffeeScript&quot;&gt;CoffeeScript&lt;/a&gt;を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;テンプレートに変換するために使われます。&lt;/p&gt;&lt;p&gt;最後の部分は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;がテンプレートファイルを探すパスを表しています。&lt;/p&gt;&lt;p&gt;今回のエラーを解消するための一番簡単なテンプレートは、&lt;code&gt;app/views/posts/new.html.erb&lt;/code&gt;ファイルを作成することです。１つ目の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B3%C8%C4%A5%BB%D2&quot;&gt;拡張子&lt;/a&gt;(html)がテンプレートのフォーマットであり、２つ目の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B3%C8%C4%A5%BB%D2&quot;&gt;拡張子&lt;/a&gt;(erb)がテンプレートのハンドラーを表します。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;は&lt;code&gt;app/views/&lt;/code&gt;配下から&lt;code&gt;posts/new&lt;/code&gt;テンプレートを探します。&lt;br /&gt;
今私たちはHTMLフォームを作りたいので、フォーマットは&lt;code&gt;html&lt;/code&gt;、そして、ハンドラーは&lt;code&gt;erb&lt;/code&gt;としました。そのため、ファイルは&lt;code&gt;app/views/posts/new.html.erb&lt;/code&gt;にするべきです。&lt;/p&gt;&lt;p&gt;エラーを解消するために、&lt;code&gt;app/views/posts/new.html.erb&lt;/code&gt;を新たに作成し、次の内容を記載してください。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;新しい投稿&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;http://localhost:3000/posts/new&lt;/code&gt;にアクセスすると画面が表示されるはずです。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140812/20140812033848.png&quot; alt=&quot;f:id:nipe880324:20140812033848p:plain:w480&quot; title=&quot;f:id:nipe880324:20140812033848p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;ルート、コントローラー、アクションそしてビューが連動して上手く動いています。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4.2. 最初のフォーム&lt;/h4&gt;
    &lt;p&gt;さて、「投稿を作成するフォーム」を作っていきましょう。&lt;br /&gt;
テンプレートでフォームを作るためには、&lt;code&gt;form_for&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;と呼ばれるヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使います。&lt;code&gt;app/views/posts/new.html.erb&lt;/code&gt;を次のように修正しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;新しい投稿&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :post, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: posts_path do |f| %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :title, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;タイトル&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :title %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
 
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;内容&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_area&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 60, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 8 %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
 
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.submit&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;画面を更新すると、この章の始めにお見せした画面とまったく同じ画面が表示されるでしょう。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でフォームを作ることは本当に簡単ですね。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140812/20140812034136.png&quot; alt=&quot;f:id:nipe880324:20140812034136p:plain:w480&quot; title=&quot;f:id:nipe880324:20140812034136p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;form_for&lt;/code&gt;では、どのオブジェクトを作成するためのフォームを作成するかを明示するために引数にオブジェクトを渡す必要があります。今回の場合&lt;code&gt;:post&lt;/code&gt;を渡すことで、&lt;code&gt;Post&lt;/code&gt;オブジェクトを作成するためのフォームを作るように指定しています。&lt;br /&gt;
&lt;code&gt;form_for&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;のブロック内では、&lt;code&gt;FormBuilder&lt;/code&gt;オブジェクト(&lt;code&gt;f&lt;/code&gt;で表されている)は、投稿の「タイトル(title)」と「内容(text)」のためにラベルとテキストフィールド、テキストエリアを作成しています。そして、最後に&lt;code&gt;submit&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;により、登録ボタンを作成しています。&lt;/p&gt;&lt;p&gt;しかし、このフォームには１つ問題があります。フォームのHTMLソースを確認すれば分かると思いますが、フォーム要素のaction属性の値が&lt;code&gt;/posts/new&lt;/code&gt;になっています。このURLは、&lt;code&gt;resouces&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;で自動的に作成されるルートではないため、フォームの登録ボタンを押したときにルーティングエラーになってしまいます。&lt;/p&gt;&lt;p&gt;そのため、&lt;code&gt;form_for&lt;/code&gt;の行を次のように修正してください。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&amp;lt;%= form_for &lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;: posts_path &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;f&lt;/span&gt;| %&amp;gt;
&lt;/pre&gt;&lt;p&gt;今回は、&lt;code&gt;url&lt;/code&gt;オプションに&lt;code&gt;posts_path&lt;/code&gt;ヘルパーを追加しました。&lt;br /&gt;
こうすることにより&lt;code&gt;PostsController&lt;/code&gt;の&lt;code&gt;create&lt;/code&gt;アクションが呼び出されます。ちなみに、Webの世界では一般的にフォームでサーバーにデータを送信するときにはHTTPの&lt;code&gt;GET&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;ではなく&lt;code&gt;POST&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;が使われます。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でも自動的に&lt;code&gt;POST&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;が使われます。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※&lt;code&gt;xxx_path&lt;/code&gt;や&lt;code&gt;xxx_url&lt;/code&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;が自動的に生成するヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;です。中身はURLであり、&lt;code&gt;xxx_path&lt;/code&gt;はルートのURLからの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C1%EA%C2%D0%A5%D1%A5%B9&quot;&gt;相対パス&lt;/a&gt;、&lt;code&gt;xxx_url&lt;/code&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%E4%C2%D0%A5%D1%A5%B9&quot;&gt;絶対パス&lt;/a&gt;です。&lt;br /&gt;
例えば、&lt;code&gt;posts_path&lt;/code&gt;の場合、&lt;code&gt;/posts&lt;/code&gt;に変換されます。&lt;br /&gt;
どのヘルパーが使えるかどうかは、&lt;code&gt;rake routes&lt;/code&gt;コマンドの結果の一番左側の&lt;code&gt;prefix&lt;/code&gt;の列を見て、それに&lt;code&gt;_path&lt;/code&gt;もしくは&lt;code&gt;_url&lt;/code&gt;を足したヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;が使用可能です。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;では、新しい投稿を作成するために、画面を更新してから、フォームに値を入力し、サブミットボタンを押して下さい。すると、次のようなエラーが発生します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140812/20140812035717.png&quot; alt=&quot;f:id:nipe880324:20140812035717p:plain:w480&quot; title=&quot;f:id:nipe880324:20140812035717p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;これは、「&lt;code&gt;PostsController&lt;/code&gt;に&lt;code&gt;create&lt;/code&gt;アクションがない」ため発生しています。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4.3. 投稿の作成&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;Unknown action&lt;/code&gt;エラーが発生したので、&lt;code&gt;app/controllers/posts_controller.rb&lt;/code&gt;の&lt;code&gt;PostsController&lt;/code&gt;に&lt;code&gt;create&lt;/code&gt;アクションを定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;PostsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# GET /posts/new&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# POST /posts&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;再び、画面を更新して、サブミットボタンを押すとテンプレートファイルがないというエラーが発生します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140812/20140812040412.png&quot; alt=&quot;f:id:nipe880324:20140812040412p:plain:w480&quot; title=&quot;f:id:nipe880324:20140812040412p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;しかし、心配しないで下さい。今のところこのエラーを無視しましょう。&lt;code&gt;create&lt;/code&gt;アクションに「新しい投稿をデータベースに登録する処理」を追加しましょう。&lt;/p&gt;&lt;p&gt;登録ボタンを押してフォームのフィールドデータを送信すると、そのデータはパラメーターとして&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;に送られます。このパラメーターはコントローラーのアクション内で参照可能です。では、これらのパラメーターに含まれる値を確認するために、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;を少し修正しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;# POST /posts&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    render &lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;: params[&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;].inspect
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;ここでは、&lt;code&gt;render&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の&lt;code&gt;text:&lt;/code&gt;キーに&lt;code&gt;params[:post].inspect&lt;/code&gt;を渡しています。&lt;br /&gt;
&lt;code&gt;params&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;はフォームから送られてきたパラメーター（もしくは、フィールド）の値を保持しているオブジェクトです。&lt;code&gt;params&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;は、文字列かシンボルをキーとしてハッシュのようにアクセスできる&lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt;オブジェクトを返します。今回は、フォームで入力されたパラメーターのみ保持しています。&lt;/p&gt;&lt;p&gt;再びフォームに値を入力し、登録ボタンを押すと、&lt;code&gt;Template is missing&lt;/code&gt;エラーが発生する代わりに、画面に次のような出力がされます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;最初の投稿&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;これは最初の投稿です。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}
&lt;/pre&gt;&lt;p&gt;今この&lt;code&gt;create&lt;/code&gt;アクションはフォームから送られてきたパラメータを表示しています。しかし、パラメーターを確認できますが、実際にどこかにこのデータを保存しているわけではありません。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4.4. Postモデルの作成&lt;/h4&gt;
    &lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のモデル名は「単数系」、テーブル名はその&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;形で定義する必要があります。今回の場合で言うと、モデル名は&lt;code&gt;Post&lt;/code&gt;、テーブル名は&lt;code&gt;posts&lt;/code&gt;になります。&lt;br /&gt;
多くの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;開発者がモデルを作成するときに必ずといっていいほど使うモデルを生成ジェネレーターがあります。次のコマンドを実行し、新しいモデルを作成しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails generate model &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt; title&lt;span class=&quot;synConstant&quot;&gt;:string&lt;/span&gt; text&lt;span class=&quot;synConstant&quot;&gt;:text&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;このコマンドは、String型の&lt;code&gt;title&lt;/code&gt;属性、Text型の&lt;code&gt;text&lt;/code&gt;属性を持った&lt;code&gt;Post&lt;/code&gt;モデルを作成しています。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※Active Recordは「テーブルの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%E9%A5%E0%CC%BE&quot;&gt;カラム名&lt;/a&gt;」から「モデルの属性」を自動的に作成してくれます。これは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のモデル内に属性を宣言する必要がなく、Active Recordが自動的にそれを行ってくれることを意味しています。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4.5. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;の実行&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;rails generate model&lt;/code&gt;コマンドにより&lt;code&gt;db/migrate&lt;/code&gt;ディレクトリ内にデータベースの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイルが作成されました。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;はテーブル作成やテーブル変更などのデータベース操作を行うための&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;のクラスです。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;開発者は&lt;code&gt;rake&lt;/code&gt;コマンドを使ってその&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイルを実施します。データベースに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;を適用した後にその変更を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%ED%A1%BC%A5%EB%A5%D0%A5%C3%A5%AF&quot;&gt;ロールバック&lt;/a&gt;をすることも可能です。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイルのファイル名は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイルが作成された順番で処理をさせるためにタイムスタンプを含んでいます。&lt;/p&gt;&lt;p&gt;作成された&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイルの&lt;code&gt;db/migrate/20140811045600_create_posts.rb&lt;/code&gt;を確認しましょう。（タイムスタンプが含まれているのでファイル名は少し違うことに注意して下さい）&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreatePosts&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:posts&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.string &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;
      t.text &lt;span class=&quot;synConstant&quot;&gt;:text&lt;/span&gt;

      t.timestamps
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;change&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;が実行されるときに呼ばれます。この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;内で定義されたコードは「逆実行が可能」です。つまり、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;による変更を逆実行（戻すこと）が可能ということです。&lt;br /&gt;
この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイルを実行すると、String型とText型のカラムをもった&lt;code&gt;posts&lt;/code&gt;テーブルが作成されます。また、postレコードの作成時間(&lt;code&gt;created_at&lt;/code&gt;)と更新時間(&lt;code&gt;updated_at&lt;/code&gt;)を保持する２つのタイムスタンプも作成されます。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;についてより詳細を知りたい場合は、&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140810/1407634200&quot; target=&quot;_blank&quot;&gt;マイグレーションファイルの作り方&lt;/a&gt;や&lt;a href=&quot;http://guides.rubyonrails.org/migrations.html&quot; target=&quot;_blank&quot;&gt;Rails Guides - Rails Database Migrations&lt;/a&gt;を参照して下さい。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;では、&lt;code&gt;rake&lt;/code&gt;コマンドで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;をしましょう。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;が成功した場合、次のように&lt;code&gt;posts&lt;/code&gt;テーブルが作成された旨の表示がされるでしょう。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;== 20140811045600 CreatePosts: migrating ======================================
-- create_table(:posts)
   -&amp;gt; 0.0013s
== 20140811045600 CreatePosts: migrated (0.0014s) =============================&lt;/pre&gt;&lt;p&gt;&lt;i&gt;基本的には&lt;code&gt;development&lt;/code&gt;環境で作業をしています。そのため、このコマンド結果は、&lt;code&gt;config/database.yml&lt;/code&gt;ファイルの&lt;code&gt;development&lt;/code&gt;セクションで定義されているデータベースに適用されます。他の環境に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;を適用させたいときは、コマンド実行時に環境名を指定して下さい。&lt;br /&gt;
例：&lt;code&gt;rake db:migrate RAILS_ENV=production&lt;/code&gt;&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4.6. コントローラー内でデータを保存する&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;PostsController&lt;/code&gt;に戻り、データベース内にデータを保存するために&lt;code&gt;create&lt;/code&gt;アクション内で&lt;code&gt;Post&lt;/code&gt;モデルを使うように変更しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;# POST /posts&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.new(params[&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;])
    &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;.save
    redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;全ての&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のモデルは属性で初期化することができます。&lt;br /&gt;
最初の行では、&lt;code&gt;params[:post]&lt;/code&gt;はフォームからの属性を保持しているので、モデルの&lt;code&gt;new&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;にそのまま渡して、モデルを作成しています。&lt;br /&gt;
それから、&lt;code&gt;@post.save&lt;/code&gt;は、データベースにモデルを保存しています。後から確認しますが、&lt;code&gt;@post.save&lt;/code&gt;はモデルが保存できたか、できなかったというboolean値を返します。&lt;br /&gt;
最後に、後ほど実装予定の&lt;code&gt;show&lt;/code&gt;アクションにリダイレクトするようにしています。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※&lt;code&gt;render、redirect_to&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;などでモデルクラスのオブジェクト(&lt;code&gt;@post&lt;/code&gt;など)を引数に渡すと、自動的に&lt;code&gt;/posts/1&lt;/code&gt;のようなURLに変換され、&lt;code&gt;show&lt;/code&gt;アクションが呼ばれます。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;さあ&lt;code&gt;http://localhost:3000/posts/new&lt;/code&gt;にアクセスし、新しい投稿をしてみてください。次のエラーが発生するでしょう。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140812/20140812042243.png&quot; alt=&quot;f:id:nipe880324:20140812042243p:plain:w480&quot; title=&quot;f:id:nipe880324:20140812042243p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;ではセキュアなアプリケーションの開発を促すためにいくつかのセキュリティ機構が存在します。そして、今そのセキュリティ機構によりエラーが発生しました。この機構は、&lt;code&gt;Strong Parameters&lt;/code&gt;と呼ばれ、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;は、私たちに「パラメーターのどの値を取得したいか」をコントローラー内に明示することを要求しています。今回の場合で言うと、パラメーター内の&lt;code&gt;title&lt;/code&gt;と&lt;code&gt;text&lt;/code&gt;の値を取得したいので、次のように変更して下さい。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;# POST /posts&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.new(post_params)
    &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;.save
    redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;post_params&lt;/span&gt;
      params.require(&lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:text&lt;/span&gt;)
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;permit&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;は、私たちがアクション内で&lt;code&gt;title&lt;/code&gt;と&lt;code&gt;text&lt;/code&gt;を取得できるように&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;に明示しています。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※&lt;code&gt;def post_params&lt;/code&gt;がプライベート&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;であることに注意して下さい。&lt;code&gt;Strong Parameters&lt;/code&gt;は、攻撃者がパラメーターの値を操作し、モデル内の属性を開発者側の意図しない値に設定することを防ぐRails4から導入されたセキュリティ機構です。より詳細については、&lt;a href=&quot;http://weblog.rubyonrails.org/2012/3/21/strong-parameters/&quot; target=&quot;_blank&quot;&gt;this blog post about Strong Parameters&lt;/a&gt;を参照ください。&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4.7. 投稿を確認する&lt;/h4&gt;
    &lt;p&gt;画面でフォームの登録ボタンを押すと、&lt;code&gt;show&lt;/code&gt;アクションが見つからないといったエラーが発生するでしょう。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140812/20140812042621.png&quot; alt=&quot;f:id:nipe880324:20140812042621p:plain:w480&quot; title=&quot;f:id:nipe880324:20140812042621p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;コントローラーに&lt;code&gt;show&lt;/code&gt;アクションを追加する前に、まずはルートを確認しましょう。&lt;br /&gt;
&lt;code&gt;rake routes&lt;/code&gt;コマンドの結果を見てみると、&lt;code&gt;show&lt;/code&gt;アクションのためのルートがあります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Prefix&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Verb&lt;/span&gt;   &lt;span class=&quot;synType&quot;&gt;URI&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Pattern&lt;/span&gt;               &lt;span class=&quot;synType&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#Action&lt;/span&gt;
  post &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      posts&lt;span class=&quot;synComment&quot;&gt;#show&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;この特殊な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9&quot;&gt;シンタックス&lt;/a&gt;の&lt;code&gt;:id&lt;/code&gt;は、このルートでは&lt;code&gt;id&lt;/code&gt;という名のパラメーターを使うことを意味しています。今回の場合は、&lt;code&gt;post&lt;/code&gt;クラスの&lt;code&gt;id&lt;/code&gt;を示しています。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※全てのActive Recordを継承したクラスには&lt;code&gt;id&lt;/code&gt;という名の属性があります。これは、主キーであり、一意にレコードを特定することができます。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;app/controllers/posts_controller.rb&lt;/code&gt;に&lt;code&gt;show&lt;/code&gt;アクションを追加しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;  &lt;span class=&quot;synComment&quot;&gt;# GET /posts/:id&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Post.find&lt;/code&gt;は、データベースから「指定した&lt;code&gt;id&lt;/code&gt;のpostレコード」を取得する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;です。そして、その値を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&quot;&gt;インスタンス&lt;/a&gt;変数（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&quot;&gt;インスタンス&lt;/a&gt;変数は&lt;code&gt;@&lt;/code&gt;で始まる）に設定しています。なぜなら、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&quot;&gt;インスタンス&lt;/a&gt;変数を使ってコントローラーからビューにデータを渡すからです。&lt;/p&gt;&lt;p&gt;さて、&lt;code&gt;app/views/posts/show.html.erb&lt;/code&gt;を新たに作成しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;タイトル：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @post.title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;内容：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @post.text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;変更を加えたら、&lt;code&gt;http://localhost:3000/posts/new&lt;/code&gt;にアクセスし、なにか新しく投稿してみましょう。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140812/20140812043231.png&quot; alt=&quot;f:id:nipe880324:20140812043231p:plain:w480&quot; title=&quot;f:id:nipe880324:20140812043231p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4.8. 投稿の一覧画面を表示する&lt;/h4&gt;
    &lt;p&gt;次は、全ての投稿を一覧表示するようにしてみましょう。&lt;code&gt;rake routes&lt;/code&gt;コマンドを実行し、一覧表示をするためのルートがあることを確認します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Prefix&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Verb&lt;/span&gt;   &lt;span class=&quot;synType&quot;&gt;URI&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Pattern&lt;/span&gt;               &lt;span class=&quot;synType&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#Action&lt;/span&gt;
 posts &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;          posts#index&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;このルートから、&lt;code&gt;PostsController&lt;/code&gt;の&lt;code&gt;index&lt;/code&gt;アクションが呼ばれるため、現在は作成されていないので追加しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# GET /posts&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@posts&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.all
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Post.all&lt;/code&gt;は、postsテーブル内の全てのpostレコードを取得する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;です。&lt;/p&gt;&lt;p&gt;そして、アクションの結果を表示する&lt;code&gt;app/views/posts/index.html.erb&lt;/code&gt;を新規で作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;全ての投稿一覧&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;タイトル&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;内容&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @posts.each do |post| %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; post.title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; post.text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;http://localhost:3000/posts&lt;/code&gt;にアクセスすれば、全ての投稿が一覧で表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140812/20140812043711.png&quot; alt=&quot;f:id:nipe880324:20140812043711p:plain:w480&quot; title=&quot;f:id:nipe880324:20140812043711p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4.9. リンクを追加する&lt;/h4&gt;
    &lt;p&gt;さて、投稿を作成(new, create)、確認(show)、一覧表示(index)ができるようになりました。それらの画面間を遷移できるようにするためにリンクを追加しましょう。&lt;/p&gt;&lt;p&gt;&lt;code&gt;app/views/welcome/index.html.erb&lt;/code&gt;を開き、リンクを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Hello, Rails!&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;私のブログ&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, controller: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;posts&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;link_to&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;に標準で使えるビューのヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;です。この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;は、引数で渡したテキストでHTMLの&lt;code&gt;a要素&lt;/code&gt;を作成します。&quot;私のブログ&quot;という文字列の「投稿の一覧画面へ遷移する」aタグリンクが画面に表示されます。&lt;/p&gt;&lt;p&gt;同様に他の画面にもリンクを追加しましょう。&lt;code&gt;app/views/posts/index.html.erb&lt;/code&gt;の&lt;code&gt;tableタグ&lt;/code&gt;の下にリンクを追加して下さい。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;...
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;新しい投稿&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, new_post_path %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;このリンクは、&quot;新しい投稿&quot;という文字列で表示され、新しい投稿を作成するフォーム画面（&lt;code&gt;new&lt;/code&gt;アクションを呼び出す）に遷移します。&lt;/p&gt;&lt;p&gt;次は、&lt;code&gt;app/views/posts/new.html.erb&lt;/code&gt;の一番したの行に&lt;code&gt;index&lt;/code&gt;アクションに戻るためのリンクを追加しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;新しい投稿&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :post, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: posts_path do |f| %&amp;gt;&lt;/span&gt;
  .....
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;戻る&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, posts_path %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;最後に、&lt;code&gt;app/views/posts/show.html.erb&lt;/code&gt;テンプレートの一番したの行に&lt;code&gt;index&lt;/code&gt;アクションに戻るリンクを追加しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;.....

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;内容：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @post.text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;戻る&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, posts_path %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;※同じコントローラー内のアクションにリンクを貼りたい場合は、&lt;code&gt;:controller&lt;/code&gt;オプションを指定する必要はありません。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のデフォルトでは現在のコントローラーに基づいて遷移を行うためです。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;※&lt;code&gt;development&lt;/code&gt;環境（デフォルトの作業環境）では、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;がブラウザのリクエスト毎に自動で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;をリロードするので、ソースを修正した後にサーバーの再起動は必要ありません。&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4.10. 少し休憩して、Postモデルの説明&lt;/h4&gt;
    &lt;p&gt;Postモデルの&lt;code&gt;app/models/post.rb&lt;/code&gt;は次のようになっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;このファイルには特にこれといったコードは記載されていません。しいて言えば、&lt;code&gt;Post&lt;/code&gt;クラスでは&lt;code&gt;ActiveRecord::Base&lt;/code&gt;クラスを継承しています。しかしこれは非常に重要であり、Active Recordは非常の多くの機能を自分で作成したモデルクラスで使えるようにしてくれます。例えば、基本的なデータベースの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRUD&quot;&gt;CRUD&lt;/a&gt;操作（作成 Create、検索 Read、更新 Update、削除 Destroy）、データのバリデーション（検証）、さらには、複雑な検索や他のモデルへのアソシエーション（リレーション）をサポートしています。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4.11. バリデーションを追加する&lt;/h4&gt;
    &lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;では、モデルを扱うときにデータのバリデーションを行うことができます。&lt;br /&gt;
&lt;code&gt;app/models/post.rb&lt;/code&gt;を開いて、バリデーションのための&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を追加してください。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;length&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;minimum&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt; }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これは、全ての投稿が「&lt;code&gt;title&lt;/code&gt;の値を持っており、それは、少なくとも5文字以上の長さが必要」と制限をつけています。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;ではモデルのカラムの値の存在有無、一意性、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%A9%A1%BC%A5%DE%A5%C3%A5%C8%A5%C1%A5%A7%A5%C3%A5%AF&quot;&gt;フォーマットチェック&lt;/a&gt;など様々な状況を検証することができます。&lt;/p&gt;&lt;p&gt;&lt;i&gt;バリデーションについてより詳しく知りたい場合は、「&lt;a href=&quot;/entry/20140724/1406145303&quot; target=&quot;_blank&quot;&gt;Railsのバリデーションと独自バリデート&lt;/a&gt;」や「&lt;a href=&quot;http://guides.rubyonrails.org/active_record_validations.html&quot; target=&quot;_blank&quot;&gt;Rails Guides - Active Record Validations&lt;/a&gt;」を参照して下さい。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;バリデーションを追加したので、無効なpostオブジェクトを&lt;code&gt;@post.save&lt;/code&gt;で保存したとき(今回の場合はタイトルが空か5文字以下の場合)に、バリデーションにより&lt;code&gt;false&lt;/code&gt;が返ってきます。&lt;br /&gt;
そのため、&lt;code&gt;app/controllers/posts_controller.rb&lt;/code&gt;を再び開き、&lt;code&gt;create&lt;/code&gt;アクションの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;を見て下さい。現在&lt;code&gt;@post.save&lt;/code&gt;の返り値を無視していますが、もし、返り値が&lt;code&gt;false&lt;/code&gt;（バリデーションが失敗する）場合は、ユーザーにフォームを再表示させるようにしましょう。&lt;br /&gt;
このためには、&lt;code&gt;new&lt;/code&gt;と&lt;code&gt;create&lt;/code&gt;アクション内を次のように修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# GET /posts/new&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.new
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# POST /posts&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.new(post_params)

  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;.save
    redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
    render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:unprocessable_entity&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;new&lt;/code&gt;アクションでは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&quot;&gt;インスタンス&lt;/a&gt;変数の&lt;code&gt;@post&lt;/code&gt;に空のPostオブジェクトを設定しています。なぜそのようにしているかはすぐに分かるのでこのまま読み進めて下さい。&lt;/p&gt;&lt;p&gt;&lt;code&gt;create&lt;/code&gt;アクションでは、&lt;code&gt;save&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;が&lt;code&gt;false&lt;/code&gt;を返すときに&lt;code&gt;redirect_to&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の代わりに&lt;code&gt;render&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使うように修正しました。&lt;code&gt;render&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の引数に&lt;code&gt;&#39;new&#39;&lt;/code&gt;を渡すことで、&lt;code&gt;new&lt;/code&gt;テンプレートを表示するように指定しています。&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://localhost:3000/posts/new&lt;/code&gt;をリロードし、タイトルを空のまま登録ボタンを押して下さい。すると、同じ画面（フォームが表示されている画面）が表示されます。&lt;br /&gt;
しかし、エラーメッセージなどが表示されないのでユーザーにはなぜ同じ画面が表示されたか分からりません。そのため、&lt;code&gt;app/views/posts/new.html.erb&lt;/code&gt;を修正し、エラーメッセージを表示するように修正しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;新しい投稿&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :post, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: posts_path do |f| %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% if @post.errors.any? %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;error_explanation&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @post.errors.count&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;件のエラーが発生したため保存ができませんでした。&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @post.errors.full_messages.each do |msg| %&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; msg&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  ...
  ...
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;@post.errors.any?&lt;/code&gt;で&lt;code&gt;@post&lt;/code＞にバリデーションエラーが発生しているかどうかを確認しています。
そして、エラーが発生している場合は、&lt;code&gt;@post.errors.full_messages&lt;/code&gt;で全てのエラーを表示しています。&lt;/p&gt;&lt;p&gt;さて、なぜコントローラーの&lt;code&gt;new&lt;/code&gt;アクションに&lt;code&gt;@post = Post.new&lt;/code&gt;を追加したか説明します。&lt;br /&gt;
もし、&lt;code&gt;@post = Post.new&lt;/code&gt;を追加しないと、&lt;code&gt;new.html.erb&lt;/code&gt;が表示されるときに、&lt;code&gt;@post&lt;/code&gt;は&lt;code&gt;nil&lt;/code&gt;なので、&lt;code&gt;@post.errors.any?&lt;/code&gt;を呼んだときに例外が発生してしまうからです。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;はバリデーションエラーが発生したフィールドを自動的に&lt;code&gt;&amp;lt;div class=&quot;field_with_errors&quot;&amp;gt;&lt;/code&gt;で囲みます。これを使い、エラーが発生したフィールドを目立たせるために&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/css&quot;&gt;css&lt;/a&gt;を定義することができます。是非バリデーションエラーが発生したHTMLソースを確認してみて下さい。&lt;/code&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;さて、再度&lt;code&gt;http://localhost:3000/posts/new&lt;/code&gt;で、タイトルを空のままサブミットしてください。素敵なエラーメッセージが表示されるでしょう。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140813/20140813135554.png&quot; alt=&quot;f:id:nipe880324:20140813135554p:plain:w480&quot; title=&quot;f:id:nipe880324:20140813135554p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;エラーメッセージの日本語化などより詳細に知りたい場合は「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140810/1407623400&quot; target=&quot;_blank&quot;&gt;モデルのバリデーションエラーメッセージ errors や エラーメッセージの日本語化&lt;/a&gt;」を確認して下さい。&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4.12. 投稿を更新する&lt;/h4&gt;
    &lt;p&gt;現在、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRUD&quot;&gt;CRUD&lt;/a&gt;の&quot;CR&quot;を実装しました。次は、&quot;U&quot;の部分である「投稿を更新」できるように実装していきましょう。&lt;/p&gt;&lt;p&gt;最初のステップは、&lt;code&gt;PostsController&lt;/code&gt;クラスに&lt;code&gt;edit&lt;/code&gt;アクションを追加することです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# GET /posts/:id/edit&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;edit&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;次のステップは、編集用の画面を作ります。内容は新しい投稿を作成する画面とほとんど同じです。&lt;br /&gt;
&lt;code&gt;app/views/posts/edit.html.erb&lt;/code&gt;テンプレートを作成し、次の内容を記載して下さい。&lt;br /&gt;
（&lt;code&gt;new.html.erb&lt;/code&gt;の内容をコピーし、違いを比較しながら編集するとそれぞれの差分がよく分かるのでお勧めです）&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;投稿を更新&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :post, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: posts_path, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :patch do |f| %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% if @post.errors.any? %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;error_explanation&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @post.errors.count&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;件のエラーが発生したため保存ができませんでした。&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @post.errors.full_messages.each do |msg| %&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; msg&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :title, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;タイトル&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :title %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
 
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;内容&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_area&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 60, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 8 %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
 
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.submit&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;戻る&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, posts_path %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;form_for&lt;/code&gt;内の&lt;code&gt;method: :patch&lt;/code&gt;は、HTTPの&lt;code&gt;PATCH&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;でフォームの内容をアプリケーションに送信するように指定しています。RESTでは、リソースを更新するために&lt;code&gt;PATCH&lt;/code&gt;と&lt;code&gt;PUT&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使います。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;はどちらも同じように処理できますが、全体として&lt;code&gt;PATCH&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使おうという流れがあるので、ここではオプションに&lt;code&gt;:patch&lt;/code&gt;を指定しています。&lt;br /&gt;
&lt;code&gt;form_for&lt;/code&gt;ヘルパーで作成されるフォームのデフォルトの&lt;code&gt;method&lt;/code&gt;属性は&lt;code&gt;POST&lt;/code&gt;&lt;br /&gt;
のため、ここでは明示的にオプションで指定する必要があったわけです。&lt;/p&gt;&lt;p&gt;さて、&lt;code&gt;app/controllers/posts_controller.rb&lt;/code&gt;に&lt;code&gt;update&lt;/code&gt;アクションを作成しましょう。&lt;br /&gt;
こちらもほとんど、&lt;code&gt;create&lt;/code&gt;アクションと同じになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# PATCH /posts/:id&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# PUT   /posts/:id&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;update&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;.update(post_params)
    redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
    render &lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: : unprocessable_entity
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;既に存在しているレコードを更新するときに、コントローラー内の&lt;code&gt;edit&lt;/code&gt;と&lt;code&gt;update&lt;/code&gt;アクションが使われます。&lt;br /&gt;
&lt;code&gt;update&lt;/code&gt;アクションでは、&lt;code&gt;create&lt;/code&gt;アクションと同様に、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;バリデーションエラーが発生した場合、ユーザーにエラーメッセージと共に編集画面(edit.html.erb)が表示されます。&lt;/li&gt;
&lt;li&gt;更新に成功した場合は、詳細画面(show.html.erb)が表示されます。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最後に、投稿の一覧画面(index.html.erb)に&lt;code&gt;edit&lt;/code&gt;アクションへのリンクを追加しましょう。&lt;br /&gt;
&lt;code&gt;app/views/posts/index.html.erb&lt;/code&gt;を開き&lt;code&gt;link_to&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を追加します(&lt;code&gt;link_to &quot;編集&quot; ...&lt;/code&gt;)。ついでに、詳細画面(show.html.erb)へのリンク(&lt;code&gt;link_to &quot;詳細&quot; ...&lt;/code&gt;)も追加しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;全ての投稿一覧&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;タイトル&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;内容&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @posts.each do |post| %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; post.title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; post.text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;詳細&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, post %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;編集&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_post_path(post) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;新しい投稿&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, new_post_path %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、&lt;code&gt;app/views/posts/show.html.erb&lt;/code&gt;テンプレートにも同様に、編集画面へのリンクを追加しておきましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;戻る&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, posts_path %&amp;gt;&lt;/span&gt;
| &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;編集&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_post_path(@post) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;現在の投稿一覧画面を確認しましょう。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140813/20140813140345.png&quot; alt=&quot;f:id:nipe880324:20140813140345p:plain:w480&quot; title=&quot;f:id:nipe880324:20140813140345p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4.13. 部分テンプレート（パーシャル）を使ってビューの重複箇所を削除する&lt;/h4&gt;
    &lt;p&gt;前にも触れたましたが、作成画面(&lt;code&gt;new.html.erb&lt;/code&gt;)と編集画面(&lt;code&gt;edit.html.erb&lt;/code&gt;)はとても似ています。部分テンプレートを使うことで重複部分を削除しましょう。&lt;br /&gt;
部分テンプレートの規約として、「ファイル名はアンダースコア(_)で始める必要」があります。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※部分テンプレートについてより詳しく知りたい場合は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140807/1407419013&quot; target=&quot;_blank&quot;&gt;Railsのrenderメソッドと部分テンプレート&lt;/a&gt;」や「&lt;a href=&quot;http://guides.rubyonrails.org/layouts_and_rendering.html&quot; target=&quot;_blank&quot;&gt;Rails Guides - Layouts and Rendering in Rails&lt;/a&gt;」を参照して下さい&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;app/views/posts/_form.html.erb&lt;/code&gt;という部分テンプレートを新しく作成して、次の内容を記載して下さい。&lt;br /&gt;
（&lt;code&gt;new.html.erb&lt;/code&gt; か &lt;code&gt;edit.html.erb&lt;/code&gt; のどちらからか&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;をコピーして、それを修正する形で&lt;code&gt;_form.html.erb&lt;/code&gt;を作ると理解が深まるのでお勧めです。&lt;br /&gt;
ちなみに、コピーした後の修正内容は、フォーム内は&lt;code&gt;form_for&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の行以外はそのままです。あとは、最上部の&lt;code&gt;h1&lt;/code&gt;タグと最下部の&lt;code&gt;link_to&lt;/code&gt;を削除するだけです。）&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @post do |f| %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% if @post.errors.any? %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;error_explanation&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @post.errors.count&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;件のエラーが発生したため保存ができませんでした。&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @post.errors.full_messages.each do |msg| %&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; msg&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :title, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;タイトル&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :title %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
 
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;内容&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_area&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 60, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 8 %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
 
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.submit&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;form_for&lt;/code&gt;はどのようにして正しいHTTP&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;とアクションを作成しているのでしょうか。&lt;br /&gt;
ということは後に回し、先に作成した部分テンプレートを使うために&lt;code&gt;app/views/posts/new.html.erb&lt;/code&gt;ビューを更新しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;新しい投稿&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;form&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;戻る&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, posts_path %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;では同じく、&lt;code&gt;app/views/posts/edit.html.erb&lt;/code&gt;ビューも更新しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;投稿を更新&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;form&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;戻る&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, posts_path %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;画面を確認すると前と同じように動くでしょう。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;4.14. 投稿を削除する&lt;/h4&gt;
    &lt;p&gt;次は、&quot;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRUD&quot;&gt;CRUD&lt;/a&gt;&quot;の&quot;D&quot;の部分である「投稿を削除する機能」を実装しましょう。&lt;br /&gt;
RESTの規約に従うと、リソースを削除するルートは次のようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Verb&lt;/span&gt;   &lt;span class=&quot;synType&quot;&gt;URI&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Pattern&lt;/span&gt;               &lt;span class=&quot;synType&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#Action&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      posts&lt;span class=&quot;synComment&quot;&gt;#destroy&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;リソースを削除するために&lt;code&gt;destroy&lt;/code&gt;アクションを定義します。&lt;br /&gt;
&lt;code&gt;app/controllers/posts_controller.rb&lt;/code&gt;に&lt;code&gt;destroy&lt;/code&gt;アクションを追加しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# DELETE /posts/:id&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;destroy&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
  &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;.destroy

  redirect_to posts_path
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;データベースからレコードを削除したいときには、Active Recordの&lt;code&gt;destroy&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使います。&lt;br /&gt;
&lt;code&gt;destory&lt;/code&gt;アクションの後に、&lt;code&gt;posts_path&lt;/code&gt;にリダイレクトする（&lt;code&gt;index&lt;/code&gt;アクションが呼ばれる）のでビューを新たに作る必要はありません。&lt;/p&gt;&lt;p&gt;最後に、&lt;code&gt;destory&lt;/code&gt;アクションを呼び出すリンクを一覧画面に追加します。&lt;code&gt;app/views/posts/index.html.erb&lt;/code&gt;を開き、&lt;code&gt;link_to&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を追加してください。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;全ての投稿一覧&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;タイトル&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;内容&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @posts.each do |post| %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; post.title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; post.text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;詳細&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, post %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;編集&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_post_path(post) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;削除&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, post_path(post),&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :delete, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: { confirm: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;削除しますか？&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; } %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;新しい投稿&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, new_post_path %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;削除するために&lt;code&gt;link_to&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を新しい使い方で使っています。&lt;code&gt;method&lt;/code&gt;オプションでHTTP&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を指定し、&lt;code&gt;data&lt;/code&gt;オプションで確認ダイアログを表示するように指定しています。&lt;br /&gt;
ユーザーが「削除」リンクを押すと、確認ダイアログが表示され、そこで「OK」ボタンを押すと、&lt;code&gt;DELTE /posts/:id&lt;/code&gt;がサーバー上に送信され、&lt;code&gt;destroy&lt;/code&gt;アクションが実行されることによりデータが削除されます。&lt;/p&gt;&lt;p&gt;&lt;i&gt;この削除処理の多くは &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt; で実現されています。&lt;br /&gt;
アプリケーションのレイアウトファイル(&lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt;)の&lt;code&gt;head&lt;/code&gt;タグ内で自動的にインクルードされる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;ファイル(&lt;code&gt;jquery_ujs&lt;/code&gt;)によって実現されています。この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;のファイルがない場合、確認ダイアログは表示されず、&lt;code&gt;DELETE&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;もサーバーに送信されないため、リソースを削除することができません。&lt;/i&gt;&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140813/20140813141050.png&quot; alt=&quot;f:id:nipe880324:20140813141050p:plain:w480&quot; title=&quot;f:id:nipe880324:20140813141050p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;おめでとうございます！&lt;br /&gt;
あなたは、投稿を作成、詳細確認、一覧表示、更新、削除ができるようになりました。 :)&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 href=&quot;#adding-a-second-model&quot;&gt;5. コメントを追加する&lt;/h3&gt;では、アプリケーションに２つ目のモデルを追加するときが来ました。&lt;br /&gt;
２つ目のモデルは投稿の「コメント」です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;5.1. モデルを生成する&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;Post&lt;/code&gt;モデルを生成するときに使ったときと同じジェネレーターを使い、&lt;code&gt;Comment&lt;/code&gt;モデルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails generate model &lt;span class=&quot;synType&quot;&gt;Comment&lt;/span&gt; commenter&lt;span class=&quot;synConstant&quot;&gt;:string&lt;/span&gt; body&lt;span class=&quot;synConstant&quot;&gt;:text&lt;/span&gt; post&lt;span class=&quot;synConstant&quot;&gt;:references&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;このコマンドで以下の４つのファイルが作成されます。&lt;table class=&quot;table striped&quot;&gt;
  &lt;tr&gt;&lt;th&gt;ファイル&lt;/th&gt;&lt;th&gt;目的&lt;/th&gt;&lt;/tr&gt;

  &lt;tr&gt;&lt;td&gt;db/migrate/20140811090504_create_comments.rb&lt;/td&gt;&lt;td&gt;&lt;code&gt;comments&lt;/code&gt;データベースにテーブルを作成する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイル&lt;br /&gt;（ファイル名のタイムスタンプは異なります）&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;app/models/comment.rb&lt;/td&gt;&lt;td&gt;&lt;code&gt;Comment&lt;/code&gt;モデルを記述するファイル&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;test/models/comment_test.rb&lt;/td&gt;&lt;td&gt;&lt;code&gt;Comment&lt;/code&gt;モデルのテストを記述するファイル&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;test/fixtures/comments.yml&lt;/td&gt;&lt;td&gt;テストで使用するサンプルの&lt;code&gt;Comment&lt;/code&gt;オブジェクトを定義するファイル&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;&lt;p&gt;最初に、&lt;code&gt;app/models/comment.rb&lt;/code&gt;のファイルの中身を確認しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Comment&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;このファイルは、&lt;code&gt;post.rb&lt;/code&gt;ととてもよく似ています。主に違う点は、&lt;code&gt;belongs_to :post&lt;/code&gt;列です。これは、Active Recordのアソシエーション（関連 or リレーション）を設定するためのものです。&lt;/p&gt;&lt;p&gt;ジェネレーターにより、モデルに加え、データベースのテーブルを作成する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイルも作成されます。&lt;code&gt;db/migrate/20140811090504_create_comments.rb&lt;/code&gt;の中身を確認しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateComments&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:comments&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.string &lt;span class=&quot;synConstant&quot;&gt;:commenter&lt;/span&gt;
      t.text &lt;span class=&quot;synConstant&quot;&gt;:body&lt;/span&gt;
      t.references &lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

      t.timestamps
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;create_table :comments&lt;/code&gt;が&lt;code&gt;comments&lt;/code&gt;テーブルを作成ことを意味しており、その内部のブロックで&lt;code&gt;comments&lt;/code&gt;テーブルのカラムを作成しています。&lt;br /&gt;
&lt;code&gt;t.string :commenter&lt;/code&gt;はString型の&lt;code&gt;commenter&lt;/code&gt;というカラムを作成するという意味です。&lt;br /&gt;
次の行も同じです。&lt;br /&gt;
&lt;code&gt;t.references&lt;/code&gt;行は「外部キー」定義しています。加えて、&lt;code&gt;index: true&lt;/code&gt;オプションによりその外部キーをインデックスにしています。&lt;br /&gt;
&lt;code&gt;t.timestamps&lt;/code&gt;は、レコードの作成日付(created_at)と更新日付(updated_at)を保持するカラムを作成します（Active Recordにより自動的に値が更新されるので、私たちが直接値を操作する必要はありません。作成順や更新順などにデータを表示したい場合などにソートで使ったりします。）&lt;/p&gt;&lt;p&gt;では、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;を実施しましょう。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;は既にデータベースに適用済みの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイルは実行しません。（&lt;code&gt;posts&lt;/code&gt;テーブルを作成する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;は実行されない）&lt;br /&gt;
そのため、次のように&lt;code&gt;comments&lt;/code&gt;テーブルを作成する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;ファイルのみ実行されたます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;== 20140811090504 CreateComments: migrating ===================================
-- create_table(:comments)
   -&amp;gt; 0.0054s
== 20140811090504 CreateComments: migrated (0.0055s) ==========================&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;5.2. モデル間に関連づける&lt;/h4&gt;
    &lt;p&gt;Active Recordアソシエーションはモデル間の関連を簡単に定義することができます。&lt;br /&gt;
今回の&lt;code&gt;Comment&lt;/code&gt;モデルと&lt;code&gt;Post&lt;/code&gt;モデルの場合、次のようにモデル間の関係を考えることができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each comment &lt;b&gt;belongs to&lt;/b&gt; one post.（各々の&lt;code&gt;comment&lt;/code&gt;は、１つの&lt;code&gt;post&lt;/code&gt;に属する）&lt;/li&gt;
&lt;li&gt;One post can &lt;b&gt;have many&lt;/b&gt; comments.（１つの&lt;code&gt;post&lt;/code&gt;は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;の&lt;code&gt;comments&lt;/code&gt;を持てる）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;つまり、PostとCommentは「1対多関係」になっています。&lt;/p&gt;&lt;p&gt;この英語の書き方は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でのアソシエーションの定義の仕方にとても似ています。&lt;br /&gt;
&lt;code&gt;Comment&lt;/code&gt;モデル(&lt;code&gt;app/models/comment.rb&lt;/code&gt;)で先ほど確認したアソシエーションの定義は、「comment belongs to a post」と読めます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Comment&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Post&lt;/code&gt;モデル(&lt;code&gt;app/models/post.rb&lt;/code&gt;)側にアソシエーションを定義しましょう。&lt;br /&gt;
こちらは、「post has many comments」と読めます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:comments&lt;/span&gt;

  validates &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;length&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;minimum&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt; }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;この２つの宣言を追加することで、それぞれのモデルクラスは自動的にモデル間のアソシエーションを認識します。&lt;br /&gt;
例えば、&lt;code&gt;@post&lt;/code&gt;という&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&quot;&gt;インスタンス&lt;/a&gt;変数に&lt;code&gt;Post&lt;/code&gt;オブジェクトが設定されているとします。そのときに、&lt;code&gt;@post.comments&lt;/code&gt;にアクセスすることにより、その&lt;code&gt;Post&lt;/code&gt;オブジェクトに関連づく全ての&lt;code&gt;Comment&lt;/code&gt;オブジェクトにアクセスできます。&lt;/p&gt;&lt;p&gt;&lt;i&gt;Active Recordのアソシエーションについてより詳しく知りたい場合は、「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140810/1407617435&quot; target=&quot;_blank&quot;&gt;Railsのアソシエーションの作成方法&lt;/a&gt;」や「&lt;a href=&quot;http://guides.rubyonrails.org/association_basics.html&quot; target=&quot;_blank&quot;&gt;Rails Guides- Active Record Association&lt;/a&gt;」を参照して下さい。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;5.3. Commentモデルにルートを追加する&lt;/h4&gt;
    &lt;p&gt;他のコントローラーと同じように、&lt;code&gt;Comment&lt;/code&gt;用にもルートを追加する必要があります。&lt;br /&gt;
&lt;code&gt;config/routes.rb&lt;/code&gt;ファイルを開き、次のように修正して下さい。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;resources &lt;span class=&quot;synConstant&quot;&gt;:posts&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  resources &lt;span class=&quot;synConstant&quot;&gt;:comments&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;今回追加した&lt;code&gt;comments&lt;/code&gt;は&lt;code&gt;posts&lt;/code&gt;にネストされています。これは、「投稿」と「コメント」の間に意味的に存在する階層構造を表しています。「コメント」はコメント単体では存在せず、「投稿」に紐づいて「コメント」が存在するためです。&lt;/p&gt;&lt;p&gt;これを説明するために、現在のルートを表示してみましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rake routes
           &lt;span class=&quot;synType&quot;&gt;Prefix&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Verb&lt;/span&gt;   &lt;span class=&quot;synType&quot;&gt;URI&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Pattern&lt;/span&gt;                                 &lt;span class=&quot;synType&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;#Action&lt;/span&gt;
    post_comments &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:post_id&lt;/span&gt;/comments(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)          comments&lt;span class=&quot;synComment&quot;&gt;#index&lt;/span&gt;
                  &lt;span class=&quot;synType&quot;&gt;POST&lt;/span&gt;   &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:post_id&lt;/span&gt;/comments(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)          comments&lt;span class=&quot;synComment&quot;&gt;#create&lt;/span&gt;
 new_post_comment &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:post_id&lt;/span&gt;/comments/new(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      comments&lt;span class=&quot;synComment&quot;&gt;#new&lt;/span&gt;
edit_post_comment &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:post_id&lt;/span&gt;/comments/&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;/edit(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;) comments&lt;span class=&quot;synComment&quot;&gt;#edit&lt;/span&gt;
     post_comment &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:post_id&lt;/span&gt;/comments/&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      comments&lt;span class=&quot;synComment&quot;&gt;#show&lt;/span&gt;
                  &lt;span class=&quot;synType&quot;&gt;PATCH&lt;/span&gt;  &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:post_id&lt;/span&gt;/comments/&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      comments&lt;span class=&quot;synComment&quot;&gt;#update&lt;/span&gt;
                  &lt;span class=&quot;synType&quot;&gt;PUT&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:post_id&lt;/span&gt;/comments/&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      comments&lt;span class=&quot;synComment&quot;&gt;#update&lt;/span&gt;
                  &lt;span class=&quot;synType&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:post_id&lt;/span&gt;/comments/&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)      comments&lt;span class=&quot;synComment&quot;&gt;#destroy&lt;/span&gt;
            posts &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;                            posts#index&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;                  POST   &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;posts(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)                            posts&lt;span class=&quot;synComment&quot;&gt;#create&lt;/span&gt;
         new_post &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/ne&lt;/span&gt;w(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)                        posts&lt;span class=&quot;synComment&quot;&gt;#new&lt;/span&gt;
        edit_post &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;/edit(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)                   posts&lt;span class=&quot;synComment&quot;&gt;#edit&lt;/span&gt;
             post &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)                        posts&lt;span class=&quot;synComment&quot;&gt;#show&lt;/span&gt;
                  &lt;span class=&quot;synType&quot;&gt;PATCH&lt;/span&gt;  &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)                        posts&lt;span class=&quot;synComment&quot;&gt;#update&lt;/span&gt;
                  &lt;span class=&quot;synType&quot;&gt;PUT&lt;/span&gt;    &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)                        posts&lt;span class=&quot;synComment&quot;&gt;#update&lt;/span&gt;
                  &lt;span class=&quot;synType&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;(.&lt;span class=&quot;synConstant&quot;&gt;:format&lt;/span&gt;)                        posts&lt;span class=&quot;synComment&quot;&gt;#destroy&lt;/span&gt;
             root &lt;span class=&quot;synType&quot;&gt;GET&lt;/span&gt;    /                                           welcome&lt;span class=&quot;synComment&quot;&gt;#index&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;上の方のルートは&lt;code&gt;comments&lt;/code&gt;と入っているURLがあります。&lt;br /&gt;
しかし、&lt;code&gt;posts/:post_id/comments ...&lt;/code&gt;となっています。&lt;br /&gt;
これは今まさに説明した通り、「コメント」にアクセスするためには「投稿」がないと作成や更新、表示などができないことを表しています。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のルーティング」についてより詳細に知りたい場合は、&lt;br /&gt;
「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140716/1405451238&quot; target=&quot;_blank&quot;&gt;Railsのルーティングメモ&lt;/a&gt;」や「&lt;a href=&quot;http://guides.rubyonrails.org/routing.html&quot; target=&quot;_blank&quot;&gt;Rails Guides - Rails Routing&lt;/a&gt;」を参照して下さい。&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;5.4. コントローラーを生成する&lt;/h4&gt;
    &lt;p&gt;モデルを作成したので、次はコントローラーを作成していきましょう。毎度のことですが、コントローラーを生成するときも「ジェネレーター」を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails generate controller &lt;span class=&quot;synType&quot;&gt;Comments&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;このコマンドで、以下の6つのファイルと１つの空ディレクトリが作成されます。&lt;table class=&quot;table striped&quot;&gt;
  &lt;tr&gt;&lt;th&gt;ファイル&lt;/th&gt;&lt;th&gt;目的&lt;/th&gt;&lt;/tr&gt;

  &lt;tr&gt;&lt;td&gt;app/controllers/comments_controller.rb&lt;/td&gt;&lt;td&gt;CommentsControllerを実装するファイル&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;app/views/comments/&lt;/td&gt;&lt;td&gt;このディレクトリ内にCommentsのビューファイルを配置する&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;test/controllers/comments_controller_test.rb&lt;/td&gt;&lt;td&gt;CommentsConntrolerのテストを記述するファイル&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;app/helpers/comments_helper.rb&lt;/td&gt;&lt;td&gt;Commentsビューのヘルパーファイル&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;test/helpers/comments_helper_test.rb&lt;/td&gt;&lt;td&gt;Commentsビューのヘルパーのテスト用ファイル&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;app/assets/javascripts/comments.js.coffee&lt;/td&gt;&lt;td&gt;Commentsの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CoffeeScript&quot;&gt;CoffeeScript&lt;/a&gt;を記述する&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;app/assets/stylesheets/comments.&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/css&quot;&gt;css&lt;/a&gt;.scss&lt;/td&gt;&lt;td&gt;CommentsのScss(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%BF%A5%A4%A5%EB%A5%B7%A1%BC%A5%C8&quot;&gt;スタイルシート&lt;/a&gt;)を記述する&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;&lt;p&gt;一般的なブログでは、「投稿記事」を読んだ最後に「コメント」を記載します。そして、一度「コメント」が記載されると、「投稿記事」の詳細画面(&lt;code&gt;show.html.erb&lt;/code&gt;)でその「コメント」が一覧表示されます。&lt;/p&gt;&lt;p&gt;この挙動を実現するために、&lt;code&gt;CommentsController&lt;/code&gt;では、コメントを作成する&lt;code&gt;create&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;とスパムコメントを削除する&lt;code&gt;destroy&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を定義します。&lt;/p&gt;&lt;p&gt;最初に、投稿の詳細画面(&lt;code&gt;app/views/posts/show.html.erb&lt;/code&gt;)にコメントを表示するように修正しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;タイトル：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @post.title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;内容：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @post.text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所 開始 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;コメントを追加&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for(&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; [@post, @post.comments.build] ) do |f| %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :commenter, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;コメンター&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :commenter %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :body, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;コメント&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_area&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :body, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 60, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 8 %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.submit,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;コメント投稿&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所 終了 --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;戻る&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, posts_path %&amp;gt;&lt;/span&gt;
| &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;編集&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_post_path(@post) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;ここでは、コメントを記載できるフォームを追加しました。&lt;br /&gt;
ここでの&lt;code&gt;form_for&lt;/code&gt;では配列を使っています。これは、ネストされたルートを作成します。例えば、&lt;code&gt;/posts/1/comments&lt;/code&gt;のようなルートを作成します。&lt;code&gt;config/routes.rb&lt;/code&gt;でURLをネストしたため、&lt;code&gt;form_for&lt;/code&gt;でもルートをネストさせる必要があったのです。&lt;/p&gt;&lt;p&gt;&lt;code&gt;app/controllers/comments_controller.rb&lt;/code&gt;に&lt;code&gt;create&lt;/code&gt;アクションを追加しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CommentsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# POST /posts/:post_id/comments&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:post_id&lt;/span&gt;])
    &lt;span class=&quot;synIdentifier&quot;&gt;@comment&lt;/span&gt; = &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;.comments.create(comment_params)

    redirect_to post_path(&lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;comment_params&lt;/span&gt;
      params.require(&lt;span class=&quot;synConstant&quot;&gt;:comment&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:commenter&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:body&lt;/span&gt;)
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;今までのコントローラーより少しだけ複雑に見えるかもしれません。私たちが設定したネストの影響です。&lt;br /&gt;
「コメント」へのリクエストには、その「コメント」に関連している「投稿」の情報が必要になります。そのため、最初の行で&lt;code&gt;Post.find&lt;/code&gt;で「コメント」に関連する「投稿」を取得しています。&lt;/p&gt;&lt;p&gt;さらに、このコードではアソシエーションを定義したことによって利用可能になった&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使っています。&lt;br /&gt;
&lt;code&gt;@post.comments.create&lt;/code&gt;は「コメント」を作成し、データベースに保存しています。これは、自動的に「コメント」と「投稿」の間でアソシエーションを追加（外部キーの設定）してくれます。&lt;/p&gt;&lt;p&gt;新しい「コメント」を作成すると、ユーザーは&lt;code&gt;post_path(@post)&lt;/code&gt;ヘルパーによって投稿の詳細画面にリダイレクトされます。リダイレクトされたパスにより、&lt;code&gt;PostsController&lt;/code&gt;の&lt;code&gt;show&lt;/code&gt;アクションが呼び出されます。&lt;code&gt;show&lt;/code&gt;アクション内では、&lt;code&gt;show.html.erb&lt;/code&gt;テンプレートを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;します。&lt;/p&gt;&lt;p&gt;では、「コメント」の表示を「投稿」の詳細画面(&lt;code&gt;app/views/posts/show.html.erb&lt;/code&gt;)に追加しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;タイトル：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @post.title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;内容：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; simple_format&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @post.&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所 開始 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;コメント&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @post.comments.each do |comment| %&amp;gt;&lt;/span&gt;
  
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;コメンター：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; comment.commenter&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
   
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;コメント：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; simple_format&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; comment.body %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所 終了 --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;コメントを追加&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for(&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; [@post, @post.comments.build] ) do |f| %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :commenter, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;コメンター&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :commenter %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :body, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;コメント&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_area&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :body, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 60, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 8 %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.submit,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;コメント投稿&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;戻る&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, posts_path %&amp;gt;&lt;/span&gt;
| &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;編集&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_post_path(@post) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;simple_format&lt;/code&gt;ヘルパー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使っています。これは、改行などを認識して表示する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;です。&lt;/p&gt;&lt;p&gt;さて、ブラウザを開いて、投稿にコメントを追加しましょう。次のように表示されるでしょう。&lt;br /&gt;
 &lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140813/20140813144316.png&quot; alt=&quot;f:id:nipe880324:20140813144316p:plain:w480&quot; title=&quot;f:id:nipe880324:20140813144316p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;refactoring&quot;&gt;6. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0&quot;&gt;リファクタリング&lt;/a&gt;&lt;/h3&gt;さてさて、今のところ私たちは投稿とコメント機能が実装できました。しかし、ちらっと &lt;code&gt;app/views/posts/show.html.erb&lt;/code&gt;を見てください。&lt;br /&gt;
少し&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;が長く、汚くないでしょうか。綺麗にするために部分テンプレート（パーシャル）を使って&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0&quot;&gt;リファクタリング&lt;/a&gt;しましょう。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;6.1. 部分テンプレートでコレクションを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;する&lt;/h4&gt;
    &lt;p&gt;最初に、投稿の全てのコメントを表示するために部分テンプレートを作成します。&lt;code&gt;app/views/comments/_comment.html.erb&lt;/code&gt;を新規に作成して、次の記述を追記して下さい。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;コメンター：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; comment.commenter&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;コメント：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; simple_format&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; comment.body %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;次は、&lt;code&gt;app/views/posts/show.html.erb &lt;/code&gt;を修正して下さい。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;タイトル：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @post.title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;内容：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @post.text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;コメント&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 開始 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @post.comments %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 終了 --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;コメントを追加&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for(&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; [@post, @post.comments.build] ) do |f| %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :commenter, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;コメンター&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :commenter %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :body, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;コメント&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_area&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :body, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 60, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 8 %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.submit&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;コメント投稿&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;戻る&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, posts_path %&amp;gt;&lt;/span&gt;
| &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;編集&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_post_path(@post) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;render @post.comments&lt;/code&gt;により、&lt;code&gt;@post.comments&lt;/code&gt;コレクションのそれぞれのコメントで部分テンプレートの&lt;code&gt;app/views/comments/_comment.html.erb&lt;/code&gt;を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;します。&lt;br /&gt;
&lt;code&gt;render&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;はコレクションを１つ１つ処理し、そして、それぞれのコメントを「部分テンプレートと同じ名前のローカル変数」に割り当てます。&lt;br /&gt;
今回の場合で言うと、部分テンプレート内では、&lt;code&gt;comment&lt;/code&gt;という名のローカル変数が使えます。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;7.2. 部分テンプレートでフォームを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;する&lt;/h4&gt;
    &lt;p&gt;コメントを追加する箇所の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;を部分テンプレートにしていきましょう。&lt;br /&gt;
&lt;code&gt;app/views/comments/_form.html.erb&lt;/code&gt;を新規作成します。&lt;br /&gt;
（&lt;code&gt;app/views/comments/_comment.html.erb&lt;/code&gt;から&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;から部分テンプレートに置き換える箇所をコピーすると簡単です。）&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for(&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; [@post, @post.comments.build] ) do |f| %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :commenter, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;コメンター&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :commenter %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :body, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;コメント&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_area&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :body, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 60, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 8 %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.submit&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;コメント投稿&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、&lt;code&gt;app/views/posts/show.html.erb&lt;/code&gt;を次のように修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;タイトル：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @post.title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;内容：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @post.text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;コメント&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @post.comments %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;コメントを追加&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 開始 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;comments/form&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 終了 --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;戻る&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, posts_path %&amp;gt;&lt;/span&gt;
| &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;編集&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_post_path(@post) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;二つ目の&lt;code&gt;render&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;では、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;したい部分テンプレート&lt;code&gt;comments/form&lt;/code&gt;として指定しました。&lt;code&gt;render&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;の引数が文字列で、その中にスラッシュ(/)が存在する場合、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;は&lt;code&gt;app/views/&lt;/code&gt;配下からのパスとして部分テンプレートを探します。&lt;br /&gt;
そのため、今回の場合は、&lt;code&gt;comments/form&lt;/code&gt;を指定することで、&lt;code&gt;app/views/comments/_form.html.erb&lt;/code&gt;が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;されました。&lt;/p&gt;&lt;p&gt;&lt;code&gt;@post&lt;/code&gt;という&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&quot;&gt;インスタンス&lt;/a&gt;変数はどの部分テンプレートでも使うことが可能です。なぜならば、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&quot;&gt;インスタンス&lt;/a&gt;変数として定義されているからです。&lt;/p&gt;&lt;p&gt;では、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0&quot;&gt;リファクタリング&lt;/a&gt;後の投稿の詳細画面を表示してみましょう。表示は変わってないですね。&lt;br /&gt;
（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0&quot;&gt;リファクタリング&lt;/a&gt;をしただけなので、いいことです :D）&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140813/20140813144316.png&quot; alt=&quot;f:id:nipe880324:20140813144316p:plain:w480&quot; title=&quot;f:id:nipe880324:20140813144316p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;deleting-comments&quot;&gt;7. コメントを削除する&lt;/h3&gt;ブログアプリケーションにおいて、スパムコメントを消せることは重要な機能でしょう。&lt;br /&gt;
それを実現するために、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;スパムコメントを削除する&lt;code&gt;CommentsController&lt;/code&gt;の&lt;code&gt;destroy&lt;/code&gt;アクション&lt;/li&gt;
&lt;li&gt;ビュー内にその&lt;code&gt;destroy&lt;/code&gt;アクションを呼び出すリンク&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;を追加していきます。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;7.1. コメント削除リンクとdestroyアクションを追加する&lt;/h4&gt;
    &lt;p&gt;まずは、&lt;code&gt;app/views/comments/_comment.html.erb&lt;/code&gt;パーシャルに削除リンクを追加しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;コメンター：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; comment.commenter&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;コメント：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; comment.body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所 開始 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;コメント削除&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, [comment.post, comment],&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;              &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :delete, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: { confirm: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;削除しますか？&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; } %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所 終了 --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;このリンクをクリックすると、サーバーに&lt;code&gt;DELETE /posts/:post_id/comments/:id&lt;/code&gt;がリクエストされるので、&lt;code&gt;CommentsController&lt;/code&gt;の&lt;code&gt;destroy&lt;/code&gt;アクションが呼ばれます。&lt;/p&gt;&lt;p&gt;では、&lt;code&gt;app/controllers/comments_controller.rb&lt;/code&gt;に&lt;code&gt;destroy&lt;/code&gt;アクションを追加しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# DELETE /posts/:post_id/comments/:id&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;destroy&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:post_id&lt;/span&gt;])
  &lt;span class=&quot;synIdentifier&quot;&gt;@comment&lt;/span&gt; = &lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;.comments.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
  &lt;span class=&quot;synIdentifier&quot;&gt;@comment&lt;/span&gt;.destroy

  redirect_to post_path(&lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;destory&lt;/code&gt;アクションは、&lt;code&gt;@post.comments&lt;/code&gt;コレクション内の「コメント」を探し出し、データベースから削除しています。そして、「投稿記事」の詳細画面にリダイレクトしています。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;7.2. アソシエーションで関連したオブジェクトを削除する&lt;/h4&gt;
    &lt;p&gt;もし「投稿記事(post)」を削除した場合、それに関連づいている「コメント(comment)」も削除されるべきです。そうしなければ、データベースにゴミデータが残ってしまうからです。&lt;br /&gt;
&lt;code&gt;dependent&lt;/code&gt;オプションを使うことでこれをとっても簡単に実現することができます。&lt;br /&gt;
&lt;code&gt;Post&lt;/code&gt;モデル(app/models/post.rb)に&lt;code&gt;dependent&lt;/code&gt;オプションを追加しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:comments&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;dependent&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;

  validates &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;length&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;minimum&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt; }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これで、&lt;code&gt;@post.destory&lt;/code&gt;で「投稿」を削除すると、その「投稿」に関連づいた「コメント」も&lt;code&gt;自動的&lt;/code&gt;に一緒に削除されます。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;security&quot;&gt;8. HTTP認証を追加する&lt;/h3&gt;もしこのブログをオンラインに公開したい場合、他の誰か知らない人が投稿を追加、編集、削除してしまうかもしれません。&lt;br /&gt;
このような場合のために、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;はとても簡単なHTTP認証システムを提供しています。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※本格的に認証する場合は&lt;code&gt;devise&lt;/code&gt;という認証用のgemを使うことをお勧めします。&lt;code&gt;devise&lt;/code&gt;は、ログイン画面やユーザ登録など一般的な認証システムを提供してくれます。&lt;code&gt;devise&lt;/code&gt;の導入方法やカスタマイズは、&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20140801/1406907000&quot; target=&quot;_blank&quot;&gt;deviseの導入&lt;/a&gt;を参照して下さい。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;http_basic_authenticate_with&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使うことで、特定のコントローラーのアクションの実施に認証が必要となります。&lt;br /&gt;
PostsController(&lt;code&gt;app/controllers/posts_controller.rb&lt;/code&gt;)の上部に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を追加しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;PostsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;

  http_basic_authenticate_with &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;password&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;except&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;]

  ...
  ...
&lt;/pre&gt;&lt;p&gt;今回の場合は、&lt;code&gt;index&lt;/code&gt;と&lt;code&gt;show&lt;/code&gt;アクション以外のアクション(new, create, edit, update, destroy)にHTTP認証が必要になります。&lt;br /&gt;
認証時のユーザ名とパスワードは、&quot;user&quot; と &quot;password&quot; です。&lt;/p&gt;&lt;p&gt;また、認証されたユーザーがコメントを削除するようにしたいので、CommentsController(&lt;code&gt;app/controllers/comments_controller.rb&lt;/code&gt;)にも同じように追加しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CommentsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;

  http_basic_authenticate_with &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;password&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;only&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;

  ...
  ...
&lt;/pre&gt;&lt;p&gt;上記を記載することで、&lt;code&gt;CommentsController&lt;/code&gt;の&lt;code&gt;destroy&lt;/code&gt;アクションだけ認証が必要になります。&lt;/p&gt;&lt;p&gt;さて、投稿の一覧画面(&lt;code&gt;http://localhost:3000/posts&lt;/code&gt;)で新規の投稿を作成するために「新しい投稿」リンクを押すと、HTTP認証のダイアログが表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140813/20140813150152.png&quot; alt=&quot;f:id:nipe880324:20140813150152p:plain:w480&quot; title=&quot;f:id:nipe880324:20140813150152p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;styling&quot;&gt;9. 画面のスタイリングをする&lt;/h3&gt;ここまでブログの一通りの機能を実装することができました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;投稿の一覧表示、作成、更新、詳細表示、削除ができます。&lt;/li&gt;
&lt;li&gt;投稿に対してコメントの作成と削除ができます。&lt;/li&gt;
&lt;li&gt;さらに、認証に成功したユーザのみ上記の特定の操作ができます。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
ここからは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; Guidesには乗っていない、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;での画面のスタイリング方法や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;の使い方を説明していきます。&lt;/p&gt;&lt;p&gt;まずは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でのスタイリングです。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%BF%A5%A4%A5%EB%A5%B7%A1%BC%A5%C8&quot;&gt;スタイルシート&lt;/a&gt;は、&lt;code&gt;app/stylesheets/&lt;/code&gt;配下に配置します。&lt;br /&gt;
デフォルトでは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B3%C8%C4%A5%BB%D2&quot;&gt;拡張子&lt;/a&gt;は&lt;code&gt;css.scss&lt;/code&gt;となっています。&lt;br /&gt;
&lt;code&gt;.scss&lt;/code&gt;は&lt;code&gt;Scss&lt;/code&gt;という「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;により&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;を出力する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%B8%C0%B8%EC&quot;&gt;メタ言語&lt;/a&gt;」を表しています。&lt;/p&gt;&lt;p&gt;&lt;i&gt; &lt;code&gt;Scss&lt;/code&gt;は見た目はほとんど&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;と同じです。実際に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;で記載しても動きます。しかし、主な機能としては、「変数が使える」「ネストが使える」「Mixinができる」「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF&quot;&gt;セレクタ&lt;/a&gt;の継承ができる」などあります。そして、それらの機能により&lt;b&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;で書くよりもより生産性や保守性が向上する&lt;/b&gt;ことが期待できます。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;ここでは、&lt;code&gt;Scss&lt;/code&gt;の記載内容について細かく説明しません。&lt;br /&gt;
どちらかというと、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;ではどうやってスタイリングファイルが指定され、どのような流れで&lt;code&gt;Scss&lt;/code&gt;を記載していくかということを説明します。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;9.1. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%BF%A5%A4%A5%EB%A5%B7%A1%BC%A5%C8&quot;&gt;スタイルシート&lt;/a&gt;の読み込み&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt;というファイルを開いてみて下さい。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; stylesheet_link_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;all&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; javascript_include_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; csrf_meta_tags&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; yield&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;HTMLのドキュメント定義や&lt;code&gt;head&lt;/code&gt;タグや&lt;code&gt;body&lt;/code&gt;タグが記載されていることがわかると思います。&lt;br /&gt;
このファイルは、今まで表示してきたテンプレートファイル(new.html.erbなど)の外側の枠組みとなるファイルです。テンプレートファイルの内容は、&lt;code&gt;&lt;%= yield %&gt;&lt;/code&gt;の箇所に表示されます。&lt;br /&gt;
そのため、このファイルを修正することにより、2段カラムなどのレイアウトをWebアプリケーション全ての画面に適用することができます。&lt;/p&gt;&lt;p&gt;さて、&lt;code&gt;head&lt;/code&gt;タグ内の&lt;code&gt;stylesheet_link_tag&lt;/code&gt;と記載されている行を確認して下さい。&lt;br /&gt;
これは、&lt;code&gt;app/assets/stylesheets/application.css&lt;/code&gt;をインクルードすることを意味しています。&lt;br /&gt;
そして、&lt;code&gt;application.css&lt;/code&gt;内では、&lt;code&gt;app/assets/stylesheets/&lt;/code&gt;配下の全てのファイルをインクルードするように指定されています。&lt;br /&gt;
そのため、この章の最初で述べたように、「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%BF%A5%A4%A5%EB%A5%B7%A1%BC%A5%C8&quot;&gt;スタイルシート&lt;/a&gt;は、&lt;code&gt;app/stylesheets/&lt;/code&gt;配下に配置」する必要があります。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;9.2. アプリケーション全体のスタイリングをする&lt;/h4&gt;
    &lt;p&gt;今回スタイリングした結果のイメージは次のようになります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140813/20140813153533.png&quot; alt=&quot;f:id:nipe880324:20140813153533p:plain:w480&quot; title=&quot;f:id:nipe880324:20140813153533p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;まずアプリケーション全体のスタイリング（レイアウト作成）をしていきましょう。&lt;br /&gt;
アプリケーション全体なので&lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt;を修正します。&lt;code&gt;header&lt;/code&gt;タグで「ヘッダー部分」と&lt;code&gt;&amp;lt;div id=&quot;main&quot;&amp;gt;&lt;/code&gt;タグで「コンテンツ部分」に分けてみました。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; ja=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ja&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; stylesheet_link_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;all&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; javascript_include_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; csrf_meta_tags&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;%= controller.controller_name %&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;wrap&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;header&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;inner&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;logo&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Sample My Blog&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, root_path %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;catchcopy&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Description or something ....&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- /.inner --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;header&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- /#header --&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; yield&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- /#main --&amp;gt;&lt;/span&gt;
  
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- /#wrap --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;その後、&lt;code&gt;Scss&lt;/code&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;を記述していきます。&lt;br /&gt;
&lt;code&gt;app/assets/stylesheets/&lt;/code&gt;配下を見て下さい。&lt;br /&gt;
&lt;code&gt;application.css&lt;/code&gt;、&lt;code&gt;comments.css.scss&lt;/code&gt;、&lt;code&gt;posts.css.scss&lt;/code&gt;などのファイルが存在すると思います。&lt;code&gt;application.css&lt;/code&gt;については上部で既に説明したのでその他のファイルについて説明します。&lt;br /&gt;
お気づきかもしれませんが、&lt;code&gt;posts.css.scss&lt;/code&gt;のファイル名の先頭が「ビューのフォルダ名」と同じです。これは、投稿関連のビュー(&lt;code&gt;app/assets/posts/&lt;/code&gt;配下のファイル)のスタイリングをする場合は、&lt;code&gt;posts.css.scss&lt;/code&gt;を使うと、スタイリングのコードがどこに書かれているか分かりやすいのでよいです。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※上記の項目で説明しましたが、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;では&lt;code&gt;application.css&lt;/code&gt;により全ての画面で&lt;code&gt;app/assets/stylesheets/&lt;/code&gt;配下の全てのスタイリングシートを読み込むため、それぞれのファイルに分けて&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;を書いた方がよいだけであり、一つのファイルに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;を動いても動きます。&lt;br /&gt;
また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;はビュー毎に読み込む&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;を変えているわけではないので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;ファイル間の&lt;code&gt;id&lt;/code&gt;や&lt;code&gt;class&lt;/code&gt;のスタイリングの競合に注意して下さい。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;今回は、基本的な色やレイアウトを指定するファイルの&lt;code&gt;app/assets/stylesheets/common.css.scss&lt;/code&gt;を作成し、次の内容を記載して下さい。&lt;br /&gt;
（スタイリングの仕方の話になると本が書けてしまうので、コピーで大丈夫です）&lt;/p&gt;
&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;// カラー変数
$baseBlack:     #333;
$baseGray:      &lt;span class=&quot;synIdentifier&quot;&gt;#aaa&lt;/span&gt;;
$baseLightGray: &lt;span class=&quot;synIdentifier&quot;&gt;#eee&lt;/span&gt;;
$baseBlue:      #428bca;
$baseLightBlue: #5bc0de;

&lt;span class=&quot;synComment&quot;&gt;/*-----------------------------&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;　リセットCSS + サイト共通設定&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;------------------------------*/&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;,
&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;h3&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;h4&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;h5&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;h6&lt;/span&gt;,
&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;ol&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;dl&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;dt&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;dd&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;,
&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;,
&lt;span class=&quot;synStatement&quot;&gt;form&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;select&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;option&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;address&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;pre&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;em&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;iframe&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;100%&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;/* デフォルト文字設定 */&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100%&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100%&lt;/span&gt;;

  &lt;span class=&quot;synType&quot;&gt;color&lt;/span&gt;: $baseBlack;
  &lt;span class=&quot;synType&quot;&gt;font-family&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Gotham Narrow SSm&amp;quot;&lt;/span&gt;,Arial,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ヒラギノ角ゴ Pro W3&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Hiragino Kaku Gothic Pro&amp;quot;&lt;/span&gt;,Osaka,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;メイリオ&amp;quot;&lt;/span&gt;,Meiryo,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ＭＳ Ｐゴシック&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;MS PGothic&amp;quot;&lt;/span&gt;,&lt;span class=&quot;synType&quot;&gt;sans-serif&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;14px&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1.4&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;/* リストのマーカーを非表示 */&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;, &lt;span class=&quot;synStatement&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;list-style-type&lt;/span&gt;:&lt;span class=&quot;synType&quot;&gt;none&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;/* デフォルトリンク色の設定 */&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;,
&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;:-webkit-any-&lt;span class=&quot;synPreProc&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;text-decoration&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;none&lt;/span&gt;;

  &lt;span class=&quot;synType&quot;&gt;color&lt;/span&gt;: $baseGray;

  &amp;amp;:hover {
    &lt;span class=&quot;synType&quot;&gt;color&lt;/span&gt;: $baseLightBlue;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synError&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;/*--------------------------&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;　レイアウト&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;---------------------------*/&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;border-top&lt;/span&gt;: $baseGray &lt;span class=&quot;synConstant&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;solid&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;/* ページ全体のラッパー&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;---------------------------*/&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;#wrap&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;relative&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100%&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;!important&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100%&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100%&lt;/span&gt;;

  &lt;span class=&quot;synType&quot;&gt;background-color&lt;/span&gt;: $baseBlue;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;/* ヘッダー&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;---------------------------*/&lt;/span&gt;
header &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;border-bottom&lt;/span&gt;: $baseGray &lt;span class=&quot;synConstant&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;solid&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;white&lt;/span&gt;;

  .inner {
    &lt;span class=&quot;synType&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;800px&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;58px&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;auto&lt;/span&gt;;
   
    #logo {
      &lt;span class=&quot;synType&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;250%&lt;/span&gt;;
      &lt;span class=&quot;synType&quot;&gt;text-decoration&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;none&lt;/span&gt;;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;synIdentifier&quot;&gt;#catchcopy&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;synType&quot;&gt;color&lt;/span&gt;: $baseGray;
      &lt;span class=&quot;synType&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;90%&lt;/span&gt;;
      &lt;span class=&quot;synType&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;relative&lt;/span&gt;;
      &lt;span class=&quot;synType&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;-10px&lt;/span&gt;;
      &lt;span class=&quot;synType&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt;;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synError&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;/* メインコンテンツ&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;---------------------------*/&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;#main&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;800px&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100%&lt;/span&gt;;

  &lt;span class=&quot;synType&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;10px&lt;/span&gt;;

  &lt;span class=&quot;synType&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;30px&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;auto&lt;/span&gt;;

  &lt;span class=&quot;synType&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;white&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt;;


  h&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; {
    &lt;span class=&quot;synType&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;200%&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;margin-bottom&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;20px&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;border-bottom&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;solid&lt;/span&gt; $baseBlue;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synError&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;/*-----------------------------&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;　共通コンポーネント&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;------------------------------*/&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;type&lt;span class=&quot;synSpecial&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;,
&lt;span class=&quot;synStatement&quot;&gt;textarea&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;3px&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;solid&lt;/span&gt; $baseGray; 
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面を開き、スタイリングされていることを確認しましょう。&lt;br /&gt;
もっさりした感じがなくなりましたね。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140813/20140813153533.png&quot; alt=&quot;f:id:nipe880324:20140813153533p:plain:w480&quot; title=&quot;f:id:nipe880324:20140813153533p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;9.2. 投稿詳細画面のスタイリングをする&lt;/h4&gt;
    &lt;p&gt;全体のスタイリングをしたので、ほとんど見た目はよくなりました。しかし、各メインコンテンツは各々スタイリングが必要です。&lt;br /&gt;
今回は特に最もスタイリングが必要そうな投稿詳細画面(&lt;code&gt;app/views/posts/show.html.erb&lt;/code&gt;)をスタイリングしていきます。&lt;/p&gt;&lt;p&gt;まず、&lt;code&gt;table&lt;/code&gt;タグや&lt;code&gt;input&lt;/code&gt;要素はアプリケーション全体で使う「共通&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;」のためcommonの一番下に追記します。&lt;/p&gt;
&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;/*-----------------------------&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;　共通コンポーネント&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;------------------------------*/&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;type&lt;span class=&quot;synSpecial&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;,
&lt;span class=&quot;synStatement&quot;&gt;textarea&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;3px&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;solid&lt;/span&gt; $baseGray; 
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;次に、個別の画面の微調整はコントローラー毎にあるファイルを修正します。&lt;br /&gt;
今回は「投稿(post)」なので、&lt;code&gt;app/assets/stylesheets/posts.css.scss&lt;/code&gt;です。&lt;br /&gt;
しかし、先ほど言った通り、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;では全ての画面で全ての&lt;code&gt;Scss&lt;/code&gt;ファイルを読み込んでしまうので一工夫が必要です。&lt;br /&gt;
&lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt;の&lt;code&gt;body&lt;/code&gt;タグに&lt;code&gt;class&lt;/code&gt;属性を追加し、値は現在ビューを表示している&quot;コントローラー名&quot;にしましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;&amp;lt;%= controller.controller_name %&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;HTMLソースをみれば分かりますが、これは、次のようにHTMLに変換されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;  ルート画面(app/views/welcome/index.html.erb)のような&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;  WelcomeControllerでレンダリングされた画面&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;welcome&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;  投稿一覧画面(app/views/posts/index.html.erb)のような&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;  PostsControllerでレンダリングされた画面&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;posts&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;投稿詳細画面(&lt;code&gt;app/views/posts/show.html.erb&lt;/code&gt;)のスタイリングをするために、少し&lt;code&gt;app/views/posts/show.html.erb&lt;/code&gt;のHTML構造を修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;post_info&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;タイトル：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @post.title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
   
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;内容：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; simple_format&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @post.&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;コメント&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; @post.comments %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;コメントを追加&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;comments/form&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;戻る&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, posts_path %&amp;gt;&lt;/span&gt;
| &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;編集&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_post_path(@post) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
それでは&lt;code&gt;app/assets/stylesheets/posts.css.scss&lt;/code&gt;を記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;@import &amp;quot;common.css.scss&amp;quot;;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;.posts&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  h&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; {
    &lt;span class=&quot;synType&quot;&gt;margin-top&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;20px&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;margin-bottom&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt;;

    &lt;span class=&quot;synType&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;110%&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;border-bottom&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;dotted&lt;/span&gt; $baseLightBlue;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;.post_info&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;margin-bottom&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;30px&lt;/span&gt;;

    &lt;span class=&quot;synType&quot;&gt;background-color&lt;/span&gt;: $baseLightGray;
    &lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;5px&lt;/span&gt;;

    strong {
      &lt;span class=&quot;synType&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;110%&lt;/span&gt;;
    &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synError&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;では、投稿の詳細画面(&lt;code&gt;http://localhost:3000/posts/1&lt;/code&gt;)を確認しましょう。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140813/20140813160348.png&quot; alt=&quot;f:id:nipe880324:20140813160348p:plain:w480&quot; title=&quot;f:id:nipe880324:20140813160348p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
これで、スタイリングはおしまいです。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;coffee-script&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CoffeeScript&quot;&gt;CoffeeScript&lt;/a&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;を使う&lt;/h3&gt;今度は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;の使い方を説明します。&lt;br /&gt;
その例として、「コメント入力時に文字数を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;で表示する」ようにします。&lt;br /&gt;
イメージ次のような形です。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140813/20140813160712.png&quot; alt=&quot;f:id:nipe880324:20140813160712p:plain:w320&quot; title=&quot;f:id:nipe880324:20140813160712p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;スタイリングをするために&lt;code&gt;Scss&lt;/code&gt;が採用されているように、&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;では&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;を記載するために&lt;code&gt;CoffeeScript&lt;/code&gt;という&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%B8%C0%B8%EC&quot;&gt;メタ言語&lt;/a&gt;が採用されています。&lt;br /&gt;
簡易にかけますが、学習が必要なので&lt;a href=&quot;http://dotinstall.com/lessons/basic_coffeescript&quot; target=&quot;_blank&quot;&gt;ドットインストール - CoffeeScript入門&lt;/code&gt;などを実施してみて下さい。&lt;/p&gt;&lt;p&gt;まず、文字数の表示領域を追加するために、&lt;code&gt;app/views/comments/_form.html.erb&lt;/code&gt;を修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for(&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; [@post, @post.comments.build] ) do |f| %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :commenter, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;コメンター&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :commenter %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :body, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;コメント&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_area&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :body, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 60, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: 8 %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所　開始 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hint&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;入力文字数：&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;char_num&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所　終了 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.submit&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;コメント投稿&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
文字数表示をスタイリングしておきます。&lt;br /&gt;
&lt;code&gt;app/assets/stylesheets/common.css.scss&lt;/code&gt;の一番下に下記を追加して下さい。&lt;/p&gt;
&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;.hint&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;86%&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;color&lt;/span&gt;: $baseGray;
  &lt;span class=&quot;synType&quot;&gt;font-style&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;italic&lt;/span&gt;; 
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;では、JavaScriptを記載します。&lt;br /&gt;
&lt;code&gt;Scss&lt;/code&gt;と同じように、コメントに関するJavaScriptなので&lt;code&gt;comments.js.coffee&lt;/code&gt;に下記を記載します。（CoffeeScriptで記載しています）&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;$ -&amp;gt;
  $(&lt;span class=&quot;synConstant&quot;&gt;&#39;#comment_body&#39;&lt;/span&gt;).keyup -&amp;gt;
    $(&lt;span class=&quot;synConstant&quot;&gt;&#39;#char_num&#39;&lt;/span&gt;).text($(&lt;span class=&quot;synIdentifier&quot;&gt;this&lt;/span&gt;).val().length)
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;RailsではgemによりjQueryが標準でインクルードされているため使うことが可能です。しかし、jQueryをCoffeeScriptで記載するには少し癖ありますので、&lt;a href=&quot;http://www.webopixel.net/javascript/660.html&quot; target=&quot;_blank&quot;&gt;CoffeeScriptでjQueryを使うときのメモ&lt;/a&gt;などを読んでみて下さい。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;では、実際にコメントを入力し、動的に入力文字列の値が変わることを確認してみて下さい。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140813/20140813160712.png&quot; alt=&quot;f:id:nipe880324:20140813160712p:plain:w320&quot; title=&quot;f:id:nipe880324:20140813160712p:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;what-is-next&quot;&gt;次は？&lt;/h3&gt;おつかれさまでした。そして、おめでとうございます。&lt;/p&gt;&lt;p&gt;あなたは、これでRailsの基本的な開発方法を学ぶことができるようになりました。&lt;br /&gt;
ルーティング、コントローラー、モデル、ビュー、スタイリング、JavaScriptなど数々のことについて知ることができました。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;さて、今後どうしていったらいいかのアドバイスを簡単に説明していきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;このブログに追加の自力で機能を追加する。例えば、ユーザ認証機能、ファイルアップロード機能など。そのときに、このページのトップにある「有用なライブラリ」の&lt;code&gt;devise&lt;/code&gt;や&lt;code&gt;paperclip&lt;/code&gt;の記事がとても参考になると思います。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&quot;http://railstutorial.jp/&quot; target=&quot;_blank&quot;&gt;Railsチュートリアル&lt;/a&gt;」というオンラインブックで「Twitter風アプリをテスト駆動開発かつAgileで開発」する&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;i&gt;GitやRSpecでテストを書いてからコードを書くなどさまざまなことが知れるのでとてもお勧め。&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「RailsによるアジャイルWebアプリケーション開発 第4版」という本で「ECサイトをAgileで開発」する。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;i&gt; Railsを開発した人が書いてあるのでとても内容が分かりやすくて実用的だた、Rails 3.2で説明しているのでRailsが少し古いことが欠点&lt;/i&gt;&lt;br /&gt;
&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4274068668/hatena-blog-22/&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51Gibg-iYTL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;RailsによるアジャイルWebアプリケーション開発 第4版&quot; title=&quot;RailsによるアジャイルWebアプリケーション開発 第4版&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4274068668/hatena-blog-22/&quot;&gt;RailsによるアジャイルWebアプリケーション開発 第4版&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;作者:&lt;/span&gt; Sam Ruby,Dave Thomas,David Heinemeier Hansson,前田修吾&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; オーム社&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2011/12/01&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; 単行本（ソフトカバー）&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;購入&lt;/span&gt;: 12人 &lt;span class=&quot;hatena-asin-detail-label&quot;&gt;クリック&lt;/span&gt;: 206回&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4274068668/hatena-blog-22&quot; target=&quot;_blank&quot;&gt;この商品を含むブログ (40件) を見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「&lt;a href=&quot;http://guides.rubyonrails.org/index.html&quot; target=&quot;_blank&quot;&gt;Rails Guides&lt;/a&gt;」を読んでより深く詳細にRailsの各機能について学ぶ。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;i&gt;英語で読むのに時間がかかるというのが欠点だが、内容の豊富さはダントツでお勧め。&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「&lt;a href=&quot;http://railscasts.com/&quot; target=&quot;_blank&quot;&gt;RailsCast」というRails専用のスクリーンキャスト(※ドットインストールと同じ動画で説明してくれるサイト)で幅広い情報を学ぶ。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;i&gt;Rails界隈ではとても人気な（だった？）スクリーンキャストでRailsGuidsと違った種類の内容の多さはピカイチ。英語で説明しているので分かりづらいことと、2013年1月から更新が止まっていて内容が一部古いこと、一部有料の記事があることが欠点。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;「実際に独自で作って、つまりながらも完成させること」と「一部の機能を深く広く学ぶこと」を繰り返していくことにより、どんどんとRailsの知識やスキルが深まっていくのでまずは自分で何か機能を追加してみることをお勧めします。&lt;/p&gt;&lt;p&gt;では、以上です。&lt;br /&gt;
わかりづらい、間違っている箇所などありましたらコメントを下さい。&lt;br /&gt;
長くなりましたがここまで読んでいただきありがとうございました。&lt;br /&gt;
そして、おつかれさまです。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 13 Aug 2014 16:41:58 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815729996513</guid>
          
            <category>Rails初級</category>
          
            <category>作ってみよう</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsのmigrationの基本とレシピ集</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140810/1407634200</link>
          <description>&lt;p&gt;RailsのMigrationの基本的なことから、カラム追加/削除、インデックス追加、NULL制約、カラム名変更などのレシピ集をまとめました。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;1. &lt;a href=&quot;#migration-basic&quot;&gt;Migrationの基礎&lt;/a&gt;&lt;/h4&gt;
    &lt;p&gt;1.1. &lt;a href=&quot;#migration-create&quot;&gt;migrationファイルの作成&lt;/a&gt;&lt;br /&gt;
1.2. &lt;a href=&quot;#migration-migrate&quot;&gt;マイグレートの実施 rake db:migrateコマンド&lt;/a&gt;&lt;br /&gt;
1.3. &lt;a href=&quot;#migration-migrate-status&quot;&gt;マイグレートの適用状況確認 rake db:migrate:statusコマンド&lt;/a&gt;&lt;br /&gt;
1.4. &lt;a href=&quot;#migration-seeds&quot;&gt;データの投入 rake db:seedコマンド&lt;/a&gt;&lt;br /&gt;
1.5. &lt;a href=&quot;#migration-datatypes&quot;&gt;マイグレーションで使えるデータ型一覧&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;2. &lt;a href=&quot;#migration-recipes&quot;&gt;Migrationのレシピ集&lt;/a&gt;&lt;/h4&gt;
    &lt;p&gt;2.1. &lt;a href=&quot;#migration-add-column&quot;&gt;カラムの追加（add_column）&lt;/a&gt;&lt;br /&gt;
2.2. &lt;a href=&quot;#migration-remove-column&quot;&gt;カラムの削除（remove_column）&lt;/a&gt;&lt;br /&gt;
2.3. &lt;a href=&quot;#migration-change-datatype&quot;&gt;データ型の変更（change_column）&lt;/a&gt;&lt;br /&gt;
2.4. &lt;a href=&quot;#migration-add-remove-index&quot;&gt;インデックスやユニーク制約の追加/削除（add_index/remove_index）&lt;/a&gt;&lt;br /&gt;
2.5. &lt;a href=&quot;#migration-change-column-null&quot;&gt;NULL制約の追加/削除（change_column_null)&lt;/a&gt;&lt;br /&gt;
2.6. &lt;a href=&quot;#migration-change-column-default&quot;&gt;デフォルト値の追加/削除（change_column_default)&lt;/a&gt;&lt;br /&gt;
2.7. &lt;a href=&quot;#migration-rename-column&quot;&gt;カラム名の変更（rename_column）&lt;/a&gt;&lt;br /&gt;
2.8. &lt;a href=&quot;#migration-create-table&quot;&gt;テーブルの作成（create_table）&lt;/a&gt;&lt;br /&gt;
2.9. &lt;a href=&quot;#migration-drop-table&quot;&gt;テーブルの削除（drop_table）&lt;/a&gt;&lt;br /&gt;
2.10. &lt;a href=&quot;#migration-rename-tabel&quot;&gt;テーブル名の変更（rename_table）&lt;/a&gt;&lt;br /&gt;
2.11. &lt;a href=&quot;#migration-add-initial-data&quot;&gt;商用リリース後の初期データの投入&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;migration-basic&quot;&gt;1. Migrationの基礎&lt;/h3&gt;&lt;h4 id=&quot;migration-create&quot;&gt;1.1. migrationファイルの作成&lt;/h4&gt;Railsのmigrationはデータベースのスキーマの設定管理を一貫して規則正しく行うための基盤です。&lt;br /&gt;
migrationファイルを作成するには、「手動でファイルを作成する方法」と「&lt;code&gt;$ rails generate&lt;/code&gt;コマンドで作成する方法」の２つの作成方法があります。&lt;br /&gt;
&lt;code&gt;$ rails generate&lt;/code&gt;コマンドで作成する方がエラーが発生しづらいためそちらの方法でのファイル作成方法を説明します。&lt;/p&gt;&lt;p&gt;Railsジェネレートコマンドも&lt;br /&gt;
「モデルとマイグレーションファイルを作成する&lt;code&gt;$ rails g model&lt;/code&gt;」&lt;br /&gt;
「マイグレーションファイルのみを作成する&lt;code&gt;$ rails g migration&lt;/code&gt;」&lt;br /&gt;
があります。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※&lt;code&gt;g&lt;/code&gt;は&lt;code&gt;generate&lt;/code&gt;のショートカットです。&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;モデルとマイグレーションファイルを作成&lt;/h5&gt;
    &lt;p&gt;以下のコマンドで&lt;code&gt;Article&lt;/code&gt;モデルとマイグレーションファイルを作成します。&lt;br /&gt;
また、&lt;code&gt;Article&lt;/code&gt;モデルには、String型のtitle、Text型のcontentカラムがあります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails g model &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt; title&lt;span class=&quot;synConstant&quot;&gt;:string&lt;/span&gt; content&lt;span class=&quot;synConstant&quot;&gt;:text&lt;/span&gt;
      invoke  active_record
      create    db/migrate/20140808181112_create_articles.rb
      create    app/models/article.rb
      invoke    test_unit
      create      test/models/article_test.rb
      create      test/fixtures/articles.yml
&lt;/pre&gt;&lt;p&gt;マイグレートファイルは&lt;code&gt;db/migrate&lt;/code&gt;配下に作成されます。&lt;br /&gt;
また、ファイル名には、YYYYMMDDHHmmSSが付与され、ファイル名の重複や、マイグレートファイルがDBに適用済みかどうかを確認するために使われます。&lt;/p&gt;&lt;p&gt;では、上記のコマンドで作成されたマイグレーションファイルを見てみましょう。&lt;br /&gt;
マイグレーションファイルは、&lt;code&gt;ActiveRecord::Migration&lt;/code&gt;を継承している必要があります。&lt;br /&gt;
メソッドは、&lt;code&gt;change&lt;/code&gt;メソッド、もしくは、&lt;code&gt;up&lt;/code&gt;と&lt;code&gt;down&lt;/code&gt;メソッを定義している必要があります。&lt;br /&gt;
その中で、テーブル作成/削除、カラム追加/削除などを行います。今回は、&lt;code&gt;create_table&lt;/code&gt;メソッドで&lt;code&gt;articles&lt;/code&gt;というテーブルを作成し、ブロック内でカラムを追加しています。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※&lt;code&gt;timestamps&lt;/code&gt;は、レコードの作成時刻の&lt;code&gt;created_at&lt;/code&gt;と更新時刻の&lt;code&gt;updated_at&lt;/code&gt;をカラムを作成してくれます。明示的に追加しなくても自動でマイグレーションファイルに追加され、また、カラムの値は自動で更新されます。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;各メソッドの詳細は、本ページのレシピ集に記載してます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/20140808181112_create_articles.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateArticles&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.string &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;
      t.text &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;

      t.timestamps
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;※&lt;code&gt;up&lt;/code&gt;と&lt;code&gt;down&lt;/code&gt;は、&lt;code&gt;change&lt;/code&gt;メソッドの代わりに使います。&lt;br /&gt;
&lt;code&gt;up&lt;/code&gt;は&lt;code&gt;rake db:migrate&lt;/code&gt;の実行時に実行され、&lt;code&gt;down&lt;/code&gt;は&lt;code&gt;rake db:rollback&lt;/code&gt;時に実行されます。&lt;br /&gt;
&lt;code&gt;change&lt;/code&gt;メソッドのときは、内部的に可逆性を推定して実施しますが、必ずしも推定できない場合は&lt;code&gt;up/down&lt;/code&gt;で定義しておくことによりロールバックができるようになります。ロールバックは必須ではないので、わざわざ&lt;code&gt;up/down&lt;/code&gt;を実施しなくてもよいです。&lt;br /&gt;
上記のマイグレーションファイルをup/downで書き直した例は次の通りです。&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/20140808181112_create_articles.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateArticles&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;up&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.string &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;
      t.text &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;

      t.timestamps
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;down&lt;/span&gt;
    drop_table &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;マイグレーションファイルのみを作成&lt;/h5&gt;
    &lt;p&gt;マイグレーションファイルのみを作成する場合は、&lt;code&gt;rails g migration&lt;/code&gt;です。&lt;br /&gt;
内容は上記で説明したので省略します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails g migration create_articles title&lt;span class=&quot;synConstant&quot;&gt;:string&lt;/span&gt; content&lt;span class=&quot;synConstant&quot;&gt;:text&lt;/span&gt;
      invoke  active_record
      create    db/migrate/20140808181236_create_articles.rb
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
作成されたマイグレーションファイルを確認します。&lt;br /&gt;
内容は&lt;code&gt;rails g model&lt;/code&gt;と同じです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/20140808181236_create_articles.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateArticles&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.string &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;
      t.text &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;migration-migrate&quot;&gt;1.2. マイグレートの実施 rake db:migrateコマンド&lt;/h4&gt;&lt;code&gt;rake db:migrate&lt;/code&gt;コマンドで適用していないマイグレーションファイルを全て適用することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rake db&lt;span class=&quot;synConstant&quot;&gt;:migrate&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# RAILS_ENV をしていすることでマイグレートする環境を指定できます&lt;/span&gt;
$ rake db&lt;span class=&quot;synConstant&quot;&gt;:migrate&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;RAILS_ENV&lt;/span&gt;=test             &lt;span class=&quot;synComment&quot;&gt;# test環境に適用&lt;/span&gt;
$ rake db&lt;span class=&quot;synConstant&quot;&gt;:migrate&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;RAILS_ENV&lt;/span&gt;=production  &lt;span class=&quot;synComment&quot;&gt;# production環境に適用&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
適用したマイグレートファイル１つだけ未適用状態にする（ロールバック）&lt;br /&gt;
&lt;code&gt;down&lt;/code&gt;メソッドが定義されていない場合は失敗する場合もあります。詳細は上記を参照して下さい。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rake db&lt;span class=&quot;synConstant&quot;&gt;:rollback&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;最初の状態までロールバックする&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rake db&lt;span class=&quot;synConstant&quot;&gt;:migrate&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;VERSION&lt;/span&gt;=&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;全てのテーブルとデータをを削除し、スキーマ(schema.rbの内容)を適用する。ロールバックできない場合に使える。&lt;br /&gt;
本当にどうしようもない場合は、直接データベースにアクセスし、テーブルを削除して、マイグレートを適用させましょう。&lt;br /&gt;
&lt;i&gt;schema.rbはdb:migrateの結果をマージしたファイルです。&lt;/i&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rake db&lt;span class=&quot;synConstant&quot;&gt;:reset&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4 id=&quot;migration-migrate-status&quot;&gt;1.3. マイグレートの適用状況確認 rake db:migrate:statusコマンド&lt;/h4&gt;次のコマンドで、現在データベースに適用されているマイグレーションファイルを確認します。&lt;br /&gt;
&lt;code&gt;Migration ID&lt;/code&gt;がマイグレーションファイルの&lt;code&gt;YYYYMMDDHHmmSS&lt;/code&gt;に対応しています。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ rake db:migrate:status 

database: /Users/nipe0324/rails_project/db/development.sqlite3

 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20141008133536  Create pictures
   up     20141008133734  Add attachment photo to pictures&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4 id=&quot;migration-seeds&quot;&gt;1.4. データの投入 rake db:seedコマンド&lt;/h4&gt;初期データをデータベースに投入するために、&lt;code&gt;db/seeds.rb&lt;/code&gt;が存在します。&lt;br /&gt;
この中はRubyが記載でき、Rubyでモデルを作成します。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※本番環境などデータを削除することができない場合は、この&lt;code&gt;db/seeds.rb&lt;/code&gt;を使うことは適切ではありません。「&lt;a href=&quot;#migration-add-initial-data&quot;&gt;商用リリース後の初期データの投入&lt;/a&gt;」を参照して下さい。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;seeds.rb&lt;/code&gt;を記載したら、&lt;code&gt;rake db:seed&lt;/code&gt;コマンドで実行することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rake db&lt;span class=&quot;synConstant&quot;&gt;:seed&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;ここではサンプルとして、３つの記事（Articleオブジェクト）を作成して適用します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;### モデルとマイグレーションファイルを作成&lt;/span&gt;
$ rails g model &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt; title&lt;span class=&quot;synConstant&quot;&gt;:string&lt;/span&gt; content&lt;span class=&quot;synConstant&quot;&gt;:text&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;### マイグレートを実施&lt;/span&gt;
$ rails db&lt;span class=&quot;synConstant&quot;&gt;:migrate&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;### db/seeds.rbに初期データ投入を記載&lt;/span&gt;
$ vim db/seeds.rb
&lt;span class=&quot;synComment&quot;&gt;# 記事を3つ作成&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.create!( &lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;記事1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;内容1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; )
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.create!( &lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;記事2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;内容2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; )
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.create!( &lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;記事3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;内容3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; )

&lt;span class=&quot;synComment&quot;&gt;### db/seeds.rbを適用&lt;/span&gt;
$ rake db&lt;span class=&quot;synConstant&quot;&gt;:seed&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;### コンソールでデータが入ったことを確認&lt;/span&gt;
$ rails c
&lt;span class=&quot;synType&quot;&gt;Loading&lt;/span&gt; development environment (&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4.1&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;)
&amp;gt; &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.all
=&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#&amp;lt;ActiveRecord::Relation [#&amp;lt;Article id: 1, title: &amp;quot;記事1&amp;quot;, content: &amp;quot;内容1&amp;quot;, created_at: &amp;quot;2014-08-08 19:41:31&amp;quot;, updated_at: &amp;quot;2014-08-08 19:41:31&amp;quot;&amp;gt;, #&amp;lt;Article id: 2, title: &amp;quot;記事2&amp;quot;, content: &amp;quot;内容2&amp;quot;, created_at: &amp;quot;2014-08-08 19:41:31&amp;quot;, updated_at: &amp;quot;2014-08-08 19:41:31&amp;quot;&amp;gt;, #&amp;lt;Article id: 3, title: &amp;quot;記事3&amp;quot;, content: &amp;quot;内容3&amp;quot;, created_at: &amp;quot;2014-08-08 19:41:31&amp;quot;, updated_at: &amp;quot;2014-08-08 19:41:31&amp;quot;&amp;gt;]&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4 id=&quot;migration-datatypes&quot;&gt;1.5. マイグレーションで使えるデータ型一覧&lt;/h4&gt;&lt;code&gt;rails generator model&lt;/code&gt;や&lt;code&gt;rails generator migration&lt;/code&gt;コマンドで使えるデータ型として以下のものがあります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;integer 整数
float 浮動小数
decimal 制度の高い小数

string 文字列
text  長い文字列
binary バイナリデータ

datetime 日時
timestamp より細かい日時
date 日付
time 時間

boolean &lt;span class=&quot;synType&quot;&gt;Boolean&lt;/span&gt;型(&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)

primary_key 主キー
references 外部キー
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;migration-recipes&quot;&gt;2. Migrationのレシピ集&lt;/h3&gt;&lt;h4 id=&quot;migration-add-column&quot;&gt;2.1 カラムの追加（add_column）&lt;/h4&gt;&lt;code&gt;articles&lt;/code&gt;テーブルに&lt;code&gt;user_id&lt;/code&gt;カラムを追加してみます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails g migration add_user_id_to_articles user_id&lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;
      invoke  active_record
      create    db/migrate/20140808182214_add_user_id_to_articles.rb
&lt;/pre&gt;&lt;p&gt;作成されたマイグレーションファイルを確認しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/20140808182214_add_user_id_to_articles.rb &lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AddColumnToArticles&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# [形式] add_column(テーブル名, カラム名, データ型)&lt;/span&gt;
    add_column &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;さらに、&lt;code&gt;add_column&lt;/code&gt;には次のオプションを指定できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;null: true  ... NOT NULL制約を削除&lt;/li&gt;
&lt;li&gt;null: false ... NOT NULL制約を追加&lt;/li&gt;
&lt;li&gt;limit: size ... フィールドのサイズに対する制限を設定&lt;/li&gt;
&lt;li&gt;default: [val] ... [val] に設定した値をレコード作成時のカラムのデフォルト値とする&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;さらにさらに、decimal型の場合は追加で以下のオプションも指定できます。&lt;br /&gt;
 - precision: [num], scale: [num] ... precisionは格納される桁数、scaleはその桁数のどこを小数点位置にするかを設定&lt;br /&gt;
 　※ 例えば、precision: 5, scale: 2 の場合、 5桁で小数点は2桁目のため、格納できる値は -999.99〜+999.99となる&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;migration-remove-column&quot;&gt;2.2. カラムの削除（remove_column）&lt;/h4&gt;&lt;code&gt;articles&lt;/code&gt;テーブルに&lt;code&gt;user_id&lt;/code&gt;カラムを削除してみます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails g migration remove_user_id_to_articles user_id
      invoke  active_record
      create    db/migrate/20140808182248_remove_user_id_to_articles.rb
&lt;/pre&gt;&lt;p&gt;作成されたマイグレーションファイルを見てみましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;#db/migrate/20140808182248_remove_user_id_to_articles.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;RemoveColumnToArticles&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# [形式] remove_column(テーブル名, カラム名)&lt;/span&gt;
    remove_column &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;※ ロールバック時にカラムの追加方法が分からないため&lt;code&gt;$ rake db:rollback&lt;/code&gt;でエラーになります。もし、rollbackをしたい場合、up/downメソッドを定義し、downメソッド内でテーブルを作成する必要があります。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;migration-change-datatype&quot;&gt;2.3. データ型の変更（change_column）&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails g migration change_datatype_title_of_articles
      invoke  active_record
      create    db/migrate/20140808183810_change_datatype_title_of_articles.rb
&lt;/pre&gt;&lt;p&gt;マイグレーションファイルに&lt;code&gt;change_column&lt;/code&gt;メソッドを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/20140808183810_change_datatype_title_of_articles.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ChangeDatatypeTitleOfArticles&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# [形式] change_column(テーブル名, カラム名, データタイプ, オプション)&lt;/span&gt;
    change_column &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:text&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# オプション&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# limit - カラム長の最大数&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# change_column :articles, :title, :text, limit: 120&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# default - カラムのデフォルト値を設定。NULLにしたい場合は、nilを指定&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# change_column :articles, :title, :text, default: &amp;quot;タイトルがありません&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# null - null制約を設定。false -&amp;gt; null制約がON。true -&amp;gt; null制約がOFF&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# change_column :articles, :title, :text, null: true&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h4 id=&quot;migration-add-remove-index&quot;&gt;2.4. インデックスやユニーク制約の追加/削除（add_index/remove_index）&lt;/h4&gt;articlesテーブルのtitleカラムにindexを追加しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails g migration add_name_index_to_articles
      invoke  active_record
      create    db/migrate/20140808183810_add_name_index_to_articles.rb
&lt;/pre&gt;&lt;p&gt;マイグレーションファイルに&lt;code&gt;add_index&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ cat db/migrate/20140808183810_add_name_index_to_articles.rb
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AddNameIndexToArticles&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    add_index &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# add_index :articles, :name, unique: true ユニーク制約も付加可能&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# add_index :articles, [:user_id, :created_at] 配列を使うことにより複合インデックスを設定可能&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4 id=&quot;migration-change-column-null&quot;&gt;2.5. NULL制約の追加/削除（change_column_null)&lt;/h4&gt;NULL制約の追加や削除のみを設定するには&lt;code&gt;change_column_null&lt;/code&gt;メソッドを使えば簡単です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# usersテーブルのnicknameを &amp;quot;NULL&amp;quot; を許可しない(NOT NULL制約を追加)&lt;/span&gt;
change_column_null &lt;span class=&quot;synConstant&quot;&gt;:users&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:nickname&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# usersテーブルのnicknameを &amp;quot;NULL&amp;quot; を許可する&lt;/span&gt;
change_column_null &lt;span class=&quot;synConstant&quot;&gt;:users&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:nickname&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4 id=&quot;migration-change-column-default&quot;&gt;2.6. デフォルト値の追加/削除（change_column_default)&lt;/h4&gt;カラムのデフォルト値の追加や削除のみを設定するには&lt;code&gt;change_column_default&lt;/code&gt;メソッドを使えば簡単です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# suppliersテーブルのqualificationカラムのデフォルト値を &#39;new&#39; を設定&lt;/span&gt;
change_column_default &lt;span class=&quot;synConstant&quot;&gt;:suppliers&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:qualification&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# accountsテーブルのauthorizedカラムのデフォルト値を 1 を設定&lt;/span&gt;
change_column_default &lt;span class=&quot;synConstant&quot;&gt;:accounts&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:authorized&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# usersテーブルのemailカラムのデフォルト値に NULL を設定&lt;/span&gt;
change_column_default &lt;span class=&quot;synConstant&quot;&gt;:users&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:email&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h4 id=&quot;migration-rename-column&quot;&gt;2.7. カラム名の変更（rename_column）&lt;/h4&gt;カラム名を &quot;title&quot; から &quot;changed_title&quot; へ変更しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails g migration rename_title_column_to_articles
      invoke  active_record
      create    db/migrate/20140808184723_rename_title_column_to_articles.rb
&lt;/pre&gt;&lt;p&gt;マイグレーションファイルに&lt;code&gt;rename_column&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ cat db/migrate/20140808184723_rename_title_column_to_articles.rb
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;RenameTitleColumnToArticles&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# [形式] rename_column(テーブル名, 変更前のカラム名, 変更後のカラム名)&lt;/span&gt;
    rename_column &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:changed_title&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4 id=&quot;migration-create-table&quot;&gt;2.8. テーブルの作成（create_table）&lt;/h4&gt;usersテーブルを作成しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails g migration create_users name&lt;span class=&quot;synConstant&quot;&gt;:string&lt;/span&gt; email&lt;span class=&quot;synConstant&quot;&gt;:string&lt;/span&gt;
      invoke  active_record
      create    db/migrate/20140808185345_create_users.rb
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
マイグレーションを確認します。&lt;cod&gt;timestamps&lt;/code&gt;がない場合は追加して下さい。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ cat  db/migrate/20140808185345_create_users.rb
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateUsers&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:users&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.string &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;
      t.string &lt;span class=&quot;synConstant&quot;&gt;:email&lt;/span&gt;

      t.timestamps
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4 id=&quot;migration-drop-table&quot;&gt;2.9. テーブルの削除（drop_table）&lt;/h4&gt;usersテーブルを削除します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails g migration drop_users
      invoke  active_record
      create    db/migrate/20140808185551_drop_users.rb
&lt;/pre&gt;&lt;p&gt;マイグレーションファイルに&lt;code&gt;drop_table&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ cat db/migrate/20140808185551_drop_users.rb
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;DropUsers&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    drop_table &lt;span class=&quot;synConstant&quot;&gt;:users&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;※ロールバック時に、テーブルの作成方法が分からないため&lt;code&gt;$ rake db:rollback&lt;/code&gt;でエラーになります。もし、rollbackをしたい場合、up/downメソッドを定義し、downメソッド内でテーブルを作成する必要があります。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;migration-rename-tabel&quot;&gt;2.10. テーブル名の変更（rename_table）&lt;/h4&gt;テーブル名を &quot;articles&quot; から &quot;posts&quot; へ変更します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails g migration rename_articles_to_posts
      invoke  active_record
      create    db/migrate/20140808190856_rename_articles_to_posts.rb
&lt;/pre&gt;&lt;p&gt;マイグレーションに&lt;code&gt;rename_table&lt;/code&gt;を追加しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/20140808190856_rename_articles_to_posts.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;RenameArticlesToPosts&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    rename_table &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:posts&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h4 id=&quot;migration-add-initial-data&quot;&gt;2.11. 商用リリース後の初期データの投入&lt;/h4&gt;初回に商用リリースをするときに&lt;code&gt;db/seeds.rb&lt;/code&gt;は適用済みであると思います。&lt;br /&gt;
そのため、その後にテーブルを追加し、その初期データを投入したいときに&lt;code&gt;db/seeds.rb&lt;/code&gt;を使うことができません。&lt;/p&gt;&lt;p&gt;所用リリース後に初期データを投入するためには、次のようにマイグレートファイルに初期データを投入するコードを作成します。&lt;br /&gt;
ここでは、categoriesテーブルを作成したのを前提として、初期のカテゴリーを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails g migration insert_initial_categories_into_categories
      invoke  active_record
      create    db/migrate/20140808190856_insert_initial_categories_into_categories.rb
&lt;/pre&gt;&lt;p&gt;マイグレーションに&lt;code&gt;rename_table&lt;/code&gt;を追加しましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/20140808190856_insert_initial_categories_into_categories.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;InsertInitialCategoriesIntoCategories&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    names = &lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;食費 日用品 交通費 交際費 税金&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;
    names.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;name&lt;/span&gt;|
      &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: name
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html&quot; target=&quot;_blank&quot;&gt;Rails API - ActiveRecord::ConnectionAdapters::SchemaStatements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/migrations.html&quot; target=&quot;_blank&quot;&gt;Rails Guide - Migration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上です。&lt;br /&gt;
よく分からない箇所や間違いがありましたら、コメントをいただけると直に対応します。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Sun, 10 Aug 2014 10:30:00 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815729890967</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Migration</category>
          
        </item>
      
        <item>
          <title>Railsのモデルのバリデーションエラー errors や full_messages の使い方</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140810/1407623400</link>
          <description>&lt;p&gt;Railsのモデルのバリデーションエラーの扱い方について説明します。&lt;br /&gt;
&lt;code&gt;errors&lt;/code&gt;(エラーメッセージオブジェクト)、独自のエラーメッセージの追加、エラーメッセージの表示、日本語化について説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#erorrs-usage&quot;&gt;モデル(model)のエラーメッセージ errors の使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#add-error&quot;&gt;モデル(model)にエラーメッセージを追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#view-validation&quot;&gt;ビューにモデルのバリデーションエラーを表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#view-validation-japanese&quot;&gt;モデルのバリデーションエラーメッセージを日本語化&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;erorrs-usage&quot;&gt;モデル(model)のエラーメッセージ errors の使い方&lt;/h3&gt;Railsのモデル(model)でバリデーションエラーが発生した場合に、model の &lt;code&gt;errors&lt;/code&gt;にエラーメッセージが設定されます。さらに、&lt;code&gt;full_messages&lt;/code&gt;でバリデーションのエラーメッセージの配列を取得できます。&lt;/p&gt;&lt;p&gt;次のProductモデルが設定されている前提で話を進めます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# name属性に値が存在しない場合バリデーションエラーになります&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;コンソールで動きを確認します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails console --sandbox

&lt;span class=&quot;synComment&quot;&gt;# バリデーションエラーが発生する場合&lt;/span&gt;
&amp;gt; product = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new
=&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#&amp;lt;Product id: nil, name: nil, price: nil, discontinued: nil, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
&amp;gt; product.valid? &lt;span class=&quot;synComment&quot;&gt;# バリデーションエラーが発生し、errorsにメッセージが登録される&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
&amp;gt; product.errors.messages
=&amp;gt; {&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;=&amp;gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;can&#39;t be blank&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]}
&amp;gt; product.errors.full_messages
=&amp;gt; [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Name can&#39;t be blank&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]
&amp;gt; product.save
=&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# バリデーションエラーが発生しない場合&lt;/span&gt;
product = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new( &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品名&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; )
=&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#&amp;lt;Product id: nil, name: &amp;quot;商品名&amp;quot;, price: nil, discontinued: nil, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
irb(main):&lt;span class=&quot;synConstant&quot;&gt;017&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&amp;gt; product.valid? &lt;span class=&quot;synComment&quot;&gt;# バリデーションエラーが発生しない。errorsにメッセージが登録されない。&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&amp;gt; product.errors.messages
=&amp;gt; {}
&amp;gt; product.errors.full_messages
=&amp;gt; []
&amp;gt; product.save
=&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;add-error&quot;&gt;モデル(model)にエラーメッセージを追加&lt;/h3&gt;&lt;code&gt;errors.add&lt;/code&gt;と&lt;code&gt;errors[:base]&lt;/code&gt;を使うことでエラーメッセージを自分で追加することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  validate &lt;span class=&quot;synConstant&quot;&gt;:add_error_sample&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;add_error_sample&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# nameが空のときにエラーメッセージを追加する&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; name.empty?
      errors.add(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;に関係するエラーを追加&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
      errors[&lt;span class=&quot;synConstant&quot;&gt;:base&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;モデル全体に関係するエラーを追加&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;エラーが発生したときの画面です。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140809/20140809021320.png&quot; alt=&quot;f:id:nipe880324:20140809021320p:plain:w380&quot; title=&quot;f:id:nipe880324:20140809021320p:plain:w380&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:380px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;逆に、エラーメッセージを削除するメソッドもあります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;product = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new
product.valid? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
product.errors.full_messages &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Name can&#39;t be blank&amp;quot;]&lt;/span&gt;
product.errors.clear  &lt;span class=&quot;synComment&quot;&gt;# エラーメッセージを削除&lt;/span&gt;
product.erros.empty? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h3 id=&quot;view-validation&quot;&gt;ビューにモデルのバリデーションエラーを表示&lt;/h3&gt;モデルのバリデーションエラー時に、ビューにバリデーションエラーを表示します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140809/20140809012601.png&quot; alt=&quot;f:id:nipe880324:20140809012601p:plain:w380&quot; title=&quot;f:id:nipe880324:20140809012601p:plain:w380&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:380px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 通常はフォームの表示領域の上部に記載&lt;/span&gt;
&amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.errors.any? %&amp;gt;
  &amp;lt;div id=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;error_explanation&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;%= &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.errors.count %&amp;gt;件のエラーがあります。&amp;lt;/h2&amp;gt;
 
    &amp;lt;ul&amp;gt;
    &amp;lt;% &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.errors.full_messages.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;msg&lt;/span&gt;| %&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;%= msg %&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt; %&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt; %&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;&lt;h3 id=&quot;view-validation-japanese&quot;&gt;モデルのバリデーションエラーメッセージを日本語化&lt;/h3&gt;&lt;/h3&gt;
    &lt;p&gt;日本語にする場合は次を実施して下さい。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ja.yml&quot;&gt;ja.yml&lt;/a&gt;を&lt;code&gt;config/locales/&lt;/code&gt;に追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config/application.rb&lt;/code&gt;に&lt;code&gt;config.i18n.default_locale = :ja&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;サーバーを再起動&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;さらにモデルの属性名(nameなど)を日本語化する場合は、&lt;code&gt;ja.yml&lt;/code&gt;に次のように記載して下さい。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/locales/ja.yml&lt;/span&gt;
ja:
  attributes:
    &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;:   名前
...
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/active_record_validations.html&quot; target=&quot;_blank&quot;&gt;RailsGuide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上です。&lt;br /&gt;
分からない箇所や間違いがある場合は、コメントを頂けると嬉しいです。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Sun, 10 Aug 2014 07:30:00 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815729883102</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Model</category>
          
        </item>
      
        <item>
          <title>Railsでビューのレイアウトを指定する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140810/1407603600</link>
          <description>&lt;p&gt;Railsのレイアウトファイルの使い方について説明します。&lt;/p&gt;&lt;p&gt;ページのヘッダー、ナビゲーションバー、フッターなどの大枠はRailsアプリを通して共通になるのが一般的です。&lt;/p&gt;&lt;p&gt;Railsではこのような共通の枠組みを記載したファイルを「&lt;b&gt;レイアウトファイル&lt;/b&gt;」と呼び、&lt;code&gt;app/views/layouts&lt;/code&gt;配下に配置します。&lt;/p&gt;&lt;p&gt;また、コントローラーやアクションで個別で指定したり、レイアウトファイルを非表示にしたり、レイアウトファイルに動的データを渡すことができます。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-default-layout&quot;&gt;デフォルトのレイアウトファイル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-indicate-layout&quot;&gt;レイアウトファイルを指定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ctrl-pass-data&quot;&gt;レイアウトファイルにデータを渡す&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-default-layout&quot;&gt;1. デフォルトのレイアウトファイル&lt;/h3&gt;デフォルトでは、「&lt;b&gt;app/views/layouts/application.html.erb&lt;/b&gt;」がレイアウトファイルとして使われます。&lt;br /&gt;
そして、&lt;code&gt;yield&lt;/code&gt;の箇所が各コントローラーで表示するテンプレートが表示されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/layouts/application.html.erb
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;ControllerTest&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; stylesheet_link_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;all&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; javascript_include_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; csrf_meta_tags&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; yield&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-indicate-layout&quot;&gt;2. レイアウトファイルを指定&lt;/h3&gt;コントローラーに&lt;code&gt;layout&lt;/code&gt;宣言をすることで、&lt;b&gt;コントローラーが使うレイアウトを指定すること&lt;/b&gt;ができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/products_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ProductsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# app/views/layouts/special_layout.html.erbをレイアウトファイルとして使う&lt;/span&gt;
  layout &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;special_layout&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# except(除く)やonly(のみ)を使うことで、レイアウトを指定するアクションを絞ることができる&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# layout &amp;quot;special_layout&amp;quot;, except: [:new, :edit]&lt;/span&gt;
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、renderメソッドの&lt;code&gt;layout&lt;/code&gt;オプションを指定することで、アクション内でレイアウトを指定できる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.all

  &lt;span class=&quot;synComment&quot;&gt;# special_layoutで、index.html.erbを表示する&lt;/span&gt;
  render &lt;span class=&quot;synConstant&quot;&gt;:index&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;layout&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;special_layout&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# レイアウトを使わないで、index.html.erbを表示する&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# render :index, layout: false&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ctrl-pass-data&quot;&gt;3. レイアウトファイルにデータを渡す&lt;/h3&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;レイアウトファイル内では、テンプレートファイルで使用できるインスタンス変数やセッションデータなどすべてのデータにアクセスできます。&lt;/li&gt;
&lt;li&gt;さらに、テンプレートファイルで設定されたインスタンス変数にもアクセスすることができます。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;これを利用することで、ヘッダー、サイドバー、フッターにページ固有のHTMLを表示することができます。&lt;br /&gt;
よくある例として、「ページ固有のタイトル表示」、「ページ固有のコンテンツ表示」の仕方を説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;ページ固有のタイトルを表示する&lt;/h4&gt;
    &lt;p&gt;まず、個々のテンプレートファイルで&lt;code&gt;provide&lt;/code&gt;メソッドでタイトルを設定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# テンプレートファイル
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; provide(:title,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;個別タイトル&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;個別タイトル&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;レイアウトファイルでは設定された値を&lt;code&gt;yeild&lt;/code&gt;で表示します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# レイアウトファイル
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 「Sample Application | 個別タイトル」とタイトルに表示される --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Sample Application | &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; yield(:title)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; stylesheet_link_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;all&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; javascript_include_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;application&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;data-turbolinks-track&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; csrf_meta_tags&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;ページ固有のコンテンツを表示する&lt;/h4&gt;
    &lt;p&gt;まず、個々のテンプレートファイルで&lt;code&gt;content_for&lt;/code&gt;メソッドでコンテンツを作成します。&lt;br /&gt;
ここでは、サイドバーの表示を設定しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# テンプレートファイル
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;テンプレートファイル&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; content_for(:sidebar)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;  do %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;このリストはこのテンプレートが表示された&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;ときだけ表示されます。&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;レイアウトファイルでは設定されたコンテンツを&lt;code&gt;yeild&lt;/code&gt;で表示します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# レイアウトファイル
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; yield&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;sidebar&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;全てのページに表示されるリスト項目&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- テンプレートファイルに定義した sidebar が表示されます。&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;             設定されていない場合はこのli要素は表示されせん --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; yield(:sidebar)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;RailsによるアジャイルWebアプリケーション開発 第4版&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sun, 10 Aug 2014 02:00:00 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815729872238</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Controller</category>
          
            <category>Rails View</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsでリダイレクトをするredirect_toメソッドの使い方</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140808/1407427457</link>
          <description>&lt;p&gt;Railsのコントローラーで他のURLにリダイレクトをするには、&lt;code&gt;redirect_to&lt;/code&gt;メソッドを使います。&lt;br /&gt;
リダイレクト(redirect_toメソッド)とレンダー(renderメソッド)の使い分け、&lt;code&gt;redirect_to&lt;/code&gt;メソッドの使い方について説明します。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;リダイレクトとは&lt;/li&gt;
&lt;li&gt;いつリダイレクト(&lt;code&gt;redirect_to()&lt;/code&gt;)し、いつレンダー(&lt;code&gt;render()&lt;/code&gt;)をするか&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redirect_to&lt;/code&gt;メソッドの使い方&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;1. リダイレクトとは&lt;/h3&gt;
    &lt;p&gt;HTTPリダイレクトは、「サーバがブラウザからアクセスされたリクエスト(URL)を処理できないけど、できるURLを教えるからそっちへアクセスして」という挙動です。&lt;br /&gt;
具体的には、サーバからブラウザにレスポンスとして&lt;b&gt;「リダイレクト先のURL + 永続的（ステータスコード 301）か一時的（ステータスコード 307）かを示すステータス情報」&lt;/b&gt;が返され、ブラウザはそのリダイレクト先のURLに自動でアクセスします。そのため、ユーザからはリダイレクトしているかどうかはほぼ画面表示からだけでは分かりません。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;2. いつリダイレクト(&lt;code&gt;redirect_to&lt;/code&gt;)し、いつレンダー(&lt;code&gt;render&lt;/code&gt;)をするか&lt;/h3&gt;
    &lt;p&gt;基本的に、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;データを追加、更新、削除するときは、&lt;b&gt;「リダイレクト」&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;データの取得して表示するときは、&lt;b&gt;「レンダー」&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;をします。&lt;/p&gt;&lt;p&gt;具体的なソースコードを見てみましょう。&lt;br /&gt;
下記は商品登録画面で「登録」ボタンを押されたときの処理です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;synComment&quot;&gt;# POST /products&lt;/span&gt;
 &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
 &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;:   &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new(product_params)
 &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;: 
 &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;:   &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.save  &lt;span class=&quot;synComment&quot;&gt;# productの保存に成功した場合、商品詳細画面にリダイレクト&lt;/span&gt;
 &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;:       redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品を登録しました。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
 &lt;span class=&quot;synConstant&quot;&gt;7&lt;/span&gt;:   &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# productの保存に失敗した場合、商品登録画面をレンダリング&lt;/span&gt;
 &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;:       render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;
 &lt;span class=&quot;synConstant&quot;&gt;9&lt;/span&gt;:   &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;: &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;上記のソースコードでは、６行目でデータの追加（商品の登録）がされたときにリダイレクトしています。&lt;br /&gt;
もし、ここでリダイレクトの代わりにレンダリング（renderメソッド）だったらどうなるでしょうか。&lt;/p&gt;&lt;p&gt;ユーザが遷移先のページでブラウザの更新ボタン（F5）を押した場合、ブラウザが前回と同様のアクセス（POST /products）を繰り返してしまうので、createアクションが実行され、同じ商品がデータベースに登録されてしまいます。&lt;br /&gt;
ECサイトの商品購入時にこのようなことが起こったら、余計な代金を払わないといけないことになって大変です。&lt;/p&gt;&lt;p&gt;そのため、リダイレクトをしています。リダイレクトをすることにより、前回のアクセスが商品の詳細画面への遷移（GET /products/:id）になるので、更新ボタンを押しても、商品データが重複してデータベースに登録されてしまうという問題は発生しません。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;3. &lt;code&gt;redirect_to&lt;/code&gt;メソッドの使い方&lt;/h3&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;URLにリダイレクト&lt;/h4&gt;
    &lt;p&gt;指定したパスにリダイレクトします。&lt;br /&gt;
このとき、&lt;code&gt;*_path&lt;/code&gt;ではなく&lt;code&gt;*_url&lt;/code&gt;を使います。&lt;br /&gt;
さらに、notice, alertというオプションが使え、flash[:notice]、flash[:alert]に値を設定できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# flash[:notice]にメッセージを設定し、products_urlにリダイレクトする&lt;/span&gt;
redirect_to products_url, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;noticeメッセージ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# flash[:alert]にメッセージを設定し、products_urlにリダイレクトする&lt;/span&gt;
redirect_to products_url, &lt;span class=&quot;synConstant&quot;&gt;alert&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;alertメッセージ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 商品の詳細画面にリダイレクトする&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Railsは@productを、商品の詳細画面へのURLに自動で変換する&lt;/span&gt;
redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;参照元にリダイレクト&lt;/h4&gt;
    &lt;p&gt;リクエスト内のRefererヘッダ（HTTP_REFERER）で指定されたURLにリダイレクトします。&lt;br /&gt;
基本的にはRefererヘッダには前回アクセスしたURLが格納されています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;redirect_to(&lt;span class=&quot;synConstant&quot;&gt;:back&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;永続的なリダイレクト&lt;/h4&gt;
    &lt;p&gt;デフォルトではすべてのリダイレクトが一時的なもの（ステータスコード 307）です。&lt;br /&gt;
サイト移動など永続的なリダイレクトを実施したい場合は、ステータスコードを指定する必要があります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;redirect_to(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;http://new.home&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;301&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
よくわからない箇所や間違っている箇所がありましたら、コメント頂けると助かります。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;</description>
          <pubDate>Fri, 08 Aug 2014 01:04:17 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815729801985</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Controller</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsのViewでのrenderメソッドの使い方</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140807/1407419013</link>
          <description>&lt;p&gt;RailsのViewでの&lt;code&gt;render&lt;/code&gt;メソッドの使い方について説明します。&lt;br /&gt;
&lt;code&gt;render&lt;/code&gt;メソッドは、「コントローラー(Controller)」と「ビュー(View)」それぞれにあります。&lt;br /&gt;
ここではビューのrenderメソッドの使い方を示します。&lt;/p&gt;&lt;p&gt;&lt;i&gt;コントローラーのrenderメソッドの使い方を知りたい場合は、&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20141125/1416918957&quot;&gt;こちら&lt;/a&gt;へ&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#render-view-desc&quot;&gt;ビュー内での&lt;code&gt;render&lt;/code&gt;メソッドについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#render-view-partial&quot;&gt;部分テンプレートを表示するrenderメソッド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#render-view-object&quot;&gt;部分テンプレートにオブジェクトを渡すrenderメソッド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#render-view-collection&quot;&gt;部分テンプレートでコレクションを表示するrenderメソッド&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;render-view-desc&quot;&gt;1. ビュー内での&lt;code&gt;render&lt;/code&gt;メソッドについて&lt;/h3&gt;ビュー内での&lt;code&gt;render&lt;/code&gt;メソッドは、部分テンプレート（partial）を表示するために使います。&lt;br /&gt;
部分テンプレートとは、共通のビューの表示を別ファイルに切り出すことができ、様々なビューから呼び出すことができます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;render-view-partial&quot;&gt;2. 部分テンプレートを表示するrenderメソッド&lt;/h3&gt;一般的な例として、新規と編集ページのフォーム表示部分は部分テンプレートになっているので、それを説明します。&lt;br /&gt;
&lt;b&gt;部分テンプレートは必ずアンダースコア（_）で始まる必要があります。&lt;/b&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 部分テンプレート（呼び出される側）&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/views/products/_form.html.erb&lt;/span&gt;

&amp;lt;%= form_for(&lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;f&lt;/span&gt;| %&amp;gt;
  &amp;lt;div &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= f.label &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt; %&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;%= f.text_field &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt; %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;=&amp;quot;actions&amp;quot;&amp;gt;
    &amp;lt;%= f.submit %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt; %&amp;gt;
&lt;/pre&gt;&lt;p&gt;部分テンプレートを呼び出す側では、renderメソッドと引数にアンダースコア抜きのファイル名を指定します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 新規画面（呼び出し側）&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/views/products/new.html.erb&lt;/span&gt;
&amp;lt;h1&amp;gt;&lt;span class=&quot;synType&quot;&gt;New&lt;/span&gt; product&amp;lt;/h1&amp;gt;

&amp;lt;%= render &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; %&amp;gt;

&amp;lt;%= link_to &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Back&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, products_path %&amp;gt;
&lt;/pre&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 編集画面（呼び出し側）&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/views/products/edit.html.erb&lt;/span&gt;
&amp;lt;h1&amp;gt;&lt;span class=&quot;synType&quot;&gt;Editing&lt;/span&gt; product&amp;lt;/h1&amp;gt;

&amp;lt;%= render &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; %&amp;gt;

&amp;lt;%= link_to &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; %&amp;gt; |
&amp;lt;%= link_to &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Back&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, products_path %&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;render-view-object&quot;&gt;3. 部分テンプレートにオブジェクトを渡すrenderメソッド&lt;/h3&gt;renderメソッドは、下記のようにオブジェクトを渡すことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 部分テンプレートを呼び出す側&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/views/products/index.html.erb&lt;/span&gt;
...
&amp;lt;% products.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;product&lt;/span&gt;| %&amp;gt;
  &amp;lt;!-- &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;object:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;の部分は任意の名前で良いです。
     部分テンプレート内ではその名前でオブジェクトにアクセスできます。--&amp;gt;
  &amp;lt;%= render &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;object&lt;/span&gt;: product %&amp;gt;
&amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt; %&amp;gt;
...
&lt;/pre&gt;&lt;p&gt;部分テンプレート側では、「呼び出し側で指定した名前」でオブジェクトにアクセスできます。（&quot;object&quot;でアクセスしている）&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 部分テンプレート側&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/views/products/_product.html.erb&lt;/span&gt;
&amp;lt;%= object.name %&amp;gt; |
&amp;lt;%= object.price %&amp;gt; |
&amp;lt;%= link_to &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, object %&amp;gt;
&amp;lt;%= link_to &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Edit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, edit_product_path(object) %&amp;gt;
&amp;lt;%= link_to &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, object, &lt;span class=&quot;synConstant&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:delete&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;data&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;confrim&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Are you sure?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; } %&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;render-view-collection&quot;&gt;4. 部分テンプレートでコレクションを表示するrenderメソッド&lt;/h3&gt;部分テンプレートでコレクションを表示する場合、特定の条件が整っているとループ処理などを省くことができます。上記の例はコレクションを表示しているので書き直してみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;呼び出し側では、renderメソッドにコレクションを渡す（例：@products）&lt;/li&gt;
&lt;li&gt;呼び出される側では、ファイル名をコレクションの単数系にする（例：_product.html.erb）。さらに、オブジェクトにはその単数系でアクセスできます。（例：product.&lt;i&gt;method&lt;/i&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 部分テンプレートを呼び出す側&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/views/products/index.html.erb&lt;/span&gt;
...
&amp;lt;!-- コレクションの変数を渡すとループ処理が必要なくなる。
   &lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;は変数名の単数系の部分テンプレートを呼び出す。
   今回は、app/views/products/_product.html.erb --&amp;gt;
&amp;lt;%= render &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt; %&amp;gt;
...
&lt;/pre&gt;&lt;p&gt;部分テンプレート側では、「変数名の単数系の名前」でオブジェクトにアクセスできます。&lt;br /&gt;
（以下では、&quot;product&quot;でアクセスしています）&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 部分テンプレート側&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/views/products/_product.html.erb&lt;/span&gt;
&amp;lt;%= product.name %&amp;gt; |
&amp;lt;%= product.price %&amp;gt; |
&amp;lt;%= link_to &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, product %&amp;gt;
&amp;lt;%= link_to &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Edit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, edit_product_path(product) %&amp;gt;
&amp;lt;%= link_to &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, product, &lt;span class=&quot;synConstant&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:delete&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;data&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;confrim&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Are you sure?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; } %&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Thu, 07 Aug 2014 22:43:33 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815729761679</guid>
          
            <category>Rails初級</category>
          
            <category>Rails View</category>
          
        </item>
      
    
  </channel>
</rss>
