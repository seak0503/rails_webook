<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>Rails Model - Rails Webook</title>
    <link>http://ruby-rails.hatenadiary.com/category/Rails%20Model</link>
    <description>自社のECを開発している会社で働いています。Rails情報やサービスを成長させる方法を書いていきます</description>
    <lastBuildDate>Fri, 18 Dec 2015 02:44:31 +0900</lastBuildDate>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <generator>Hatena::Blog</generator>
    
      
      
        <item>
          <title>いまさらながらRails4.1から導入されたEnumが便利なのでまとめてみた</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150710/1436461745</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150710/20150710020807.jpg&quot; alt=&quot;f:id:nipe880324:20150710020807j:plain:w360&quot; title=&quot;f:id:nipe880324:20150710020807j:plain:w360&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:360px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;&lt;a href=&quot;https://www.flickr.com/photos/21561428@N03/&quot;&gt;las - initially (Lori Semprevio) | Flickr - Photo Sharing!&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Rails4.1から導入されたEnumの挙動について忘れることがあるので簡単にまとめました。&lt;br /&gt;
enumの定義、enumを定義したことにより使える便利なメソッドなどをまとめました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#ar-enum-define&quot;&gt;enumのスキーマ定義&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ar-enum-method&quot;&gt;enumで使えるメソッド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ar-enum-search&quot;&gt;enumの値を検索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ar-enum-notice&quot;&gt;enumの注意点&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.3&lt;/li&gt;
&lt;li&gt;Ruby 2.2.2&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;h3 id=&quot;ar-enum-define&quot;&gt;enumの定義&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;次のように、&lt;code&gt;enum&lt;/code&gt;、属性名、属性の値（ハッシュ）で指定することでEnumを定義することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# enumの定義（キーと数字のハッシュを渡す。数字がDBカラムに設定される）&lt;/span&gt;
  enum &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;draft&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;published&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
DBカラムのデフォルト値をenumの初期値と合わせておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateArticles&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.integer &lt;span class=&quot;synConstant&quot;&gt;:status&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;null&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;

      t.timestamps &lt;span class=&quot;synConstant&quot;&gt;null&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    add_index &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:status&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;ar-enum-method&quot;&gt;enumで使えるメソッド&lt;/h3&gt;enumで定義したハッシュの&lt;code&gt;キー名+?&lt;/code&gt;でそのキーの値が設定されているかどうかを返します。&lt;br /&gt;
また、&lt;code&gt;キー名+!&lt;/code&gt;で値を設定し、DBに保存します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; #&amp;lt;Article id: nil, status: 0, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

article.status &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;draft&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# statusがdraftか確認&lt;/span&gt;
article.draft? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# statusがpublishedか確認&lt;/span&gt;
article.published? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; false&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# statusをpublishedに設定&lt;/span&gt;
article.published!
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; INSERT INTO &amp;quot;articles&amp;quot; (&amp;quot;status&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;updated_at&amp;quot;) VALUES (?, ?, ?)  [[&amp;quot;status&amp;quot;, 1], [&amp;quot;created_at&amp;quot;, &amp;quot;2015-07-09 ...&amp;quot;], [&amp;quot;updated_at&amp;quot;, &amp;quot;2015-07-09 ...&amp;quot;]]&lt;/span&gt;

article.status &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;published&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
enumで指定した属性名の複数形のメソッドを呼び出すと、enumで指定したハッシュを取得できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# enumの属性名の複数形でハッシュを取得できる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.statuses &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; {&amp;quot;draft&amp;quot;=&amp;gt;0, &amp;quot;published&amp;quot;=&amp;gt;1}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ハッシュとしてアクセスできる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.statuses[&lt;span class=&quot;synConstant&quot;&gt;:draft&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 0&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
enumで定義したハッシュの値以外を設定しようとするとexceptionが発生します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# キー値で設定できる&lt;/span&gt;
article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;)
article.published? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# バリューでも設定できる&lt;/span&gt;
article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.statuses[&lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;])
article.published? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# ハッシュで定義されていない値を設定しようとするとエラーが発生します&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;90&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; ArgumentError: &#39;90&#39; is not a valid status&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:hoge&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; ArgumentError: &#39;hoge&#39; is not a valid status&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;ar-enum-search&quot;&gt;Enumの値を検索&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;enumのキーをスコープとして使うことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.published.where(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at &amp;gt; ?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,  &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;.days.ago)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; SELECT &amp;quot;articles&amp;quot;.* FROM &amp;quot;articles&amp;quot; WHERE &amp;quot;articles&amp;quot;.&amp;quot;status&amp;quot; = ? AND (created_at &amp;gt; &#39;2015-07-06 ...&#39;)  [[&amp;quot;status&amp;quot;, 1]]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# また、複数のキーを指定することもできますが、ANDなので検索結果は必ず0になってしまいます&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.draft.published
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; SELECT &amp;quot;articles&amp;quot;.* FROM &amp;quot;articles&amp;quot; WHERE &amp;quot;articles&amp;quot;.&amp;quot;status&amp;quot; = ? AND &amp;quot;articles&amp;quot;.&amp;quot;status&amp;quot; = ?  [[&amp;quot;status&amp;quot;, 0], [&amp;quot;status&amp;quot;, 1]]&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; #&amp;lt;ActiveRecord::Relation []&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
検索するときは次のようにもできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.where(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;status &amp;lt;&amp;gt; ?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.statuses[&lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;])
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; SELECT &amp;quot;articles&amp;quot;.* FROM &amp;quot;articles&amp;quot; WHERE (status &amp;lt;&amp;gt; 1)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;ar-enum-notice&quot;&gt;Enumの注意点&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;enumを次のように配列でも定義できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  enum &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:draft&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;]
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;その場合、DBの値は、配列の添え字と同じ値になります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.create
article.status &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; draft&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# DB値は 0&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そのため、値の追加、削除をしたときに、配列の追加場所を気にしないと、DBの値とenumのカラムの意味が異なり、バグが発生してしまいます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# judgedを追加。judgedの値は配列の添え字の1になるので、&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# publishedだった記事がjudgedとして判断されてしまう&lt;/span&gt;
  enum &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:draft&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:judged&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;]
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.statuses[&lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;])
article.status     &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;published&amp;quot; (statusが1として登録される)&lt;/span&gt;
article.published? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# enumの定義を更新する(judgedが1になる)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 先ほど登録したArticleのstatusを確認するとjudged(1)になる&lt;/span&gt;
article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.last
article.status  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;judged&amp;quot;&lt;/span&gt;
article.judged? &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/blob/master/activerecord/lib/active_record/enum.rb&quot;&gt;rails/enum.rb at master &amp;middot; rails/rails &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sugamasao.hatenablog.com/entry/2014/03/26/110759&quot;&gt;Rails 4.1&amp;#x306E;enum&amp;#x306E;&amp;#x6319;&amp;#x52D5; - &amp;#x3059;&amp;#x304C;&amp;#x30D6;&amp;#x30ED;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Fri, 10 Jul 2015 02:09:05 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450100885818</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでRoarを使ってAPIサーバーとAPIクライアントを作る</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150708/1436284476</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150708/20150708005750.jpg&quot; alt=&quot;f:id:nipe880324:20150708005750j:plain:w420&quot; title=&quot;f:id:nipe880324:20150708005750j:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;&lt;a href=&quot;https://www.flickr.com/photos/130732751@N03/&quot;&gt;samuelrodgers752 | Flickr - Photo Sharing!&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/apotonick/roar&quot; target=&quot;_blank&quot;&gt;Roar&lt;/a&gt;はRepresenterを使ってRESTなAPIをパース、レンダーすることができるgemです。&lt;br /&gt;
つまり、Roarを使うことで、RailsでJSONを返すAPIサーバーを作成したり、逆に、APIサーバーにアクセスするAPIクライアントをRubyで作れます。&lt;/p&gt;&lt;p&gt;下記に記載しましたが、有名なgemに比べて、メリットとしては、Rubyでサーバーとクライアントを作る場合、同じような箇所を幾分か共有できる点です。&lt;br /&gt;
デメリットとしては、個人的にパースやレンダー時にエラーが発生してもデバッグしづらく対処しづらいことです。&lt;/p&gt;&lt;p&gt;サーバー側でAPIを作る場合、「&lt;a href=&quot;https://www.ruby-toolbox.com/categories/API_Builders&quot; target=&quot;_blank&quot;&gt;Ruby Toolbox - API Builders&lt;/a&gt;」によると、jbuilderやGrape、Rablなどが人気のようです。&lt;br /&gt;
APIにアクセスするクライアントを作る場合、「&lt;a href=&quot;https://www.ruby-toolbox.com/categories/http_clients&quot; target=&quot;_blank&quot;&gt;Ruby Toolbox - HTTP Clients&lt;/a&gt;」によるとRest-ClientやFaradayなどが人気です。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    &lt;p&gt;&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-usage&quot;&gt;1. Roarの簡単な使い方&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-install&quot;&gt;1.1. Railsにインストール&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-define-representer&quot;&gt;1.2. Representerの定義&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-render&quot;&gt;1.3. レンダー(JSON, Hash, XML)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-parse&quot;&gt;1.4. パース(JSON, Hash, XML)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-decorator&quot;&gt;1.5. Decoratorの定義と使い方&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-corrabolation&quot;&gt;2. Roarでクライアントとサーバーの連携&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-abstract&quot;&gt;2.1. 概要&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-show&quot;&gt;2.2. showアクション(単一アイテムの取得)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-index&quot;&gt;2.3. indexアクション(複数アイテムの取得)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-cud&quot;&gt;2.4. create, update, destroyアクション(アイテムの作成、更新、削除)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roar-cud&quot;&gt;2.5. 多対多関連のCUD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.3&lt;/li&gt;
&lt;li&gt;Ruby 2.2.0&lt;/li&gt;
&lt;li&gt;Roar 1.0.1&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;roar-usage&quot;&gt;1. Roarの簡単な使い方&lt;/h3&gt;&lt;h3 id=&quot;roar-install&quot;&gt;1.1. Railsにインストール&lt;/h3&gt;&lt;code&gt;Gemfile&lt;/code&gt;に追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;roar-rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt;を実施すれば完了です。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;roar-define-representer&quot;&gt;1.2. Representerの定義&lt;/h3&gt;&lt;code&gt;rails g representer&lt;/code&gt;コマンドでRepresenterを作ることができます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g representer Tweet id content
      create  app/representers/tweet_representer.rb&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;app/representers&lt;/code&gt;配下にRpresenterが作成されます。&lt;br /&gt;
&lt;code&gt;property&lt;/code&gt;でRepresenterでレンダーやパースする値を定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/representers/user_representer.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;

  property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
  property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Representerの定義では、他にも、パースやレンダー時に値を変換したり、パースやレンダーをスキップしたりといろいろとカスタマイズができるので、&lt;br /&gt;
困ったら以下のREADMEを読むと良いと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apotonick/roar&quot; target=&quot;_blank&quot;&gt;roar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apotonick/representable&quot; target=&quot;_blank&quot;&gt;representable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apotonick/roar-rails&quot; target=&quot;_blank&quot;&gt;roar-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-render&quot;&gt;1.3. レンダー(JSON, Hash, XML)&lt;/h3&gt;定義したRepresenterを&lt;code&gt;extend&lt;/code&gt;すし、&lt;code&gt;to_json&lt;/code&gt;、&lt;code&gt;to_hash&lt;/code&gt;メソッドを呼ぶことで、JSONやHashを出力することができます。&lt;br /&gt;
&lt;code&gt;TweetRepresenter&lt;/code&gt;で&lt;code&gt;id&lt;/code&gt;と&lt;code&gt;content&lt;/code&gt;を定義しているのでその2つしか出力されません。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;; &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
tweet.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)

tweet.to_json
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&amp;quot;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;content\&amp;quot;:\&amp;quot;Hoge\&amp;quot;}&amp;quot;&lt;/span&gt;

tweet.to_hash
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; {&amp;quot;id&amp;quot;=&amp;gt;1, &amp;quot;content&amp;quot;=&amp;gt;&amp;quot;Hoge&amp;quot;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、RailsでJSONを返したい場合は、次のようにします。&lt;br /&gt;
&lt;code&gt;render json:&lt;/code&gt;は引数に渡したオブジェクトの&lt;code&gt;to_json&lt;/code&gt;メソッドを呼び出した結果を返します。&lt;br /&gt;
そのため、Representerで定義した&lt;code&gt;id&lt;/code&gt;と&lt;code&gt;content&lt;/code&gt;のみが返されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/tweets_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;TweetsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  skip_before_action &lt;span class=&quot;synConstant&quot;&gt;:verify_authenticity_token&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
    tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;]).extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
    render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: tweet
    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&amp;quot;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;content\&amp;quot;:\&amp;quot;Hoge\&amp;quot;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
XML形式で出力したい場合は、Representerに&lt;code&gt;Roar::XML&lt;/code&gt;をincludeし、&lt;code&gt;to_xml&lt;/code&gt;メソッドを呼び出します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;; &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;XML&lt;/span&gt;

  property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
  property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.last
tweet.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
tweet.to_xml
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;&amp;lt;tweet&amp;gt;\n  &amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;\n  &amp;lt;content&amp;gt;Hoge&amp;lt;/content&amp;gt;\n&amp;lt;/tweet&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-parse&quot;&gt;1.4. パース(JSON, Hash, XML)&lt;/h3&gt;定義したRepresenterを&lt;code&gt;extend&lt;/code&gt;すし、&lt;code&gt;to_json&lt;/code&gt;、&lt;code&gt;to_hash&lt;/code&gt;メソッドを呼ぶことで、JSONやHashを出力することができます。&lt;br /&gt;
&lt;code&gt;TweetRepresenter&lt;/code&gt;で&lt;code&gt;id&lt;/code&gt;と&lt;code&gt;content&lt;/code&gt;を定義しているのでその2つしか出力されません。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;; &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
tweet.from_json(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;content\&amp;quot;:\&amp;quot;Hoge\&amp;quot;}&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Tweet id: 1, content: &amp;quot;Hoge&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
tweet.from_hash({ &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; })
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Tweet id: 1, content: &amp;quot;Hoge&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# from_hashはHashのキーがシンボルの場合うまく認識してくれません。&lt;/span&gt;
tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
tweet.from_hash({ &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; })
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Tweet id: nil, content: nil, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# with_indifferent_accessを使いましょう&lt;/span&gt;
tweet.from_hash({ &lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }.with_indifferent_access)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Tweet id: 1, content: &amp;quot;Hoge&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、RailsでJSONやHashを受け取って、オブジェクトを作成したい場合は、&lt;code&gt;from_json&lt;/code&gt;や&lt;code&gt;from_hash&lt;/code&gt;を使います。&lt;br /&gt;
Representerで定義した&lt;code&gt;id&lt;/code&gt;と&lt;code&gt;content&lt;/code&gt;のみが取得してオブジェクトを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/tweets_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;TweetsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  skip_before_action &lt;span class=&quot;synConstant&quot;&gt;:verify_authenticity_token&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
    tweet.from_hash(params[&lt;span class=&quot;synConstant&quot;&gt;:tweet&lt;/span&gt;])      &lt;span class=&quot;synComment&quot;&gt;# httpリクエストの場合&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# tweet.from_json(request.body.read) # jsonリクエストの場合&lt;/span&gt;

    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; tweet.save
      render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: tweet, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:created&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: tweet.errors.full_messages, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:unprocessable_entity&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
XMLをパースしたい場合も、レンダーと同じようにRepresenterに&lt;code&gt;Roar::XML&lt;/code&gt;をincludeし、&lt;code&gt;from_xml&lt;/code&gt;を呼び出します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;; &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;XML&lt;/span&gt;

  property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
  property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

xml =&amp;lt;&amp;lt;&lt;span class=&quot;synSpecial&quot;&gt;XML&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;tweet&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  &amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  &amp;lt;content&amp;gt;Hoge&amp;lt;/content&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;/tweet&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;XML&lt;/span&gt;

tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new
tweet.extend(::&lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;)
tweet.from_xml xml
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Tweet id: 1, content: &amp;quot;Hoge&amp;quot;, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-decorator&quot;&gt;1.5. Decoratorの定義と使い方&lt;/h3&gt;パフォーマンスやオブジェクト汚染のため&lt;code&gt;extend&lt;/code&gt;が嫌いな人のために、デコレーターで実行することもできます。&lt;br /&gt;
次のように&lt;code&gt;Roar::Decorator&lt;/code&gt;を継承することでデコレーターを定義します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/representers/tweet_representer.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Decorator&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Hypermedia&lt;/span&gt;

  property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
  property &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# Decorator内の represented はデコレートするモデルを表します。&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
作成したデコレーターでラップします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/tweets_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Api&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;TweetsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  skip_before_action &lt;span class=&quot;synConstant&quot;&gt;:verify_authenticity_token&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
    tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
    decorator = &lt;span class=&quot;synType&quot;&gt;TweetRepresenter&lt;/span&gt;.new(tweet)
    render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: decorator
    &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&amp;quot;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;content\&amp;quot;:\&amp;quot;Hoge\&amp;quot;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;roar-corrabolation&quot;&gt;2. Roarでクライアントとサーバーの連携&lt;/h3&gt;&lt;h3 id=&quot;roar-abstract&quot;&gt;2.1. 概要&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;Roarでサーバー側のRailsアプリ(Tweet)とクライアント側のRailsアプリ(Blog)を連携するようにします。&lt;br /&gt;
サンプルは&lt;a href=&quot;https://github.com/nipe0324/rails_samples/tree/master/roar_test&quot; target=&quot;_blank&quot;&gt;roar_test - GitHub&lt;/a&gt;にあります。&lt;/p&gt;&lt;p&gt;シナリオとしては、Tweetアプリ(サーバー側)を既に運用しており、新しいBlogアプリ(クライアント側)を立ち上げようと考えていて、Tweetアプリにデータを公開したいというという感じをイメージして作りました。&lt;br /&gt;
ER図は次の通りで、クライアント側は&lt;code&gt;artciles&lt;/code&gt;しかないが、&lt;code&gt;artcile&lt;/code&gt;を投稿した時に、合わせてTag付きでTweetも投稿できるみたいなことをしています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150708/20150708005219.png&quot; alt=&quot;f:id:nipe880324:20150708005219p:plain:w420&quot; title=&quot;f:id:nipe880324:20150708005219p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;詳細はGitHubを参照してみればいいので、RoarでCRUDをしながら連携する方法の抜粋（かなり雑です）を記載しました。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;roar-show&quot;&gt;2.2. showアクション(単一アイテムの取得)&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;クライアントの詳細画面で、articleとtweetを表示します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150708/20150708005205.png&quot; alt=&quot;f:id:nipe880324:20150708005205p:plain:w420&quot; title=&quot;f:id:nipe880324:20150708005205p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;クライアントのコントローラーは次の通りです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/artcles_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ローカル(クライアント)DBから取得&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

  &lt;span class=&quot;synComment&quot;&gt;# Roarでサーバー側からデータを取得&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build.show(&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.remote_tweet_id)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Roarの定義とクライアントのコードです。&lt;br /&gt;
&lt;code&gt;Roar::Client&lt;/code&gt;をincludeすることで、get, post, put, deleteメソッドがincludeされます。&lt;br /&gt;
&lt;code&gt;build&lt;/code&gt;メソッドでクライアントを作成し、&lt;code&gt;show&lt;/code&gt;メソッドで、サーバー側のRailsにアクセスしています。&lt;br /&gt;
レスポンスは、&lt;code&gt;Reprsenter&lt;/code&gt;と&lt;code&gt;Client&lt;/code&gt;で定義されている、id, content, tagsをパースし、OpenStructの値として代入します。&lt;br /&gt;
このとき、&lt;code&gt;as&lt;/code&gt;オプションを使うことで、Tweet.id を Article.remote_tweet_id に変換しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/representer/json/tweet.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;OpenStruct&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      collection_representer &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;

      property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;

      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# only client side&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# ServerからClientへ受け取ったときの変換処理&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:remote_tweet_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;as&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;,    &lt;span class=&quot;synComment&quot;&gt;# Tweet.id =&amp;gt; Article.remote_tweet_id に変換&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;skip_render&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# Clientの作成メソッド(Singular用)&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;build&lt;/span&gt;
        ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;)
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# APIのURL&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;api_url&lt;/span&gt;
        &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;http://localhost:3001/api/tweets&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# リモートのTweetsController#showにアクセス&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;(id)
        get(&lt;span class=&quot;synConstant&quot;&gt;uri&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.api_url&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;id&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;as&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
サーバー側では、単純にServerをextendしているだけです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/api/tweets_controller.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
  render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.extend(::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;)
    &lt;span class=&quot;synComment&quot;&gt;# {&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   &amp;quot;id&amp;quot;: 1,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   &amp;quot;content&amp;quot;: &amp;quot;tweet 1&amp;quot;,&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   &amp;quot;tags&amp;quot;: [&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#     { &amp;quot;id&amp;quot;: 1000, &amp;quot;name&amp;quot;: &amp;quot;tag 1&amp;quot; },&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#     { &amp;quot;id&amp;quot;: 1001, &amp;quot;name&amp;quot;: &amp;quot;tag 2&amp;quot; }&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   ]&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# }&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
サーバー側のRepresenterです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;OpenStruct&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      collection_representer &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;

      property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;

      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;

      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;,
                        &lt;span class=&quot;synConstant&quot;&gt;parse_strategy&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:find_or_instantiate&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-index&quot;&gt;2.3. indexアクション(複数アイテムの取得)&lt;/h3&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;コレクションの取得の場合、コレクション用のクライアントを作成し、一覧を取得します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/articls_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@articles&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.all
  &lt;span class=&quot;synComment&quot;&gt;# コレクション用のクライアントを作成し、allメソッドで一覧を取得&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweets&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build_collection.all
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;コレクションを取得するには、配列をextendします。また、&lt;code&gt;Representer.for_collection&lt;/code&gt;をextendする必要が有ります。&lt;br /&gt;
&lt;code&gt;all&lt;/code&gt;メソッドは、サーバー側のTweetsController#indexアクションにアクセスします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/representers/json/tweet.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;OpenStruct&lt;/span&gt;
    ...

    &lt;span class=&quot;synComment&quot;&gt;# only client side&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
      ...

      &lt;span class=&quot;synComment&quot;&gt;# Clientの作成メソッド(Collection用)&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;build_collection&lt;/span&gt;
        [].extend(::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;).extend(::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;.for_collection)
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# リモートのTweetsController#indexにアクセス&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;all&lt;/span&gt;
        get(&lt;span class=&quot;synConstant&quot;&gt;uri&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.api_url, &lt;span class=&quot;synConstant&quot;&gt;as&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
      &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
サーバーのコントローラーでも&lt;code&gt;for_collection&lt;/code&gt;を使って、コレクションを返すようにしています。&lt;br /&gt;
&gt;|ruby&lt;br /&gt;
def index&lt;br /&gt;
  @tweets = Tweet.all&lt;br /&gt;
  render json: @tweets.extend(::Json::Tweet::Server.for_collection)&lt;br /&gt;
    # [&lt;br /&gt;
    #   {&lt;br /&gt;
    #     &quot;id&quot;: 1,&lt;br /&gt;
    #     &quot;content&quot;: &quot;tweet 1&quot;,&lt;br /&gt;
    #     &quot;tags&quot;: [&lt;br /&gt;
    #       { &quot;id&quot;: 1000, &quot;name&quot;: &quot;tag 1&quot; },&lt;br /&gt;
    #       { &quot;id&quot;: 1001, &quot;name&quot;: &quot;tag 2&quot; }&lt;br /&gt;
    #     ]&lt;br /&gt;
    #   },&lt;br /&gt;
    #   {&lt;br /&gt;
    #     &quot;id&quot;: 2,&lt;br /&gt;
    #     &quot;content&quot;: &quot;tweet 2&quot;,&lt;br /&gt;
    #     &quot;tags&quot;: []&lt;br /&gt;
    #   }&lt;br /&gt;
    # ]&lt;br /&gt;
end&lt;br /&gt;
|&lt;/p&gt;

&lt;/div&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-cud&quot;&gt;2.4. create, update, destroyアクション(アイテムの作成、更新、削除)&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;コレクションを作成し、作成、更新、削除を行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/articles_controller.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# POST /articles&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(article_params)

  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build.from_hash(params[&lt;span class=&quot;synConstant&quot;&gt;:article&lt;/span&gt;])
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.create
  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.remote_tweet_id = &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.remote_tweet_id

  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.save
    redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Article was successfully created.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
    render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# PATCH/PUT /articles/1&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;update&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build.from_hash(params[&lt;span class=&quot;synConstant&quot;&gt;:article&lt;/span&gt;])
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.update(&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.remote_tweet_id)

  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.update(article_params)
    redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Article was successfully updated.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
    render &lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DELETE /articles/1&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;destroy&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])

  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.destroy(&lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.remote_tweet_id)

  &lt;span class=&quot;synIdentifier&quot;&gt;@article&lt;/span&gt;.destroy
  redirect_to articles_url, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Article was successfully destroyed.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;roar-cud&quot;&gt;2.5. 多対多関連のCUD&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;TweetとTagは多対多関係です。&lt;/p&gt;&lt;p&gt;まず、クライアントサイドでは次のようにして、リクエストを送ります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 画面から次のようなパラメータがフォームから送られてきます。&lt;/span&gt;
{
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;✓&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;authenticity_token&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;xxx&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; {
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;article 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;client article&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; [{ &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;new tag&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }]
  },
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Update Article&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
}

&lt;span class=&quot;synComment&quot;&gt;# コントローラーで画面のフォーム情報をfrom_hashでパースして取得します&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# createメソッドでリクエストを送ります。&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
  ...
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt; = ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;.build.from_hash(params[&lt;span class=&quot;synConstant&quot;&gt;:article&lt;/span&gt;])
  &lt;span class=&quot;synIdentifier&quot;&gt;@tweet&lt;/span&gt;.create
  ...
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# from_hashのパース時に取得されるデータは次のように定義しています。&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;OpenStruct&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      collection_representer &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;

      property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;

      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;

      &lt;span class=&quot;synComment&quot;&gt;# ClientからServerへのリクエストを送るときの変換処理&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;as&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;,  &lt;span class=&quot;synComment&quot;&gt;# Article.title =&amp;gt; Tag.content 用にキー名を変換&lt;/span&gt;
               &lt;span class=&quot;synConstant&quot;&gt;render_filter&lt;/span&gt;: -&amp;gt; (value, _doc, _args) { value.to_s[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;] + &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; } &lt;span class=&quot;synComment&quot;&gt;# Twitter用に文字列を短くする&lt;/span&gt;
      collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;OpenStruct&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      collection_representer &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;

      property &lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;
      property &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# only client side&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;
      &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Client&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;サーバーサイドでは次の通りです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# POSTされるjsonデータは次のようになりmす&lt;/span&gt;
{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;client art...&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;[{&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}, {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}, {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;new tag&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}] }

&lt;span class=&quot;synComment&quot;&gt;# controllerで取得し、from_jsonでパースし、値を設定し保存&lt;/span&gt;
tweet = &lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;.new.extend(::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tweet&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;).from_json(request.body.read)
tweet.save

&lt;span class=&quot;synComment&quot;&gt;# パースの内容はRepresenterで定義&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# parse_strategy: :find_or_instantiate はidが既にあればそのインスタンスを返し、&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# idがなければ新しいインスタンスを作成する&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Roar&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;JSON&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Representer&lt;/span&gt;

  collection &lt;span class=&quot;synConstant&quot;&gt;:tags&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;extend&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Json&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Server&lt;/span&gt;,
                    &lt;span class=&quot;synConstant&quot;&gt;parse_strategy&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:find_or_instantiate&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;
</description>
          <pubDate>Wed, 08 Jul 2015 00:54:36 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450100658763</guid>
          
            <category>Rails中級</category>
          
            <category>API</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでActiveRecord/Arelを使って複雑なSELECT文を実行する方法</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150428/1430154446</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150428/20150428020246.jpg&quot; alt=&quot;f:id:nipe880324:20150428020246j:plain&quot; title=&quot;f:id:nipe880324:20150428020246j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Rails(ActiveRecord/Arel)で複雑なSELECT文を実行する方法をまとめました。&lt;br /&gt;
メリット、デメリットや使いどころなどまとめ途中なのであしからずお願いします。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.2.0&lt;/li&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;Arel  6.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#complex-sql-conclusion&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#complex-sql-preparation&quot;&gt;ER図&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#complex-sql-active-record&quot;&gt;Active Record&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#complex-sql-arel&quot;&gt;Arel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#complex-sql-raw-sql&quot;&gt;生SQL&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;complex-sql-conclusion&quot;&gt;1. まとめ&lt;/h3&gt;まず、個人的な意見として、それぞれの方法のメリット・デメリットをまとめました。&lt;/p&gt;&lt;p&gt;&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;&lt;th&gt;メリット&lt;/th&gt;&lt;th&gt;デメリット&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ActiveRecord&lt;/td&gt;
      &lt;td&gt;&lt;br /&gt;
      　・1, 2テーブル内での検索なら簡単に処理をかけれる&lt;br /&gt;
      　・返り値がActiveRecord::Relationやモデルのインスタンスなので扱いやすい&lt;br /&gt;
      &lt;/td&gt;
      &lt;td&gt;&lt;br /&gt;
      　・複数のテーブルにまたがる検索で、検索条件、他テーブルのカラム値の扱いがしずらい&lt;br /&gt;
      　・CASE WHENやカラムなど行いづらい&lt;br /&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Arel&lt;/td&gt;
      &lt;td&gt;文字列でなくメソッドで検索文を記載できる（個人的にあまりメリットが見えていない）&lt;/td&gt;
      &lt;td&gt;RailsのプライベートAPIなので使うべきではない。&lt;a href=&quot;https://github.com/rails/rails/issues/16978&quot; target=&quot;_blank&quot;&gt;参考&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;生SQL&lt;/td&gt;
      &lt;td&gt;複雑なSQLをかける&lt;/td&gt;
      &lt;td&gt;返り値がHashなのでモデルのメソッドが使いずらい&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;メインでよく行う処理では比較的簡単なSQL（ActiveRecordで十分足りる）で処理をおこなえ、レポート集計などは複雑なSQL（生のSQL）でもしょうがないと思います。&lt;br /&gt;
こういう状態が、保守性、パフォーマンス、メンテナンス性などに優れた良いDB設計ができているということだと個人的に思います。&lt;br /&gt;
つまり、メイン処理のSQLが複雑になってしまうということは、どこかでDB設計のミスを犯していたり、パフォーマンスのために正規化を崩しすぎてしまったのではと思います。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;complex-sql-preparation&quot;&gt;2. ER図&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;ER図&lt;/h3&gt;
    &lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150428/20150428015849.jpg&quot; alt=&quot;f:id:nipe880324:20150428015849j:plain&quot; title=&quot;f:id:nipe880324:20150428015849j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;DBスキーマとモデルの作成&lt;/h3&gt;
    &lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g model User username email password
bin/rails g model Order order_no:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; user_id:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
bin/rails g model LineItem quantity:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; book_id:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
bin/rails g model Book isbn name name_kana price:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
bin/rails g model Category
bin/rake db:migrate
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;モデルの定義&lt;/h3&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:orders&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:line_items&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;total_price&lt;/span&gt;
    line_items.map(&amp;amp;&lt;span class=&quot;synConstant&quot;&gt;:total_price&lt;/span&gt;).sum
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;LineItem&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:order&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:book&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;total_price&lt;/span&gt;
    book.price * quantity
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Book&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:line_items&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:books&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;complex-sql-active-record&quot;&gt;3. Active Record&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;簡単にテーブルからデータを取得でき、また、オブジェクトとして取得できるので、データを扱いやすいです。&lt;br /&gt;
しかし、複雑なSQLを実行する場合は、ActiveRecordにより作成されるSQLを確認しないと、パフォーマンスが悪いSQLになっている可能性もあるので注意が必要です。&lt;/p&gt;&lt;p&gt;&lt;code&gt;joins&lt;/code&gt;メソッドを使うことで次のように&lt;code&gt;INNER JOIN&lt;/code&gt;をして、複数のテーブルに対して&lt;code&gt;WHERE句&lt;/code&gt;を実施することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;users = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.joins(&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;book&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; }}).where(&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }, &lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;IT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; })

&lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.* &lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;book_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;IT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;includes&lt;/code&gt;メソッドを使うことで次のように&lt;code&gt;LEFT OUTTER JOIN&lt;/code&gt;をして、複数のテーブルに対して&lt;code&gt;WHERE句&lt;/code&gt;を実施することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;users = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.includes(&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;book&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; }}).where(&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }, &lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;IT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; })

&lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r0, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r1, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r2, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r3, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r4, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t0_r5, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t1_r0, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;order_no&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t1_r1, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t1_r2, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t1_r3, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t1_r4, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r0, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r1, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;book_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r2, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r3, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r4, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t2_r5, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r0, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r1, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r2, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name_kana&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r3, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r4, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r5, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r6, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t3_r7, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t4_r0, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t4_r1, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t4_r2, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AS&lt;/span&gt; t4_r3
&lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;book_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;IT&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;また、オブジェクトとして帰ってくるので、その後に処理を行いやすいです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.includes(&lt;span class=&quot;synConstant&quot;&gt;orders&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;line_items&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;book&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt; }}).where(&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }).first
user.orders.count
&lt;/pre&gt;&lt;p&gt;扱いづらいが、&lt;code&gt;select&lt;/code&gt;メソッドにより他テーブルの値を取得し、アクセスできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.select(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users.*, orders.order_no AS order_no&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).joins(&lt;span class=&quot;synConstant&quot;&gt;:orders&lt;/span&gt;).find(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; SELECT  users.*, orders.order_no AS order_no FROM &amp;quot;users&amp;quot; INNER JOIN &amp;quot;orders&amp;quot; ON &amp;quot;orders&amp;quot;.&amp;quot;user_id&amp;quot; = &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot; WHERE &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot; = ? LIMIT 1  [[&amp;quot;id&amp;quot;, 1]]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# selectで指定した値を取得できます&lt;/span&gt;
user.attributes
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; {&amp;quot;id&amp;quot;=&amp;gt;1, &amp;quot;username&amp;quot;=&amp;gt;&amp;quot;test&amp;quot;, &amp;quot;email&amp;quot;=&amp;gt;&amp;quot;hoge@example.com&amp;quot;, &amp;quot;password&amp;quot;=&amp;gt;nil, &amp;quot;created_at&amp;quot;=&amp;gt;Mon, 27 Apr 2015 15:49:16 UTC +00:00, &amp;quot;updated_at&amp;quot;=&amp;gt;Mon, 27 Apr 2015 15:49:16 UTC +00:00, &amp;quot;order_no&amp;quot;=&amp;gt;1}&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# もちろんアクセスもできます&lt;/span&gt;
user.order_no &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 1&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;complex-sql-arel&quot;&gt;4. Arel&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/rails/arel&quot; target=&quot;_blank&quot;&gt;Arel - GitHub公式&lt;/a&gt;によると、複雑なSQLクエリの生成を簡単にするらしいです。（個人的にあまりメリットが見えていません）&lt;br /&gt;
また、一説によると、RailsのプライベートAPIなので使うべきではないらしいです。&lt;a href=&quot;https://github.com/rails/rails/issues/16978&quot; target=&quot;_blank&quot;&gt;参考&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;users  = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.arel_table
orders = &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.arel_table
sql    = users.join(orders, &lt;span class=&quot;synType&quot;&gt;Arel&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Nodes&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;OuterJoin&lt;/span&gt;).on(users[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;].eq(orders[&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;])).where(orders[&lt;span class=&quot;synConstant&quot;&gt;:order_no&lt;/span&gt;].eq(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)).to_sql
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;SELECT FROM \&amp;quot;users\&amp;quot; LEFT OUTER JOIN \&amp;quot;orders\&amp;quot; ON \&amp;quot;users\&amp;quot;.\&amp;quot;id\&amp;quot; = \&amp;quot;orders\&amp;quot;.\&amp;quot;user_id\&amp;quot; WHERE \&amp;quot;orders\&amp;quot;.\&amp;quot;order_no\&amp;quot; = 1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;complex-sql-raw-sql&quot;&gt;5. 生SQL&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;副問い合わせ、CASE WHENなど複雑なSQLを記載でき、基本的にはSQLの知識はあると思うので学習コストは少ないと思います。&lt;br /&gt;
しかし、返り値がHashなのでモデルのメソッドが使いずらく、また、SQLサーバーに依存したコードになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 実行したいSQLをヒアドキュメトで記載する&lt;/span&gt;
query = &amp;lt;&amp;lt;-&lt;span class=&quot;synSpecial&quot;&gt;SQL&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  SELECT users.*&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  FROM &amp;quot;users&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  LEFT OUTER JOIN &amp;quot;orders&amp;quot; ON &amp;quot;orders&amp;quot;.&amp;quot;user_id&amp;quot; = &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  LEFT OUTER JOIN &amp;quot;line_items&amp;quot; ON &amp;quot;line_items&amp;quot;.&amp;quot;order_id&amp;quot; = &amp;quot;orders&amp;quot;.&amp;quot;id&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  LEFT OUTER JOIN &amp;quot;books&amp;quot; ON &amp;quot;books&amp;quot;.&amp;quot;id&amp;quot; = &amp;quot;line_items&amp;quot;.&amp;quot;book_id&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  LEFT OUTER JOIN &amp;quot;categories&amp;quot; ON &amp;quot;categories&amp;quot;.&amp;quot;id&amp;quot; = &amp;quot;books&amp;quot;.&amp;quot;category_id&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;  WHERE &amp;quot;users&amp;quot;.&amp;quot;username&amp;quot; = &#39;test&#39;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;SQL&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# SQLを実行する&lt;/span&gt;
hash = &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;.connection.select_all(query)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; #&amp;lt;ActiveRecord::Result:0x007f9ab9869c90 @columns=[&amp;quot;id&amp;quot;, &amp;quot;username&amp;quot;, &amp;quot;email&amp;quot;, &amp;quot;password&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;updated_at&amp;quot;], @rows=[[1, &amp;quot;test&amp;quot;, &amp;quot;hoge@example.com&amp;quot;, nil, &amp;quot;2015-04-27 15:49:16.971518&amp;quot;, &amp;quot;2015-04-27 15:49:16.971518&amp;quot;]], @hash_rows=nil, @column_types={}&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 表形式で取得できる&lt;/span&gt;
hash.columns
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;quot;id&amp;quot;, &amp;quot;username&amp;quot;, &amp;quot;email&amp;quot;, &amp;quot;password&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;updated_at&amp;quot;]&lt;/span&gt;
hash.rows
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [[1, &amp;quot;test&amp;quot;, &amp;quot;hoge@example.com&amp;quot;, nil, &amp;quot;2015-04-27 15:49:16.971518&amp;quot;, &amp;quot;2015-04-27 15:49:16.971518&amp;quot;]]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rigelgroupllc.com/blog/2014/09/14/working-with-complex-sql-statements/&quot;&gt;Working with complex SQL statements in Rails and ActiveRecord - Rigel Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19175084/activerecord-query-through-multiple-joins&quot;&gt;ruby on rails 4 - ActiveRecord query through multiple joins - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 28 Apr 2015 02:07:26 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450092867365</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
            <category>SQL</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsでacts-as-taggable-onを使ってタグ管理を行う</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150225/1424858414</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224135234.jpg&quot; alt=&quot;f:id:nipe880324:20150224135234j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224135234j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;&lt;a href=&quot;https://www.flickr.com/photos/cambodia4kidsorg/&quot;&gt;Flickr: cambodia4kidsorg&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mbleigh/acts-as-taggable-on&quot; target=&quot;_blank&quot;&gt;acts-as-taggable-on&lt;/a&gt;はタグの追加、削除、関連するオブジェクトの取得、タグクラウドなどのタグを管理するためのgemです。&lt;/p&gt;&lt;p&gt;今回は、Railsで&lt;code&gt;acts-as-taggable-on&lt;/code&gt;でタグ管理を行う方法について説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby  2.2.0&lt;/li&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;acts-as-taggable-on 3.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#acts-as-taggable-on-install&quot;&gt;acts-as-taggable-onのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#acts-as-taggable-on-basic_usage&quot;&gt;acts-as-taggable-onの基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#acts-as-taggable-on-user_manage&quot;&gt;acts-as-taggable-onを使ってユーザー管理にタグ機能を実装してみる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#acts-as-taggable-on-bootstrap_tags_input&quot;&gt;Bootstrap Tags Inputを使ってユーザーのタグ入力を簡易にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#acts-as-taggable-on-related_users&quot;&gt;同じタグを保持しているユーザーを表示する&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;acts-as-taggable-on-install&quot;&gt;1. acts-as-taggable-onのインストール&lt;/h3&gt;Gemfileに追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;acts-as-taggable-on&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;~&amp;gt; 3.4&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
バンドルを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bunlde
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;acts-as-taggable-on&lt;/code&gt;で必要なテーブルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;bin/rake acts_as_taggable_on_engine&lt;span class=&quot;synConstant&quot;&gt;:install:migrations&lt;/span&gt;
bin/rake db&lt;span class=&quot;synConstant&quot;&gt;:migrate&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;acts-as-taggable-on-basic_usage&quot;&gt;2. acts-as-taggable-onの基本的な使い方&lt;/h3&gt;モデルファイルに&lt;code&gt;acts_as_taggable_on&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  acts_as_taggable_on &lt;span class=&quot;synConstant&quot;&gt;:labels&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# post.label_list が追加される&lt;/span&gt;
  acts_as_taggable            &lt;span class=&quot;synComment&quot;&gt;# acts_as_taggable_on :tags のエイリアス&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
上記のように設定することで、以下の２つのメソッドを利用することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;post.label_list
post.tag_list
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次のようにして、タグの追加、取得、設定、削除ができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# タグの追加&lt;/span&gt;
post.tag_list.add(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;programming&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)  &lt;span class=&quot;synComment&quot;&gt;# &amp;quot;Programming&amp;quot;タグを追加する&lt;/span&gt;
post.tag_list.add(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hardware&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# 複数のタグを追加する&lt;/span&gt;
post.save

post.label_list &lt;span class=&quot;synComment&quot;&gt;# tag_listだけでなく、別のタグリストのlabel_listにもアクセス可能です&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# タグの取得&lt;/span&gt;
post.tag_list &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;quot;programming&amp;quot;, &amp;quot;tips&amp;quot;, &amp;quot;hardware&amp;quot;]&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# タグの設定（上書きされる）&lt;/span&gt;
post.tag_list = [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;programming&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;# &amp;quot;a,b&amp;quot;といったカンマ区切りの文字列でも入力可能&lt;/span&gt;
post.tag_list &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;quot;programming&amp;quot;, &amp;quot;tips&amp;quot;]&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# タグの削除&lt;/span&gt;
post.tag_list.remove(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;programming&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# &amp;quot;programming&amp;quot;タグを削除する&lt;/span&gt;
post.tag_list.clear                 &lt;span class=&quot;synComment&quot;&gt;# すべてのタグを削除する&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
「最も使われて&lt;b&gt;いる&lt;/b&gt;タグ」と「最も使われて&lt;b&gt;いない&lt;/b&gt;タグ」を取得できます。&lt;br /&gt;
デフォルトで20件取得します。引数で件数を指定することで取得するを変更できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 最も使われているタグを配列で取得&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;ActsAsTaggableOn&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;.most_used
&lt;span class=&quot;synType&quot;&gt;ActsAsTaggableOn&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;.most_used(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 最も使われていないタグを配列で取得&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;ActsAsTaggableOn&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;.least_used
&lt;span class=&quot;synType&quot;&gt;ActsAsTaggableOn&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Tag&lt;/span&gt;.least_used(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;tagged_with&lt;/code&gt;メソッドで、特定のタグでPostを検索するができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# programmingのタグがつけられているPostを取得する&lt;/span&gt;
posts = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.tagged_with(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;programming&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# programmingとjavascriptタグがつけれれているPostを取得する&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# :match_all (AND条件), :any (OR条件), :exclued (NOT条件)が使える&lt;/span&gt;
posts = &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.tagged_with([&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;programming&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;javascript&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;], &lt;span class=&quot;synConstant&quot;&gt;match_all&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;find_related_skills&lt;/code&gt;メソッドで、同じタグを持ったPostを検索することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;@post&lt;/span&gt;.find_related_skill &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;lt;Post ...&amp;gt;, &amp;lt;Post ...&amp;gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;acts-as-taggable-on-user_manage&quot;&gt;3. acts-as-taggable-onを使ってユーザー管理にタグ機能を実装してみる&lt;/h3&gt;ここからは、&lt;code&gt;acts-as-taggable-on&lt;/code&gt;を使って、次のようにRailsでユーザー管理にタグ機能を追加するようにしてみます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224140517.jpg&quot; alt=&quot;f:id:nipe880324:20150224140517j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224140517j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;まず、ユーザーをScaffoldで作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g scaffold User name
bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、Userモデルに&lt;code&gt;skills&lt;/code&gt;と&lt;code&gt;interests&lt;/code&gt;といった２つのタグリストを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  acts_as_ordered_taggable_on &lt;span class=&quot;synConstant&quot;&gt;:skills&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:interests&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に画面からそれぞれのタグリストをテキストフィールドでカンマ区切りで入力できるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/users/_form.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for(@user)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; do |f| %&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;名前&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :skill_list, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;スキル・特技（カンマ区切り）&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; text_field_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;user[skill_list]&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, @user.skill_list.join(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :interest_list, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;興味・関心（カンマ区切り）&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; text_field_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;user[interest_list]&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, @user.interest_list.join(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.submit&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
UsersコントローラーのStrongParametersでこれらのパラメーターを受け取れるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/users_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;user_params&lt;/span&gt;
  params.require(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:skill_list&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:interest_list&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、入力したタグを画面に表示できるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/users/index.html.erb --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;thead&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;名前&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;スキル・特技&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;興味・関心&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;colspan&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;thead&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @users.each do |user| %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; user.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;users/tag_list&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, tag_list: user.skill_list %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;users/tag_list&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, tag_list: user.interest_list %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Show&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, user %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Edit&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_user_path(user) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Destroy&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, user, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :delete, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: { confirm: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Are you sure?&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; } %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...


&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/users_tag_list.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% tag_list.each do |tag| %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;label label-primary&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、タグが入力/表示できることを確認します。&lt;br /&gt;
まず、入力画面でカンマ区切りで入力します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224140530.jpg&quot; alt=&quot;f:id:nipe880324:20150224140530j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224140530j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;そして保存して、一覧画面を表示すると入力したタグが表示されています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224140540.jpg&quot; alt=&quot;f:id:nipe880324:20150224140540j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224140540j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;acts-as-taggable-on-bootstrap_tags_input&quot;&gt;4. Bootstrap Tags Inputを使ってユーザーのタグ入力を簡易にする&lt;/h3&gt;&lt;a href=&quot;http://timschlechter.github.io/bootstrap-tagsinput/examples/&quot; target=&quot;_blank&quot;&gt;Bootstrap Tags Input&lt;/a&gt;は、タグ管理のためのjQueryプラグインです。&lt;br /&gt;
これを導入することで、タグの入力を次のように簡易にできるようにします。&lt;br /&gt;
tood image 3&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://timschlechter.github.io/bootstrap-tagsinput/examples/&quot;&gt;http://timschlechter.github.io/bootstrap-tagsinput/examples/&lt;/a&gt; の「Download」からソースファイルを取得します。&lt;/p&gt;&lt;p&gt;そして、jsファイルとcssファイルをRailsにコピーします。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;cp ~/Downloads/bootstrap-tagsinput/bootstrap-tagsinput.min.js vendor/assets/javascripts/.
cp ~/Downloads/bootstrap-tagsinput/bootstrap-tagsinput.min.js.map vendor/assets/javascripts/.
cp ~/Downloads/bootstrap-tagsinput/bootstrap-tagsinput.css vendor/assets/stylesheets/.
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;application.js&lt;/code&gt;と&lt;code&gt;application.css&lt;/code&gt;に追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;// application.js
//= require bootstrap-tagsinput.min


// application.css
 *= require bootstrap-tagsinput&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;Tags Input&lt;/code&gt;を使うのは簡単で、input要素に&lt;code&gt;data-role=&quot;tagsinput&quot;&lt;/code&gt;を追加するだけです。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/users/_form.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for(@user)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; do |f| %&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :skill_list, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;スキル・特技&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; text_field_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;user[skill_list]&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, @user.skill_list.join(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;), &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;data-role&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt; &amp;quot;tagsinput&amp;quot; %&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :interest_list, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;興味・関心&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; text_field_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;user[interest_list]&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, @user.interest_list.join(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;), &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;data-role&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt; &amp;quot;tagsinput&amp;quot; %&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、入力を確認してみます。タグの入力しやすくなり、同じタグは入力できなくなっています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224140554.jpg&quot; alt=&quot;f:id:nipe880324:20150224140554j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224140554j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;カンマ区切りの文字列でサーバーに送られるので、問題なく登録ができます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224140605.jpg&quot; alt=&quot;f:id:nipe880324:20150224140605j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224140605j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;acts-as-taggable-on-related_users&quot;&gt;5. 同じタグを保持しているユーザーを表示する&lt;/h3&gt;次のように同じ「スキル・特技(skills_list)」や「興味・関心(interests_list)」を保持しているユーザーを表示できるようにしてみます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224140517.jpg&quot; alt=&quot;f:id:nipe880324:20150224140517j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224140517j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;まず、ユーザ詳細画面を修正します。&lt;code&gt;find_related_xxxx&lt;/code&gt;メソッドで関連しているユーザーを取得できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/users/show.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;notice&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; notice&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Name:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @user.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;スキル・特技:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;users/tag_list&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, tag_list: @user.skill_list %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;users/related_users&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, users: @user.find_related_skills %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;興味・関心:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;users/tag_list&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, tag_list: @user.interest_list %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; render&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;users/related_users&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, users: @user.find_related_interests %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Edit&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_user_path(@user) %&amp;gt;&lt;/span&gt; |
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Back&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, users_path %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
部分テンプレートを読んでいるので、作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/users/_related_users.html.erb --&amp;gt;&lt;/span&gt;
関連しているユーザー:
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; users.map&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; { |user| user.&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; }.join(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
画面を確認すると次のように表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150224/20150224140517.jpg&quot; alt=&quot;f:id:nipe880324:20150224140517j:plain:w480&quot; title=&quot;f:id:nipe880324:20150224140517j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;&lt;p&gt;他にもタグクラウドやタグでの検索などのトピックもあるので、詳細は&lt;a href=&quot;https://github.com/mbleigh/acts-as-taggable-on&quot;&gt;Acts As Taggable On - GitHub公式&lt;/a&gt;を参照してください。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mbleigh/acts-as-taggable-on&quot;&gt;mbleigh/acts-as-taggable-on &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://timschlechter.github.io/bootstrap-tagsinput/examples/&quot;&gt;Bootstrap Tags Input&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 25 Feb 2015 19:00:14 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450085036830</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
            <category>Rails gem</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでSonspotを使って全文検索を行う</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150223/1424695504</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221125622.jpg&quot; alt=&quot;f:id:nipe880324:20150221125622j:plain:w480&quot; title=&quot;f:id:nipe880324:20150221125622j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/11304375@N07/&quot;&gt;Flickr: Image Editor&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sunspot/sunspot&quot; target=&quot;_blank&quot;&gt;Sunspot&lt;/a&gt;は、オープンソースの全文検索システムの&lt;a href=&quot;http://ja.wikipedia.org/wiki/Apache_Solr&quot; target=&quot;_blank&quot;&gt;Solr（ソーラー）&lt;/a&gt;を使って、幅広い記述でパワフルな全文検索ができるRubyライブラリです。&lt;br /&gt;
商用ではSolrを立てる必要があります。開発環境では開発用のSolrサーバーを使います。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;Ruby  2.1.0&lt;/li&gt;
&lt;li&gt;sunspot_rails 2.1.1&lt;/li&gt;
&lt;li&gt;sunspot_solr  2.1.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#sunspot-install&quot;&gt;Sunspotのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sunspot-basic-usage&quot;&gt;Sunspotの基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sunspot-reindex&quot;&gt;リインデックス(reindex)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;sunspot-install&quot;&gt;1. Sunspotのインストール&lt;/h3&gt;&lt;code&gt;Gemfile&lt;/code&gt;に追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sunspot_rails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

group &lt;span class=&quot;synConstant&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 開発環境用のSolrディストリビューション&lt;/span&gt;
  gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sunspot_solr&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
バンドルを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
SunspotのSolrへの接続情報を設定するファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g sunspot_rails:&lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
  create  config/sunspot.yml
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;sunspot-basic-usage&quot;&gt;2. Sunspotの基本的な使い方&lt;/h3&gt;全文検索のデモ用にProductモデルとCategoryモデルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g model Product name:string desc:text category_id:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
bin/rails g model Category name:string
bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
リレーションを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/model/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/model/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
検索確認のためにデータを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/seeds.rb&lt;/span&gt;
category1 = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;デスクトップパソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
category1.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;高いパソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;高いだけありHigh Specなパソコンです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
category1.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;安いパソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;とにかく安さだけを追求したパソコンです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

category2 = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;ノートパソコン&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
category2.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;小さいノートPC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;小さいノートPCです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
category2.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;大きいノートPC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;大きいノートPCです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
category2.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High SpecノートPC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;性能がよいノートPCです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;

category3 = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;スマホ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
category3.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High Specスマホ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High Specなスマホです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
category3.products.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;普通のスマホ&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;スマホです&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
データを入れます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake db:seed
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、ここからSunspotを使うように設定をしていきます。&lt;/p&gt;&lt;p&gt;まず、全文検索を行いたいクラスに&lt;code&gt;searchable&lt;/code&gt;ブロックを追加します。&lt;br /&gt;
今回はProductクラスを全文検索できるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belogns_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;

  searchable &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    text &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:desc&lt;/span&gt;

    integer &lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;
    time &lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;text&lt;/code&gt;フィールドは全文検索されます。&lt;code&gt;integer&lt;/code&gt;や&lt;code&gt;string&lt;/code&gt;などの他のフィールドはクエリをスコープするために使われます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;そして、開発環境用のSolrディストリビューション（&lt;code&gt;sunspot_solr&lt;/code&gt;）を起動させます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;// バックグラウンド
bin/rake sunspot:solr:&lt;span class=&quot;synStatement&quot;&gt;start&lt;/span&gt;  // Solrを起動させる
bin/rake sunspot:solr:&lt;span class=&quot;synStatement&quot;&gt;stop&lt;/span&gt;   // Solrを停止させる

// フォアグラウンド
bin/rake sunspot:solr:run    // Solrを起動させる
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、全文検索を行います。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ bin/rails c

&lt;span class=&quot;synComment&quot;&gt;# Productのtextフィールド(name, descカラム)に&amp;quot;High Spec&amp;quot;を含んでいるすべての商品を検索する&lt;/span&gt;
search = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.search { fulltext &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High Spec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
products = search.results
products.count &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 3&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# category_idが1か2で、&#39;pizza&#39;を含んでいて、1週間以内に作成された、2ページ目の商品を検索する&lt;/span&gt;
search = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.search &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  fulltext &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High Spec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  with(&lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
  with(&lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;).greater_than(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;.week.ago)
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
products = search.results
products.count &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 1&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# カテゴリ毎に存在する商品数を取得する(facet)&lt;/span&gt;
search = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.search &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  fulltext &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;High spec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  facet &lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

search.facet(&lt;span class=&quot;synConstant&quot;&gt;:category_id&lt;/span&gt;).rows.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;facet&lt;/span&gt;|
  puts &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Category &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;facet.value&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; has &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;facet.count&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; products&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Category 1 has 1 products&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Category 2 has 1 products&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# Category 3 has 1 products&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;・実施にはコントローラー内で上記のように記載すれば、実際に検索を行うことができます。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;・他にもページネーションや複数の値の検索などさまざな検索方法は、&lt;a href=&quot;https://github.com/sunspot/sunspot&quot; target=&quot;_blank&quot;&gt;Sunspot - GitHub&lt;/a&gt;を参照してください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;production環境でSunspotを実行する場合は、別途Solrサーバーを立て、&lt;code&gt;sunspot.yml&lt;/code&gt;を適切に設定する必要があります。&lt;/p&gt;&lt;p&gt;また、test環境で実行する場合は、下記のコマンドでSolrの起動と停止をしてください。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;// solrを起動
bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; sunspot-solr &lt;span class=&quot;synStatement&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;8981&lt;/span&gt;
// RSpec&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;テスト&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;を実行
bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; rake spec
// solrを停止
bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; sunspot-solr &lt;span class=&quot;synStatement&quot;&gt;stop&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;sunspot-reindex&quot;&gt;3. リインデックス(reindex)&lt;/h3&gt;Railsを使っている場合、オブジェクトは&lt;code&gt;save&lt;/code&gt;コールバックによりSolrに自動的にインデックスされます。&lt;/p&gt;&lt;p&gt;その他にも、手動でリインデックスを実行する方法があります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# クラス自体をインデックスする&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.reindex
&lt;span class=&quot;synType&quot;&gt;Sunspot&lt;/span&gt;.commit


&lt;span class=&quot;synComment&quot;&gt;# 複数のオブジェクトをインデックスする&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Sunspot&lt;/span&gt;.index [product1, product2]
&lt;span class=&quot;synType&quot;&gt;Sunspot&lt;/span&gt;.commit


&lt;span class=&quot;synComment&quot;&gt;# 自動的にコミットされる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Sunspot&lt;/span&gt;.index! [product1, product2]
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
もし、&lt;code&gt;searchable&lt;/code&gt;ブロック内のコードを修正した場合、すべてのオブジェクトをリインデックスしなければなりません。&lt;br /&gt;
そういった時に、次のコマンドでリインデックスができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake sunspot:solr:reindex
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sunspot/sunspot&quot;&gt;sunspot/sunspot &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/278-search-with-sunspot&quot;&gt;#278 Search with Sunspot - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Mon, 23 Feb 2015 21:45:04 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450084600899</guid>
          
            <category>Rails Model</category>
          
            <category>Rails中級</category>
          
            <category>検索</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsでfriendly_idを使って検索エンジンにわかりやすいURLを作成する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150221/1424489524</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221111817.jpg&quot; alt=&quot;f:id:nipe880324:20150221111817j:plain:w480&quot; title=&quot;f:id:nipe880324:20150221111817j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/marcos_hb/&quot;&gt;Flickr: marcosHB&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/norman/friendly_id&quot; target=&quot;_blank&quot;&gt;friendly_id&lt;/a&gt;は次のようにURLを人間や検索エンジンにわかりやすいようにするgemです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# firendly_idを使っていない場合&lt;/span&gt;
http&lt;span class=&quot;synConstant&quot;&gt;:/&lt;/span&gt;/example.com/states/&lt;span class=&quot;synConstant&quot;&gt;4323454&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# firendly_idを使った場合&lt;/span&gt;
http&lt;span class=&quot;synConstant&quot;&gt;:/&lt;/span&gt;/example.com/states/washington
&lt;/pre&gt;&lt;p&gt;また、URL文字列(washingtonの部分)の履歴や他言語対応などの機能もあります。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;Ruby  2.1.0&lt;/li&gt;
&lt;li&gt;friendly_id 5.1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#friendly_id-install&quot;&gt;friendly_idのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#friendly_id-basic_usage&quot;&gt;friendly_idの基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#friendly_id-add_slug&quot;&gt;slugを追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#friendly_id-add_history&quot;&gt;404エラーを避けるためにslugの履歴を取る&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;friendly_id-install&quot;&gt;1. friendly_idのインストール&lt;/h3&gt;Gemfileに追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;friendly_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;friendly_id-basic_usage&quot;&gt;2. friendly_idの基本的な使い方&lt;/h3&gt;FrendlyIdの設定ファイルと&lt;code&gt;friendly_id_slugs&lt;/code&gt;テーブルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g friendly_id
  create  db/migrate/20150220082838_create_friendly_id_slugs.rb
  create  config/initializers/friendly_id.rb

bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;&lt;code&gt;friendly_id_slugs&lt;/code&gt;テーブルは&lt;code&gt;slug&lt;/code&gt;カラム（URL上のIDの代わりに表示する文字列を保持する）のバージョニングを行うテーブルです。slugの履歴を取らない場合は必要ありません。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;code&gt;friendly_id&lt;/code&gt;を使うためにデモとしてUserをScaffoldで作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g scaffold User name:string:uniq
bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
作成されたUserモデルにFriendlyIDを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;uniqueness&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;FriendlyId&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# extend FriendlyId でもよい(違いはない)&lt;/span&gt;
  friendly_id &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# idカラムの代わりにnameカラムをURLのIDとする&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
こうすることで、Userモデルの検索や作成時などに、&lt;code&gt;id&lt;/code&gt;パラメーターに「&lt;b&gt;name属性の値&lt;/b&gt;」が設定されてサーバー側に送られてきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;{ &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tom-tick&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; }
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そのため、Usersコントローラーのユーザーを取得箇所では、&lt;code&gt;friendly&lt;/code&gt;メソッドを使いUserを取得できるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/users_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_user&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# @user = User.find(params[:id])&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.friendly.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ちなみに&lt;code&gt;friendly&lt;/code&gt;メソッドは次のように動作します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.friendly.find(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tom-tick&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; friendly_idで設定したカラムで検索できる(ここではnameカラム)&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.friendly.find(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)          &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; IDで検索ができる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find(&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt;)                  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; friendlyメソッドを使わなくてもIDで検索できる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tom-tick&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)          &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; X friendlyメソッドを使わないとnameカラムで検索できない&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面で確認してみましょう。&lt;br /&gt;
IDの代わりに、Userモデルのnameカラムの値がURLとして使われています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221120546.jpg&quot; alt=&quot;f:id:nipe880324:20150221120546j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221120546j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;日本語も作ることができます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221120552.jpg&quot; alt=&quot;f:id:nipe880324:20150221120552j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221120552j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;friendly_id-add_slug&quot;&gt;3. slugを追加する&lt;/h3&gt;現在はUserモデルのnameカラムをURLとして表示していますが、ユーザー名にスペースが入ったりするとURLが見づらいものになるのでslugカラム（URL上のIDの代わりに表示する文字列）を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g migration add_slug_to_users slug:index:uniq
  invoke  active_record
  create    db/migrate/20150220083718_add_slug_to_users.rb

bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
slugカラムを使うようにするために、Userモデルに&lt;code&gt;use: :slugged&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
friendly_id &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;use&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:slugged&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
既に存在するUserレコードの&lt;code&gt;slug&lt;/code&gt;カラムは&lt;code&gt;nil&lt;/code&gt;なので値を設定します。&lt;br /&gt;
保存をすると&lt;code&gt;nil&lt;/code&gt;の場合、FriendlyIdが自動的に&lt;code&gt;slug&lt;/code&gt;を生成してくれます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;bin/rails c

&lt;span class=&quot;synComment&quot;&gt;# slugを確認する&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.all.pluck(&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:slug&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [[1, &amp;quot;Tom Tick&amp;quot;, nil], [2, &amp;quot;田中 太郎&amp;quot;, nil]]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# FriendlyIdが自動的にslugを作成し、保存する&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find_each(&amp;amp;&lt;span class=&quot;synConstant&quot;&gt;:save&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# slugが生成されたことを確認する&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.all.pluck(&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:slug&lt;/span&gt;)
=&amp;gt; [[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Tom Tick&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tom-tick&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;], [&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;田中 太郎&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;fcf1c7ee-6d17-4b43-a67a-b6d67adfdb48&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]]
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
上記で見てわかると思うのですが、日本語は適切に入らないので、FriendlyIdの&lt;code&gt;normalize_frindly_id&lt;/code&gt;メソッドをオーバーライドします。&lt;br /&gt;
日本語の場合、&lt;code&gt;parameterize&lt;/code&gt;メソッドは空文字を返すので次のようにしています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;normalize_friendly_id&lt;/span&gt;(value)
  value.to_s.parameterize.present? ? value.to_s.parameterize : value
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、うまく入らなかったUserレコードのslugを更新します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;bin/rails c

japanese_user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.last
japanese_user.slug = &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;
japanese_user.save
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面を確認してみましょう。&lt;br /&gt;
英語の場合は、大文字は小文字になり、スペースはハイフンになっています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221121203.jpg&quot; alt=&quot;f:id:nipe880324:20150221121203j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221121203j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;残念ながら日本語などの場合、そのままの値をslugに設定しているのでslugを導入する前とURLは変わりません。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221120552.jpg&quot; alt=&quot;f:id:nipe880324:20150221120552j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221120552j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;上記で、slugを変更するために、&lt;code&gt;nil&lt;/code&gt;を設定て、保存することで slugの変更を行いました。&lt;br /&gt;
slugを変更したいと思うたびに、&lt;code&gt;nil&lt;/code&gt;を設定するのはめんどうなので、slugを更新するかどうかを確認する&lt;code&gt;should_generate_new_friendly_id?&lt;/code&gt;メソッドをオーバーライドします。&lt;br /&gt;
&lt;code&gt;name&lt;/code&gt;カラムをfriendly_Idとして利用しているので、&lt;code&gt;name&lt;/code&gt;属性が変更された場合にtrueを返す(slugを変更する)ようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;should_generate_new_friendly_id?&lt;/span&gt;
  name_changed?
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、名前を更新してみて、URLが変更されることを確認します。&lt;br /&gt;
URLが「tom-tick」の名前を更新すると、&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221121548.jpg&quot; alt=&quot;f:id:nipe880324:20150221121548j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221121548j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;URLが「tom-tick2」に更新されてました。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221121601.jpg&quot; alt=&quot;f:id:nipe880324:20150221121601j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221121601j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;friendly_id-add_history&quot;&gt;4. 404エラーを避けるためにslugの履歴を取る&lt;/h3&gt;上記で、&lt;code&gt;name&lt;/code&gt;属性を変更することで、URLを変更することができました。&lt;br /&gt;
しかし、もし前のURL（例：/users/tom-tick）でアクセスした場合、&lt;b&gt;404エラー Not Found （内部的にはActiveRecord::RecordNotFound Exception）&lt;/b&gt;が発生してしまいます。&lt;br /&gt;
そのため、以前のslugも保持するようにして、前のURLでアクセスされたときもページを表示できるようにします。&lt;/p&gt;&lt;p&gt;FriendlyIdでは次のように&lt;code&gt;history&lt;/code&gt;を追加するだけです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
friendly_id &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;use&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:slugged&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:history&lt;/span&gt;]
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;こうすることで、本記事の最初で作成した&lt;code&gt;friendly_id_slugs&lt;/code&gt;テーブルに自動的にslugの履歴が保持されることで、前のURLからでも同じUserモデルにアクセスできるようになります。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;slugを変更しても、前のslugでもページにアクセスできるか確認します。&lt;br /&gt;
まず、名前を「Tom Tick2」から「Tom Tick3」に変更します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221122447.jpg&quot; alt=&quot;f:id:nipe880324:20150221122447j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221122447j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;すると、slugは「tom-tick3」に変更されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221122601.jpg&quot; alt=&quot;f:id:nipe880324:20150221122601j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221122601j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;slugが変更された後でも、「/users/tom-tick2」でもアクセスできます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150221/20150221122613.jpg&quot; alt=&quot;f:id:nipe880324:20150221122613j:plain:w320&quot; title=&quot;f:id:nipe880324:20150221122613j:plain:w320&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:320px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;現在のslugにリダイレクトさせるようにするために、ステータスコード 301 Moved Permanently（恒久的に移動した)を返しリダイレクトするようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/users_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; request.path != user_path(&lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;)
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:status&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:moved_permanently&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;friendly_id_slugs&lt;/code&gt;テーブルはslugの変更に応じて増えていくので、適切にデータの削除が必要です。削除することでアクセスができなくなるので、タイミングは難しいところです。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://norman.github.io/friendly_id/file.Guide.html&quot;&gt;File: Guide &amp;mdash; Documentation by YARD 0.8.7.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/314-pretty-urls-with-friendlyid&quot;&gt;#314 Pretty URLs with FriendlyId - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sat, 21 Feb 2015 12:32:04 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450084594626</guid>
          
            <category>SEO</category>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsでawesome_nested_setとjsTreeでインタラクティブにツリー構造を操作する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150217/1424179269</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174000.jpg&quot; alt=&quot;f:id:nipe880324:20150215174000j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174000j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;インタラクティブに階層構造を操作できるjQuery pluginの&lt;a href=&quot;http://www.jstree.com/&quot; target=&quot;_blank&quot;&gt;jsTree&lt;/a&gt;を使い、上記のようにUIを向上させます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;「&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150216/1424092796&quot; target=&quot;_blank&quot;&gt;Railsでawesome_nested_setを使って階層構造を作成する&lt;/a&gt;」の実施を前提にしています。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.1.2&lt;/li&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;awesome_nested_set 3.0.2&lt;/li&gt;
&lt;li&gt;jsTree 3.0.9&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#awesome_nested_set_jstree_crient&quot;&gt;1. jsTreeでクライアント側の動きを実装する&lt;/a&gt;&lt;/h5&gt;
    &lt;p&gt;&lt;a href=&quot;#awesome_nested_set_jstree_install&quot;&gt;1.1. RailsにjsTreeをインストールする&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#awesome_nested_set_jstree_plugin&quot;&gt;1.2. jsTreeのプラグインでカテゴリーを移動できるようにする&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#awesome_nested_set_jstree_client_actions&quot;&gt;1.3. カテゴリーの追加、リネーム、削除を追加する&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;&lt;a href=&quot;#awesome_nested_set_jstree_corroborate&quot;&gt;2. jsTreeの各アクションとRailsのAPIを連携させる&lt;/a&gt;&lt;/h5&gt;
    &lt;p&gt;&lt;a href=&quot;#awesome_nested_set_jstree_index&quot;&gt;2.1. カテゴリの初期データをサーバーから取得する&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#awesome_nested_set_jstree_server_actions&quot;&gt;2.2. カテゴリの追加/リネーム/削除アクションを実装する&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#awesome_nested_set_jstree_move&quot;&gt;2.3. カテゴリの移動アクションを実装する&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_crient&quot;&gt;1. jsTreeでクライアント側の動きを実装する&lt;/h3&gt;1では、「カテゴリの操作（追加、リネーム、削除、移動）」をできるようにします。サーバーと連携（カテゴリデータの永続化）は2で実施します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_install&quot;&gt;1.1. RailsにjsTreeをインストールする&lt;/h3&gt;まずは、RailsにjsTreeをインストールします。&lt;/p&gt;&lt;p&gt;1. 「&lt;a href=&quot;https://github.com/vakata/jstree/zipball/3.0.9&quot;&gt;Download jsTree&lt;/a&gt;」からソースファイルをダウンロードします。&lt;/p&gt;&lt;p&gt;2. 解凍したファイルの&lt;code&gt;dist/jstree.min.js&lt;/code&gt;を&lt;code&gt;vendor/assets/javascripts/.&lt;/code&gt;にコピーします。&lt;/p&gt;&lt;p&gt;3. 解凍したファイルの&lt;code&gt;dist/themes/default/*&lt;/code&gt;を&lt;code&gt;vendor/assets/stylesheets/.&lt;/code&gt;にコピーします。&lt;br /&gt;
   そして、&lt;code&gt;style.css&lt;/code&gt;を削除し、&lt;code&gt;style.min.css&lt;/code&gt;を&lt;code&gt;jstree.min.css&lt;/code&gt;にリネームします。&lt;/p&gt;&lt;p&gt;4. &lt;code&gt;application.js&lt;/code&gt;に&lt;code&gt;jstree.min&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// app/assets/javascripts/application.js&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;//= require jstree.min&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;5. &lt;code&gt;application.css&lt;/code&gt;にも&lt;code&gt;jstree.min&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;// app/assets/stylesheets/application&lt;span class=&quot;synIdentifier&quot;&gt;.css&lt;/span&gt;
 &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt;= require jstree&lt;span class=&quot;synIdentifier&quot;&gt;.min&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;6. 一覧画面を次のように修正します。テーブルや登録画面へのリンクなどを削除します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/categories/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Listing Categories&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;jstree_categories&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;-jstree=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;{&amp;quot;opened&amp;quot;:true}&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Root node 1
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Child node 1&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Child node 2&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Root node 2
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;7. カテゴリーの&lt;code&gt;jstree()&lt;/code&gt;を呼びます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/categories.coffee&lt;/span&gt;
$ -&amp;gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree()
&lt;/pre&gt;&lt;p&gt;8. おまけでスタイルを追加しておきます。（必須ではありません）&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/layouts/application.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  ...&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;  ...&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;pre class=&quot;code lang-css&quot; data-lang=&quot;css&quot; data-unlink&gt;// app/assets/stylesheets/categories&lt;span class=&quot;synIdentifier&quot;&gt;.scss&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;.categories&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  #jstree_categories {
    &lt;span class=&quot;synType&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;10px&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;#ccc&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;border&lt;/span&gt;-radius: &lt;span class=&quot;synConstant&quot;&gt;3px&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;#efefef&lt;/span&gt;;
  &lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synError&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;では、画面を表示してみましょう。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174032.jpg&quot; alt=&quot;f:id:nipe880324:20150215174032j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174032j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_plugin&quot;&gt;1.2. jsTreeのプラグインでカテゴリーを移動できるようにする&lt;/h3&gt;&lt;a href=&quot;http://www.jstree.com/&quot; target=&quot;_blank&quot;&gt;jsTree&lt;/a&gt;には、チェックボックス、右クリックを有効にする、検索ボックスを追加するなどさまざまな&lt;a href=&quot;http://www.jstree.com/plugins/&quot; target=&quot;_blank&quot;&gt;jsTreeプラグイン&lt;/a&gt;が用意されています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;今回はドラッグ&amp;ドロップをできるようにする&lt;code&gt;dnd&lt;/code&gt;プラグインを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/categories.coffee&lt;/span&gt;
$ -&amp;gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree({
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : {
      &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;check_callback&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
    },
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : [ &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;dnd&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; ]
  })

  &lt;span class=&quot;synComment&quot;&gt;# カテゴリを移動させたときに呼ばれるイベント&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;move_node.jstree&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, (e, n) -&amp;gt;
    &lt;span class=&quot;synComment&quot;&gt;# Todo サーバーのデータを更新するようにする&lt;/span&gt;
    console.log &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;n.old_parent&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n.old_position&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; -&amp;gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n.parent&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n.position&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、実際にドラッグ&amp;ドロップができるか確認します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174050.jpg&quot; alt=&quot;f:id:nipe880324:20150215174050j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174050j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_client_actions&quot;&gt;1.3. カテゴリーの追加、リネーム、削除を追加する&lt;/h3&gt;右クリックを追加するプラグインからもカテゴリの「追加」、「リネーム」、「削除」のUIを追加できるのですが、次のように今回はボタンで操作するようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174059.jpg&quot; alt=&quot;f:id:nipe880324:20150215174059j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174059j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;まずはボタンを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/categories/index.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 一番下に追加 --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Create&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;btn btn-success&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;create_category&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Rename&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;btn btn-warning&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;rename_category&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Delete&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;btn btn-danger&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;,  &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;delete_category&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、ボタンを押したときの処理を登録します。&lt;br /&gt;
各処理では、カテゴリが選択されていたらボタンに記載されているアクションを実行します。カテゴリが選択されていない場合は何もしないという挙動になっています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/categories.coffee&lt;/span&gt;
$ -&amp;gt;

  ...

  &lt;span class=&quot;synComment&quot;&gt;# 選択されているノードの子として新しいノードを作成する&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#create_category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, -&amp;gt;
    jstree = &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree(&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# jstreeオブジェクトを取得&lt;/span&gt;
    selected = jstree.get_selected()   &lt;span class=&quot;synComment&quot;&gt;# 選択されているカテゴリを取得&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!selected.length) &lt;span class=&quot;synComment&quot;&gt;# 選択されていない場合何もしないで終了&lt;/span&gt;

    selected = selected[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]  &lt;span class=&quot;synComment&quot;&gt;# 複数選択もあるのでselectedは配列なので、0番目を取得&lt;/span&gt;
    selected = jstree.create_node(selected, {&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}) &lt;span class=&quot;synComment&quot;&gt;# create_nodeでノードを作成&lt;/span&gt;
    jstree.edit(selected) &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (selected) &lt;span class=&quot;synComment&quot;&gt;# 作成したノードを編集状態にする&lt;/span&gt;


  &lt;span class=&quot;synComment&quot;&gt;# 選択されているノードの名前を変更する&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#rename_category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, -&amp;gt;
    jstree = &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree(&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
    selected = jstree.get_selected()
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!selected.length)

    selected = selected[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]
    jstree.edit(selected);


  &lt;span class=&quot;synComment&quot;&gt;# ノードの名前の変更が確定されたときに呼ばれるイベント&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rename_node.jstree&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, (e, n) -&amp;gt;
    &lt;span class=&quot;synComment&quot;&gt;# &lt;/span&gt;&lt;span class=&quot;synTodo&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt; サーバーのノードの名前を更新する&lt;/span&gt;
    console.log &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;n.node.id&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n.old&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; -&amp;gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;n.text&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;


  &lt;span class=&quot;synComment&quot;&gt;# 選択されているノードを削除する&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#delete_category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, -&amp;gt;
    jstree = &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree(&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
    selected = jstree.get_selected()
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!selected.length)

    jstree.delete_node(selected); &lt;span class=&quot;synComment&quot;&gt;# delete_nodeでノードを削除する&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面を確認して、ローカル上でカテゴリの追加、リネーム、削除ができることを確認しましょう。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174119.jpg&quot; alt=&quot;f:id:nipe880324:20150215174119j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174119j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_corroborate&quot;&gt;2. jsTreeの各アクションとRailsのAPIを連携させる&lt;/h3&gt;1では、サーバーと連携しないでカテゴリの操作（追加、リネーム、削除、移動）をできるようにしました。&lt;br /&gt;
2では、サーバーと連携し、カテゴリデータを永続化できるようにしていきます。&lt;br /&gt;
scaffold機能で作成された機能でほぼRails側のAPIはできているので、jsでAjaxリクエストを送る箇所が主になります。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_index&quot;&gt;2.1. カテゴリの初期データをサーバーから取得する&lt;/h3&gt;まずは、実際にサーバーと通信する前に、前準備として、カテゴリの階層構造を初期データを、HTMLからJSONに変更します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;まずはHTMLを削除します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/categories/index.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Listing Categories&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;jstree_categories&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; /&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Create&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;btn btn-success&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;create_category&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Rename&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;btn btn-warning&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;rename_category&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Delete&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;btn btn-danger&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;,  &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;delete_category&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、HTMLの代わりにJSONとして&lt;code&gt;jstree&lt;/code&gt;メソッドに渡します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/categories.coffee&lt;/span&gt;
$ -&amp;gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree({
    &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : {
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;check_callback&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : [ &lt;span class=&quot;synComment&quot;&gt;# 画面に表示する仮の初期データ&lt;/span&gt;
        { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Root node 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;opened&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; } },
        { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Child node 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; },
        { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Child node 2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; },
        { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Root node 2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
      ]
    },
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : [ &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;dnd&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; ]
  })

  ...
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;フォーマットには何種類かあり詳細は&lt;a href=&quot;http://www.jstree.com/docs/json/&quot; target=&quot;_blank&quot;&gt;jsTree - jsonフォーマット&lt;/a&gt;を参照してください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;画面が変わりなく表示されることを確認します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174059.jpg&quot; alt=&quot;f:id:nipe880324:20150215174059j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174059j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;では、Ajaxでサーバー側からカテゴリの一覧を取得するようにします。&lt;br /&gt;
&lt;code&gt;core.data.url&lt;/code&gt;にカテゴリの一覧へのURL(&lt;code&gt;categories.json&lt;/code&gt;)を記載すると画面表示時に、GET /categories.jsonをアクセスし、サーバーからカテゴリ一覧情報を取得するようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/categories.coffee&lt;/span&gt;
$ -&amp;gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree({
    &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : {
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;check_callback&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : {
        &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : (node) -&amp;gt;
          &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;categories.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# GET /categoris.json を実行する&lt;/span&gt;
      }
    },
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; : [ &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;dnd&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; ]
  })

  ...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、Railsからカテゴリ一覧を返すようにします。&lt;br /&gt;
返すデータ形式は、先ほどまで配列で&lt;code&gt;core.date&lt;/code&gt;に指定していた値です。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/views/categories/index.json.jbuilder&lt;/span&gt;
json.array!(&lt;span class=&quot;synIdentifier&quot;&gt;@categories&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;category&lt;/span&gt;|
  json.id     category.id.to_s
  json.text   category.name
  json.parent category.parent_id ? category.parent_id.to_s : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  json.state &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    json.opened &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;i&gt;※ルートノードの親ノードは、awesome_nested_setの場合は「&lt;code&gt;nil&lt;/code&gt;」、jsTreeでは「&lt;code&gt;#&lt;/code&gt;」になるので、&lt;code&gt;json.parent category.parent_id ? category.parent_id.to_s : &#39;#&#39;&lt;/code&gt;としてその変換を行っています。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;では、サーバー側に仮の初期データを入力します&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# もしデータが残っている場合は、次のコマンドでDBのデータをリセットしてください&lt;/span&gt;
$ bin/rake db&lt;span class=&quot;synConstant&quot;&gt;:migrate:reset&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# コンソールからデータを初期データを入力します&lt;/span&gt;
$ bin/rails c
root = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Root node 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
root.children.append(&lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Child node 1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;))
root.children.append(&lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Child node 2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;))
&lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Root node 2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面を表示しましょう。正しくカテゴリ一覧のデータが表示されると思います。&lt;br /&gt;
Ajaxでサーバーから取得しているので、一瞬だけロード中のイメージが表示されるようになます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174059.jpg&quot; alt=&quot;f:id:nipe880324:20150215174059j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174059j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_server_actions&quot;&gt;2.2. カテゴリの追加/リネーム/削除アクションを実装する&lt;/h3&gt;カテゴリの一覧ができたので、カテゴリの追加/リネーム/削除も作っていきます。&lt;br /&gt;
追加/リネーム/削除はScaffold機能で既に実装されているので、javascriptしか修正しません。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/categories.coffee&lt;/span&gt;
$ -&amp;gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# 選択されているノードの子として新しいノードを作成する&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#create_category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, -&amp;gt;
    jstree = &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree(&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
    selected = jstree.get_selected()
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!selected.length)
    selected = selected[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]

    &lt;span class=&quot;synComment&quot;&gt;# POST /categories.json&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$.&lt;/span&gt;ajax({
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    : { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;New node&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;parent_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : selected } },
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;     : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/categories.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : (res) -&amp;gt;
        selected = jstree.create_node(selected, res)
        jstree.edit(selected) &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (selected)
    })


  &lt;span class=&quot;synComment&quot;&gt;# 選択されているノードの名前を変更する&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#rename_category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, -&amp;gt;
    jstree = &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree(&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
    selected = jstree.get_selected()
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!selected.length)

    selected = selected[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]
    jstree.edit(selected);


  &lt;span class=&quot;synComment&quot;&gt;# ノードの名前の変更が確定されたときに呼ばれるイベント&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;rename_node.jstree&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, (e, obj) -&amp;gt;
    id           = obj.node.id
    renamed_name = obj.text

    &lt;span class=&quot;synComment&quot;&gt;# PATCH /categories/id.json&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$.&lt;/span&gt;ajax({
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;PATCH&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    : { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : renamed_name } },
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;     : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/categories/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;id&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    })


  &lt;span class=&quot;synComment&quot;&gt;# 選択されているノードを削除する&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#delete_category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, -&amp;gt;
    jstree = &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).jstree(&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
    selected = jstree.get_selected()
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (!selected.length)

    selected = selected[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]
    id = selected

    &lt;span class=&quot;synComment&quot;&gt;# DELETE /categories/id.json&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$.&lt;/span&gt;ajax({
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;DELETE&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;     : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/categories/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;id&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : -&amp;gt;
        jstree.delete_node(selected)
    })
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面を更新して、動作を確認します。カテゴリの作成、リネーム、削除ができ、画面を更新しても変更が保存されているはずです。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174151.jpg&quot; alt=&quot;f:id:nipe880324:20150215174151j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174151j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_jstree_move&quot;&gt;2.3. カテゴリの移動アクションを実装する&lt;/h3&gt;では、最後に、ドラッグ&amp;ドロップでカテゴリを移動できるようにします。&lt;/p&gt;&lt;p&gt;まずは、javascriptでカテゴリを移動させたら、サーバー側にリクエストを送ります。&lt;br /&gt;
移動先を正しく更新するために、「移動後の親ノードのID」と「移動後のポジション番号」をサーバーに送ります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/assets/javascripts/categories.coffee&lt;/span&gt;
$ -&amp;gt;
  ...

  &lt;span class=&quot;synComment&quot;&gt;# カテゴリを移動させたときに呼ばれるイベント&lt;/span&gt;
  &lt;span class=&quot;synError&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#jstree_categories&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).on &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;move_node.jstree&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, (e, node) -&amp;gt;
    id            = node.node.id
    parent_id     = node.parent
    new_position  = node.position

    &lt;span class=&quot;synComment&quot;&gt;# PATCH /categories/id.json&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;$.&lt;/span&gt;ajax({
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    : &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;PATCH&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;,
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    : { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : { &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;parent_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : parent_id, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;new_position&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; : new_position } },
      &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;     : &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/categories/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;id&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;.json&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    })
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
CategoriesコントローラーのStrongParametersに&lt;code&gt;new_position&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/categories_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;category_params&lt;/span&gt;
  params.require(&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:parent_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:new_position&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
最後に、Categoryモデルに2つのメソッドを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  acts_as_nested_set

  &lt;span class=&quot;synComment&quot;&gt;# ルートノードに移動させた場合は、parent_id は &amp;quot;#&amp;quot;になるので、&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# ルートに移動させる move_to_root メソッドを呼ぶ&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 親ノードがある場合は、parent_id を 更新する&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;parent_id=&lt;/span&gt;(parent_id)
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; parent_id == &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      move_to_root
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;synStatement&quot;&gt;super&lt;/span&gt;(parent_id)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# ルートノードに移動させた場合は、親ノード(parent)がnilのため、ルートの兄弟配列から移動先を特定する&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 親ノードがある場合は、move_to_child_with_indexメソッドで移動する&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;new_position=&lt;/span&gt;(new_position)
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; parent.blank?
      prev_node = root.siblings[new_position.to_i - &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;]
      move_to_right_of prev_node
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      move_to_child_with_index(parent, new_position.to_i)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、カテゴリの移動ができることを確認します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215174000.jpg&quot; alt=&quot;f:id:nipe880324:20150215174000j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215174000j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jstree.com/&quot;&gt;jsTree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 17 Feb 2015 22:21:09 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450083787279</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsでawesome_nested_setを使って階層構造を作成する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150216/1424092796</link>
          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215110242.jpg&quot; alt=&quot;f:id:nipe880324:20150215110242j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215110242j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/amatsuscribbler/&quot;&gt;Flickr: amatsuscribbler&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/collectiveidea/awesome_nested_set&quot; target=&quot;_blank&quot;&gt;awesome_nested_set&lt;/a&gt;とは、モデルを階層構造に管理できるようにするgemです。&lt;br /&gt;
フォルダ階層、カテゴリ階層、コメントへのリプライでの階層などツリー構造を表したい箇所で使うと便利です。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;今回は、次のように、モデルを階層構造で表示、作成、更新できるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215110501.jpg&quot; alt=&quot;f:id:nipe880324:20150215110501j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215110501j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Ruby 2.1.2&lt;/li&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;awesome_nested_set 3.0.2&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;i&gt;バージョン3は「Rails 4」をサポート、バージョン2は「Rails 3」をサポート、2.0以前は「Rails 2」をサポートしています。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#awesome_nested_set_basic_install&quot;&gt;awesome_nested_setのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#awesome_nested_set_basic_usage&quot;&gt;awesome_nested_setの基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#awesome_nested_set_basic_tree&quot;&gt;awesome_nested_setでカテゴリを階層構造にする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_basic_install&quot;&gt;1. awesome_nested_setのインストール&lt;/h3&gt;&lt;code&gt;Gemfile&lt;/code&gt;に追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;awesome_nested_set&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_basic_usage&quot;&gt;2. awesome_nested_setの基本的な使い方&lt;/h3&gt;&lt;code&gt;awesome_nested_set&lt;/code&gt;を使うためには、モデルに&lt;code&gt;parent_id&lt;/code&gt;、&lt;code&gt;lft&lt;/code&gt;、&lt;code&gt;rgt&lt;/code&gt;という３つのフィールドが必要です。（これらのフィールド名は設定で変更可能です）&lt;br /&gt;
また、オプションで&lt;code&gt;depth&lt;/code&gt;、&lt;code&gt;children_count&lt;/code&gt;という２つのフィールドも追加することができます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;これらのフィールドを追加するマイグレーションファイル作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g migration add_awesome_nested_set_columns_to_categories parent_id:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; lft:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; rgt:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
DBにINSERT時に&lt;code&gt;rgt&lt;/code&gt;を探すので&lt;code&gt;add_index&lt;/code&gt;で&lt;code&gt;rgt&lt;/code&gt;カラムにインデックスをつけておきます。&lt;br /&gt;
他のカラムにもインデックスをつけておくことがGitHubのREADMEで推奨されているので、&lt;code&gt;parent_id&lt;/code&gt;と&lt;code&gt;rgt&lt;/code&gt;カラムにもインデックスをつけます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/YYYYMMDDhhmmss_add_awesome_nested_set_columns_to_categories.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AddAwesomeNestedSetColumnsToCategories&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# 必須のフィールド&lt;/span&gt;
    add_column &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:parent_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;
    add_column &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:lft&lt;/span&gt;,       &lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;
    add_column &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:rgt&lt;/span&gt;,       &lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;

    add_index &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:parent_id&lt;/span&gt;
    add_index &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:lft&lt;/span&gt;
    add_index &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:rgt&lt;/span&gt;


    &lt;span class=&quot;synComment&quot;&gt;# オプションのフィールド&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# add_column :categories, :depth,          :integer&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# add_column :categories, :children_count, :integer&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# add_index :categories, :depth&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
マイグレーションを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、モデル内で&lt;code&gt;acts_as_nested_set&lt;/code&gt;という宣言を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  acts_as_nested_set
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで、さまざまなメソッドが使えます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# ルートノードを作成&lt;/span&gt;
root = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 子ノードを作成&lt;/span&gt;
child1 = root.children.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;child1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
child2 = root.children.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;child2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# ノードを作成し、子ノードに接続する&lt;/span&gt;
grandchild = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;grandchild1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
grandchild.move_to_child_of(child1)

&lt;span class=&quot;synComment&quot;&gt;# 子ノードを取得&lt;/span&gt;
root.children &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;lt;Category &amp;quot;child1&amp;quot;&amp;gt;, &amp;lt;Category &amp;quot;child2&amp;quot;&amp;gt;]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 葉ノードを取得&lt;/span&gt;
root.leaves &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;lt;Category &amp;quot;child2&amp;quot;&amp;gt;, &amp;lt;Category &amp;quot;grandchild1&amp;quot;]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 兄弟ノードを取得&lt;/span&gt;
child1.siblings &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;lt;Category &amp;quot;child2&amp;quot;&amp;gt;]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 階層を取得&lt;/span&gt;
child1.level &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 1&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# 作成されたツリー&lt;/span&gt;
root
&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;-- child1&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;-- grandchild
&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;-- child2&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、階層構造に表示するためやセレクトボックスのために、&lt;code&gt;nested_set_options&lt;/code&gt;というビューヘルパーが用意されています。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# form builder 有
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :parent_id, nested_set_options(Category, @category) {|i| &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#{&#39;-&#39; * i.level} #{i.name}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; } %&amp;gt;&lt;/span&gt;

# form builder 無
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; select_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;parent_id&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, options_for_select(nested_set_options(Category) {|i| &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#{&#39;-&#39; * i.level} #{i.name}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; } ) %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;acts_as_nested_set&lt;/code&gt;のオプションやコールバックやフックなどがあるので、&lt;a href=&quot;https://github.com/collectiveidea/awesome_nested_set&quot; target=&quot;_blank&quot;&gt;awesome_nested_set - GitHub&lt;/a&gt;を参照してください。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;awesome_nested_set_basic_tree&quot;&gt;3. awesome_nested_setでカテゴリを階層構造にする&lt;/h3&gt;この章では、次のようにモデルを階層構造で表示、作成、更新できるようにします。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215110501.jpg&quot; alt=&quot;f:id:nipe880324:20150215110501j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215110501j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;まずカテゴリを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;rails g scaffold Category name
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
マイグレーションファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g migration add_awesome_nested_set_columns_to_categories parent_id:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; lft:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; rgt:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
テーブルが多くなるとパフォーマンスが低くなるので、インデックスをつけておく必要があります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/YYYYMMDDhhmmss_add_awesome_nested_set_columns_to_categories.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AddAwesomeNestedSetColumnsToCategories&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    add_column &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:parent_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;
    add_column &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:lft&lt;/span&gt;,       &lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;
    add_column &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:rgt&lt;/span&gt;,       &lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;

    add_index &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:parent_id&lt;/span&gt;
    add_index &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:lft&lt;/span&gt;
    add_index &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:rgt&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
マイグレーションを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Categoryモデルに&lt;code&gt;acts_as_nested_set&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  acts_as_nested_set
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
テストデータを追加しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ bin/rails c

&lt;span class=&quot;synComment&quot;&gt;# ルートノードを作成&lt;/span&gt;
root = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 子ノードを作成&lt;/span&gt;
child1 = root.children.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;child1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
child2 = root.children.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;child2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# ノードを作成し、子ノードに接続する&lt;/span&gt;
grandchild = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;grandchild1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
grandchild.move_to_child_of(child1)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
まず、Categories一覧画面でツリー状に表示するようにします。&lt;br /&gt;
&lt;code&gt;awesome_nested_set&lt;/code&gt;のビューヘルパーの&lt;code&gt;nested_set_options&lt;/code&gt;を使います。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/categories/index.html.erb --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% nested_set_options(@categories) { |i| &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#{&#39;–&#39; * i.level} #{i.name}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; }.each do |&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;| %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Show&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, category_path(&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Edit&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_category_path(&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Destroy&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, category_path(&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;), &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :delete, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: { confirm: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Are you sure?&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; } %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;nested_set_options&lt;/code&gt;は次のようにソートされたカテゴリの名前とidの2次元配列を返します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;nested_set_options(&lt;span class=&quot;synIdentifier&quot;&gt;@categories&lt;/span&gt;) { |&lt;span class=&quot;synIdentifier&quot;&gt;i&lt;/span&gt;| &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;–&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; * i.level&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;i.name&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [[&amp;quot; root&amp;quot;, 1], [&amp;quot;– child1&amp;quot;, 2], [&amp;quot;–– grandchild1&amp;quot;, 4], [&amp;quot;– child2&amp;quot;, 3]]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面を表示して確認してみます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215110501.jpg&quot; alt=&quot;f:id:nipe880324:20150215110501j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215110501j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;次に、親ノードを更新できるように、親ノードを選択するセレクトボックスをフォームに追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/categories/_form.html.erb --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :parent_id %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :parent_id, nested_set_options(Category) {|i| &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;#{&#39;-&#39; * i.level} #{i.name}&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; }, { &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: @category.parent_id, include_blank: true } %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
CategoriesコントローラーのStrongParametersに&lt;code&gt;parent_id&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/categories_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;category_params&lt;/span&gt;
  params.require(&lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:parent_id&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで親ノードを更新ができるようになりましたので、画面で確認してみます。&lt;br /&gt;
次にように親のカテゴリーを選択できます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215110831.jpg&quot; alt=&quot;f:id:nipe880324:20150215110831j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215110831j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;そして、登録すると一覧画面ではツリー状に追加されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150215/20150215110841.jpg&quot; alt=&quot;f:id:nipe880324:20150215110841j:plain:w480&quot; title=&quot;f:id:nipe880324:20150215110841j:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;もちろん、更新もできます。&lt;/p&gt;&lt;p&gt;以上です。&lt;/p&gt;&lt;p&gt;jsTreeというインタラクティブにツリーの追加や移動、削除といった操作ができるjQueryプラグインをawesome_nested_setに追加する方法も説明しています。&lt;br /&gt;
&lt;a href=&quot;http://ruby-rails.hatenadiary.com/entry/20150217/1424179269&quot; target=&quot;_blank&quot;&gt;Railsでawesome_nested_setとjsTreeでインタラクティブにツリー構造を操作する&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/collectiveidea/awesome_nested_set&quot;&gt;collectiveidea/awesome_nested_set &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://threebit.net/tutorials/nestedset/tutorial1.html&quot;&gt;A nested Set Implementation in Java and PostreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Mon, 16 Feb 2015 22:19:56 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450083747694</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでPaperTrailを使って取り消し機能を作成する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20150214/1423923524</link>
          <description>&lt;p&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150214/20150214231605.jpg&quot; width=&quot;480&quot;&gt;&lt;br /&gt;
&lt;i&gt; Photo by &lt;a href=&quot;https://www.flickr.com/photos/scottrsmith/&quot;&gt;Flickr: Scott Smith (SRisonS)&amp;#39;s Photostream&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/airblade/paper_trail&quot; target=&quot;_blank&quot;&gt;PaperTrail&lt;/a&gt;とは、モデルの変更(作成/更新/削除)をトラックするgemです。&lt;br /&gt;
モデルが変更されたら逐一データを保存するので「監査やバージョン管理」に役立ちます。&lt;/p&gt;&lt;p&gt;今回は、次のように、モデルの作成/更新/削除の取り消しをできるようにします。&lt;br /&gt;
&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150214/20150214231220.jpg&quot; width=&quot;480&quot;&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.2.0&lt;/li&gt;
&lt;li&gt;Ruby  2.2.1&lt;/li&gt;
&lt;li&gt;paper_trail 4.0.0.beta2&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#paper_trail_revert_install&quot;&gt;PaperTrailのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#paper_trail_revert_basic&quot;&gt;PaperTrailの基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#paper_trail_revert_implement&quot;&gt;PapterTrailで取消機能を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#paper_trail_revert_notice&quot;&gt;PaperTrailの使用時の注意点&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;paper_trail_revert_install&quot;&gt;1. PaperTrailaのインストール&lt;/h3&gt;Gemfileに&lt;code&gt;paper_trail&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;paper_trail&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;~&amp;gt; 4.0.0.bata&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Bundlerを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
PaperTrailがモデルの変更データを記録するテーブルの&lt;code&gt;versions&lt;/code&gt;テーブルを作成するマイグレーションファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; rails g paper_trail:&lt;span class=&quot;synStatement&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
参考までに、次のようなマイグレーションファイルが作成されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/yyyymmddhhMMss_create_versions.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateVersions&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:versions&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.string   &lt;span class=&quot;synConstant&quot;&gt;:item_type&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:null&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
      t.integer  &lt;span class=&quot;synConstant&quot;&gt;:item_id&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;:null&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
      t.string   &lt;span class=&quot;synConstant&quot;&gt;:event&lt;/span&gt;,     &lt;span class=&quot;synConstant&quot;&gt;:null&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
      t.string   &lt;span class=&quot;synConstant&quot;&gt;:whodunnit&lt;/span&gt;
      t.text     &lt;span class=&quot;synConstant&quot;&gt;:object&lt;/span&gt;
      t.datetime &lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    add_index &lt;span class=&quot;synConstant&quot;&gt;:versions&lt;/span&gt;, [&lt;span class=&quot;synConstant&quot;&gt;:item_type&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:item_id&lt;/span&gt;]
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、マイグレーションを実行します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; rake db:migrate
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;paper_trail_revert_basic&quot;&gt;2. PaperTrailの基本的な使い方&lt;/h3&gt;データの変更をトラックしたいモデルに、次のように&lt;code&gt;has_paper_trail&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_paper_trail
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;すると、様々なメソッドが使えるようになります。&lt;/p&gt;&lt;p&gt;&lt;code&gt;versions&lt;/code&gt; - モデルの変更履歴を取得する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;product = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.find(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
product.versions &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; [&amp;lt;PaperTrail::Vesion&amp;gt;, &amp;lt;PaperTrail::Vesion&amp;gt;, ...]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
何が変更されたか確認する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;product = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.find(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)

&lt;span class=&quot;synComment&quot;&gt;# 直近の更新を取得する&lt;/span&gt;
v = product.versions.last

&lt;span class=&quot;synComment&quot;&gt;# イベントを取得する&lt;/span&gt;
v.event      &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &#39;update&#39; (か &#39;create&#39; か &#39;destroy&#39;)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 更新したユーザーを取得する&lt;/span&gt;
v.whodunnit  &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &#39;153&#39; (コントローラー内で更新され、コントローラーがcurrent_userメソッドをもっていて、current_userがidを返す場合)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 更新した時刻を取得する&lt;/span&gt;
v.created_at &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; Sat, 14 Feb 2015 22:32:41 JST +09:00&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 更新/削除前のproductを取得する（作成時はnilを返す）&lt;/span&gt;
product = v.reify

&lt;span class=&quot;synComment&quot;&gt;# 次のversionを取得&lt;/span&gt;
next_version = v.next

&lt;span class=&quot;synComment&quot;&gt;# 前のversionを取得&lt;/span&gt;
previous_version = v.previous
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;paper_trail_revert_implement&quot;&gt;3. PaperTrailで取消機能を実装する&lt;/h3&gt;作成、変更、削除などを誤って実行してしまったときに、取り消しをできるように、PaperTrailを使って「取消機能」を実装します。&lt;/p&gt;&lt;p&gt;scaffoldでProductの簡単なCRUDを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g scaffold Product name price:&lt;span class=&quot;synStatement&quot;&gt;integer&lt;/span&gt; public:boolean
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
取消機能を追加したいモデルに&lt;code&gt;has_paper_trail&lt;/code&gt;を追加し、データのトラッキングをできるようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_paper_trail
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
取消リンクをflashメッセージに表示させるようにするので、Productコントローラーの&lt;code&gt;redirect_to&lt;/code&gt;のflashメッセージに取消リンク(&lt;code&gt;revert_link&lt;/code&gt;メソッド)を追加します。&lt;br /&gt;
&lt;i&gt;作成を取消したときに詳細画面に戻るとモデルがないためエラーになるので、createとupdateのリダイレクト先はindexにしています。また、showアクションは削除しました。&lt;/i&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/products_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ProductsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  before_action &lt;span class=&quot;synConstant&quot;&gt;:set_product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;only&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:update&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;]

  &lt;span class=&quot;synComment&quot;&gt;# GET /products&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# GET /products.json&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@products&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.all
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# GET /products/new&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# GET /products/1/edit&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;edit&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# POST /products&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new(product_params)

    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.save
      redirect_to products_url, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Productを作成しました: &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;revert_link&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# PATCH/PUT /products/1&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;update&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.update(product_params)
      redirect_to products_url, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Productを更新しました: &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;revert_link&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      render &lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# DELETE /products/1&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;destroy&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.destroy
    redirect_to products_url, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Productを削除しました: &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;revert_link&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_product&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;product_params&lt;/span&gt;
      params.require(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:price&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:public&lt;/span&gt;)
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、取消リンクを作成するメソッドを追加します。&lt;br /&gt;
複数の画面で使えるようにするために、Applicationコントローラーに追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/application_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActionController&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  ...

  &lt;span class=&quot;synStatement&quot;&gt;protected&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;revert_link&lt;/span&gt;
      view_context.link_to(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;取消&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, revert_version_path(&lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.versions.last), &lt;span class=&quot;synConstant&quot;&gt;:method&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;)
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、レイアウトファイルにflashメッセージを表示するように追記します。&lt;br /&gt;
また、デフォルトでリンクがエスケープされてしまうので&lt;code&gt;raw&lt;/code&gt;メソッドでリンクを表示できるようにします。&lt;br /&gt;
&lt;i&gt;※ユーザー入力値をflashメッセージに表示すると、XSS脆弱性になるので気をつけて下さい。心配な場合は、flashのnoticeとalert以外のキーを用意して、それのみrawで表示するなど通常のメッセージと分けた方が良いかもしれません。&lt;/i&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- app/views/layouts/application.html.erb --&amp;gt;&lt;/span&gt;
...
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% flash.each do |&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, msg| %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; content_tag&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :div, raw(msg), :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; =&amp;gt;&lt;/span&gt; name, :class =&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt; &amp;quot;alert&amp;quot; %&lt;span class=&quot;synError&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、取消を実施するVersionsコントローラーを作成します。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;bin/rails g controller versions
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Versionsコントローラーに&lt;code&gt;revert&lt;/code&gt;メソッド(取消)を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/versios_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;VersionsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;revert&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@version&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;PaperTrail&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Version&lt;/span&gt;.find(params[&lt;span class=&quot;synConstant&quot;&gt;:id&lt;/span&gt;])
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@version&lt;/span&gt;.reify
      &lt;span class=&quot;synIdentifier&quot;&gt;@version&lt;/span&gt;.reify.save!
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@version&lt;/span&gt;.item.destroy!
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    redirect_to &lt;span class=&quot;synConstant&quot;&gt;:back&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;@version&lt;/span&gt;.event&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; を取り消しました&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;更新/削除時は&lt;code&gt;@version.reify&lt;/code&gt;は更新/削除前(１つ前)のモデルを返すので、１つ前のモデルに更新します。&lt;br /&gt;
作成時は&lt;code&gt;@version.reify&lt;/code&gt;は&lt;code&gt;nil&lt;/code&gt;を返すので、削除を行っています。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;最後に、取消(&lt;code&gt;revert&lt;/code&gt;)アクションのルーティングを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;
post &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;versions/:id/revert&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;versions#revert&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:as&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;revert_version&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、&lt;code&gt;bin/rake s&lt;/code&gt;でサーバーを起動して動作を確認してみます。&lt;br /&gt;
ある商品を削除してみます。&lt;br /&gt;
&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150214/20150214231318.jpg&quot; width=&quot;480&quot;&gt;&lt;/p&gt;&lt;p&gt;そして、上記の「取消」リンクから取り消しを行うと、削除した商品が削除されていないことになりました。&lt;br /&gt;
&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20150214/20150214231303.jpg&quot; width=&quot;480&quot;&gt; &lt;/p&gt;&lt;br /&gt;
&lt;p&gt;もちろん、商品の削除の取り消しだけでなく、商品の作成、更新の取り消しを行うことができます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;paper_trail_revert_notice&quot;&gt;4. PaperTrailの使用時の注意点&lt;/h3&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;古いデータを削除する&lt;/h4&gt;
    &lt;p&gt;使い続けるほどversionsテーブルのレコード数が多くなってしまうので、レコードをクーロンなどで定期的に削除するようにする。&lt;/p&gt;
&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 一週間以上経過したversionレコードを削除する&lt;/span&gt;
bundle &lt;span class=&quot;synStatement&quot;&gt;exec&lt;/span&gt; rails runner &lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;PaperTrail::Version.delete_all [&#39;created_at &amp;lt; ?&#39;, 1.week.ago]&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
他にも監査するイベントやカラムを指定するなどいろいろなことができます。&lt;br /&gt;
困った場合は、&lt;a href=&quot;https://github.com/airblade/paper_trail&quot; target=&quot;_blank&quot;&gt;PaperTrail - GitHub&lt;/a&gt;を参照してください。&lt;/p&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/airblade/paper_trail&quot;&gt;airblade/paper_trail &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/255-undo-with-paper-trail?view=asciicast&quot;&gt;#255 Undo with Paper Trail - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sat, 14 Feb 2015 23:18:44 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450083704532</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>RailsでVirtual Attributes(仮想的な属性)をする</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141229/1419856433</link>
          <description>&lt;p&gt;Virtual Attributesとは、モデルのDBに存在しない仮想的な属性のことです。&lt;br /&gt;
モデルにVirtual Attributesを追加することで、DBを変更しないでフォームを変更することができるようになります。&lt;/p&gt;&lt;p&gt;言葉ではいまいち分かりづらいので、次のような、「名前」の入力フィールドと「グループ」のセレクトボックスがある画面を、&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141206/20141206212234.png&quot; alt=&quot;f:id:nipe880324:20141206212234p:plain:w420&quot; title=&quot;f:id:nipe880324:20141206212234p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Virtual Attributesを使って、DBのカラムを変更しないで、「名前」が「苗字」と「氏名」に分かれ、グループを追加する入力フィールドを追加できます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141206/20141206212239.png&quot; alt=&quot;f:id:nipe880324:20141206212239p:plain:w420&quot; title=&quot;f:id:nipe880324:20141206212239p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Virtual Attributesの使いどころとして、DBをマイグレートするのが大変、その他なんらかの理由によりDBをいじれない場合に、モデルにVirtual Attributesを追加することでフォームの内容を変更することが可能です。&lt;br /&gt;
もちろん、バリデーションも行えます。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveRecord 4.1.7&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#virtual-attributes-first-last-name&quot;&gt;名前入力欄を苗字と氏名入力欄に分ける&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#virtual-attributes-new-group-name&quot;&gt;新規グループ入力欄を追加する&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;virtual-attributes-first-last-name&quot;&gt;1. 名前入力欄を苗字と氏名入力欄に分ける&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;まず、フォームを修正し、「苗字」と「氏名」の入力フィールドを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# users/_form.html.erb

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 変更前&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;  &amp;lt;%= f.label :name %&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;  &amp;lt;%= f.text_field :name %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;--&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 変更後 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :last_name, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;苗字&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :last_name %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :first_name, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;氏名&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :first_name %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
この状態で画面にアクセスすると、&lt;code&gt;undefined method `last_name&#39; for User&lt;/code&gt;という例外が発生します。&lt;br /&gt;
そのため、モデルにVirtual Attributes(仮想的な属性)として、&lt;code&gt;last_name&lt;/code&gt;と&lt;code&gt;first_name&lt;/code&gt;を追加します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フォームからの first_name と last_name という入力を、結合し、DBのnameカラムに保存しています。&lt;/li&gt;
&lt;li&gt;また、DBのnameカラムを取得し、分割し、フォームの first_name と last_name として返しています。&lt;/li&gt;
&lt;li&gt;あとは、バリデーションエラー時の新規画面(new.html.erb)を再表示した際にデータを保持しておく必要があるので、インスタンス変数の値を使っています。&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:group&lt;/span&gt;

  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;,       &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 追加箇所開始&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# セッターを定義。new, create, updateなどのときに設定される&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;attr_writer&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;:last_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:first_name&lt;/span&gt;

  validates &lt;span class=&quot;synConstant&quot;&gt;:last_name&lt;/span&gt;,  &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:first_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

  before_validation &lt;span class=&quot;synConstant&quot;&gt;:set_name&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 画面表示時に呼ばれる&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;last_name&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@last_name&lt;/span&gt; || &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.split(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).first &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.present?
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 画面表示時に呼ばれる&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;first_name&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@first_name&lt;/span&gt; || &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.split(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).last &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.present?
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# DBのカラムはnameのため、last_nameとfirst_nameを&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# バリデーションの前に結合させて、設定しておく必要がある&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_name&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name = [&lt;span class=&quot;synIdentifier&quot;&gt;@last_name&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;@first_name&lt;/span&gt;].join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 追加箇所終了&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで、例外は発生しなくなりました。&lt;br /&gt;
では、コントローラのStrongParametersで&lt;code&gt;last_name&lt;/code&gt;と&lt;code&gt;first_name&lt;/code&gt;の入力を許可させます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;user_params&lt;/span&gt;
  params.require(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:last_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:first_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:group_id&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、サーバーを起動して動作を確認します。&lt;br /&gt;
「苗字」や「氏名」が入力されていないとバリデーションエラーになります。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141206/20141206213818.png&quot; alt=&quot;f:id:nipe880324:20141206213818p:plain:w420&quot; title=&quot;f:id:nipe880324:20141206213818p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;もちろん、「苗字」と「氏名」を入力すれば、「苗字」と「氏名」を結合した値が名前(name)としてDBに保存され、画面に表示されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141206/20141206213934.png&quot; alt=&quot;f:id:nipe880324:20141206213934p:plain:w420&quot; title=&quot;f:id:nipe880324:20141206213934p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;virtual-attributes-new-group-name&quot;&gt;2. 新規グループ入力欄を追加する&lt;/h3&gt;次は、新規グループの入力欄を追加します。&lt;br /&gt;
まずは、フォームに入力欄を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/users/_form.html.erb

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :group_id %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :group_id, Group.order(:&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;).map { |g| [g.&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, g.&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;] }, include_blank: true %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所 開始 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :new_group_name, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;グループを追加:&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :new_group_name %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 追加箇所 終了 --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
この状態で画面にアクセスすると、&lt;code&gt;undefined method `new_group_name&#39; for User&lt;/code&gt;という例外が発生します。&lt;br /&gt;
そのため、モデルにVirtual Attributes(仮想的な属性)として&lt;code&gt;new_group_name&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;attr_writer&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;:last_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:first_name&lt;/span&gt;

  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:group&lt;/span&gt;

  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;,       &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:last_name&lt;/span&gt;,  &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:first_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

  before_validation &lt;span class=&quot;synConstant&quot;&gt;:set_name&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;last_name&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@last_name&lt;/span&gt; || &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.split(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).first &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.present?
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;first_name&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@first_name&lt;/span&gt; || &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.split(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).last &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name.present?
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_name&lt;/span&gt;
    &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.name = [&lt;span class=&quot;synIdentifier&quot;&gt;@last_name&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;@first_name&lt;/span&gt;].join(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# 追加箇所 開始&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# データの変換は必要ないので単純にattr_accessorで読み書きを可能にしている&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;:new_group_name&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# バリデーション前にグループのバリデーションをする&lt;/span&gt;
  before_validation &lt;span class=&quot;synConstant&quot;&gt;:build_group&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;build_group&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# new_group_nameが設定されたいない場合は、グループを作成しない&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# ため、アーリーリターンをする&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; new_group_name.blank?

    &lt;span class=&quot;synIdentifier&quot;&gt;@group&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Group&lt;/span&gt;.new &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: new_group_name
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@group&lt;/span&gt;.valid?
      &lt;span class=&quot;synComment&quot;&gt;# グループのバリデーションエラーが発生しなかった場合、&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# 値を設定しておく。Userを保存するときにグループも一緒に作成される &lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.group = &lt;span class=&quot;synIdentifier&quot;&gt;@group&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# グループのバリデーションエラーが発生した場合、&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# グループのバリデーションエラーのメッセージをUserモデルに設定&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;@group&lt;/span&gt;.errors.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;message&lt;/span&gt;|
        errors.add &lt;span class=&quot;synConstant&quot;&gt;:new_group_name&lt;/span&gt;, message
      &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 追加箇所 終了&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


ちなみに、グループ(&lt;span class=&quot;synType&quot;&gt;Group&lt;/span&gt;)のバリデーションは次のようになっています。
&amp;gt;|ruby|
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Group&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:users&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;uniqueness&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、StrongParametersで&lt;code&gt;new_group_name&lt;/code&gt;を許可するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;user_params&lt;/span&gt;
  params.require(&lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:last_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:first_name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:group_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:new_group_name&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、動作確認をします。既に登録済みのグループ名を追加しようとするとバリデーションエラーが発生します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141206/20141206220312.png&quot; alt=&quot;f:id:nipe880324:20141206220312p:plain:w420&quot; title=&quot;f:id:nipe880324:20141206220312p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;登録されていないグループ名を入力し、登録すると、新規でグループが作成され、そのグループが設定されます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141206/20141206220403.png&quot; alt=&quot;f:id:nipe880324:20141206220403p:plain:w420&quot; title=&quot;f:id:nipe880324:20141206220403p:plain:w420&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:420px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/16-virtual-attributes&quot;&gt;#16 Virtual Attributes - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/16-virtual-attributes-revised&quot;&gt;#16 Virtual Attributes (revised) - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Mon, 29 Dec 2014 21:33:53 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450076313013</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
            <category>Rails View</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4でモデルのコールバックの一覧と順番</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141211/1418301640</link>
          <description>&lt;p&gt;RailsのActiveRecordでは、モデルのバリデーション、生成、更新、削除などの処理の前後に処理を挟み込むことができる「コールバック」という仕組みがあります。&lt;/p&gt;&lt;p&gt;そのコールバックの基礎的な使い方、コールバックの一覧と呼ばれる順序について説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveRecord 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#model-callback-overview&quot;&gt;コールバックの概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-callback-list&quot;&gt;ActiveRecordで利用可能なコールバック一覧&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-callback-overview&quot;&gt;コールバックの概要&lt;/h3&gt;&lt;code&gt;before_save&lt;/code&gt;, &lt;code&gt;after_save&lt;/code&gt;などのように&lt;code&gt;save&lt;/code&gt;、&lt;code&gt;vadliatiaon&lt;/code&gt;の前後に処理を記述することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# レコードを作成する前に create_remember_tokenメソッド が呼ばれる&lt;/span&gt;
  before_create &lt;span class=&quot;synConstant&quot;&gt;:create_remember_token&lt;/span&gt;

  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create_remember_token&lt;/span&gt;
      &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.remember_token = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.encrypt(&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.new_remember_token)
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-callback-list&quot;&gt;ActiveRecordで利用可能なコールバック一覧&lt;/h3&gt;ActiveRecordで利用できるコールバック一覧です。呼び出される順番で並んでいます。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;オブジェクトの作成(create)&lt;/h5&gt;
    
&lt;ol&gt;
&lt;li&gt;before_validation&lt;/li&gt;
&lt;li&gt;after_validation&lt;/li&gt;
&lt;li&gt;before_save&lt;/li&gt;
&lt;li&gt;around_save&lt;/li&gt;
&lt;li&gt;before_create&lt;/li&gt;
&lt;li&gt;around_create&lt;/li&gt;
&lt;li&gt;after_create&lt;/li&gt;
&lt;li&gt;after_save&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;オブジェクトの更新(update)&lt;/h5&gt;
    
&lt;ol&gt;
&lt;li&gt;before_validation&lt;/li&gt;
&lt;li&gt;after_validation&lt;/li&gt;
&lt;li&gt;before_save&lt;/li&gt;
&lt;li&gt;around_save&lt;/li&gt;
&lt;li&gt;before_update&lt;/li&gt;
&lt;li&gt;around_update&lt;/li&gt;
&lt;li&gt;after_update&lt;/li&gt;
&lt;li&gt;after_save&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;オブジェクトの削除（destroy)&lt;/h5&gt;
    
&lt;ol&gt;
&lt;li&gt;before_destroy&lt;/li&gt;
&lt;li&gt;around_destroy&lt;/li&gt;
&lt;li&gt;after_destroy&lt;/li&gt;
&lt;li&gt;after_save&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;インスタンス化&lt;/h5&gt;
    
&lt;ol&gt;
&lt;li&gt;after_initialize&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;DBからレコードをロード&lt;/h5&gt;
    
&lt;ol&gt;
&lt;li&gt;after_find&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;touchオプションによりtouchされた&lt;/h5&gt;
    
&lt;ol&gt;
&lt;li&gt;after_touch&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/active_record_callbacks.html&quot;&gt;Active Record Callbacks &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 11 Dec 2014 21:40:40 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075143522</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4で悲観的ロックを実装する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141210/1418207618</link>
          <description>&lt;p&gt;ActiveRecordでは、&lt;code&gt;lock&lt;/code&gt;とや&lt;code&gt;lock!&lt;/code&gt;メソッドを使うことで&lt;b&gt;悲観的ロック&lt;/b&gt;を実現することができます。&lt;br /&gt;
ロック自体は、基本的には&lt;code&gt;SELECT … FOR UPDATE&lt;/code&gt;が発行されてロックがされますが、DBに依存するので実際に発行されるSQLコードを確認することが大切です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveRecord 4.1&lt;/li&gt;
&lt;li&gt;mysql2 0.3.7&lt;/li&gt;
&lt;li&gt;MySQL Server 5.6.21&lt;/li&gt;
&lt;li&gt;Mac OS X 10.10&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#model-pessimistic-lock&quot;&gt;悲観的ロックとは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-pessimistic-lock-preparation&quot;&gt;MySQLの設定とモデルの準備&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-pessimistic-lock-usage&quot;&gt;悲観的ロックの使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-pessimistic-lock-confirmation&quot;&gt;(WIP)悲観的ロックのテスト&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-pessimistic-lock&quot;&gt;悲観的ロックとは&lt;/h3&gt;&lt;b&gt;悲観的ロック&lt;/b&gt;とは、競合が発生する可能性が十分あるという状況に向いたロック手法です。&lt;br /&gt;
DB側でレコードをロックし、ロックされたレコードを更新できないようにします。&lt;br /&gt;
あまりに競合が発生する場合には、ロックにより処理が待たされる時間が多くなり利便性が悪くなるため、DB自体の設計を考え直す必要があるかもしれません。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-pessimistic-lock-preparation&quot;&gt;MySQLの設定とモデルの準備&lt;/h3&gt;DBは&lt;b&gt;&quot;MySQl&quot;&lt;/b&gt;、モデルはAccountモデル、テーブルはaccountsテーブルを前提にします。そのための準備をします。&lt;/p&gt;&lt;p&gt;MySQLをインストールする&lt;br /&gt;
&lt;i&gt;※インストールできない場合は、Googleで検索してください&lt;/i&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;brew install mysql&lt;/pre&gt;&lt;p&gt;MySQL Serverを起動する&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;mysql.server start&lt;/pre&gt;&lt;p&gt;&lt;code&gt;mysql2&lt;/code&gt;を追加。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Gemfile&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# gem &#39;sqlite3&#39; # コメントアウト&lt;/span&gt;
gem &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;mysql2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;# 追加&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt;を実施する。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;bundle install&lt;/pre&gt;&lt;p&gt;database.ymlに接続情報を記載する。&lt;/p&gt;
&lt;pre class=&quot;code lang-yaml&quot; data-lang=&quot;yaml&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/database.yml&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# development:&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   &amp;lt;&amp;lt;: *default&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#   database: db/development.sqlite3&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; mysql2
  &lt;span class=&quot;synIdentifier&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; utf8
  &lt;span class=&quot;synIdentifier&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; model_test_development
  &lt;span class=&quot;synIdentifier&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; root
  &lt;span class=&quot;synIdentifier&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;:&lt;/span&gt; localhost
&lt;/pre&gt;&lt;p&gt;Accountモデルを作成する。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Account name:string balance:integer&lt;/pre&gt;&lt;p&gt;balanceカラムに制約を追加する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/20141124063626_create_accounts.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateAccounts&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:accounts&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.string &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;# 初期値 0, NOT NULL制約をつける&lt;/span&gt;
      t.integer &lt;span class=&quot;synConstant&quot;&gt;:balance&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;null&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;

      t.timestamps
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;DBを作成し、マイグレートを実施する。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:create db:migrate&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-pessimistic-lock-usage&quot;&gt;悲観的ロックの使い方&lt;/h3&gt;悲観的ロックはDBに依存するので、上記のMySQLの設定とAccountモデルとaccountsテーブルを前提として、使い方を説明します。&lt;/p&gt;&lt;p&gt;レコードを取得する際に&lt;code&gt;lock&lt;/code&gt;メソッドを使うことで、悲観的ロックをかけることができる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Account&lt;/span&gt;.lock.find(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; SELECT  `accounts`.* FROM `accounts`  WHERE `accounts`.`id` = 1 LIMIT 1 FOR UPDATE&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;また、&lt;code&gt;lock!&lt;/code&gt;メソッドを使って取得したレコードに対して悲観的ロックをかけることができる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Account&lt;/span&gt;.transaction &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  accounts = &lt;span class=&quot;synType&quot;&gt;Account&lt;/span&gt;.where(...)
  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; SELECT `accounts`.* FROM `accounts` WHERE ...&lt;/span&gt;

  account1 = accounts.detect { |&lt;span class=&quot;synIdentifier&quot;&gt;account&lt;/span&gt;| ... }
  account2 = accounts.detect { |&lt;span class=&quot;synIdentifier&quot;&gt;account&lt;/span&gt;| ... }

  account1.lock!
  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; SELECT `accounts`.* FROM `accounts` WHERE `accounts`.`id` = ? FOR UPDATE&lt;/span&gt;
  account2.lock!
  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; SELECT `accounts`.* FROM `accounts` WHERE `accounts`.`id` = ? FOR UPDATE&lt;/span&gt;

  account1.balance -= &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;
  account1.save!
  account2.balance += &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;
  account2.save!
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;model-pessimistic-lock-confirmation&quot;&gt;(WIP)悲観的ロックのテスト&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Locking/Pessimistic.html&quot;&gt;ActiveRecord::Locking::Pessimistic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 10 Dec 2014 19:33:38 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075135915</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4で楽観的ロックを実装する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141209/1418123425</link>
          <description>&lt;p&gt;ActiveRecordでは、&lt;code&gt;lock_version&lt;/code&gt;というカラムを追加するだけで&lt;b&gt;楽観的ロック&lt;/b&gt;を利用できます。&lt;br /&gt;
レコード単位で&lt;code&gt;lock_version&lt;/code&gt;を保持しているため、レコード単位での更新が競合した場合、&lt;code&gt;ActiveRecord::StaleObjectError&lt;/code&gt;例外が発生します。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveRecord 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#model-optimistic-lock-what&quot;&gt;楽観的ロックとは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-optimistic-lock-implemantation&quot;&gt;楽観的ロック（ロックバージョン）の実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-optimistic-lock-usage&quot;&gt;楽観的ロックの使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-optimistic-lock-from-views&quot;&gt;楽観的ロックを画面から扱う&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-optimistic-lock-what&quot;&gt;1. 楽観的ロックとは&lt;/h3&gt;&lt;b&gt;楽観的ロック&lt;/b&gt;とは、基本的には変更が競合しないだろうという状況に向いたロック手法です。&lt;br /&gt;
テーブルにロックバージョンカラムを持たせ、レコードを変更するたびにロックバージョンを更新し、更新しようとしたときにロックバージョンが異なっている場合には、更新の競合が発生したと判断しレコードを更新しないようにします。&lt;/p&gt;&lt;p&gt;ActiveRecordでは、&lt;code&gt;lock_version&lt;/code&gt;というカラムを追加するだけで&lt;b&gt;楽観的ロック&lt;/b&gt;を利用できます。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-optimistic-lock-implemantation&quot;&gt;2. 楽観的ロック（ロックバージョン）の実装&lt;/h3&gt;次のScaffoldが実行されているという前提で話を進めます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g scaffold Product name:string description:text price:integer&lt;/pre&gt;&lt;p&gt;まず、テーブルに&lt;code&gt;lock_version&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g migration add_lock_version_to_product lock_version:integer&lt;/pre&gt;&lt;p&gt;初期値を&quot;0&quot;にするdefaultオプションとNOT NULL制約のnullオプションを追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/YYYYMMDDHHMMSS_add_lock_version_to_product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AddLockVersionToProduct&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    add_column &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:lock_version&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:integer&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;null&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;マイグレートします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:migrate&lt;/pre&gt;&lt;p&gt;これで、Proudctモデルで自動的に&lt;b&gt;楽観的ロック&lt;/b&gt;が行われるようになりました。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-optimistic-lock-usage&quot;&gt;3. 楽観的ロックの使い方&lt;/h3&gt;ActiveRecordにより&lt;code&gt;lock_version&lt;/code&gt;が自動で更新されます。&lt;br /&gt;
また、悲観的ロックでは&lt;b&gt;レコード単位での更新の競合&lt;/b&gt;が起きると、&lt;code&gt;ActiveRecord::StaleObjectError&lt;/code&gt;例外が発生します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Productの作成&lt;/span&gt;
p = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;オレンジジュース&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;description&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;おいしいよオレンジジュース&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;)
p
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Product id: 1, name: &amp;quot;オレンジジュース&amp;quot;, ... , lock_version: 0&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# lock_version は 0（デフォルト値）&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Productの読み込み&lt;/span&gt;
p1 = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.find(p.id)
p2 = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.find(p.id)

&lt;span class=&quot;synComment&quot;&gt;# あるユーザーが商品名 (name)を更新するとlock_versionが自動で更新される&lt;/span&gt;
p1.update(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;静岡のオレンジジュース&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
p1
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;Product id: 1, name: &amp;quot;静岡のオレンジジュース&amp;quot;, ... , lock_version: 1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# lock_version が 1 になっている&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# もう一人のユーザーが値段（price）を更新するとコンフリクトが発生&lt;/span&gt;
p2.update(&lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;200&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; ActiveRecord::StaleObjectError: Attempted to update a stale object: Product&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# もう一人のユーザーが商品を削除するとコンフリクトが発生&lt;/span&gt;
p2.destroy
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; ActiveRecord::StaleObjectError: Attempted to destroy a stale object: Product&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-optimistic-lock-from-views&quot;&gt;4. 楽観的ロックを画面から扱う&lt;/h3&gt;楽観的ロックを画面から制御する場合には、フォームにHidden属性で&lt;code&gt;lock_version&lt;/code&gt;を追加する必要があります。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/products/_form.html.erb
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for(@product)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; do |f| %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.hidden_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :lock_version %&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、StrongParametersに&lt;code&gt;lock_version&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/products_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;product_params&lt;/span&gt;
  params.require(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:description&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:price&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:lock_version&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;また、悲観的ロックの競合が発生すると、&lt;code&gt;ActiveRecord::StaleObjectError&lt;/code&gt;例外が発生するので、例外をキャッチし、バリデーションエラーを表示するようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# コンフリクトが起こる可能性がある更新処理&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;update_with_conflict_validation&lt;/span&gt;(*args)
  update(*args)
&lt;span class=&quot;synPreProc&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;StaleObjectError&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.lock_version = lock_version_was
  errors.add &lt;span class=&quot;synConstant&quot;&gt;:base&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;この商品は、あなたが編集中に他の人に更新されました。&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  changes.except(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;name&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;values&lt;/span&gt;|
    errors.add name, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;was &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;values.first&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;そして、最後にコントローラーからこのメソッドを使うようにします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# PATCH/PUT /products/1&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# PATCH/PUT /products/1.json&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;update&lt;/span&gt;
  respond_to &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;format&lt;/span&gt;|
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.update_with_conflict_validation(product_params)
      format.html { redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Product was successfully updated.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
      format.json { render &lt;span class=&quot;synConstant&quot;&gt;:show&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:ok&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;location&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      format.html { render &lt;span class=&quot;synConstant&quot;&gt;:edit&lt;/span&gt; }
      format.json { render &lt;span class=&quot;synConstant&quot;&gt;json&lt;/span&gt;: &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.errors, &lt;span class=&quot;synConstant&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:unprocessable_entity&lt;/span&gt; }
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;では、画面から確認します。&lt;br /&gt;
編集画面を2つの画面から開きます。&lt;br /&gt;
(Safari)&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141125/20141125014949.png&quot; alt=&quot;f:id:nipe880324:20141125014949p:plain:w380&quot; title=&quot;f:id:nipe880324:20141125014949p:plain:w380&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:380px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
(Chrome)&lt;/p&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141125/20141125014955.png&quot; alt=&quot;f:id:nipe880324:20141125014955p:plain:w380&quot; title=&quot;f:id:nipe880324:20141125014955p:plain:w380&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:380px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;次に、Safariの画面から更新し、更新に成功します。&lt;br /&gt;
また、&lt;code&gt;lock_version&lt;/code&gt;が&lt;b&gt;&quot;1&quot;&lt;/b&gt;に自動で更新されます。&lt;br /&gt;
[&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141125/20141125015105.png&quot; alt=&quot;f:id:nipe880324:20141125015105p:plain:w380&quot; title=&quot;f:id:nipe880324:20141125015105p:plain:w380&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:380px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
]&lt;/p&gt;&lt;p&gt;今度は、Chromeの画面から更新します。こちらは、まだ&lt;code&gt;lock_version&lt;/code&gt;が&quot;0&quot;のため、&lt;code&gt;ActiveRecord::StaleObjectError&lt;/code&gt;例外が発生します。&lt;br /&gt;
その例外をキャッチする処理(&lt;code&gt;update_with_conflict_validation&lt;/code&gt;)を書いていたので、バリデーションエラーとなります。バリデーションエラーのエラーメッセージに現在のDBの値が表示されるようになっています。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141125/20141125015204.png&quot; alt=&quot;f:id:nipe880324:20141125015204p:plain:w380&quot; title=&quot;f:id:nipe880324:20141125015204p:plain:w380&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:380px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;このとき、注意しなければいけないのが、DBから値をロードしなおすので&lt;code&gt;lock_version&lt;/code&gt;が&lt;b&gt;&quot;1&quot;&lt;/b&gt;になっていることです。&lt;br /&gt;
そのため、もう一度&lt;code&gt;Update Product&lt;/code&gt;ボタンを押すと、競合を無視して上書いてしまいます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141125/20141125015225.png&quot; alt=&quot;f:id:nipe880324:20141125015225p:plain:w380&quot; title=&quot;f:id:nipe880324:20141125015225p:plain:w380&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:380px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/59-optimistic-locking-revised&quot;&gt;#59 Optimistic Locking (revised) - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic.html&quot;&gt;ActiveRecord::Locking::Optimistic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Tue, 09 Dec 2014 20:10:25 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075135896</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4でポリモフィックのリレーションを実装する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141207/1417926599</link>
          <description>&lt;p&gt;Railsでは、ActiveRecordの&lt;code&gt;has_many&lt;/code&gt;の&lt;code&gt;as&lt;/code&gt;オプションと&lt;code&gt;belogns_to&lt;/code&gt;の&lt;code&gt;polymorphic&lt;/code&gt;オプションを使うことで、DBのポリモフィックのリレーションを簡単に実装することができます。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveRecord 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-polymorphic-desc&quot;&gt;ポリモフィックリレーションとは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-polymorphic-migration&quot;&gt;ポリモフィックなテーブルの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-polymorphic-model-define&quot;&gt;モデルにhas_manyとbelongs_toを追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-polymorphic-methods&quot;&gt;使えるようになるメソッド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-polymorphic-controller&quot;&gt;ポリモフィックの画面を作成&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-polymorphic-desc&quot;&gt;1. ポリモフィックリレーションとは&lt;/h3&gt;説明のために次のER図を実装してみます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141125/20141125015430.png&quot; alt=&quot;f:id:nipe880324:20141125015430p:plain:w480&quot; title=&quot;f:id:nipe880324:20141125015430p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;記事(Article)とイベント(Event)にそれぞれコメント(Comment)を複数つけることができます。&lt;br /&gt;
記事用のコメントテーブル、イベント用のコメントテーブルとそれぞれ作ると、それぞれ同じような処理を記述しなければいけないため、コメントテーブルは参照先となるテーブルをArticleかEventのどちらかをもつようにします。&lt;br /&gt;
このような関係を「&lt;b&gt;ポリモフィック関連&lt;/b&gt;」と言います。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-polymorphic-migration&quot;&gt;2. ポリモフィックなテーブルの作成&lt;/h3&gt;まず、Eventモデルとテーブルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model event name:string content:text&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、Articleモデルとテーブルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model article title:string body:text&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
最後に、Commentモデルとテーブルを作成します。&lt;br /&gt;
このとき、参照先のIDを格納する外部キーの&lt;code&gt;xxx_id&lt;/code&gt;と参照先のモデル名を格納する&lt;code&gt;xxx_type&lt;/code&gt;という２つのカラムが必要になります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model comment content:text commentable_id:integer commentable_type:string&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
インデックスを追加しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/yyyymmddhhMMss_create_comments.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CreateComments&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    create_table &lt;span class=&quot;synConstant&quot;&gt;:comments&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;t&lt;/span&gt;|
      t.text &lt;span class=&quot;synConstant&quot;&gt;:content&lt;/span&gt;
      t.integer &lt;span class=&quot;synConstant&quot;&gt;:commentable_id&lt;/span&gt;
      t.string &lt;span class=&quot;synConstant&quot;&gt;:commentable_type&lt;/span&gt;

      t.timestamps
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

    add_index &lt;span class=&quot;synConstant&quot;&gt;:comments&lt;/span&gt;, [&lt;span class=&quot;synConstant&quot;&gt;:commentable_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:commentable_type&lt;/span&gt;]
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
マイグレーションを実行します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-polymorphic-model-define&quot;&gt;3. モデルにhas_manyとbelongs_toを追加する&lt;/h3&gt;&lt;code&gt;belogns_to&lt;/code&gt;を&lt;code&gt;polymorphic&lt;/code&gt;オプションをつけて記載します。&lt;br /&gt;
デフォルトでは&lt;code&gt;belongs_to&lt;/code&gt;の引数の&lt;code&gt;commentable&lt;/code&gt;と上記の&lt;code&gt;xxx_id&lt;/code&gt;と&lt;code&gt;xxx_type&lt;/code&gt;は同じにする合わせる必要があります。（class_nameやforeign_keyオプションを使うことで変更可能です。）&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/comment.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Comment&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:commentable&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;polymorphic&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、EventモデルとArticleモデルに&lt;code&gt;has_many&lt;/code&gt;を&lt;code&gt;as&lt;/code&gt;オプションをつけて記載します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/event.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Event&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:comments&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;as&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:commentable&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/models/article.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:comments&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;as&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:commentable&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これで、ポリモフィックの設定は完了です。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-polymorphic-methods&quot;&gt;4. 使えるようになるメソッド&lt;/h3&gt;ポリモフィック関連を設定するとCommentを作成すると自動的に、下記のように&lt;code&gt;commentable_id&lt;/code&gt;と&lt;code&gt;commentable_type&lt;/code&gt;に適切な値が設定されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# EventのCommentを作成すると自動的にCommentレコードのcommentable_idとcommentable_typeにEventの情報が設定される&lt;/span&gt;
event = &lt;span class=&quot;synType&quot;&gt;Event&lt;/span&gt;.create &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;event1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
event_comment = event.comments.create &lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;This event is awesome!&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
event_comment
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;Comment id: 1, content: &amp;quot;This event is awesome!&amp;quot;, commentable_id: 1, commentable_type: &amp;quot;Event&amp;quot;, created_at: ...&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 同様に、ArticleのCommentを作成すると自動的にCommentレコードのcommentable_idとcommentable_typeにArticleの情報が設定される&lt;/span&gt;
article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.create &lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;article1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
article_comment = article.comments.create &lt;span class=&quot;synConstant&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;This article is great!&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
article_comment
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;Comment id: 2, content: &amp;quot;This article is great!&amp;quot;, commentable_id: 1, commentable_type: &amp;quot;Article&amp;quot;, created_at: ...&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-polymorphic-controller&quot;&gt;5. ポリモフィックの画面を作成&lt;/h3&gt;おまけとして、ポリモフィック関連のCommentsコントローラーの実装方法も紹介します。&lt;br /&gt;
次のようなルーティングになっている場合、Commentsコントローラーでは、動的にArticleクラスかEventクラスを取得する必要があります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/routes.rb&lt;/span&gt;

resources &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  resources &lt;span class=&quot;synConstant&quot;&gt;:comments&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

resources &lt;span class=&quot;synConstant&quot;&gt;:events&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  resources &lt;span class=&quot;synConstant&quot;&gt;:comments&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;load_commentable&lt;/code&gt;メソッド内で、リクエストのURLからArticleかEventを判定し、ポリモフィック関連に合わせて動的にモデルを読み込むようにしています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/comments_controller.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CommentsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  before_action &lt;span class=&quot;synConstant&quot;&gt;:load_commentable&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@comments&lt;/span&gt; = &lt;span class=&quot;synIdentifier&quot;&gt;@commentable&lt;/span&gt;.comments
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@comments&lt;/span&gt; = &lt;span class=&quot;synIdentifier&quot;&gt;@commentable&lt;/span&gt;.comments.new
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@comment&lt;/span&gt; = &lt;span class=&quot;synIdentifier&quot;&gt;@commentable&lt;/span&gt;.comments.new(comment_params)
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@comment&lt;/span&gt;.save
      redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@commentable&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;コメントしました&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synStatement&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# URLからEventかArticleを取得する&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# ex: /events/:id/comments&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# ex: /articles/:id/comments&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;load_commentable&lt;/span&gt;
      resource, id = request.path.split(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;]
      &lt;span class=&quot;synIdentifier&quot;&gt;@commentable&lt;/span&gt; = resource.singularize.classify.constantize.find(id)
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;synComment&quot;&gt;# 他の方法&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# def load_commentable&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   klass = [Event, Article].detect { |c| params[&amp;quot;#{c.name.underscore}_id&amp;quot;] }&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;#   @commentable = klass.find(params[&amp;quot;#{klass.name.underscore}_id&amp;quot;])&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# end&lt;/span&gt;

    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;comment_params&lt;/span&gt;
      params ...
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/association_basics.html&quot;&gt;Active Record Associations &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot;&gt;Ruby on Rails API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sun, 07 Dec 2014 13:29:59 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075135876</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4でSTI(単一継承テーブル)を行う</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141206/1417839458</link>
          <description>&lt;p&gt;RailsのActiveRecordを使って次のようにすることでSTI(Single Table Inheritance: 単一継承テーブル)を行うことができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テーブルに&lt;code&gt;type(string)&lt;/code&gt;カラムを持たせる&lt;/li&gt;
&lt;li&gt;そのテーブルに対応するモデルクラスを継承したクラスを作成する&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例えば、本(Book)とコンピューター(Computer)の商品を扱っており、一部カラムが同じで一部カラムが違うので、次のように１つのテーブルを使い、３つのモデルを作成することで、Rails側でbooksテーブルとcomputersテーブルが存在しているようにBookオブジェクトとComputerオブジェクトを扱うことができるようになります。&lt;/p&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141204/20141204221147.png&quot; alt=&quot;f:id:nipe880324:20141204221147p:plain:w480&quot; title=&quot;f:id:nipe880324:20141204221147p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;これにより、&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.all  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; Book, Computerモデルを含めたすべてレコードをproductsテーブルから取得&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Computer&lt;/span&gt;.all &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; typeが&amp;quot;Computer&amp;quot;のレコードのみproductsテーブルから取得&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Book&lt;/span&gt;.all     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; typeが&amp;quot;Book&amp;quot;    のレコードのみproductsテーブルから取得&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;といったように、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コンピューターと本のすべての商品を透過的に取り扱うことができる&lt;/li&gt;
&lt;li&gt;本だけ、コンピューターだけといったそれぞれのモデルだけで取り扱いもできる&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;といったようにできます。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveRecord 4.1.7&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#model-sti-create-rails&quot;&gt;Railsプロジェクトの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-sti-implementation&quot;&gt;STIの実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-sti-view-controller&quot;&gt;STIに合わせてコントローラー、ビュー、ルーティングを修正&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-sti-methods&quot;&gt;STIで各モデルに各々の処理をさせる&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-sti-create-rails&quot;&gt;1. Railsプロジェクトの作成&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;Railsプロジェクトの作成する。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails new sti_test
cd sti_test&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
GeneratorでProduct、Maker、Cpu、Authorを作成し、マイグレートする。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g scaffold Product name price:integer maker_id:integer cpu_id:integer author_id:integer
rails g model maker name
rails g model cpu name
rails g model author name
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
初期データを作成する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/seeds.rb&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Celeron Corei5 Xeno&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;.each { |&lt;span class=&quot;synIdentifier&quot;&gt;name&lt;/span&gt;| &lt;span class=&quot;synType&quot;&gt;Cpu&lt;/span&gt;.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: name }
&lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Lenobo HB TOSHIBO&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;.each { |&lt;span class=&quot;synIdentifier&quot;&gt;name&lt;/span&gt;| &lt;span class=&quot;synType&quot;&gt;Maker&lt;/span&gt;.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: name }
&lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;田中 加藤 佐藤&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;.each { |&lt;span class=&quot;synIdentifier&quot;&gt;name&lt;/span&gt;| &lt;span class=&quot;synType&quot;&gt;Author&lt;/span&gt;.create! &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: name }
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、初期データを投入する。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:seed&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
各モデルにリレーションとバリデーション定義を追加する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/cpu.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Cpu&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# app/models/maker.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Maker&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# app/models/author.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Author&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:cpu&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:maker&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:author&lt;/span&gt;

  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;,  &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:price&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;これで、一通りの準備ができました。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-sti-implementation&quot;&gt;2. STIの実装&lt;/h3&gt;では、STIを実装していきます。&lt;/p&gt;&lt;p&gt;まず、&lt;code&gt;products&lt;/code&gt;テーブルに&lt;code&gt;type&lt;/code&gt;カラムを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g migration add_type_to_products type:string&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Book, Computerオブジェクトを取得する場合にtypeカラムを検索条件として使うので、インデックスをつけておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# db/migrate/20141204133904_add_type_to_products.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AddTypeToProducts&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    add_column &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:string&lt;/span&gt;
    add_index  &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;# インデックスも追加&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
マイグレートを実行します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、バリデーションも追加しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/products.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:cpu&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:maker&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:author&lt;/span&gt;

  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;,  &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:price&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt;,  &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、&lt;code&gt;Product&lt;/code&gt;モデルを継承した&lt;code&gt;Book&lt;/code&gt;モデルと&lt;code&gt;Computer&lt;/code&gt;モデルを作成します。&lt;br /&gt;
ついでに、バリデーションも追加しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Book&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:author_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# app/models/computer.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Computer&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:cpu_id&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:maker_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
これで、Railsにより自動的にSTIが行われるようになります。&lt;br /&gt;
挙動をコンソールで確認してみましょう。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# typeに&amp;quot;Computer&amp;quot;を設定すると、自動的にComputerモデルが作成される&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Computer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;Computer id: nil, name: nil, price: nil, type: &amp;quot;Computer&amp;quot;, maker_id: nil, cpu_id: nil, author_id: nil, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# typeに&amp;quot;Book&amp;quot;を設定すると、自動的にBookモデルが作成される&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;Book id: nil, name: nil, price: nil, type: &amp;quot;Book&amp;quot;, maker_id: nil, cpu_id: nil, author_id: nil, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# typeに&amp;quot;&amp;quot;を設定すると、Productモデルが作成される(nil, false, [], {} などもProductモデルが作成される)&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &amp;lt;Product id: nil, name: nil, price: nil, type: &amp;quot;&amp;quot;, maker_id: nil, cpu_id: nil, author_id: nil, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# typeにサブクラス名かブランク以外の値を設定するとActiveRecord::SubclassNotFound例外が発生する&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new &lt;span class=&quot;synConstant&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; ActiveRecord::SubclassNotFound: Invalid single-table inheritance type: hoge is not a subclass of Product&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-sti-view-controller&quot;&gt;3. STIに合わせてコントローラー、ビュー、ルーティングを修正&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;まずは、ビューから表示内容を微調整していきます。&lt;br /&gt;
一覧画面は&lt;code&gt;id&lt;/code&gt;ではなく、名前(&lt;code&gt;name&lt;/code&gt;)を表示するように修正します。&lt;br /&gt;
&lt;code&gt;try&lt;/code&gt;メソッドを使うことで、レシーバー(呼び出し側: maker, cpu, authorなど)が&lt;code&gt;nil&lt;/code&gt;の場合、&lt;code&gt;nil&lt;/code&gt;が返されるので、メソッドが定義されていないといった例外が発生しないようにできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/products/index.html.erb
...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Listing products&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;thead&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Name&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Price&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 開始 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Type&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 終了 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Maker&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Cpu&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Author&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;colspan&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;thead&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @products.each do |product| %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.price&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 開始 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.maker.try(:name)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.cpu.try(:name)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.author.try(:name)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 終了 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Show&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, product %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Edit&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_product_path(product) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Destroy&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, product, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :delete, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: { confirm: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Are you sure?&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; } %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;New Product&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, new_product_path %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
詳細画面も&lt;code&gt;id&lt;/code&gt;ではなく、名前(&lt;code&gt;name&lt;/code&gt;)を表示するように修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/products/show.html.erb

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;notice&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; notice&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Name:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @product.name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Price:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @product.price&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 開始--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Type:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @product.type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Maker:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @product.maker.try(:name)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Cpu:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @product.cpu.try(:name)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Author:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @product.author.try(:name)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 終了 --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Edit&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_product_path(@product) %&amp;gt;&lt;/span&gt; |
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Back&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, products_path %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
次に、新規/編集画面で、メーカー、CPU、著者をテキストフィールドからセレクトボックスに変更します。&lt;/p&gt;&lt;p&gt;また、&lt;code&gt;form_for&lt;/code&gt;に&lt;code&gt;as: :product&lt;/code&gt;オプションを追加します。&lt;br /&gt;
これは、&lt;code&gt;@product&lt;/code&gt;の中身がBookオブジェクトやComputerオブジェクトになる可能性があり、その場合、name属性の値が&lt;code&gt;book[name]&lt;/code&gt;や&lt;code&gt;computer[name]&lt;/code&gt;などになり、コントローラーのStrongParametersの箇所でエラーになってしまいます。そのため、&lt;code&gt;@product&lt;/code&gt;の中身に関係なくname属性を&lt;code&gt;product[name]&lt;/code&gt;とするようにするために必要です。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/products/_form.html.erb
&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 form_for に as: :product を追加する --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for(@product,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; as: :product) do |f| %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% if @product.errors.any? %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;error_explanation&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; pluralize(@product.errors.count,&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;) %&amp;gt;&lt;/span&gt; prohibited this product from being saved:&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @product.errors.full_messages.each do |message| %&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; message&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.text_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :price %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.number_field&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :price %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 開始 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, [&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Computer&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Book&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;].map { |t| [t, t] }, include_blank: true %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :maker_id, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;メーカー(Computer時のみ必須)&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :maker_id, Maker.all.map { |m| [m.&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, m.&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;] }, include_blank: true %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :cpu_id, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;CPU(Computer時のみ必須)&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :cpu_id, Cpu.all.map { |c| [c.&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, c.&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;] }, include_blank: true %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.label&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :author_id, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;著者(Book時のみ必須)&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.select&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; :author_id, Author.all.map { |a| [a.&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, a.&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;] }, include_blank: true %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 終了 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; f.submit&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
フォームにタイプ(type)フィールドを追加したので、コントローラーのStrongParametersにもタイプ(type)を追加します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/products_controller.rb&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;product_params&lt;/span&gt;
      params.require(&lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;).permit(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:price&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:type&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:maker_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:cpu_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:author_id&lt;/span&gt;)
    &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
最後に、ルーティングを設定します。&lt;br /&gt;
Bookオブジェクト、Computerオブジェクトの際には、&lt;code&gt;books_path&lt;/code&gt;や&lt;code&gt;computers_path&lt;/code&gt;に遷移しようとするのでルーティングも追記しておきます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Rails&lt;/span&gt;.application.routes.draw &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  resources &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# booksやcomputersのパスでもProductsControllerを使うように設定する&lt;/span&gt;
  resources &lt;span class=&quot;synConstant&quot;&gt;:books&lt;/span&gt;,     &lt;span class=&quot;synConstant&quot;&gt;controller&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
  resources &lt;span class=&quot;synConstant&quot;&gt;:computers&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;controller&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;

  root &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;products#index&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;rake routes&lt;/code&gt;で設定を確認してみます。&lt;br /&gt;
どのURIパターンでも、&lt;code&gt;products&lt;/code&gt;コントローラーが呼ばれるようなルーティングの設定になっています。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rake routes
       Prefix Verb   URI Pattern                   Controller#Action
     products GET    /products(.:format)           products#index
              POST   /products(.:format)           products#create
     ...............

        books GET    /books(.:format)              products#index
              POST   /books(.:format)              products#create
     ...............

    computers GET    /computers(.:format)          products#index
              POST   /computers(.:format)          products#create
     ...............&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
ここでは、コントローラー/ビューをProductのものを利用しましたが、&lt;br /&gt;
服、家具などサブクラスの数が増えたり、サブクラスごとにコントローラーの処理やビューの表示を変えたい場合は、別々のコントローラー/ビューを用意するといいでしょう。&lt;br /&gt;
しかし、大きく異なる場合は、そもそもサブクラス化する必要があるのか、別々のテーブル、モデルにするべきかもしれないことを検討するべきだと思います。&lt;/p&gt;&lt;p&gt;では、&lt;code&gt;rails s&lt;/code&gt;でサーバーを起動し、画面を表示してみましょう。&lt;br /&gt;
登録、編集、削除ができる思います。本番ではJSを使ったり、条件分岐を使って、表示内容を変えると良いと思います。&lt;/p&gt;&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141204/20141204225552.png&quot; alt=&quot;f:id:nipe880324:20141204225552p:plain:w480&quot; title=&quot;f:id:nipe880324:20141204225552p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-sti-methods&quot;&gt;4. STIで各モデルに各々の処理をさせる&lt;/h3&gt;せっかく、STIにしたので、ProductをBook、Computerを意識しないで透過的に扱えるようにしたいですね。&lt;br /&gt;
そうしたい場合は、次のように各サブクラスに同じ名前のメソッドを定義してあげればよいです。&lt;/p&gt;&lt;p&gt;例えば、BookやComputerオブジェクトに合わせた商品名を表示するメソッド(&lt;code&gt;full_name&lt;/code&gt;）を定義してみます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/book.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Book&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:author_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;full_name&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;name&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; written by &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;author.name&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# app/models/coumputer.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Computer&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:cpu_id&lt;/span&gt;,   &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:maker_id&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;full_name&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;#{&lt;/span&gt;name&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;cpu.name&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;maker.name&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
そして、一覧画面からこのメソッドを呼び出すように修正します。&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/products/index.html.erb
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Listing products&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;thead&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 開始 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Type&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Name&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;Price&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 終了 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;colspan&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;thead&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @products.each do |product| %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 開始 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.type&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.full_name&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; product.price&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- 修正箇所 終了 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Show&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, product %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Edit&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, edit_product_path(product) %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Destroy&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, product, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: :delete, &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;: { confirm: &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;Are you sure?&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; } %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; link_to&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;New Product&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;, new_product_path %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
では、画面を確認してみましょう。Book、Computerに合わせた商品名が表示されていることがわかると思います。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20141204/20141204222826.png&quot; alt=&quot;f:id:nipe880324:20141204222826p:plain:w480&quot; title=&quot;f:id:nipe880324:20141204222826p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;このようにして、RailsのSTIを使うことで、DBのテーブルを１つのままで、モデルの継承関係を扱うことができます。&lt;br /&gt;
以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/394-sti-and-polymorphic-associations&quot;&gt;#394 STI and Polymorphic Associations (pro) - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Sat, 06 Dec 2014 13:17:38 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450076142625</guid>
          
            <category>Rails中級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4で1対1のリレーションをモデルに実装する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141205/1417779929</link>
          <description>&lt;p&gt;Railsでは、ActiveRecordの&lt;code&gt;has_one&lt;/code&gt;と&lt;code&gt;belogns_to&lt;/code&gt;を使って、DBの1対1のテーブル間のリレーションをモデルに簡単に実装することができます。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveRecord 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-one-desc&quot;&gt;1対1関連とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-one-forigen_key&quot;&gt;参照先の外部キーを追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-one-model-define&quot;&gt;モデルにhas_oneとbelongs_toを追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-one-methods&quot;&gt;使えるようになるメソッド&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-one-desc&quot;&gt;1. 1対1関連とは&lt;/h3&gt;説明のために次のER図を実装してみます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140810/20140810053307.png&quot; alt=&quot;f:id:nipe880324:20140810053307p:plain:w480&quot; title=&quot;f:id:nipe880324:20140810053307p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;注文一つには多くとも請求書１つがあるビジネスの場合、「注文」から見ると「請求書」は&lt;b&gt;&quot;1&quot;&lt;/b&gt;です。&lt;br /&gt;
請求書１通にも注文が必ず１つあるビジネスの場合、「請求書」から見ると「注文」は&lt;b&gt;&quot;1&quot;&lt;/b&gt;です。&lt;br /&gt;
このような関係を「&lt;b&gt;1対1関係&lt;/b&gt;」といいます。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;i&gt;※注文と請求書のどちらに&lt;code&gt;has_one&lt;/code&gt;を書き、どちらに&lt;code&gt;belongs_to&lt;/code&gt;を書けばいいのか？&lt;br /&gt;
明確な答えはありませんが、意味的に「注文は請求書に属する(belongs_to)」よりも「請求書は注文に属する(belongs_to)」の方がしっくりくるので、Invoiceクラスに&lt;code&gt;belongs_to&lt;/code&gt;を今回は記載します。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-one-forigen_key&quot;&gt;2. 参照先の外部キーを追加する&lt;/h3&gt;まず、belogns_to側のテーブル（今回はinvoicesテーブル）に&lt;code&gt;xxx_id&lt;/code&gt;という名で外部キーを追加します。&lt;br /&gt;
&lt;code&gt;xxx&lt;/code&gt;の箇所は参照先のモデル名にする必要があります。&lt;br /&gt;
今回の場合は、Orderモデルを参照するため、&lt;code&gt;order_id&lt;/code&gt;にする必要があります。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Orderモデルとordersテーブルの作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Order order_date:date
rake db:migrate&lt;/pre&gt;&lt;p&gt;Invoiceモデルとinvoicesテーブルの作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Invoice order_id:integer
rake db:migrate&lt;/pre&gt;&lt;p&gt;もし、既にInvoiceクラスとinvoicesテーブルが存在する場合は、invoicesテーブルにorder_idのみを追加します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g migration add_order_id_to_invoices order_id:integer
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-one-model-define&quot;&gt;3. モデルにhas_oneとbelongs_toを追加する&lt;/h3&gt;ではモデルファイルに1対1関連の宣言を追加します。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;「注文」に&lt;code&gt;has_one&lt;/code&gt;を追加します。&lt;br /&gt;
&lt;i&gt;&quot;Order has_one :invoice&quot;&lt;/i&gt;と読めば、「注文(Order)は請求書(Invoice)を１つ持つ」と訳せます。&lt;br /&gt;
また、&lt;code&gt;dependent: :destroy&lt;/code&gt;オプションを追加することで、destoryメソッドで注文を削除したら、Railsがその注文に紐づいている請求書も自動で削除してくれます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/order.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_one &lt;span class=&quot;synConstant&quot;&gt;:invoice&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;dependent&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;has_one&lt;/code&gt;メソッドには次のようなオプションを指定できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class_name&lt;/code&gt;オプションで関連するモデルのクラス名を指定でき、関連名と参照先のクラス名を異なるものにできできる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreign_key&lt;/code&gt;オプションで参照先を参照する外部キーの名前を指定できる。デフォルトは、&lt;code&gt;参照先のモデル名_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependent&lt;/code&gt;オプションで親オブジェクトが削除された時の扱いを指定できる。&lt;code&gt;destroy&lt;/code&gt;などが指定可能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;as&lt;/code&gt;オプションでポリモフィック関連を定義できる。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;など&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;「請求書」に&lt;code&gt;belogns_to&lt;/code&gt;を追加します。&lt;br /&gt;
&lt;i&gt;&quot;Invoice belongs_to :order&quot;&lt;/i&gt;と読めば、「請求書(Invoice)は注文(Order)に属する」と訳せます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/invoice.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Invoice&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:order&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;belogns_to&lt;/code&gt;メソッドには次のようなオプションを指定できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class_name&lt;/code&gt;オプションで関連するモデルのクラス名を指定でき、関連名と参照先のクラス名を異なるものにできできる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreign_key&lt;/code&gt;オプションで参照先を参照する外部キーの名前を指定できる。デフォルトは、&lt;code&gt;参照先のモデル名_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependent&lt;/code&gt;オプションで親オブジェクトが削除された時の扱いを指定できる。&lt;code&gt;destroy&lt;/code&gt;と&lt;code&gt;delete&lt;/code&gt;が指定可能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;polymorphic&lt;/code&gt;オプションでポリモフィック関連を定義できる。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;など&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-one-methods&quot;&gt;4. 使えるようになるメソッド&lt;/h3&gt;これらを追加することで自動的に次のようなメソッドが使えるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 作成&lt;/span&gt;
order = &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.create( &lt;span class=&quot;synConstant&quot;&gt;order_date&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now ) &lt;span class=&quot;synComment&quot;&gt;# orderを作成し、DBに保存&lt;/span&gt;
invoice = &lt;span class=&quot;synType&quot;&gt;Invoice&lt;/span&gt;.create &lt;span class=&quot;synComment&quot;&gt;# invoiceを作成し、DBに保存&lt;/span&gt;

order.invoice &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; nil&lt;/span&gt;
order.invoice.build &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; エラー&lt;/span&gt;

invoice.order &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; nil&lt;/span&gt;
invoice.order.build &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; エラー&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# リレーション&lt;/span&gt;
order.invoice = invoice &lt;span class=&quot;synComment&quot;&gt;# orderとinvoiceを関連づける&lt;/span&gt;

order.invoice &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; invoiceを返す&lt;/span&gt;
invoice.order &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; orderを返す&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 削除&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Invoice&lt;/span&gt;.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
order.destory &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; dependent: :destroyが指定されているので、invoiceも削除される&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Invoice&lt;/span&gt;.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 0&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/association_basics.html&quot;&gt;Active Record Associations &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot;&gt;Ruby on Rails API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Fri, 05 Dec 2014 20:45:29 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075135867</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4で多対多のリレーションをモデルに実装する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141204/1417688260</link>
          <description>&lt;p&gt;Railsでは、ActiveRecordの&lt;code&gt;has_many&lt;/code&gt;か&lt;code&gt;has_and_belongs_to_many&lt;/code&gt;を使うことで、DBの「多対多」のテーブル間の関連をモデルに簡単に実装することができます。&lt;/p&gt;&lt;p&gt;&lt;i&gt;※&lt;code&gt;has_many&lt;/code&gt;と&lt;code&gt;has_and_belongs_to_many&lt;/code&gt;の違い&lt;br /&gt;
多対多関係を作るには、中間テーブルを作成する必要があります。&lt;br /&gt;
&lt;code&gt;has_many&lt;/code&gt;の場合、中間テーブルを表現するクラスを作らないといけないが、その中間テーブルに属性やバリデーションなどを追加できます。&lt;br /&gt;
&lt;code&gt;has_and_belongs_to_many&lt;/code&gt;の場合、中間テーブルのクラスを作らなくて良いが、中間テーブルにカスタマイズができません。&lt;/p&gt;&lt;p&gt;個人的には、そこまで手間ではないので、&lt;code&gt;has_many&lt;/code&gt;で拡張性をもたせた方がよいと思います。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveRecord 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-n-n-desc&quot;&gt;多対多関連とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-n-n-migration&quot;&gt;マイグレーションファイルを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-n-n-model-define&quot;&gt;モデルにhas_manyとbelongs_toを追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-n-n-methods&quot;&gt;使えるようになるメソッド&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-n-n-desc&quot;&gt;1. 多対多関連とは&lt;/h3&gt;説明のために次のER図を実装してみます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140810/20140810044509.png&quot; alt=&quot;f:id:nipe880324:20140810044509p:plain:w480&quot; title=&quot;f:id:nipe880324:20140810044509p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;１商品は複数のカテゴリに属するので、「商品」から見ると「カテゴリ」は&lt;b&gt;&quot;多&quot;&lt;/b&gt;です。&lt;br /&gt;
１つのカテゴリには、多数の商品が存在するので、「カテゴリ」から見ると「商品」も&lt;b&gt;&quot;多&quot;&lt;/b&gt;です。&lt;br /&gt;
このような関係を「&lt;b&gt;多対多関係&lt;/b&gt;」といいます。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-n-n-migration&quot;&gt;2. マイグレーションファイルを作成する&lt;/h3&gt;それぞれのテーブルを普通に作成し、最後に中間テーブルに両方のテーブルの外部キーを定義して作成します。&lt;/p&gt;&lt;p&gt;Categoryモデルとcategoriesテーブルの作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Category name:string
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Productモデルとproductsテーブルの作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Product name:string price:integer
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;has_many&lt;/code&gt;の場合、CategoryProductモデルとcategories_productsテーブルの作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model CategoryProduct category_id:integer product_id:integer
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;has_and_belongs_to_many&lt;/code&gt;の場合、categories_productsテーブルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g migration create_categories_products category_id:integer product_id:integer
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-n-n-define&quot;&gt;3. モデルにhas_manyとbelongs_toを追加する&lt;/h3&gt;ではモデルファイルに多対多関連の宣言を追加します。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;code&gt;has_many&lt;/code&gt;の場合&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:category_products&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;through&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:category_products&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# throughオプションによりcategory_products経由でproductsにアクセスできるようになる&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 具体的には、category.productsで商品にアクセスができる&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/models/category_product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;CategoryProduct&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:product&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:category_products&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;through&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:category_products&lt;/span&gt;

  &lt;span class=&quot;synComment&quot;&gt;# throughオプションによりcategory_products経由でcategoriesにアクセスできるようになる&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 具体的には、product.categoriesでカテゴリにアクセスができる&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;has_many&lt;/code&gt;メソッドには次のようなオプションを指定できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class_name&lt;/code&gt;オプションで関連するモデルのクラス名を指定でき、関連名と参照先のクラス名を異なるものにできできる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreign_key&lt;/code&gt;オプションで参照先を参照する外部キーの名前を指定できる。デフォルトは、&lt;code&gt;参照先のモデル名_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependent&lt;/code&gt;オプションで親オブジェクトが削除された時の扱いを指定できる。&lt;code&gt;destroy&lt;/code&gt;と&lt;code&gt;delete_all&lt;/code&gt;などが指定可能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;as&lt;/code&gt;オプションでポリモフィック関連を定義できる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;through&lt;/code&gt;オプションでモデル接続の関連を設定できる。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;など&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;code&gt;has_and_belongs_to_many&lt;/code&gt;の場合&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/category.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_and_belongs_to_many &lt;span class=&quot;synConstant&quot;&gt;:products&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_and_belongs_to_many &lt;span class=&quot;synConstant&quot;&gt;:categories&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-n-n-methods&quot;&gt;4. 使えるようになるメソッド&lt;/h3&gt;これらを追加することで自動的に次のようなメソッドが使えるようになります。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;code&gt;has_many&lt;/code&gt;の場合&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 作成&lt;/span&gt;
category1 = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;カテゴリ1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# category単体で作成&lt;/span&gt;
product1 = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1000&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# product単体で作成&lt;/span&gt;

category1.products.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;200&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# category1に関係したproductを作成&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# リレーション&lt;/span&gt;
category1.products.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
category1.products &amp;lt;&amp;lt; product1 &lt;span class=&quot;synComment&quot;&gt;# product1をcategory1に関連させた&lt;/span&gt;
category1.products.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;

product1.categories &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; product1に関連しているcategoryの配列&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 中間テーブル&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;CategoryProduct&lt;/span&gt;.all &lt;span class=&quot;synComment&quot;&gt;# category_productsの全てのレコードを取得&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# CategoryProductモデルが存在するため、中間テーブルのバリデーションや属性の追加などができる&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;&lt;code&gt;has_and_belongs_to_many&lt;/code&gt;の場合&lt;/h4&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 作成&lt;/span&gt;
category1 = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;カテゴリ1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# category単体で作成&lt;/span&gt;
product1 = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;1000&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# product単体で作成&lt;/span&gt;

category1.products.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;200&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# category1に関係したproductを作成&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# リレーション&lt;/span&gt;
category1.products.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
category1.products &amp;lt;&amp;lt; product1 &lt;span class=&quot;synComment&quot;&gt;# product1をcategory1に関連させた&lt;/span&gt;
category1.products.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;

product1.categories &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; product1に関連しているcategoryの配列&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/association_basics.html&quot;&gt;Active Record Associations &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot;&gt;Ruby on Rails API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 04 Dec 2014 19:17:40 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075135857</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails4で1対多のリレーションをモデルに実装する</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20141203/1417601540</link>
          <description>&lt;p&gt;Railsでは、ActiveRecordの&lt;code&gt;has_many&lt;/code&gt;と&lt;code&gt;belogns_to&lt;/code&gt;を使うことで、DBの「1対多」のテーブル間のリレーションをモデルに簡単に実装することができます。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;li&gt;ActiveRecord 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-n-desc&quot;&gt;1対多関連とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-n-forigen_key&quot;&gt;参照先の外部キーを追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-n-model-define&quot;&gt;モデルにhas_manyとbelongs_toを追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-relation-one-n-methods&quot;&gt;使えるようになるメソッド&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-n-desc&quot;&gt;1. 1対多関連とは&lt;/h3&gt;説明のために次のER図を実装してみます。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140810/20140810053124.png&quot; alt=&quot;f:id:nipe880324:20140810053124p:plain:w480&quot; title=&quot;f:id:nipe880324:20140810053124p:plain:w480&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:480px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;顧客1人が複数回注文をするので、「顧客」から見ると「注文」は&lt;b&gt;&quot;多&quot;&lt;/b&gt;です。&lt;br /&gt;
また、１注文は必ず一人の顧客から注文されないので、「注文」から見ると「顧客」は&lt;b&gt;&quot;1&quot;&lt;/b&gt;です。&lt;br /&gt;
このような関係を「&lt;b&gt;1対多関係&lt;/b&gt;」といいます。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-n-forigen_key&quot;&gt;2. 参照先の外部キーを追加する&lt;/h3&gt;まず、多側のテーブル（今回はordersテーブル）に&lt;code&gt;xxx_id&lt;/code&gt;という名で外部キーを追加します。&lt;br /&gt;
&lt;code&gt;xxx&lt;/code&gt;の箇所は参照先のモデル名にする必要があります。&lt;br /&gt;
今回の場合は、Customerモデルを参照するため、&lt;code&gt;customer_id&lt;/code&gt;にする必要があります。&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Customerモデルとcustomersテーブルの作成をします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Customer name:string
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
Orderモデルとordersテーブルの作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g model Order customer_id:integer order_date:date
rake db:migrate&lt;/pre&gt;&lt;p&gt;もし、モデルが既に存在していて外部キーのみを追加したい場合は、customer_idのみを追加するマイグレーションファイルを作成します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;rails g migration add_customer_id_to_orders customer_id:integer
rake db:migrate&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-n-model-define&quot;&gt;3. モデルにhas_manyとbelongs_toを追加する&lt;/h3&gt;ではモデルファイルに1対多関連の宣言を追加します。&lt;/p&gt;&lt;p&gt;「1側」に&lt;code&gt;has_many&lt;/code&gt;を追加します。&lt;br /&gt;
&lt;i&gt;&quot;Customer has_many orders&quot;&lt;/i&gt;と読めば、「顧客(customer)は複数の注文(order)を持つ」と訳せます。&lt;br /&gt;
また、&lt;code&gt;dependent: :destroy&lt;/code&gt;オプションを追加することで、customerレコードをdestoryメソッドで削除したら、Railsがそのcustomerに紐づいていたorderを全て削除してくれます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/customer.rb 1側&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Customer&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:orders&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;dependent&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:destroy&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;has_many&lt;/code&gt;メソッドには次のようなオプションを指定できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class_name&lt;/code&gt;オプションで関連するモデルのクラス名を指定でき、関連名と参照先のクラス名を異なるものにできできる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreign_key&lt;/code&gt;オプションで参照先を参照する外部キーの名前を指定できる。デフォルトは、&lt;code&gt;参照先のモデル名_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependent&lt;/code&gt;オプションで親オブジェクトが削除された時の扱いを指定できる。&lt;code&gt;destroy&lt;/code&gt;と&lt;code&gt;delete_all&lt;/code&gt;などが指定可能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;as&lt;/code&gt;オプションでポリモフィック関連を定義できる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;through&lt;/code&gt;オプションでモデル接続の関連を設定できる。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;など&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;「多側」に&lt;code&gt;belongs_to&lt;/code&gt;メソッドを記載します。&lt;br /&gt;
&lt;i&gt;&quot;Order belogns_to customer&quot;&lt;/i&gt;と読めば、「注文(order)は1つの顧客(customer)に属する」と訳せます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/order.rb 多側&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:customer&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;belogns_to&lt;/code&gt;メソッドには次のようなオプションを指定できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class_name&lt;/code&gt;オプションで関連するモデルのクラス名を指定でき、関連名と参照先のクラス名を異なるものにできできる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreign_key&lt;/code&gt;オプションで参照先を参照する外部キーの名前を指定できる。デフォルトは、&lt;code&gt;参照先のモデル名_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependent&lt;/code&gt;オプションで親オブジェクトが削除された時の扱いを指定できる。&lt;code&gt;destroy&lt;/code&gt;と&lt;code&gt;delete&lt;/code&gt;が指定可能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;polymorphic&lt;/code&gt;オプションでポリモフィック関連を定義できる。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;など&lt;/p&gt;&lt;p&gt;例えば、デフォルトの&lt;code&gt;order.customer&lt;/code&gt;ではなく、&lt;code&gt;order.user&lt;/code&gt;でアクセス可能にする&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/order.rb 多側&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;class_name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;foreign_key&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-relation-one-n-methods&quot;&gt;4. 使えるようになるメソッド&lt;/h3&gt;これらを追加することで自動的に次のようなメソッドが使えるようになります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 作成&lt;/span&gt;
taro = &lt;span class=&quot;synType&quot;&gt;Customer&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;顧客1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# taroを作成し、DBに保存&lt;/span&gt;
order1 = taro.orders.build(&lt;span class=&quot;synConstant&quot;&gt;order_date&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now) &lt;span class=&quot;synComment&quot;&gt;# order1を作成（newの代わりにbuildを使う）&lt;/span&gt;
order1.save &lt;span class=&quot;synComment&quot;&gt;# order1をDBに保存&lt;/span&gt;
order2 = taro.orders.create(&lt;span class=&quot;synConstant&quot;&gt;order_date&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.now) &lt;span class=&quot;synComment&quot;&gt;# order2を作成し、保存&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# リレーション&lt;/span&gt;
taro.orders         &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; orderオブジェクトの配列&lt;/span&gt;
taro.orders.exists? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true (存在するか判定する)&lt;/span&gt;
taro.orders.empty?  &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false (空か判定する)&lt;/span&gt;
order1.customer     &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; customerオブジェクト（orderを所持しているcustomer）&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# taro.orders内のレコードのみから検索ができる&lt;/span&gt;
taro.orders.find(...)
taro.orders.find_by(...)
aro.orders.where(...)

&lt;span class=&quot;synComment&quot;&gt;# 削除&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
taro.destory &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; dependent: :destroyが指定されているので、orderも削除される&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.count &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 0&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/association_basics.html&quot;&gt;Active Record Associations &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot;&gt;Ruby on Rails API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Wed, 03 Dec 2014 19:12:20 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450075135838</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails ModelのScope（スコープ）の使い方（scopeメソッドとdefault_scopeメソッド）</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140814/1407994568</link>
          <description>&lt;p&gt;モデルのスコープ機能とは、共通的に使うクエリをモデルのメソッドのように定義できる機能です。&lt;br /&gt;
こうすることにより、複雑なSQLを何度も書かなくてよくなり、可読性と保守性を向上させることができます。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#scope-overview&quot;&gt;スコープ(Scope)の概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#passing-in-argumetns&quot;&gt;スコープに引数を指定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#merging-of-scopes&quot;&gt;スコープのマージ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#applying-a-default-scope&quot;&gt;デフォルトスコープの設定&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;scope-overview&quot;&gt;1. スコープ(Scope)の概要&lt;/h3&gt;以下の2つの方法で「共通的に使うクエリをスコープ」として定義できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義方法1: scopeメソッドで定義&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  scope &lt;span class=&quot;synConstant&quot;&gt;:published&lt;/span&gt;, -&amp;gt; { where(&lt;span class=&quot;synConstant&quot;&gt;published&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;) }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 定義方法2: クラスメソッドのように定義&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;published&lt;/span&gt;
    where(&lt;span class=&quot;synConstant&quot;&gt;published&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;)
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;次のように呼び出すことができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.published &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; publishedカラムが&amp;quot;true&amp;quot;のPost達を取得&lt;/span&gt;

category = &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.first
category.posts.published &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; カテゴリーに属するpublishedカラムが&amp;quot;true&amp;quot;のPost達を取得&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;passing-in-argumetns&quot;&gt;2. スコープに引数を指定&lt;/h3&gt;&lt;code&gt;scope&lt;/code&gt;メソッドに引数を渡すこともできます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/modes/post.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  scope &lt;span class=&quot;synConstant&quot;&gt;:created_before&lt;/span&gt;, -&amp;gt;(time) { where(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;created_at &amp;lt; ?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, time) }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 使用方法&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.created_before(&lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.local(&lt;span class=&quot;synConstant&quot;&gt;2011&lt;/span&gt;)) &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; 2011年より前に作成されたPostレコードを取得&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;merging-of-scopes&quot;&gt;3. スコープのマージ&lt;/h3&gt;スコープ同士をマージすることにより、&lt;code&gt;where&lt;/code&gt;句の&lt;code&gt;AND&lt;/code&gt;条件を実現することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  scope &lt;span class=&quot;synConstant&quot;&gt;:inactive&lt;/span&gt;, -&amp;gt; { where &lt;span class=&quot;synConstant&quot;&gt;state&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;inactive&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
  scope &lt;span class=&quot;synConstant&quot;&gt;:finished&lt;/span&gt;, -&amp;gt; { where &lt;span class=&quot;synConstant&quot;&gt;state&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 使用方法&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.inactive.finished
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; SELECT &amp;quot;users&amp;quot;.* FROM &amp;quot;users&amp;quot; WHERE &amp;quot;users&amp;quot;.&amp;quot;state&amp;quot; = &#39;inactive&#39; AND &amp;quot;users&amp;quot;.&amp;quot;state&amp;quot; = &#39;finished&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、&lt;code&gt;joins&lt;/code&gt;メソッドと一緒につかう為には、&lt;code&gt;merge&lt;/code&gt;メソッドをつかいます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  has_many &lt;span class=&quot;synConstant&quot;&gt;:posts&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# スコープでjoinsを行い、Postクラスのrecentスコープを利用する方法&lt;/span&gt;
  scope &lt;span class=&quot;synConstant&quot;&gt;:with_posts&lt;/span&gt;, -&amp;gt; { joins(&lt;span class=&quot;synConstant&quot;&gt;:posts&lt;/span&gt;).merge(&lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt;.recent) }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:category&lt;/span&gt;
  scope &lt;span class=&quot;synConstant&quot;&gt;:recent&lt;/span&gt;, -&amp;gt; { where(&lt;span class=&quot;synConstant&quot;&gt;created_at&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Time&lt;/span&gt;.zone.now..&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;.days.ago) }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;synComment&quot;&gt;# 使い方 &lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Category&lt;/span&gt;.with_posts
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; SELECT &amp;quot;categories&amp;quot;.* FROM &amp;quot;categories&amp;quot; INNER JOIN &amp;quot;posts&amp;quot; ON &amp;quot;posts&amp;quot;.&amp;quot;category_id&amp;quot; = &amp;quot;categories&amp;quot;.&amp;quot;id&amp;quot; WHERE (&amp;quot;posts&amp;quot;.&amp;quot;created_at&amp;quot; BETWEEN &#39;2015-04-20 16:55:08.237023&#39; AND &#39;2015-04-17 16:55:08.237228&#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;applying-a-default-scope&quot;&gt;デフォルトスコープの設定&lt;/h3&gt;モデルに対する全ての検索クエリでスコープを使いたい場合は、&lt;code&gt;default_scope&lt;/code&gt;メソッドが使えます。&lt;br /&gt;
この例では、論理削除したデータを意識したくない場合に使っています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/customer.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Customer&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 退会した顧客では、          removed_atカラムは &amp;quot;削除した日付&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 退会していない顧客では、removed_atカラムは &amp;quot;NULL&amp;quot;&lt;/span&gt;
  default_scope { where(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;removed_at IS NULL&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) } 
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 使用方法&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 全てのクエリにデフォルトスコープで指定した条件がつけられる&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Customer&lt;/span&gt;.all
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; SELECT &amp;quot;customers&amp;quot;.* FROM &amp;quot;customers&amp;quot; WHERE (removed_at IS NULL)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
※ &lt;a href=&quot;http://techracho.bpsinc.jp/tsunekawa/2013_10_10/13553&quot;&gt;&amp;#x3088;&amp;#x304F;&amp;#x3042;&amp;#x308B;&amp;#xFF1F;Rails&amp;#x5931;&amp;#x6557;&amp;#x8AC7; default_scope&amp;#x7DE8; | TechRacho&lt;/a&gt; にあるように、安易にdefault_scopeを使うとscopeの削除がしずらいので思わぬエラーになる可能性があるので注意してください。論理削除などのときに限定するなどしたほうが良いと思います。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    &lt;p&gt;やりたいことの実現方法が分からなかった、もっとAPIを探してみたい場合に参照して下さい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/active_record_querying.html#scopes&quot; target=&quot;_blank&quot;&gt;Rails Guides - Active Record Quering # Scopes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/&quot; taret=&quot;_blank&quot;&gt;Rails API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上です。&lt;br /&gt;
よく分からない、間違っていることがありましたら、お気軽に以下のコメント欄に記載ください。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Thu, 14 Aug 2014 14:36:08 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815730167699</guid>
          
            <category>Rails入門</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Railsのモデルのバリデーションエラー errors や full_messages の使い方</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140810/1407623400</link>
          <description>&lt;p&gt;Railsのモデルのバリデーションエラーの扱い方について説明します。&lt;br /&gt;
&lt;code&gt;errors&lt;/code&gt;(エラーメッセージオブジェクト)、独自のエラーメッセージの追加、エラーメッセージの表示、日本語化について説明します。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#erorrs-usage&quot;&gt;モデル(model)のエラーメッセージ errors の使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#add-error&quot;&gt;モデル(model)にエラーメッセージを追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#view-validation&quot;&gt;ビューにモデルのバリデーションエラーを表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#view-validation-japanese&quot;&gt;モデルのバリデーションエラーメッセージを日本語化&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h3 id=&quot;erorrs-usage&quot;&gt;モデル(model)のエラーメッセージ errors の使い方&lt;/h3&gt;Railsのモデル(model)でバリデーションエラーが発生した場合に、model の &lt;code&gt;errors&lt;/code&gt;にエラーメッセージが設定されます。さらに、&lt;code&gt;full_messages&lt;/code&gt;でバリデーションのエラーメッセージの配列を取得できます。&lt;/p&gt;&lt;p&gt;次のProductモデルが設定されている前提で話を進めます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# name属性に値が存在しない場合バリデーションエラーになります&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;コンソールで動きを確認します。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;$ rails console --sandbox

&lt;span class=&quot;synComment&quot;&gt;# バリデーションエラーが発生する場合&lt;/span&gt;
&amp;gt; product = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new
=&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#&amp;lt;Product id: nil, name: nil, price: nil, discontinued: nil, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
&amp;gt; product.valid? &lt;span class=&quot;synComment&quot;&gt;# バリデーションエラーが発生し、errorsにメッセージが登録される&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;
&amp;gt; product.errors.messages
=&amp;gt; {&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;=&amp;gt;[&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;can&#39;t be blank&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]}
&amp;gt; product.errors.full_messages
=&amp;gt; [&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Name can&#39;t be blank&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;]
&amp;gt; product.save
=&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# バリデーションエラーが発生しない場合&lt;/span&gt;
product = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new( &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品名&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; )
=&amp;gt; &lt;span class=&quot;synComment&quot;&gt;#&amp;lt;Product id: nil, name: &amp;quot;商品名&amp;quot;, price: nil, discontinued: nil, created_at: nil, updated_at: nil&amp;gt;&lt;/span&gt;
irb(main):&lt;span class=&quot;synConstant&quot;&gt;017&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&amp;gt; product.valid? &lt;span class=&quot;synComment&quot;&gt;# バリデーションエラーが発生しない。errorsにメッセージが登録されない。&lt;/span&gt;
=&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&amp;gt; product.errors.messages
=&amp;gt; {}
&amp;gt; product.errors.full_messages
=&amp;gt; []
&amp;gt; product.save
=&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;h3 id=&quot;add-error&quot;&gt;モデル(model)にエラーメッセージを追加&lt;/h3&gt;&lt;code&gt;errors.add&lt;/code&gt;と&lt;code&gt;errors[:base]&lt;/code&gt;を使うことでエラーメッセージを自分で追加することができます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  validate &lt;span class=&quot;synConstant&quot;&gt;:add_error_sample&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;add_error_sample&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# nameが空のときにエラーメッセージを追加する&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; name.empty?
      errors.add(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;に関係するエラーを追加&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
      errors[&lt;span class=&quot;synConstant&quot;&gt;:base&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;モデル全体に関係するエラーを追加&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;エラーが発生したときの画面です。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140809/20140809021320.png&quot; alt=&quot;f:id:nipe880324:20140809021320p:plain:w380&quot; title=&quot;f:id:nipe880324:20140809021320p:plain:w380&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:380px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;逆に、エラーメッセージを削除するメソッドもあります。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;product = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new
product.valid? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
product.errors.full_messages &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Name can&#39;t be blank&amp;quot;]&lt;/span&gt;
product.errors.clear  &lt;span class=&quot;synComment&quot;&gt;# エラーメッセージを削除&lt;/span&gt;
product.erros.empty? &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;h3 id=&quot;view-validation&quot;&gt;ビューにモデルのバリデーションエラーを表示&lt;/h3&gt;モデルのバリデーションエラー時に、ビューにバリデーションエラーを表示します。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/nipe880324/20140809/20140809012601.png&quot; alt=&quot;f:id:nipe880324:20140809012601p:plain:w380&quot; title=&quot;f:id:nipe880324:20140809012601p:plain:w380&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:380px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 通常はフォームの表示領域の上部に記載&lt;/span&gt;
&amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.errors.any? %&amp;gt;
  &amp;lt;div id=&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;error_explanation&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;%= &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.errors.count %&amp;gt;件のエラーがあります。&amp;lt;/h2&amp;gt;
 
    &amp;lt;ul&amp;gt;
    &amp;lt;% &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.errors.full_messages.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;msg&lt;/span&gt;| %&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;%= msg %&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt; %&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt; %&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;&lt;h3 id=&quot;view-validation-japanese&quot;&gt;モデルのバリデーションエラーメッセージを日本語化&lt;/h3&gt;&lt;/h3&gt;
    &lt;p&gt;日本語にする場合は次を実施して下さい。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ja.yml&quot;&gt;ja.yml&lt;/a&gt;を&lt;code&gt;config/locales/&lt;/code&gt;に追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config/application.rb&lt;/code&gt;に&lt;code&gt;config.i18n.default_locale = :ja&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;サーバーを再起動&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;さらにモデルの属性名(nameなど)を日本語化する場合は、&lt;code&gt;ja.yml&lt;/code&gt;に次のように記載して下さい。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# config/locales/ja.yml&lt;/span&gt;
ja:
  attributes:
    &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;:   名前
...
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/active_record_validations.html&quot; target=&quot;_blank&quot;&gt;RailsGuide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上です。&lt;br /&gt;
分からない箇所や間違いがある場合は、コメントを頂けると嬉しいです。&lt;/p&gt;

&lt;/div&gt;</description>
          <pubDate>Sun, 10 Aug 2014 07:30:00 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815729883102</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
      
      
        <item>
          <title>Rails 4でモデルのバリデーションまとめ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140724/1406145303</link>
          <description>&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;では&lt;b&gt;バリデーション(Validation)&lt;/b&gt;という仕組みがあります。&lt;br /&gt;
フォームなどでユーザーからの入力値をDBに保存する前にその値が正しいものかモデル層で（システムとして許可している値か）を検証する仕組みです。&lt;/p&gt;&lt;p&gt;バリデーションの基本的な流れ、バリデーションの定義とバリデーションのテスト方法、バリデーションのスキップなどのバリデーションの基本についてまとめました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt; 4.1&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt; 4.1&lt;/li&gt;
&lt;li&gt;shoulda-matchers 2.6.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#model-validation-overview&quot;&gt;1. Railsでのバリデーションの流れ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-validation-definettions&quot;&gt;2. バリデーションを定義する&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#model-validation-definettions-presence&quot;&gt;2.1. 存在チェック(presence)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-validation-definettions-uniqueness&quot;&gt;2.2. 一意性（ユニーク制約）のチェック(uniqueness)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-validation-definettions-length&quot;&gt;2.3. 長さのチェック(length)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-validation-definettions-format&quot;&gt;2.4. フォーマットのチェック(format)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-validation-definettions-numericality&quot;&gt;2.5. 数値の値チェック(numericality)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-validation-definettions-inclusion&quot;&gt;2.6. コレクションに含まれていることを検証(inclusion)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-validation-definettions-exclusion&quot;&gt;2.7. コレクションに含まれていないことを検証(exclusion)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-validation-skip&quot;&gt;3. バリデーションをスキップする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-validation-with-condition&quot;&gt;4. 条件付きバリデーションを定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-validation-valid-and-invalid&quot;&gt;5. バリデーションがvalidかinvalidか確認する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#model-validation-by-myself&quot;&gt;6. 独自のカスタムバリデーションを定義する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-validation-overview&quot;&gt;1. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でのバリデーションの流れ&lt;/h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でのバリデーションの流れをステップバイステップで説明します。&lt;/p&gt;&lt;p&gt;&lt;b&gt;1. &lt;code&gt;validates&lt;/code&gt;を使い、モデルクラスに検証する条件を定義する。&lt;/b&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 商品名は必須&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# 値段は数値で0以上&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:price&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;numericality&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;only_integer&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;greater_than_or_equal_to&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;b&gt;2. コントローラーなどでモデルを保存/更新する。&lt;/b&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/controllers/products_controlle.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ProductsController&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# product_paramsにユーザーの入力値がハッシュ形式で入っている&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.new(product_params)

    &lt;span class=&quot;synComment&quot;&gt;# 商品クラスのバリデーション定義に照らし合わせ、&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# - バリデーションエラーが発生しなかった場合、DBにレコードが保存され、show画面に遷移する&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;# - バリデーションエラーが発生した場合、DBにレコードは保存されず、new画面を再び表示する&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;.save
      redirect_to &lt;span class=&quot;synIdentifier&quot;&gt;@product&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;notice&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;商品を作成しました&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt;
      render &lt;span class=&quot;synConstant&quot;&gt;:new&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;b&gt;3. バリデーションエラー時には、&lt;code&gt;errors&lt;/code&gt;にエラーメッセージが設定されるので、それを表示する&lt;/b&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;# app/views/products/_form.html.erb
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; form_for(@product)&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; do |f| %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- バリデーションエラー時のみ、@product.errors に値があるので、エラーメッセージを表示する --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% if @product.errors.any? %&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;error_explanation&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; @product.errors.count&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&lt;/span&gt;件のエラーが発生しました。&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% @product.errors.full_messages.each do |message| %&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; message&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;

  ...
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;% end %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-validation-definettions&quot;&gt;2. バリデーションを定義する&lt;/h3&gt;バリデーションの定義方法を説明します。&lt;br /&gt;
また、&lt;code&gt;RSpec&lt;/code&gt;と&lt;cod&gt;shoulda-matchers&lt;/cod&gt;を使ったテスト方法も一緒に記載しています。&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;model-validation-definettions-presence&quot;&gt;2.1. 存在チェック(presence)&lt;/h4&gt;&lt;code&gt;presence&lt;/code&gt;オプションにより、&lt;b&gt;指定した属性が空でないこと&lt;/b&gt;を検証する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 値が存在すれば検証成功&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# テスト&lt;/span&gt;
it { is_expected.to validate_presence_of(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;) }
&lt;/pre&gt;&lt;p&gt;boolean型のカラムの場合は、次のように&lt;code&gt;inclusion&lt;/code&gt;を使います。（テストはinclusionの項目を参照）&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# boolean型のカラムの場合の存在チェック&lt;/span&gt;
validates &lt;span class=&quot;synConstant&quot;&gt;:completed&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;inclusion&lt;/span&gt;: { &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;] }
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h4 id=&quot;model-validation-definettions-uniqueness&quot;&gt;2.2. 一意性（ユニーク制約）のチェック(uniqueness)&lt;/h4&gt;&lt;code&gt;uniqueness&lt;/code&gt;オプションにより、&lt;b&gt;指定した属性がユニークであること&lt;/b&gt;を検証する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
validates email, &lt;span class=&quot;synConstant&quot;&gt;uniqueness&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 値がユニークであれば検証成功&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# テスト&lt;/span&gt;
it { is_expected.to validate_uniqueness_of(&lt;span class=&quot;synConstant&quot;&gt;:email&lt;/span&gt;) }
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
注意点として、サーバー高負荷時などにユーザが２度登録ボタンを押してしまい、モデルでユニーク制約を記載していたのに同じ値がDBに登録されてしまうという問題が発生してしまいます。&lt;br /&gt;
そのため、モデルのバリデーションだけではなく、DBでもユニーク制約をつけておくべきです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# マイグレーションファイルの作成&lt;/span&gt;
rails g migration add_index_to_users_email

&lt;span class=&quot;synComment&quot;&gt;# マイグレーションファイル&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# db/migrate/YYYYMNDDHHMMSS_add_index_to_users_email.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AddIndexToUsersEmail&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;change&lt;/span&gt;
    add_index &lt;span class=&quot;synConstant&quot;&gt;:users&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:email&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;unique&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# マイグレート&lt;/span&gt;
rake db&lt;span class=&quot;synConstant&quot;&gt;:migarte&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;カラムでの一意性を検証したい場合には、&lt;code&gt;scope&lt;/code&gt;パラメータを指定します。&lt;br /&gt;
もちろん、DBとしても&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;カラムで一意性制約を追加してください。&lt;br /&gt;
以下の例では、ユーザー単位に投稿(Article)のタイトルを一意にする検証を追加しています。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  belongs_to &lt;span class=&quot;synConstant&quot;&gt;:user&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;uniqueness&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;scope&lt;/span&gt;: [&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;] }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# テスト&lt;/span&gt;
it { is_expected.to validate_uniqueness_of(&lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;).scoped_to(&lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;) }

&lt;span class=&quot;synComment&quot;&gt;# マイグレーション&lt;/span&gt;
add_index &lt;span class=&quot;synConstant&quot;&gt;:articles&lt;/span&gt;, [&lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:user_id&lt;/span&gt;], &lt;span class=&quot;synConstant&quot;&gt;unique&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
メールアドレスの場合は、小文字に変換して一意性を保証すべきです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  before_save { &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.email = email.downcase }
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;model-validation-definettions-length&quot;&gt;2.3. 長さのチェック(length)&lt;/h4&gt;&lt;code&gt;length&lt;/code&gt;オプションにより、&lt;b&gt;指定した値の長さ&lt;/b&gt;を検証する。&lt;br /&gt;
マルチバイト文字であっても1文字としてカウントします。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Person&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;,     &lt;span class=&quot;synConstant&quot;&gt;length&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;minimum&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; }        &lt;span class=&quot;synComment&quot;&gt;# 値が「2文字以上」であれば有効&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:bio&lt;/span&gt;,      &lt;span class=&quot;synConstant&quot;&gt;length&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;maximum&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;500&lt;/span&gt; }      &lt;span class=&quot;synComment&quot;&gt;# 値が「500文字以下」であらば有効&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:password&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;length&lt;/span&gt;: { &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;..&lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt; }         &lt;span class=&quot;synComment&quot;&gt;# 値が「6文字以上20文字以下」であれば有効&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:registration_number&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;length&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;is&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt; }  &lt;span class=&quot;synComment&quot;&gt;# 値が「6文字のみ」有効&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# テスト&lt;/span&gt;
it { is_expected.to ensure_length_of(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;).is_at_least(&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;) }
it { is_expected.to ensure_length_of(&lt;span class=&quot;synConstant&quot;&gt;:bio&lt;/span&gt;).is_at_most(&lt;span class=&quot;synConstant&quot;&gt;500&lt;/span&gt;) }
it { is_expected.to ensure_length_of(&lt;span class=&quot;synConstant&quot;&gt;:password&lt;/span&gt;).is_at_least(&lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;).is_at_most(&lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt;) }
it { is_expected.to ensure_length_of(&lt;span class=&quot;synConstant&quot;&gt;:registration_number&lt;/span&gt;).is_equal_to(&lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;) }
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;model-validation-definettions-format&quot;&gt;2.4. フォーマットのチェック(format)&lt;/h4&gt;&lt;code&gt;format&lt;/code&gt;オプションにより、&lt;b&gt;指定した値のフォーマット&lt;/b&gt;を検証する。&lt;br /&gt;
&lt;i&gt;※&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;を検証するために&lt;a href=&quot;http://rubular.com/&quot; target=&quot;_blank&quot;&gt;Rubular&lt;/a&gt;で、テストしたい&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;とサンプル文字列を入力することで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;にマッチするか調べられます。&lt;/i&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;VALID_EMAIL_REGEX&lt;/span&gt; =  &lt;span class=&quot;synSpecial&quot;&gt;/\A[\w&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;+\-.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;]+&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;a-z&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;\-.&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;]+\.[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;a-z&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;]+\z/i&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;#メールアドレスフォーマットの検証（完璧な正規表現ではない）&lt;/span&gt;
validates &lt;span class=&quot;synConstant&quot;&gt;:email&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;format&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;VALID_EMAIL_REGEX&lt;/span&gt; }
&lt;span class=&quot;synComment&quot;&gt;# 特定の値が入ってほしくない場合は without オプションを利用&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# validates :email, format: { without: &amp;lt;入ってほしくない値の正規表現&amp;gt; }&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# テスト&lt;/span&gt;
it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;valid emails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  valid_emails = &lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;      user@foo.COM&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;      A_US-ER@f.b.org&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;      frst.lst@foo.jp&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;      a+b@baz.cn&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;
  is_expected.to allow_value(*valid_emails).for(&lt;span class=&quot;synConstant&quot;&gt;:email&lt;/span&gt;)
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
it &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;invalid emails&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  invalid_emails = &lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;      user@foo,com&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;      user_at_foo.org&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;      example.user@foo.&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;      foo@bar_baz.com&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;      foo@bar+baz.com&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;      foo@bar..com&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;
  is_expected.not_to allow_value(*invalid_emails).for(&lt;span class=&quot;synConstant&quot;&gt;:email&lt;/span&gt;)
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;model-validation-definettions-numericality&quot;&gt;2.5. 数値の値チェック(numericality)&lt;/h4&gt;&lt;code&gt;numericality&lt;/code&gt;オプションにより、&lt;b&gt;指定した値（数値）&lt;/b&gt;を検証する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Player&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:points&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;numericality&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# 数値か小数点のみ有効&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:games_played&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;numericality&lt;/span&gt;: { &lt;span class=&quot;synConstant&quot;&gt;only_integer&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt; } &lt;span class=&quot;synComment&quot;&gt;# 数値のみ有効&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# テスト&lt;/span&gt;
  it { is_expected.to validate_numericality_of(&lt;span class=&quot;synConstant&quot;&gt;:points&lt;/span&gt;) }
  it { is_expected.to validate_numericality_of(&lt;span class=&quot;synConstant&quot;&gt;:games_played&lt;/span&gt;).only_integer }
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;only_integer: true&lt;/code&gt;をしたいした場合、数値の値自体の検証をすることができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;greater_than&lt;/li&gt;
&lt;li&gt;greater_than_or_equal_to&lt;/li&gt;
&lt;li&gt;equal_to&lt;/li&gt;
&lt;li&gt;less_than&lt;/li&gt;
&lt;li&gt;less_than_or_equal_to&lt;/li&gt;
&lt;li&gt;odd (奇数)&lt;/li&gt;
&lt;li&gt;even (偶数)&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# 数値であり、0以上の場合有効&lt;/span&gt;
validates &lt;span class=&quot;synConstant&quot;&gt;:games_played&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;numericality&lt;/span&gt;: {
            &lt;span class=&quot;synConstant&quot;&gt;only_integer&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;greater_than_or_equal_to&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;
          }

&lt;span class=&quot;synComment&quot;&gt;# テスト&lt;/span&gt;
it { is_expected.to validate_numericality_of(&lt;span class=&quot;synConstant&quot;&gt;:games_played&lt;/span&gt;)
                      .only_integer.is_greater_than_or_equal_to(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;) }
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;model-validation-definettions-inclusion&quot;&gt;2.6. コレクションに含まれていることを検証(inclusion)&lt;/h4&gt;&lt;code&gt;inclusion&lt;/code&gt;オプションにより、&lt;b&gt;inで指定したコレクションに含まれていること&lt;/b&gt;を検証する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
validates &lt;span class=&quot;synConstant&quot;&gt;:size&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;inclusion&lt;/span&gt;: { &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;small medium large&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt; }

&lt;span class=&quot;synComment&quot;&gt;# テスト&lt;/span&gt;
it { is_expected.to ensure_inclusion_of(&lt;span class=&quot;synConstant&quot;&gt;:size&lt;/span&gt;).in_array(&lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;small medium large&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;) }
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;h4 id=&quot;model-validation-definettions-exclusion&quot;&gt;2.7. コレクションに含まれていないことを検証(exclusion)&lt;/h4&gt;&lt;code&gt;exclusion&lt;/code&gt;オプションにより、&lt;b&gt;inで指定したコレクションに含まれていないこと&lt;/b&gt;を検証する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 定義&lt;/span&gt;
validates &lt;span class=&quot;synConstant&quot;&gt;:subdomain&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;exclusion&lt;/span&gt;: { &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;www us ca jp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt; }

&lt;span class=&quot;synComment&quot;&gt;# テスト&lt;/span&gt;
it { is_expected.to ensure_exclusion_of(&lt;span class=&quot;synConstant&quot;&gt;:subdomain&lt;/span&gt;).in_array(&lt;span class=&quot;synSpecial&quot;&gt;%w(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;www us ca jp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;) }
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-validation-skip&quot;&gt;3. バリデーションをスキップする&lt;/h3&gt;次の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;はバリデーションを実行し、成功した場合のみ、DBに保存/更新します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create&lt;/li&gt;
&lt;li&gt;create!&lt;/li&gt;
&lt;li&gt;save&lt;/li&gt;
&lt;li&gt;save!&lt;/li&gt;
&lt;li&gt;update&lt;/li&gt;
&lt;li&gt;update!&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;
下記の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;群、もしくは、上記の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に&lt;code&gt;validate: false&lt;/code&gt;を引数に追加することでバリデーションをスキップできます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;decrement!&lt;/li&gt;
&lt;li&gt;decrement_counter&lt;/li&gt;
&lt;li&gt;increment!&lt;/li&gt;
&lt;li&gt;increment_counter&lt;/li&gt;
&lt;li&gt;toggle!&lt;/li&gt;
&lt;li&gt;touch&lt;/li&gt;
&lt;li&gt;update_all&lt;/li&gt;
&lt;li&gt;update_attribute&lt;/li&gt;
&lt;li&gt;update_column&lt;/li&gt;
&lt;li&gt;update_columns&lt;/li&gt;
&lt;li&gt;update_counters&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# バリデーションがスキップされる&lt;/span&gt;
save(&lt;span class=&quot;synConstant&quot;&gt;validate&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-validation-with-condition&quot;&gt;4. 条件付きバリデーションを定義する&lt;/h3&gt;ある条件のときにだけバリデーションを実施したい場合に、条件付きバリデーションが使えます。&lt;br /&gt;
条件付きバリデーションを使うためには、validates&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;に&lt;code&gt;if&lt;/code&gt;か&lt;code&gt;unless&lt;/code&gt;オプションを指定して下さい。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:card_number&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;:paid_with_card?&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;paid_with_card?&lt;/span&gt;
    payment_type == &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;card&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-validation-valid-and-invalid&quot;&gt;5. バリデーションがvalidかinvalidか確認する&lt;/h3&gt;&lt;code&gt;valid?&lt;/code&gt;と&lt;code&gt;invalid?&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使うことでバリデーションが「有効」か「無効」かをboolean型で取得することができます。&lt;br /&gt;
この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;をコールした後に、バリデーションが失敗した場合、&lt;code&gt;errors&lt;/code&gt;内にエラーメッセージが設定されます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# バリデーション定義&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# app/models/article.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  validates &lt;span class=&quot;synConstant&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;presence&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 利用&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;## valid? メソッド（true)&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;タイトル&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).valid?
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;## valid? メソッド（false)&lt;/span&gt;
article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;)
article.valid?
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false (errorsに値がエラーメッセージが設定される)&lt;/span&gt;
article.errors.full_messages
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Title can&#39;t be blank&amp;quot;]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;## invalid? メソッド(false)&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;タイトル&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).invalid?
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;## invalid? メソッド(true)&lt;/span&gt;
article = &lt;span class=&quot;synType&quot;&gt;Article&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;)
article.invalid?
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true (errorsに値がエラーメッセージが設定される)&lt;/span&gt;
article.errors.full_messages
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Title can&#39;t be blank&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;model-validation-by-myself&quot;&gt;6. 独自のカスタムバリデーションを定義する&lt;/h3&gt;標準のバリデーションでは足りない場合に、独自のカスタムバリデーションを作成することができます。&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;カスタムValidate&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;validate&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を使うことで「独自のカスタムバリデーション」を作成できます。&lt;br /&gt;
&lt;code&gt;validate&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;には「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;名のシンボル」を渡し、その&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;内でバリデーションを実装します。&lt;br /&gt;
バリデーションを実施する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;内では、&lt;code&gt;errors&lt;/code&gt;に値を設定することにより、バリデーションエラーになったということを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ActiveRecord&quot;&gt;ActiveRecord&lt;/a&gt;に知らせます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# app/models/invoice.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Invoice&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  validate &lt;span class=&quot;synConstant&quot;&gt;:expiration_date_cannot_be_in_the_past&lt;/span&gt;,
    &lt;span class=&quot;synConstant&quot;&gt;:discount_cannot_be_greater_than_total_value&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;expiration_date_cannot_be_in_the_past&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; expiration_date.present? &amp;amp;&amp;amp; expiration_date &amp;lt; &lt;span class=&quot;synType&quot;&gt;Date&lt;/span&gt;.today
      errors.add(&lt;span class=&quot;synConstant&quot;&gt;:expiration_date&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;can&#39;t be in the past&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;discount_cannot_be_greater_than_total_value&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; discount &amp;gt; total_value
      errors.add(&lt;span class=&quot;synConstant&quot;&gt;:discount&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;can&#39;t be greater than total value&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;カスタムValidator&lt;/h4&gt;
    &lt;p&gt;&lt;code&gt;ActiveModel::Validator&lt;/code&gt;を拡張することにより「カスタムValidator」を作成できます。&lt;br /&gt;
この継承したクラスは、&lt;code&gt;validate&lt;/code&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9&quot;&gt;メソッド&lt;/a&gt;を実装しなければいけません。&lt;br /&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4&quot;&gt;複数&lt;/a&gt;のモデルで同じカスタムバリデーションを使いたいときに使うのが良いです。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# カスタムValidatorを作成&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;MyValidator&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;ActiveModel&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Validator&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;validate&lt;/span&gt;(record)
    &lt;span class=&quot;synStatement&quot;&gt;unless&lt;/span&gt; record.name.starts_with? &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
      record.errors[&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Need a name starting with X please!&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# app/models/person.rb&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# カスタムValidatorを追加&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;ActiveModel&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Validations&lt;/span&gt;
  validates_with &lt;span class=&quot;synType&quot;&gt;MyValidator&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;以上です。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/active_record_validations.html&quot;&gt;Active Record Validations &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 24 Jul 2014 04:55:03 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815728751572</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Model</category>
          
        </item>
      
        <item>
          <title>Railsのモデルの作成、検索、更新、削除のよく使うメソッドのまとめ</title>
          <link>http://ruby-rails.hatenadiary.com/entry/20140724/1406142120</link>
          <description>&lt;p&gt;Rails（Active Record）でのモデルの作成、検索、更新、削除でよく使うメソッドをまとめました。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;動作確認&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;Rails 4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;目次&lt;/h3&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#ar-create&quot;&gt;モデルの生成と保存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ar-search&quot;&gt;モデルの検索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ar-update&quot;&gt;モデルの更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ar-destroy&quot;&gt;モデルの削除&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;i&gt;※モデルの検証や関連については、&lt;a href=&quot;/entry/20140724/1406145303&quot;&gt;こちら&lt;/a&gt;へ&lt;/i&gt;&lt;br /&gt;
&lt;i&gt;※モデルの挙動がわかりづらい場合は、&lt;code&gt;rails c -s&lt;/code&gt;で、サンドボックスモードで下記のコマンドを実行してみてください。&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ar-create&quot;&gt;1. モデルの生成と保存&lt;/h3&gt;&lt;/p&gt;

&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;属性を設定してモデルオブジェクトを生成する（newメソッド）&lt;/h5&gt;
    &lt;p&gt;&lt;code&gt;new&lt;/code&gt;メソッドにカラム名と値ををハッシュで渡すことで値を設定してモデルオブジェクトを生成することができる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.new(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;田中&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tanaka@test.co.jp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) 
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;ハッシュで値を設定する&lt;/h5&gt;
    &lt;p&gt;モデルオブジェクトの&lt;code&gt;attributes&lt;/code&gt;属性にカラム名と値をハッシュで渡すことで、モデルオブジェクトに一気に値を設定することができる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.new
user.attributes = {&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;田中&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tanaka@test.co.jp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;モデルを保存する&lt;/h5&gt;
    &lt;p&gt;&lt;code&gt;save&lt;/code&gt;メソッドで保存する。&lt;br /&gt;
バリデーションエラーが発生した場合は falseが返る。さらに、&lt;code&gt;errors.full_messages&lt;/code&gt;にエラーメッセージが設定される&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;user.save
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; true (ユーザーがDBに保存された）&lt;/span&gt;

user.save
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false （バリデーションエラーが発生したため、DBに保存されなかった）&lt;/span&gt;
user.errors.full_messages
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [&amp;quot;Name can&#39;t be blank&amp;quot;, &amp;quot;Name is too short (minimum is 5 characters)&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
&lt;code&gt;save!&lt;/code&gt;メソッドで保存すると、バリデーションエラーが発生した場合に&lt;b&gt;ActiveRecord::RecordInvalid&lt;/b&gt;が発生する。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# バリエーションエラーの場合&lt;/span&gt;
user.save!
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; ActiveRecord::RecordInvalid: Validation failed: Name can&#39;t be blank, Name is too short (minimum is 5 characters)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
また、&lt;code&gt;validate: false&lt;/code&gt;を引数で渡すことで、バリデーションの確認をスキップし、DBにレコードを保存することができる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Validateが行われない&lt;/span&gt;
user.save(&lt;span class=&quot;synConstant&quot;&gt;validate&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
user.save!(&lt;span class=&quot;synConstant&quot;&gt;validate&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;false&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;モデルを生成し、保存する（createメソッド）&lt;/h5&gt;
    &lt;p&gt;&lt;code&gt;create&lt;/code&gt;メソッドを使えば、&lt;code&gt;new&lt;/code&gt;と&lt;code&gt;save&lt;/code&gt;メソッドを一度に実行できます。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# モデルの生成と保存&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.create(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;田中&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;tanaka@test.co.jp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) 
&lt;span class=&quot;synComment&quot;&gt;# バリデーションエラーの発生有無にかかわらず、生成したモデルが返される&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# バリデーションエラーが発生しなかった時&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;User id: 3, name: &amp;quot;aiueoss&amp;quot;, password: nil, confirm_password: nil, created_at: &amp;quot;2014-11-23 11:29:47&amp;quot;, updated_at: &amp;quot;2014-11-23 11:29:47&amp;quot;, active: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# バリデーションエラー発生時&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; #&amp;lt;User id: nil, name: nil, password: nil, confirm_password: nil, created_at: nil, updated_at: nil, active: nil&amp;gt;&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;## create!メソッドを使うと、validationエラー時に例外ActiveRecord::RecordInvalidが発生する&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ar-search&quot;&gt;2. モデルの検索&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;全てのレコードを取得する（allメソッド）&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;users = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.all &lt;span class=&quot;synComment&quot;&gt;# Userテーブルの全てのレコードを取得&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;最初のレコードと最後のレコードを取得する（first / lastメソッド）&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;first_user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.first &lt;span class=&quot;synComment&quot;&gt;# 最初のレコードを返す&lt;/span&gt;
last_user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.last &lt;span class=&quot;synComment&quot;&gt;# 最後のレコードを返す&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;IDで検索する（findメソッド）&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;synComment&quot;&gt;# &amp;quot;1&amp;quot;はidのことで、idで検索する&lt;/span&gt;
users = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]) &lt;span class=&quot;synComment&quot;&gt;# 配列を引数で渡すことも可能&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;## レコードが存在しない場合は以下のActiveRecord::RecordNotFoundが発生する&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;## ActiveRecord::RecordNotFound: Couldn&#39;t find User with &#39;id&#39;=3&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;ID以外のカラムで検索する（find_byメソッド）&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# emailで検索する&lt;/span&gt;
user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.find_by(&lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;text@example.com&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;## レコードが存在しない場合は、nilを返す&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;検索条件を指定して検索する（whereメソッド）&lt;/h5&gt;
    &lt;p&gt;SQLのwhereのように検索できる。&lt;span style=&quot;color: #ff2600&quot;&gt;SQLインジェクションに注意&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.where(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name = ?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;## 疑問符 ? があることで、適切にエスケープされることを保証してくれるためSQLインジェクションの防止に繋がる&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 可読性を上げるために、次のようにも記載できる&lt;/span&gt;
user = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.where(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;name = :name&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
whereメソッドをチェインすることも可能&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;user = User.where(&amp;#34;name = :name&amp;#34;, name: &amp;#34;test&amp;#34;).where(active: true)

# もちろん、メソッドチェインしなくても記載可能
user = User.where(&amp;#34;name = :name and active = :active&amp;#34;, name: &amp;#34;test&amp;#34;, active: true)&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;部分一致検索（LIKE句の使用）&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;users = &lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.where(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;email like ?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;,  &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; + &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;gmail.com&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;検索順序を指定（orderメソッド）&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# pay_typeの昇順(デフォルト)、shipped_atの降順(DESC)で取得する&lt;/span&gt;
orders = &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.where(&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Ruby on Rails Web book&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;).order(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;pay_type, shipped_at DESC&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;取得件数を指定（limitメソッド）&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 最新の5件の注文を取得する&lt;/span&gt;
orders = &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.order(&lt;span class=&quot;synConstant&quot;&gt;:created_at&lt;/span&gt;).limit(&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;GROUP BY句の使用&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;summary = &lt;span class=&quot;synType&quot;&gt;LineItem&lt;/span&gt;.select(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sku, sum(amount as amount&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;).group(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sku&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;取得する値を指定する（selectメソッド）&lt;/h5&gt;
    &lt;p&gt;Railsはデフォルトでは&quot;select * from ...&quot;で検索をする。しかし、カラムに画像などの大容量のrawデータを含んでいるときなどに、全てのカラムを取得したくないときなどに利用できる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;videos = &lt;span class=&quot;synType&quot;&gt;Video&lt;/span&gt;.select(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;title, speaker, created_at&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;関連テーブルの結合（joinsメソッド）&lt;/h5&gt;
    &lt;p&gt;&lt;code&gt;joins&lt;/code&gt;メソッドを使うことで、INNTER JOINが行われる。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Blog&lt;/span&gt;.joins(&lt;span class=&quot;synConstant&quot;&gt;:entries&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; SELECT blogs.* FROM blogs INNER JOIN entries ON entries.blog_id = blogs.id&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;また、関連テーブルの検索条件を追加することも可能。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;entries = &lt;span class=&quot;synType&quot;&gt;Entry&lt;/span&gt;.joins(&lt;span class=&quot;synConstant&quot;&gt;:blog&lt;/span&gt;).where(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;blogs.name LIKE ?&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;%me%&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
さらに文字列で結合条件を自由に記述することも可能。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.joins(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;LEFT JOIN bookmarks ON bookmarks.bookmarkable_type = &#39;Post&#39; AND bookmarks.user_id = users.id&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
=&amp;gt; &lt;span class=&quot;synType&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;.* &lt;span class=&quot;synType&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;JOIN&lt;/span&gt; bookmarks &lt;span class=&quot;synType&quot;&gt;ON&lt;/span&gt; bookmarks.bookmarkable_type = &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;AND&lt;/span&gt; bookmarks.user_id = users.id
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;列の集計メソッド&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;average = &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.average(&lt;span class=&quot;synConstant&quot;&gt;:amount&lt;/span&gt;)
max      = &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.maximum(&lt;span class=&quot;synConstant&quot;&gt;:amount&lt;/span&gt;)
min       = &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.minimum(&lt;span class=&quot;synConstant&quot;&gt;:amount&lt;/span&gt;)
total      = &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.sum(&lt;span class=&quot;synConstant&quot;&gt;:amount&lt;/span&gt;)
number = &lt;span class=&quot;synType&quot;&gt;Order&lt;/span&gt;.count
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ar-update&quot;&gt;3. モデルの更新&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;インスタンスメソッド&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;カラムに直接代入して更新する&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;user.name = &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;やっぱり鈴木&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;
user.save
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;複数のカラムを更新する（updateメソッド）&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;user.update( &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;やっぱり鈴木&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;suzuki@test.co.jp&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; )
&lt;span class=&quot;synComment&quot;&gt;# 更新成功時 =&amp;gt; true、更新失敗時 =&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;１つのカラムを更新する（update_attributeメソッド）&lt;/h5&gt;
    &lt;p&gt;&lt;code&gt;update_attribute&lt;/code&gt;メソッドは、バリデーションは行われないので注意してください。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;user.update_attribute(&lt;span class=&quot;synConstant&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;やっぱり鈴木&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;reloadメソッド&lt;/h5&gt;
    &lt;p&gt;更新したカラムをDBと同じにする。&lt;br /&gt;
使用する箇所としては、ユニットテストぐらいしかほぼない。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;user.email &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; tanaka@test.co.jp&lt;/span&gt;
user.update_attribute( {&lt;span class=&quot;synConstant&quot;&gt;email&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Validatioエラーするemail&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;} ) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; false&lt;/span&gt;
user.email &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt;  DBは更新されていないが、値は &amp;quot;Validatioエラーするemail&amp;quot;になってる&lt;/span&gt;
user.reload.email
user.email &lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; tanaka@test.co.jp&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;クラスメソッド&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;複数のレコードを更新する - update(id, attributes)メソッド&lt;/h5&gt;
    &lt;p&gt;指定したidかその配列に該当するレコードを、指定した属性のセット(ハッシュ)で更新する。&lt;br /&gt;
バリデーションは行われないので注意してください。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# idが1のレコードのsaleをtrueにdiscount_rateを0.2に更新する&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# idが2のレコードのnameをproduct2に更新する&lt;/span&gt;
product = { &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synConstant&quot;&gt;sale&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;discount_rate&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;0.2&lt;/span&gt; }, &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;product2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; } }
&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.update(product.keys, product.values)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;update_all(updates)メソッド&lt;/h5&gt;
    &lt;p&gt;SQLのupdate文のset句とwhere句を指定して、更新する。&lt;br /&gt;
バリデーションは行われないので注意してください。&lt;/p&gt;
&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;Product&lt;/span&gt;.update_all(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;price = 1.1*price&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;title like &#39;%水着&#39;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;h3 id=&quot;ar-destroy&quot;&gt;4. モデルの削除&lt;/h3&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;インスタンスメソッド&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;レコードを削除する（destroyメソッド）&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# ユーザーレコードをDBから削除する&lt;/span&gt;
user.destroy
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h4&gt;クラスメソッド&lt;/h4&gt;
    
&lt;div class=&quot;section&quot;&gt;
    &lt;h5&gt;すべてのレコードを削除する（delete_allメソッド）&lt;/h5&gt;
    &lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;User&lt;/span&gt;.delete_all
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; 10 （削除した件数を返す）&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;
以上です。&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
    &lt;h3&gt;参考文献&lt;/h3&gt;
    
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/active_record_basics.html&quot;&gt;Active Record Basics &amp;mdash; Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rails3 レシピブック 190の技&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
          <pubDate>Thu, 24 Jul 2014 04:02:00 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/12921228815728750824</guid>
          
            <category>Rails初級</category>
          
            <category>Rails Model</category>
          
        </item>
      
    
  </channel>
</rss>
